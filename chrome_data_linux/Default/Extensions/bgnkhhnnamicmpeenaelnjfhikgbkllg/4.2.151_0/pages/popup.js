(self["webpackChunkbrowser_extension"] = self["webpackChunkbrowser_extension"] || []).push([[787],{

/***/ 59355:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(70846);
// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(76644);
// EXTERNAL MODULE: ./Extension/src/common/translators/i18n.ts
var i18n = __webpack_require__(98133);
// EXTERNAL MODULE: ./node_modules/mobx-react/dist/mobxreact.esm.js + 14 modules
var mobxreact_esm = __webpack_require__(46047);
// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(8356);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);
// EXTERNAL MODULE: ./Extension/src/pages/services/messenger.js
var messenger = __webpack_require__(37916);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js
var initializerDefineProperty = __webpack_require__(5497);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js
var applyDecoratedDescriptor = __webpack_require__(26813);
// EXTERNAL MODULE: ./node_modules/webextension-polyfill/dist/browser-polyfill.js
var browser_polyfill = __webpack_require__(53679);
var browser_polyfill_default = /*#__PURE__*/__webpack_require__.n(browser_polyfill);
// EXTERNAL MODULE: ./node_modules/mobx/dist/mobx.esm.js
var mobx_esm = __webpack_require__(31056);
// EXTERNAL MODULE: ./node_modules/punycode/punycode.es6.js
var punycode_es6 = __webpack_require__(2860);
// EXTERNAL MODULE: ./Extension/src/common/forward.ts
var forward = __webpack_require__(82637);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/constants.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


const IOS_URL = forward/* Forward.get */.OU.get({
  action: forward/* ForwardAction.IOS */.xD.IOS,
  from: forward/* ForwardFrom.Popup */.UU.Popup
});
const ANDROID_URL = forward/* Forward.get */.OU.get({
  action: forward/* ForwardAction.Android */.xD.Android,
  from: forward/* ForwardFrom.Popup */.UU.Popup
});
const COMPARE_URL = forward/* Forward.get */.OU.get({
  action: forward/* ForwardAction.Compare */.xD.Compare,
  from: forward/* ForwardFrom.Popup */.UU.Popup
});
const VIEW_STATES = {
  ACTIONS: 'actions',
  STATS: 'stats'
};
const POPUP_STATES = {
  APPLICATION_ENABLED: 'application.enabled',
  APPLICATION_FILTERING_DISABLED: 'application.filtering.disabled',
  APPLICATION_UNAVAILABLE: 'application.unavailable',
  SITE_IN_EXCEPTION: 'site.in.exception',
  SITE_ALLOWLISTED: 'site.allowlisted'
};
const TIME_RANGES = {
  DAY: 'day',
  WEEK: 'week',
  MONTH: 'month',
  YEAR: 'year'
};
// EXTERNAL MODULE: ./Extension/src/common/translators/reactTranslator.js
var reactTranslator = __webpack_require__(38647);
// EXTERNAL MODULE: ./Extension/src/common/messages/index.ts
var messages = __webpack_require__(23104);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/stores/PopupStore.js



var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29;
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */










// Do not allow property change outside of store actions
(0,mobx_esm/* configure */.jQ)({
  enforceActions: 'observed'
});
let PopupStore = (_class = class PopupStore {
  constructor() {
    this.TOTAL_BLOCKED_GROUP_ID = 'total';
    // need for render blocking before first data retrieving
    (0,initializerDefineProperty/* default */.Z)(this, "isInitialDataReceived", _descriptor, this);
    (0,initializerDefineProperty/* default */.Z)(this, "applicationFilteringDisabled", _descriptor2, this);
    (0,initializerDefineProperty/* default */.Z)(this, "applicationAvailable", _descriptor3, this);
    (0,initializerDefineProperty/* default */.Z)(this, "canAddRemoveRule", _descriptor4, this);
    (0,initializerDefineProperty/* default */.Z)(this, "url", _descriptor5, this);
    (0,initializerDefineProperty/* default */.Z)(this, "viewState", _descriptor6, this);
    (0,initializerDefineProperty/* default */.Z)(this, "totalBlocked", _descriptor7, this);
    (0,initializerDefineProperty/* default */.Z)(this, "totalBlockedTab", _descriptor8, this);
    (0,initializerDefineProperty/* default */.Z)(this, "documentAllowlisted", _descriptor9, this);
    (0,initializerDefineProperty/* default */.Z)(this, "userAllowlisted", _descriptor10, this);
    (0,initializerDefineProperty/* default */.Z)(this, "showInfoAboutFullVersion", _descriptor11, this);
    (0,initializerDefineProperty/* default */.Z)(this, "isEdgeBrowser", _descriptor12, this);
    (0,initializerDefineProperty/* default */.Z)(this, "stats", _descriptor13, this);
    (0,initializerDefineProperty/* default */.Z)(this, "selectedTimeRange", _descriptor14, this);
    (0,initializerDefineProperty/* default */.Z)(this, "selectedBlockedType", _descriptor15, this);
    (0,initializerDefineProperty/* default */.Z)(this, "promoNotification", _descriptor16, this);
    (0,initializerDefineProperty/* default */.Z)(this, "hasCustomRulesToReset", _descriptor17, this);
    (0,initializerDefineProperty/* default */.Z)(this, "settings", _descriptor18, this);
    this.currentTabId = null;
    (0,initializerDefineProperty/* default */.Z)(this, "getPopupData", _descriptor19, this);
    (0,initializerDefineProperty/* default */.Z)(this, "changeApplicationFilteringDisabled", _descriptor20, this);
    (0,initializerDefineProperty/* default */.Z)(this, "setViewState", _descriptor21, this);
    (0,initializerDefineProperty/* default */.Z)(this, "toggleAllowlisted", _descriptor22, this);
    (0,initializerDefineProperty/* default */.Z)(this, "getStatisticsData", _descriptor23, this);
    this.getDataByRange = (stats, range) => {
      switch (range) {
        case TIME_RANGES.DAY:
          return stats.lastMonth[stats.lastMonth.length - 1];
        case TIME_RANGES.WEEK:
          {
            const result = {};
            for (let i = 0; i < stats.lastWeek.length; i += 1) {
              const day = stats.lastWeek[i];
              // eslint-disable-next-line no-restricted-syntax
              for (const type of Object.keys(day)) {
                result[type] = (result[type] || 0) + day[type];
              }
            }
            return result;
          }
        case TIME_RANGES.MONTH:
          return stats.lastYear[stats.lastYear.length - 1];
        case TIME_RANGES.YEAR:
          {
            const result = {};
            for (let i = 0; i < stats.lastYear.length; i += 1) {
              const month = stats.lastYear[i];
              // eslint-disable-next-line no-restricted-syntax
              for (const type of Object.keys(month)) {
                result[type] = (result[type] || 0) + month[type];
              }
            }
            return result;
          }
        default:
          throw new Error('There is no such time range type');
      }
    };
    (0,initializerDefineProperty/* default */.Z)(this, "setSelectedBlockedType", _descriptor24, this);
    (0,initializerDefineProperty/* default */.Z)(this, "setSelectedTimeRange", _descriptor25, this);
    (0,initializerDefineProperty/* default */.Z)(this, "closePromoNotification", _descriptor26, this);
    (0,initializerDefineProperty/* default */.Z)(this, "openPromoNotificationUrl", _descriptor27, this);
    (0,initializerDefineProperty/* default */.Z)(this, "updateBlockedStats", _descriptor28, this);
    (0,initializerDefineProperty/* default */.Z)(this, "onSettingUpdated", _descriptor29, this);
    (0,mobx_esm/* makeObservable */.rC)(this);
  }
  get currentSite() {
    if (this.applicationAvailable) {
      return this.domainName ? punycode_es6/* default.toUnicode */.ZP.toUnicode(this.domainName) : this.url;
    }
    return this.url;
  }
  get currentStatusMessage() {
    let messageKey = '';
    if (!this.applicationAvailable) {
      messageKey = 'popup_site_filtering_state_secure_page';
    } else if (!this.canAddRemoveRule) {
      messageKey = 'popup_site_exception_information';
    } else if (this.applicationFilteringDisabled) {
      messageKey = 'popup_site_filtering_state_paused';
    } else if (this.documentAllowlisted) {
      messageKey = 'popup_site_filtering_state_disabled';
    } else {
      messageKey = 'popup_site_filtering_state_enabled';
    }
    if (messageKey) {
      return reactTranslator/* reactTranslator.getMessage */._.getMessage(messageKey);
    }
    return null;
  }
  get popupState() {
    if (this.applicationFilteringDisabled) {
      return POPUP_STATES.APPLICATION_FILTERING_DISABLED;
    }
    if (!this.applicationAvailable) {
      return POPUP_STATES.APPLICATION_UNAVAILABLE;
    }
    if (!this.canAddRemoveRule) {
      return POPUP_STATES.SITE_IN_EXCEPTION;
    }
    if (this.documentAllowlisted) {
      return POPUP_STATES.SITE_ALLOWLISTED;
    }
    return POPUP_STATES.APPLICATION_ENABLED;
  }
  get statsDataByType() {
    const {
      stats
    } = this;
    if (!stats) {
      return null;
    }
    const statsDataForCurrentRange = this.getDataByRange(stats, this.selectedTimeRange);
    const {
      blockedGroups
    } = stats;
    return blockedGroups.slice().sort((groupA, groupB) => groupA.displayNumber - groupB.displayNumber).map(group => {
      const {
        groupId,
        groupName
      } = group;
      const blocked = statsDataForCurrentRange[group.groupId];
      return {
        groupId,
        blocked,
        groupName
      };
    }).filter(group => group.blocked > 0 || group.groupId === this.TOTAL_BLOCKED_GROUP_ID);
  }
  get appearanceTheme() {
    if (!this.settings) {
      return null;
    }
    return this.settings.values[this.settings.names.AppearanceTheme];
  }
}, (_descriptor = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "isInitialDataReceived", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor2 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "applicationFilteringDisabled", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor3 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "applicationAvailable", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor4 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "canAddRemoveRule", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor5 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "url", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor6 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "viewState", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return VIEW_STATES.ACTIONS;
  }
}), _descriptor7 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "totalBlocked", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return 0;
  }
}), _descriptor8 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "totalBlockedTab", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return 0;
  }
}), _descriptor9 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "documentAllowlisted", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor10 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "userAllowlisted", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor11 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "showInfoAboutFullVersion", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor12 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "isEdgeBrowser", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor13 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "stats", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor14 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "selectedTimeRange", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return TIME_RANGES.WEEK;
  }
}), _descriptor15 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "selectedBlockedType", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return this.TOTAL_BLOCKED_GROUP_ID;
  }
}), _descriptor16 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "promoNotification", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor17 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "hasCustomRulesToReset", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor18 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "settings", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor19 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "getPopupData", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async () => {
      // get current tab id
      const tabs = await browser_polyfill_default().tabs.query({
        active: true,
        currentWindow: true
      });
      const currentTab = tabs === null || tabs === void 0 ? void 0 : tabs[0];
      const response = await messenger/* messenger.getTabInfoForPopup */.d.getTabInfoForPopup(currentTab === null || currentTab === void 0 ? void 0 : currentTab.id);
      if (!response) {
        return;
      }
      (0,mobx_esm/* runInAction */.z)(() => {
        const {
          frameInfo,
          options,
          stats,
          settings
        } = response;

        // frame info
        this.applicationFilteringDisabled = frameInfo.applicationFilteringDisabled;
        this.applicationAvailable = frameInfo.applicationAvailable;
        this.url = frameInfo.url;
        this.totalBlocked = frameInfo.totalBlocked;
        this.totalBlockedTab = frameInfo.totalBlockedTab;
        this.domainName = frameInfo.domainName;
        this.documentAllowlisted = frameInfo.documentAllowlisted;
        this.userAllowlisted = frameInfo.userAllowlisted;
        this.canAddRemoveRule = frameInfo.canAddRemoveRule;

        // options
        this.showInfoAboutFullVersion = options.showInfoAboutFullVersion;
        this.isEdgeBrowser = options.isEdgeBrowser;
        this.promoNotification = options.notification;
        this.hasCustomRulesToReset = options.hasCustomRulesToReset;

        // stats
        this.stats = stats;

        // settings
        this.settings = settings;
        this.isInitialDataReceived = true;
        this.currentTabId = currentTab === null || currentTab === void 0 ? void 0 : currentTab.id;
      });
    };
  }
}), _descriptor20 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "changeApplicationFilteringDisabled", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async state => {
      await messenger/* messenger.changeApplicationFilteringDisabled */.d.changeApplicationFilteringDisabled(state);
      (0,mobx_esm/* runInAction */.z)(() => {
        this.applicationFilteringDisabled = state;
      });
    };
  }
}), _descriptor21 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "setViewState", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return state => {
      this.viewState = state;
    };
  }
}), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "currentSite", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "currentSite"), _class.prototype), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "currentStatusMessage", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "currentStatusMessage"), _class.prototype), _descriptor22 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "toggleAllowlisted", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return () => {
      if (!this.applicationAvailable || this.applicationFilteringDisabled) {
        return;
      }
      if (!this.canAddRemoveRule) {
        return;
      }
      let isAllowlisted = this.documentAllowlisted;
      if (isAllowlisted) {
        messenger/* messenger.removeAllowlistDomain */.d.removeAllowlistDomain(this.currentTabId, true);
        isAllowlisted = false;
      } else {
        messenger/* messenger.addAllowlistDomain */.d.addAllowlistDomain(this.currentTabId);
        isAllowlisted = true;
      }
      (0,mobx_esm/* runInAction */.z)(() => {
        this.documentAllowlisted = isAllowlisted;
        this.userAllowlisted = isAllowlisted;
        this.totalBlockedTab = 0;
      });
    };
  }
}), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "popupState", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "popupState"), _class.prototype), _descriptor23 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "getStatisticsData", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async () => {
      const {
        stats
      } = await messenger/* messenger.getStatisticsData */.d.getStatisticsData();
      (0,mobx_esm/* runInAction */.z)(() => {
        this.stats = stats;
      });
    };
  }
}), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "statsDataByType", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "statsDataByType"), _class.prototype), _descriptor24 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "setSelectedBlockedType", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return value => {
      this.selectedBlockedType = value;
    };
  }
}), _descriptor25 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "setSelectedTimeRange", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return value => {
      this.selectedTimeRange = value;
    };
  }
}), _descriptor26 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "closePromoNotification", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async () => {
      this.promoNotification = null;
      await messenger/* messenger.sendMessage */.d.sendMessage(messages/* MessageType.SetNotificationViewed */.Cs.SetNotificationViewed, {
        withDelay: false
      });
    };
  }
}), _descriptor27 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "openPromoNotificationUrl", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async () => {
      let {
        url
      } = this.promoNotification;
      url = `${url}&from=popup`;
      (0,mobx_esm/* runInAction */.z)(() => {
        this.promoNotification = null;
      });
      // TODO: This message will mark the notification as viewed,
      // but it seems that we need to show it.
      await messenger/* messenger.sendMessage */.d.sendMessage(messages/* MessageType.SetNotificationViewed */.Cs.SetNotificationViewed, {
        withDelay: false
      });
      await browser_polyfill_default().tabs.create({
        url
      });
    };
  }
}), _descriptor28 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "updateBlockedStats", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return tabInfo => {
      this.totalBlocked = tabInfo.totalBlocked;
      this.totalBlockedTab = tabInfo.totalBlockedTab;
    };
  }
}), _descriptor29 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "onSettingUpdated", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return (name, value) => {
      if (!this.settings) {
        return;
      }
      this.settings.values[name] = value;
    };
  }
}), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "appearanceTheme", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "appearanceTheme"), _class.prototype)), _class);
const popupStore = /*#__PURE__*/(0,react.createContext)(new PopupStore());
// EXTERNAL MODULE: ./Extension/src/pages/common/components/ui/Icon.jsx
var Icon = __webpack_require__(87235);
;// CONCATENATED MODULE: ./Extension/src/common/common-script.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Sleeps given period of milliseconds
 *
 * @param ms - milliseconds
 */
async function sleep(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}

/**
 * Sleeps necessary period of time if minimum duration didn't pass since entry time
 *
 * @param entryTimeMs
 * @param minDurationMs
 */
async function sleepIfNecessary(entryTimeMs, minDurationMs) {
  if (Date.now() - entryTimeMs < minDurationMs) {
    await sleep(minDurationMs - (Date.now() - entryTimeMs));
  }
}

/**
 * Executes async function with at least required time
 *
 * @param fn - function to execute
 * @param minDurationMs - minimum executing time
 */
// TODO: generic types
function addMinDurationTime(fn, minDurationMs) {
  return async (...args) => {
    const start = Date.now();
    try {
      const response = await fn(...args);
      await sleepIfNecessary(start, minDurationMs);
      return response;
    } catch (e) {
      await sleepIfNecessary(start, minDurationMs);
      throw e;
    }
  };
}
// EXTERNAL MODULE: ./Extension/src/pages/common/constants.js
var constants = __webpack_require__(79735);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(35491);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(19532);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(48190);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(47630);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(60664);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(82563);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Actions/actions.pcss
var actions = __webpack_require__(82328);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Actions/actions.pcss

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(actions/* default */.Z, options);




       /* harmony default export */ const Actions_actions = (actions/* default */.Z && actions/* default.locals */.Z.locals ? actions/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Actions/Actions.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */












const Actions = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const [removingUserRules, clearingUserRules] = (0,react.useState)(false);
  const removeUserRulesWithMinDuration = addMinDurationTime(messenger/* messenger.resetCustomRulesForPage */.d.resetCustomRulesForPage, constants/* MIN_USER_RULES_REMOVAL_DISPLAY_DURATION_MS */.nD);
  const resetCustomRulesForPage = async () => {
    if (!store.applicationAvailable) {
      return;
    }
    clearingUserRules(true);
    await removeUserRulesWithMinDuration(store.url);
    window.close();
  };
  const handleBlockAds = () => {
    if (!store.applicationAvailable) {
      return;
    }
    messenger/* messenger.openAssistant */.d.openAssistant();
    window.close();
  };
  const handleOpenFilteringLog = () => {
    messenger/* messenger.openFilteringLog */.d.openFilteringLog();
    window.close();
  };
  const handleAbuseSite = () => {
    if (!store.applicationAvailable) {
      return;
    }
    messenger/* messenger.openAbuseSite */.d.openAbuseSite(store.url, forward/* ForwardFrom.Popup */.UU.Popup);
    window.close();
  };
  const handleCheckSiteSecurity = () => {
    if (!store.applicationAvailable) {
      return;
    }
    messenger/* messenger.checkSiteSecurity */.d.checkSiteSecurity(store.url, forward/* ForwardFrom.Popup */.UU.Popup);
    window.close();
  };
  const actionChangingClassname = classnames_default()('action', {
    action_disabled: !store.applicationAvailable
  });
  const removeUserRulesIconId = removingUserRules ? '#removing-user-rules' : '#small-cross';
  return /*#__PURE__*/react.createElement("div", {
    className: "actions"
  }, /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: actionChangingClassname,
    onClick: handleBlockAds
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#block-ad",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_block_site_ads_option'))), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: "action",
    onClick: handleOpenFilteringLog
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#sandwich",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_open_filtering_log'))), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: actionChangingClassname,
    onClick: handleAbuseSite
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#thumb-down",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_abuse_site'))), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: actionChangingClassname,
    onClick: handleCheckSiteSecurity
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#shield",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_security_report'))), store.hasCustomRulesToReset && /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: actionChangingClassname,
    onClick: resetCustomRulesForPage,
    disabled: removingUserRules
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: removeUserRulesIconId,
    classname: "icon--action",
    animationCondition: removingUserRules,
    animationClassname: "icon--loading"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title",
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_reset_custom_rules')
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_reset_custom_rules'))));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Actions/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Stats/StatsTable/stats-table.pcss
var stats_table = __webpack_require__(66680);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsTable/stats-table.pcss

      
      
      
      
      
      
      
      
      

var stats_table_options = {};

stats_table_options.styleTagTransform = (styleTagTransform_default());
stats_table_options.setAttributes = (setAttributesWithoutAttributes_default());

      stats_table_options.insert = insertBySelector_default().bind(null, "head");
    
stats_table_options.domAPI = (styleDomAPI_default());
stats_table_options.insertStyleElement = (insertStyleElement_default());

var stats_table_update = injectStylesIntoStyleTag_default()(stats_table/* default */.Z, stats_table_options);




       /* harmony default export */ const StatsTable_stats_table = (stats_table/* default */.Z && stats_table/* default.locals */.Z.locals ? stats_table/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsTable/StatsTable.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

/* eslint-disable jsx-a11y/no-noninteractive-tabindex */




const StatsTable = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const {
    statsDataByType
  } = store;
  if (!statsDataByType) {
    return null;
  }
  const statsDataByTypeWithoutTotal = statsDataByType.filter(group => group.groupId !== store.TOTAL_BLOCKED_GROUP_ID);
  if (statsDataByTypeWithoutTotal.length === 0) {
    return null;
  }
  const renderStatsByType = statsDataByTypeWithoutTotal.map(stats => {
    return /*#__PURE__*/react.createElement("li", {
      className: "stats__item",
      key: stats.groupId
    }, /*#__PURE__*/react.createElement("span", {
      className: "stats__name"
    }, stats.groupName), /*#__PURE__*/react.createElement("span", {
      className: "stats__value"
    }, new Intl.NumberFormat().format(stats.blocked)));
  });
  return /*#__PURE__*/react.createElement("div", {
    className: "stats"
  }, /*#__PURE__*/react.createElement("ul", {
    className: "stats__list"
  }, renderStatsByType));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsTable/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Tabs/Tab.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



const Tab = ({
  title,
  active,
  onClick
}) => {
  const tabClass = classnames_default()('tabs__tab', {
    tabs__tab_active: active
  });
  return /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: tabClass,
    onClick: onClick
  }, title);
};
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Tabs/tabs.pcss
var tabs = __webpack_require__(95255);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Tabs/tabs.pcss

      
      
      
      
      
      
      
      
      

var tabs_options = {};

tabs_options.styleTagTransform = (styleTagTransform_default());
tabs_options.setAttributes = (setAttributesWithoutAttributes_default());

      tabs_options.insert = insertBySelector_default().bind(null, "head");
    
tabs_options.domAPI = (styleDomAPI_default());
tabs_options.insertStyleElement = (insertStyleElement_default());

var tabs_update = injectStylesIntoStyleTag_default()(tabs/* default */.Z, tabs_options);




       /* harmony default export */ const Tabs_tabs = (tabs/* default */.Z && tabs/* default.locals */.Z.locals ? tabs/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Tabs/Tabs.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */










const Tabs = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const contentMap = {
    [VIEW_STATES.ACTIONS]: Actions,
    [VIEW_STATES.STATS]: StatsTable
  };
  const TabContent = contentMap[store.viewState];
  const handleTabClick = viewState => () => {
    store.setViewState(viewState);
  };
  return /*#__PURE__*/react.createElement("div", {
    className: "tabs"
  }, /*#__PURE__*/react.createElement("div", {
    className: "tabs__panel"
  }, /*#__PURE__*/react.createElement(Tab, {
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_tab_actions'),
    active: store.viewState === VIEW_STATES.ACTIONS,
    onClick: handleTabClick(VIEW_STATES.ACTIONS)
  }), /*#__PURE__*/react.createElement(Tab, {
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_tab_statistics'),
    active: store.viewState === VIEW_STATES.STATS,
    onClick: handleTabClick(VIEW_STATES.STATS)
  })), /*#__PURE__*/react.createElement("div", {
    className: "tabs__content",
    tabIndex: TabContent === contentMap[VIEW_STATES.STATS] ? 0 : -1
  }, /*#__PURE__*/react.createElement(TabContent, null)));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Tabs/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Header/header.pcss
var header = __webpack_require__(69091);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Header/header.pcss

      
      
      
      
      
      
      
      
      

var header_options = {};

header_options.styleTagTransform = (styleTagTransform_default());
header_options.setAttributes = (setAttributesWithoutAttributes_default());

      header_options.insert = insertBySelector_default().bind(null, "head");
    
header_options.domAPI = (styleDomAPI_default());
header_options.insertStyleElement = (insertStyleElement_default());

var header_update = injectStylesIntoStyleTag_default()(header/* default */.Z, header_options);




       /* harmony default export */ const Header_header = (header/* default */.Z && header/* default.locals */.Z.locals ? header/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Header/Header.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */











const Header = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const [filtersUpdating, setFiltersUpdating] = (0,react.useState)(false);
  const {
    applicationFilteringDisabled
  } = store;
  const updateFiltersWithMinDuration = addMinDurationTime(messenger/* messenger.updateFilters */.d.updateFilters, constants/* MIN_FILTERS_UPDATE_DISPLAY_DURATION_MS */.dR);
  const refUpdatingBtn = (0,react.useRef)(null);
  const handleUpdateFiltersClick = async () => {
    refUpdatingBtn.current.blur();
    setFiltersUpdating(true);
    await updateFiltersWithMinDuration();
    setFiltersUpdating(false);
  };
  const handleEnableClick = async () => {
    await store.changeApplicationFilteringDisabled(false);
  };
  const handlePauseClick = async () => {
    await store.changeApplicationFilteringDisabled(true);
  };
  const handleSettingsClick = e => {
    e.preventDefault();
    messenger/* messenger.openSettingsTab */.d.openSettingsTab();
    window.close();
  };
  return /*#__PURE__*/react.createElement("div", {
    className: "popup-header"
  }, /*#__PURE__*/react.createElement("div", {
    className: "popup-header__logo"
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#logo",
    classname: "icon--logo"
  })), /*#__PURE__*/react.createElement("div", {
    className: "popup-header__buttons"
  }, /*#__PURE__*/react.createElement("button", {
    className: classnames_default()('button', 'popup-header__button'),
    ref: refUpdatingBtn,
    disabled: filtersUpdating,
    type: "button",
    onClick: handleUpdateFiltersClick,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_header_update_filters')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#update-filters",
    classname: "icon--update-filters",
    animationCondition: filtersUpdating,
    animationClassname: "icon--loading"
  })), !applicationFilteringDisabled && /*#__PURE__*/react.createElement("button", {
    className: "button popup-header__button",
    type: "button",
    onClick: handlePauseClick,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('context_disable_protection')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#pause",
    classname: "icon--pause"
  })), applicationFilteringDisabled && /*#__PURE__*/react.createElement("button", {
    className: "button popup-header__button",
    type: "button",
    onClick: handleEnableClick,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('context_enable_protection')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#start",
    classname: "icon--button icon--start"
  })), /*#__PURE__*/react.createElement("button", {
    className: "button popup-header__button",
    type: "button",
    onClick: handleSettingsClick,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('options_settings')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#settings",
    classname: "icon--settings"
  }))));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Header/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Footer/footer.pcss
var footer = __webpack_require__(9066);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Footer/footer.pcss

      
      
      
      
      
      
      
      
      

var footer_options = {};

footer_options.styleTagTransform = (styleTagTransform_default());
footer_options.setAttributes = (setAttributesWithoutAttributes_default());

      footer_options.insert = insertBySelector_default().bind(null, "head");
    
footer_options.domAPI = (styleDomAPI_default());
footer_options.insertStyleElement = (insertStyleElement_default());

var footer_update = injectStylesIntoStyleTag_default()(footer/* default */.Z, footer_options);




       /* harmony default export */ const Footer_footer = (footer/* default */.Z && footer/* default.locals */.Z.locals ? footer/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Footer/Footer.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */








const Footer = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  let footerContent = /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
    className: "footer__text"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_adguard_footer_title')), /*#__PURE__*/react.createElement("div", {
    className: "footer__platforms"
  }, /*#__PURE__*/react.createElement("a", {
    href: IOS_URL,
    target: "_blank",
    rel: "noreferrer",
    className: "footer__link",
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_adguard_for_ios')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#apple",
    classname: "footer__icon"
  })), /*#__PURE__*/react.createElement("a", {
    href: ANDROID_URL,
    target: "_blank",
    rel: "noreferrer",
    className: "footer__link",
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_adguard_for_android')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#android",
    classname: "footer__icon"
  }))));
  if (store.isEdgeBrowser) {
    const currentYear = new Date().getFullYear();
    const footerText = `© 2009-${currentYear} AdGuard Software Ltd`;
    footerContent = /*#__PURE__*/react.createElement("div", {
      className: "footer__text"
    }, footerText);
  }
  return /*#__PURE__*/react.createElement("div", {
    className: "footer"
  }, footerContent);
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Footer/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/ui/icons.pcss
var icons = __webpack_require__(80493);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/ui/icons.pcss

      
      
      
      
      
      
      
      
      

var icons_options = {};

icons_options.styleTagTransform = (styleTagTransform_default());
icons_options.setAttributes = (setAttributesWithoutAttributes_default());

      icons_options.insert = insertBySelector_default().bind(null, "head");
    
icons_options.domAPI = (styleDomAPI_default());
icons_options.insertStyleElement = (insertStyleElement_default());

var icons_update = injectStylesIntoStyleTag_default()(icons/* default */.Z, icons_options);




       /* harmony default export */ const ui_icons = (icons/* default */.Z && icons/* default.locals */.Z.locals ? icons/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/ui/Icons.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



const Icons = () => {
  return /*#__PURE__*/react.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "hidden"
  }, /*#__PURE__*/react.createElement("symbol", {
    id: "update-filters",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none"
  }, /*#__PURE__*/react.createElement("path", {
    id: "Vector 13",
    d: "M6 7.00005C9.6 1.80005 19.5 3.50002 20 12.0001V13.5",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  }), /*#__PURE__*/react.createElement("path", {
    id: "Vector 14",
    d: "M18 16.9999C14.4 22.1999 4.5 20.5 4 11.9999V11",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  }), /*#__PURE__*/react.createElement("path", {
    id: "Vector 15",
    d: "M22 12L20 14L18 12",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/react.createElement("path", {
    id: "Vector 16",
    d: "M2 12L4 10L6 12",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "pause",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none"
  }, /*#__PURE__*/react.createElement("circle", {
    cx: "12",
    cy: "12",
    r: "10",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9.5 16L9.5 8L9.5 16Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M14.5 16L14.5 8L14.5 16Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "start",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19 12L7 20L7 4L19 12Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "settings",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M7.92921 18.9146C8.06451 18.9146 8.19778 18.9475 8.31752 19.0105C8.74311 19.2345 9.1883 19.4192 9.64753 19.5621C9.91308 19.6446 10.12 19.8541 10.1991 20.1207C10.453 20.9752 10.6939 21.6143 10.852 22H13.148C13.3061 21.6135 13.5475 20.9742 13.8011 20.1199C13.8803 19.8534 14.0872 19.6438 14.3527 19.5613C14.812 19.4184 15.2572 19.2337 15.6827 19.0097C15.9289 18.88 16.2236 18.8818 16.4682 19.0144C17.2521 19.4394 17.8745 19.7207 18.2592 19.8822L19.8832 18.2591C19.7215 17.874 19.4405 17.2513 19.0152 16.4673C18.8826 16.2227 18.8809 15.9281 19.0105 15.6819C19.2346 15.2563 19.4192 14.8111 19.5621 14.3518C19.6446 14.0863 19.8542 13.8794 20.1207 13.8002C20.9752 13.5463 21.6143 13.3054 22 13.1473V10.8514C21.6135 10.6933 20.9744 10.4519 20.12 10.1982C19.8534 10.119 19.6439 9.91214 19.5613 9.64659C19.4184 9.18735 19.2338 8.74215 19.0097 8.31656C18.8801 8.07037 18.8818 7.77571 19.0144 7.53109C19.4394 6.74718 19.7207 6.12475 19.8819 5.74009L18.2597 4.1168C17.8745 4.27827 17.2518 4.55954 16.4679 4.98483C16.2233 5.11742 15.9287 5.11918 15.6825 4.98952C15.2569 4.76548 14.8117 4.58084 14.3525 4.43792C14.0869 4.3554 13.88 4.14586 13.8009 3.87929C13.5472 3.02507 13.3061 2.3857 13.148 2H10.852C10.6958 2.38492 10.4546 3.02064 10.2009 3.86965C10.1242 4.14096 9.91549 4.35507 9.64623 4.4387C9.18701 4.58154 8.74182 4.76609 8.31621 4.99004C8.07003 5.1197 7.77538 5.11794 7.53076 4.98535C6.74686 4.56032 6.12443 4.27905 5.73978 4.11785L4.11678 5.74035C4.27824 6.12553 4.55951 6.74823 4.98479 7.53213C5.11738 7.77675 5.11913 8.07141 4.98948 8.3176C4.76553 8.7432 4.58099 9.1884 4.43815 9.64763C4.35563 9.91318 4.1461 10.1201 3.87952 10.1992C3.02505 10.4529 2.38596 10.6941 2 10.8521V13.1481C2.38387 13.3044 3.01568 13.5442 3.86208 13.7958C4.1443 13.8731 4.36551 14.0924 4.44518 14.374C4.58538 14.8197 4.76482 15.2522 4.98141 15.6663C5.12378 15.9228 5.12082 16.2352 4.97359 16.489C4.55508 17.2627 4.27746 17.8779 4.11756 18.2599L5.74082 19.8842C6.126 19.7228 6.74868 19.4415 7.53258 19.0162C7.65429 18.9499 7.79061 18.915 7.92921 18.9146Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinejoin: "round"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 9.27271C10.4937 9.27271 9.27271 10.4937 9.27271 12C9.27271 13.5062 10.4937 14.7273 12 14.7273C13.5062 14.7273 14.7273 13.5062 14.7273 12C14.7255 10.4945 13.5055 9.27447 12 9.27271Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinejoin: "round"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "logo",
    viewBox: "0 0 160 35"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "currentColor",
    d: "M125.471 24.653l-1.217-3.04h-6.06l-1.15 3.04h-4.115l6.57-15.487h3.672l6.503 15.487h-4.203zM121.268 13.3l-1.99 5.316h3.937l-1.947-5.316zM112.31 18.813c0 .933-.159 1.782-.476 2.548a5.538 5.538 0 01-1.36 1.969c-.59.547-1.302.973-2.135 1.28-.833.306-1.758.459-2.776.459-1.032 0-1.961-.153-2.787-.46-.826-.306-1.526-.732-2.101-1.28a5.552 5.552 0 01-1.328-1.968c-.31-.766-.464-1.615-.464-2.549V9.166h3.76v9.34c0 .423.056.824.166 1.203.11.38.28.719.509 1.018.229.299.53.535.907.71.376.176.83.263 1.36.263.531 0 .985-.087 1.36-.262.377-.176.683-.412.919-.711.236-.3.405-.638.508-1.018.104-.379.155-.78.155-1.203v-9.34h3.783v9.646zM96.789 23.712c-.767.394-1.663.715-2.688.963-1.025.248-2.142.372-3.35.372-1.254 0-2.408-.197-3.463-.59-1.054-.395-1.96-.949-2.72-1.663a7.578 7.578 0 01-1.78-2.57c-.429-1-.642-2.111-.642-3.337 0-1.24.217-2.362.652-3.368a7.493 7.493 0 011.803-2.57 8 8 0 012.699-1.63c1.032-.38 2.145-.569 3.34-.569 1.238 0 2.389.186 3.45.558 1.062.372 1.925.871 2.588 1.498l-2.389 2.69c-.368-.422-.855-.768-1.46-1.038-.604-.27-1.29-.405-2.057-.405-.663 0-1.275.12-1.836.361-.56.24-1.047.576-1.46 1.006a4.56 4.56 0 00-.962 1.532 5.32 5.32 0 00-.343 1.935c0 .715.104 1.371.31 1.97.207.597.513 1.111.918 1.541.406.43.907.766 1.504 1.007.597.24 1.28.36 2.046.36a7.75 7.75 0 001.261-.098 4.742 4.742 0 001.106-.317v-2.822H90.33V15.51h6.459v8.203zM159.307 16.866c0 1.356-.254 2.526-.763 3.51a7.095 7.095 0 01-2.013 2.429 8.429 8.429 0 01-2.82 1.4 11.547 11.547 0 01-3.186.448h-5.84V9.166h5.663c1.106 0 2.198.127 3.274.382a8.261 8.261 0 012.876 1.27c.84.59 1.519 1.381 2.035 2.373.516.991.774 2.216.774 3.675zm-3.937 0c0-.875-.144-1.6-.432-2.177a3.674 3.674 0 00-1.15-1.378 4.626 4.626 0 00-1.637-.733 8.13 8.13 0 00-1.891-.219h-1.88v9.057h1.791a8.22 8.22 0 001.958-.23 4.651 4.651 0 001.659-.755c.48-.35.863-.816 1.15-1.4.288-.583.432-1.305.432-2.165zM80.487 16.866c0 1.356-.255 2.526-.763 3.51a7.095 7.095 0 01-2.013 2.429 8.429 8.429 0 01-2.82 1.4 11.547 11.547 0 01-3.186.448h-5.84V9.166h5.663c1.106 0 2.197.127 3.274.382a8.261 8.261 0 012.875 1.27c.841.59 1.52 1.381 2.035 2.373.517.991.775 2.216.775 3.675zm-3.938 0c0-.875-.143-1.6-.431-2.177a3.674 3.674 0 00-1.15-1.378 4.626 4.626 0 00-1.637-.733 8.13 8.13 0 00-1.891-.219h-1.88v9.057h1.791a8.22 8.22 0 001.958-.23 4.651 4.651 0 001.659-.755c.479-.35.862-.816 1.15-1.4.288-.583.431-1.305.431-2.165zM60.468 24.653l-1.216-3.04H53.19l-1.15 3.04h-4.115l6.57-15.487h3.672l6.503 15.487h-4.203zM56.265 13.3l-1.99 5.316h3.937L56.265 13.3zM139.252 24.653l-3.385-6.147h-1.283v6.147h-3.716V9.166h5.973c.752 0 1.485.076 2.2.23a5.757 5.757 0 011.925.776 4.08 4.08 0 011.36 1.444c.34.598.509 1.341.509 2.23 0 1.05-.288 1.933-.863 2.648-.575.714-1.371 1.225-2.389 1.531l4.093 6.628h-4.424zm-.155-10.74c0-.365-.078-.66-.232-.886a1.586 1.586 0 00-.598-.525 2.615 2.615 0 00-.818-.252 6.102 6.102 0 00-.874-.066h-2.013v3.61h1.792c.31 0 .627-.026.951-.077.324-.05.62-.142.885-.273.265-.132.483-.321.652-.569.17-.248.255-.569.255-.963z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#68BC71",
    d: "M17.154 0C11.792 0 5.324 1.252 0 4.007c0 5.95-.073 20.776 17.154 30.905C34.382 24.784 34.31 9.959 34.31 4.008 28.984 1.252 22.517 0 17.154 0z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#67B279",
    d: "M17.137 34.902C-.073 24.772 0 9.956 0 4.007 5.319 1.255 11.778.003 17.137 0v34.902z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#FFF",
    d: "M16.529 23.295l10.373-13.88c-.76-.605-1.427-.179-1.794.152l-.013.001-8.65 8.933-3.259-3.894c-1.554-1.783-3.668-.423-4.162-.063l7.505 8.75"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "block-ad",
    viewBox: "0 0 17 17"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "#DF3812",
    fillRule: "nonzero"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M14 7.186V1.445C14 .649 13.376 0 12.606 0H1.394C.629 0 0 .645 0 1.44v10.12C0 12.354.628 13 1.402 13h5.634v-.9H1.402c-.272 0-.502-.237-.502-.54V1.44c0-.302.23-.54.494-.54h11.212c.265 0 .494.238.494.545v5.741h.9zm0-5.741C14 .649 13.376 0 12.606 0H1.394C.629 0 0 .645 0 1.44v10.12C0 12.354.628 13 1.402 13h5.634v-.9H1.402c-.272 0-.502-.237-.502-.54V1.44c0-.302.23-.54.494-.54h11.212c.265 0 .494.238.494.545v5.741h.9V1.445z"
  }), /*#__PURE__*/react.createElement("path", {
    d: "M9.55 16.29V6.992l6.63 5.95-2.708-.011 1.134 2.6-2.172 1.083-1.126-2.581L9.55 16.29zm.9-7.282v4.662l1.078-1.385 1.352 3.1.56-.278-1.344-3.082 1.724.007-3.37-3.024z"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "sandwich",
    viewBox: "0 0 14 13"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M-5-6h24v24H-5z"
  }), /*#__PURE__*/react.createElement("path", {
    stroke: "#4A90E2",
    strokeLinecap: "square",
    d: "M.5.5h13M.5 6.25h13M.5 12.25h13"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "thumb-down",
    viewBox: "0 0 16 18"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M-4-4h24v24H-4z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#F5A623",
    d: "M14.719 7.667c.208-.742.083-1.765-.585-2.377.129-.515.126-1.161-.141-1.734a1.895 1.895 0 00-.818-.878 2.337 2.337 0 00-.342-1.147C12.441.89 11.764.445 10.803.208c-.405-.1-1.28-.126-1.28-.126h-.02c-1.623 0-3.51.646-5.464 1.892l-2.023.299a1.21 1.21 0 00-1.05 1.191v5.838c0 .49.358.723.64.91.156.103.372.237.617.393.686.434 1.834 1.161 2.222 1.532.485.463.933 1.277 1.406 2.138.305.553.62 1.126.984 1.684.464.71 1.158 1.116 1.904 1.116.637 0 1.246-.307 1.63-.822.425-.572.533-1.33.294-2.081-.264-.83-.602-1.798-1.106-2.69-.006-.01-.011-.02 0-.04.013-.022.025-.023.037-.023h3.635c.889 0 1.592-.491 1.882-1.316.289-.82.113-1.808-.392-2.436zm-1.49 2.874H9.594c-.711 0-1.161.755-.814 1.368.425.753.736 1.588 1.034 2.525.322 1.011-.325 1.763-1.075 1.763-.4 0-.827-.213-1.154-.714-.94-1.44-1.603-3.095-2.525-3.976-.728-.696-3.203-2.117-3.203-2.205V3.464a.34.34 0 01.294-.33l2.139-.322a.349.349 0 00.135-.05C6.352 1.513 8.086.935 9.502.935c.382 0 .74.042 1.074.124 1.658.408 1.763 1.413 1.696 1.934a.335.335 0 00.253.366c.886.233.927 1.421.646 1.998-.079.16-.003.35.156.434.662.35.71 1.375.45 1.856a.321.321 0 00.087.406c.725.563.764 2.487-.635 2.487z"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "shield",
    viewBox: "0 0 14 15"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M-5-5h24v24H-5z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#67B279",
    d: "M7 15a.477.477 0 01-.145-.023c-1.583-.504-2.93-1.47-4.005-2.873C2.004 11 1.326 9.625.836 8.019.01 5.309 0 2.896 0 2.794c0-.243.186-.446.43-.47.036-.003 3.722-.38 6.291-2.234a.477.477 0 01.558 0c2.568 1.855 6.255 2.23 6.292 2.234a.473.473 0 01.429.47c0 .102-.01 2.515-.836 5.225-.49 1.606-1.168 2.98-2.014 4.085-1.075 1.403-2.422 2.37-4.005 2.874A.478.478 0 017 15zM.963 3.208c.04.792.193 2.616.788 4.558C2.767 11.081 4.533 13.187 7 14.031c2.473-.846 4.24-2.96 5.255-6.286a19.5 19.5 0 00.782-4.537C11.974 3.054 9.22 2.532 7 1.048 4.78 2.532 2.027 3.054.963 3.208z"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "small-cross",
    viewBox: "0 0 14 12"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    stroke: "#B267A0",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M6.42857143,6.42857143 L17.604347,17.604347 M6.42857143,17.5714286 L17.604347,6.39565302",
    transform: "translate(-5 -6)"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "removing-user-rules",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "none",
    stroke: "#67B279",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M6.29054 5.04252C6.40428 4.94907 6.52035 4.85835 6.63866 4.77047"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "none",
    stroke: "#67B279",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8.55511 3.68292C8.82001 3.57307 9.0913 3.47551 9.36826 3.39095C9.51032 3.34758 9.65388 3.30762 9.79883 3.27119"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "none",
    stroke: "#67B279",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C9.51472 21 7.26472 19.9926 5.63604 18.364C4.80704 17.535 4.13901 16.545 3.68286 15.4449"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "apple",
    viewBox: "0 0 24 24",
    width: "24",
    height: "24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "currentColor",
    d: "M14.8902 4.03331C15.5764 3.23057 16.0389 2.11243 15.9124 1C14.9235 1.038 13.7272 1.63744 13.0182 2.43923C12.3815 3.15077 11.8257 4.2879 11.9751 5.37849C13.0782 5.46114 14.204 4.837 14.8902 4.03331M17.3638 11.0936C17.3914 13.9692 19.9715 14.9259 20 14.9382C19.9791 15.0057 19.5879 16.3014 18.641 17.6409C17.8215 18.798 16.9717 19.9503 15.6326 19.975C14.3173 19.9988 13.8938 19.2208 12.3892 19.2208C10.8854 19.2208 10.4153 19.9503 9.17045 19.9988C7.87802 20.0453 6.893 18.7467 6.06786 17.5934C4.37952 15.2346 3.08994 10.9274 4.82206 8.02041C5.68241 6.57738 7.21943 5.66254 8.88874 5.63974C10.1574 5.61599 11.3556 6.46528 12.1312 6.46528C12.9069 6.46528 14.363 5.44404 15.8934 5.59414C16.5339 5.61979 18.3326 5.84399 19.487 7.47891C19.3938 7.53496 17.3409 8.69015 17.3638 11.0936"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "android",
    viewBox: "0 0 24 24",
    width: "24",
    height: "24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "currentColor",
    fillRule: "evenodd",
    d: "M6.6 17.25C6.6 17.7312 7.005 18.125 7.5 18.125H8.4V21.1875C8.4 21.9137 9.003 22.5 9.75 22.5C10.497 22.5 11.1 21.9137 11.1 21.1875V18.125H12.9V21.1875C12.9 21.9137 13.503 22.5 14.25 22.5C14.997 22.5 15.6 21.9137 15.6 21.1875V18.125H16.5C16.995 18.125 17.4 17.7312 17.4 17.25V8.49995H6.6V17.25V17.25ZM3.85 8.49995C3.103 8.49995 2.5 9.0862 2.5 9.81245V15.9375C2.5 16.6637 3.103 17.25 3.85 17.25C4.597 17.25 5.2 16.6637 5.2 15.9375V9.81245C5.2 9.0862 4.597 8.49995 3.85 8.49995V8.49995ZM20.15 8.49995C19.403 8.49995 18.8 9.0862 18.8 9.81245V15.9375C18.8 16.6637 19.403 17.25 20.15 17.25C20.897 17.25 21.5 16.6637 21.5 15.9375V9.81245C21.5 9.0862 20.897 8.49995 20.15 8.49995V8.49995ZM15.177 3.08995L16.347 1.95245C16.527 1.77745 16.527 1.5062 16.347 1.3312C16.167 1.1562 15.888 1.1562 15.708 1.3312L14.376 2.6262C13.665 2.2762 12.855 2.07495 12 2.07495C11.136 2.07495 10.326 2.2762 9.60598 2.6262L8.26498 1.3312C8.08498 1.1562 7.80598 1.1562 7.62598 1.3312C7.44598 1.5062 7.44598 1.77745 7.62598 1.95245L8.80498 3.0987C7.47298 4.05245 6.59998 5.5837 6.59998 7.32495H17.4C17.4 5.5837 16.527 4.0437 15.177 3.08995V3.08995ZM10.2 5.57495H9.29999V4.69995H10.2V5.57495V5.57495ZM14.7 5.57495H13.8V4.69995H14.7V5.57495V5.57495Z"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "cross",
    viewBox: "0 0 15.642 15.642"
  }, /*#__PURE__*/react.createElement("path", {
    d: "m8.882 7.821 6.541-6.541c.293-.293.293-.768 0-1.061s-.768-.293-1.061 0l-6.541 6.541-6.541-6.54c-.293-.293-.768-.293-1.061 0s-.293.768 0 1.061l6.541 6.541-6.54 6.54c-.293.293-.293.768 0 1.061.147.146.338.22.53.22s.384-.073.53-.22l6.541-6.541 6.541 6.541c.147.146.338.22.53.22s.384-.073.53-.22c.293-.293.293-.768 0-1.061z",
    fill: "currentColor",
    fillRule: "evenodd"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "cross-white",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M6.42857 6.79596L17.6043 18.6103",
    stroke: "#F3F3F3",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  }), /*#__PURE__*/react.createElement("path", {
    d: "M6.42871 18.5755L17.6045 6.76111",
    stroke: "#F3F3F3",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "cross-gray",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M6.42857 6.79596L17.6043 18.6103",
    stroke: "#888888",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  }), /*#__PURE__*/react.createElement("path", {
    d: "M6.42871 18.5755L17.6045 6.76111",
    stroke: "#888888",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "play",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19 12L7 20L7 4L19 12Z",
    stroke: "#a4a4a4",
    strokeWidth: "3",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    fill: "#fff"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "circle",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.5 12C2.5 6.75329 6.75329 2.5 12 2.5C17.2467 2.5 21.5 6.75329 21.5 12C21.5 17.2467 17.2467 21.5 12 21.5C6.75329 21.5 2.5 17.2467 2.5 12ZM18.5 12C18.5 8.41015 15.5899 5.5 12 5.5C8.41015 5.5 5.5 8.41015 5.5 12C5.5 15.5899 8.41015 18.5 12 18.5C15.5899 18.5 18.5 15.5899 18.5 12Z",
    fill: "#c23814"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "checkmark",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20.9842 4.86804C21.6094 5.4116 21.6755 6.35904 21.132 6.98421L10.6987 18.9842C10.4212 19.3034 10.0219 19.4905 9.5991 19.4997C9.1763 19.5088 8.76928 19.339 8.47828 19.0322L2.91156 13.1617C2.34153 12.5606 2.36674 11.6112 2.96787 11.0412C3.569 10.4711 4.51841 10.4963 5.08845 11.0975L9.51856 15.7693L18.868 5.01584C19.4116 4.39066 20.359 4.32449 20.9842 4.86804Z",
    fill: "#67b279"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "exclamation",
    viewBox: "0 0 4 24"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M3.9697 6.88858V0H0V6.88858L0.848485 15.4217H3.12121L3.9697 6.88858ZM4 22V17.8731H0V22H4Z",
    fill: "#D58500"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "select",
    viewBox: "0 0 14 8"
  }, /*#__PURE__*/react.createElement("path", {
    d: "m6 10 6 6 6-6",
    fill: "none",
    stroke: "#888",
    strokeLinecap: "round",
    strokeWidth: "1.5",
    transform: "translate(-5 -9)"
  })));
};
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Main/main.pcss
var main = __webpack_require__(21936);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Main/main.pcss

      
      
      
      
      
      
      
      
      

var main_options = {};

main_options.styleTagTransform = (styleTagTransform_default());
main_options.setAttributes = (setAttributesWithoutAttributes_default());

      main_options.insert = insertBySelector_default().bind(null, "head");
    
main_options.domAPI = (styleDomAPI_default());
main_options.insertStyleElement = (insertStyleElement_default());

var main_update = injectStylesIntoStyleTag_default()(main/* default */.Z, main_options);




       /* harmony default export */ const Main_main = (main/* default */.Z && main/* default.locals */.Z.locals ? main/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Main/Main.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */








const Main = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const switchersMap = {
    [POPUP_STATES.APPLICATION_ENABLED]: {
      handler: () => {
        store.toggleAllowlisted();
      },
      mode: 'enabled'
    },
    [POPUP_STATES.APPLICATION_FILTERING_DISABLED]: {
      handler: () => {
        store.changeApplicationFilteringDisabled(false);
      },
      mode: 'disabled'
    },
    [POPUP_STATES.APPLICATION_UNAVAILABLE]: {
      mode: 'unavailable'
    },
    [POPUP_STATES.SITE_IN_EXCEPTION]: {
      mode: 'in-exception'
    },
    [POPUP_STATES.SITE_ALLOWLISTED]: {
      handler: () => {
        store.toggleAllowlisted();
      },
      mode: 'allowlisted'
    }
  };
  const switcher = switchersMap[store.popupState];
  return /*#__PURE__*/react.createElement("div", {
    className: `main main--${switcher.mode}`
  }, store.isInitialDataReceived && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
    className: "main__header"
  }, store.showInfoAboutFullVersion && /*#__PURE__*/react.createElement("div", {
    className: "main__cta-link"
  }, /*#__PURE__*/react.createElement("a", {
    href: COMPARE_URL,
    target: "_blank",
    rel: "noreferrer"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_header_cta_link'))), /*#__PURE__*/react.createElement("div", {
    className: "main__stats"
  }, /*#__PURE__*/react.createElement("div", {
    className: "main__total-blocked-tab"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_tab_blocked_count', {
    num: store.totalBlockedTab.toLocaleString()
  })), /*#__PURE__*/react.createElement("div", {
    className: "main__total-blocked-all"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_tab_blocked_all_count', {
    num: store.totalBlocked.toLocaleString()
  })))), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: "switcher",
    onClick: switcher.handler,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_switch_button')
  }, /*#__PURE__*/react.createElement("div", {
    className: `switcher__center switcher__center--${switcher.mode}`
  }), /*#__PURE__*/react.createElement("div", {
    className: "switcher__btn"
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#checkmark",
    classname: "icon--checkmark switcher__icon switcher__icon--checkmark",
    width: "66",
    height: "66"
  }), /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#circle",
    classname: "icon--circle switcher__icon switcher__icon--circle"
  }), /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#play",
    classname: "icon--play switcher__icon switcher__icon--play"
  }), /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#exclamation",
    classname: "icon--exclamation switcher__icon switcher__icon--exclamation"
  }))), /*#__PURE__*/react.createElement("div", {
    className: "switcher__info"
  }, /*#__PURE__*/react.createElement("div", {
    className: "current-site"
  }, store.currentSite), /*#__PURE__*/react.createElement("div", {
    className: "current-status"
  }, store.currentStatusMessage))));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Main/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// EXTERNAL MODULE: ./Extension/src/pages/common/components/ui/Select/index.js + 5 modules
var Select = __webpack_require__(78650);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/Filters.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */







const Filters = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const {
    stats
  } = store;
  if (!stats) {
    return null;
  }
  const statsData = store.statsDataByType;
  const existingGroupsOptions = stats.blockedGroups.filter(group => {
    return statsData.find(data => data.groupId === group.groupId);
  }).map(({
    groupId,
    groupName
  }) => ({
    value: groupId,
    title: groupName
  }));
  const handleBlockedTypeChange = value => {
    store.setSelectedBlockedType(value);
  };
  const handleTimeRangeChange = value => {
    store.setSelectedTimeRange(value);
  };
  const timeRangeOptions = [{
    value: TIME_RANGES.DAY,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_time_day')
  }, {
    value: TIME_RANGES.WEEK,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_time_week')
  }, {
    value: TIME_RANGES.MONTH,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_time_month')
  }, {
    value: TIME_RANGES.YEAR,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_time_year')
  }];

  /*
   * We cannot use native select because there is a bug in chromium browsers:
   * after a mouse click, chromium browsers activate the ":focus-visible" pseudo-class,
   * which should only be activated when selecting with the keyboard and not the mouse.
   * @see https://bugs.chromium.org/p/chromium/issues/detail?id=1383062
   */
  return /*#__PURE__*/react.createElement("div", {
    className: "stats-chart__filters"
  }, /*#__PURE__*/react.createElement(Select/* Select */.P, {
    id: "blocked-type",
    name: "blocked-type",
    handler: handleBlockedTypeChange,
    value: store.selectedBlockedType,
    options: existingGroupsOptions,
    className: "stats-chart__select-in",
    popupModification: true
  }), /*#__PURE__*/react.createElement(Select/* Select */.P, {
    id: "time-range",
    name: "time-range",
    className: "stats-chart__select-in",
    handler: handleTimeRangeChange,
    value: store.selectedTimeRange,
    options: timeRangeOptions,
    popupModification: true
  }));
});
// EXTERNAL MODULE: ./node_modules/c3/c3.js
var c3 = __webpack_require__(36554);
var c3_default = /*#__PURE__*/__webpack_require__.n(c3);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./node_modules/c3/c3.css
var c3_c3 = __webpack_require__(25460);
;// CONCATENATED MODULE: ./node_modules/c3/c3.css

      
      
      
      
      
      
      
      
      

var c3_options = {};

c3_options.styleTagTransform = (styleTagTransform_default());
c3_options.setAttributes = (setAttributesWithoutAttributes_default());

      c3_options.insert = insertBySelector_default().bind(null, "head");
    
c3_options.domAPI = (styleDomAPI_default());
c3_options.insertStyleElement = (insertStyleElement_default());

var c3_update = injectStylesIntoStyleTag_default()(c3_c3/* default */.Z, c3_options);




       /* harmony default export */ const node_modules_c3_c3 = (c3_c3/* default */.Z && c3_c3/* default.locals */.Z.locals ? c3_c3/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Stats/StatsChart/chart.pcss
var chart = __webpack_require__(84966);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/chart.pcss

      
      
      
      
      
      
      
      
      

var chart_options = {};

chart_options.styleTagTransform = (styleTagTransform_default());
chart_options.setAttributes = (setAttributesWithoutAttributes_default());

      chart_options.insert = insertBySelector_default().bind(null, "head");
    
chart_options.domAPI = (styleDomAPI_default());
chart_options.insertStyleElement = (insertStyleElement_default());

var chart_update = injectStylesIntoStyleTag_default()(chart/* default */.Z, chart_options);




       /* harmony default export */ const StatsChart_chart = (chart/* default */.Z && chart/* default.locals */.Z.locals ? chart/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/Chart.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */







const DAYS_OF_WEEK = [reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_mon'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_tue'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_wed'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_thu'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_fri'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_sat'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_sun')];
const dayOfWeekAsString = dayIndex => {
  return DAYS_OF_WEEK[dayIndex];
};
const MONTHS_OF_YEAR = [reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_jan'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_feb'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_mar'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_apr'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_may'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_jun'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_jul'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_aug'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_sep'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_oct'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_nov'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_dec')];
const monthsAsString = monthIndex => {
  return MONTHS_OF_YEAR[monthIndex];
};
const selectRequestsStatsData = (stats, range, type) => {
  const result = [];
  switch (range) {
    case TIME_RANGES.DAY:
      stats.today.forEach(d => {
        result.push(d[type]);
      });
      break;
    case TIME_RANGES.WEEK:
      stats.lastWeek.forEach(d => {
        result.push(d[type]);
      });
      break;
    case TIME_RANGES.MONTH:
      stats.lastMonth.forEach(d => {
        result.push(d[type]);
      });
      break;
    case TIME_RANGES.YEAR:
      stats.lastYear.forEach(d => {
        result.push(d[type]);
      });
      break;
    default:
      break;
  }
  return result.map(val => val === undefined ? 0 : val);
};
const getCategoriesLines = (statsData, range) => {
  const now = new Date();
  const day = now.getDay();
  const month = now.getMonth();
  const lastDayOfPrevMonth = new Date(now.getFullYear(), now.getMonth(), 0).getDate();
  let categories = [];
  const lines = [];
  const HOURS_PER_DAY = 24;
  const DAYS_PER_WEEK = 7;
  const DAYS_PER_MONTH = 30;
  const MONTHS_PER_YEAR = 12;
  switch (range) {
    case TIME_RANGES.DAY:
      for (let i = 1; i <= HOURS_PER_DAY; i += 1) {
        if (i % 3 === 0) {
          const hour = (i + now.getHours()) % HOURS_PER_DAY;
          categories.push(hour.toString());
          lines.push({
            value: i - 1
          });
        } else {
          categories.push('');
        }
      }
      break;
    case TIME_RANGES.WEEK:
      for (let i = 0; i < DAYS_PER_WEEK; i += 1) {
        categories.push(dayOfWeekAsString((day + i) % DAYS_PER_WEEK));
        lines.push({
          value: i
        });
      }
      break;
    case TIME_RANGES.MONTH:
      for (let i = 0; i <= DAYS_PER_MONTH; i += 1) {
        if (i % 3 === 0) {
          const c = (i + now.getDate()) % lastDayOfPrevMonth + 1;
          categories.push(c.toString());
          lines.push({
            value: i
          });
        } else {
          categories.push('');
        }
      }
      break;
    case TIME_RANGES.YEAR:
      for (let i = 0; i <= MONTHS_PER_YEAR; i += 1) {
        categories.push(monthsAsString((month + i) % MONTHS_PER_YEAR));
        categories = categories.slice(-statsData.length);
        lines.push({
          value: i
        });
      }
      break;
    default:
      throw new Error(`Wrong range type: ${range}`);
  }
  return {
    categories,
    lines
  };
};
const Chart = ({
  stats,
  range,
  type
}) => {
  (0,react.useEffect)(() => {
    const statsData = selectRequestsStatsData(stats, range, type);
    const categoriesLines = getCategoriesLines(statsData, range);
    const {
      categories
    } = categoriesLines;
    const {
      lines
    } = categoriesLines;
    const grad1 = '<linearGradient id="grad1" x1="50%" y1="0%" x2="50%" y2="100%">' + '  <stop offset="0%" style="stop-color:#73BE66;stop-opacity:1" />' + '  <stop offset="23%" style="stop-color:#6DBE85;stop-opacity:1" />' + '  <stop offset="100%" style="stop-color:#65BDA8;stop-opacity:1" />' + '</linearGradient>';
    c3_default().generate({
      bindTo: '#chart',
      size: {
        height: 230
      },
      data: {
        columns: [['data1'].concat(statsData)],
        types: {
          data1: 'area-spline'
        },
        colors: {
          data1: 'url(#grad1)'
        }
      },
      padding: {
        left: 15,
        right: 15
      },
      axis: {
        x: {
          show: true,
          type: 'category',
          categories,
          tick: {
            outer: false,
            multiline: false
          }
        },
        y: {
          show: false
        }
      },
      legend: {
        show: false
      },
      grid: {
        lines: {
          front: false
        },
        x: {
          lines
        },
        focus: {
          show: true
        }
      },
      spline: {
        interpolation: {
          type: 'basis'
        }
      },
      point: {
        show: false
      },
      tooltip: {
        position(data, width, height, element) {
          const chart = document.querySelector('#chart');
          const elementRect = element.getBoundingClientRect();
          const elementCenterPosition = elementRect.left + elementRect.width / 2;
          const tooltipHalfWidth = chart.querySelector('.chart__tooltip').clientWidth / 2;
          const tooltipLeft = elementCenterPosition - tooltipHalfWidth;
          // eslint-disable-next-line no-undef
          const top = d3.mouse(element)[1] - 50;
          return {
            top,
            left: tooltipLeft
          };
        },
        contents(d) {
          const [{
            value
          }] = d;
          return `<div id="tooltip" class="chart__tooltip">${value}</div>`;
        }
      },
      oninit() {
        // eslint-disable-next-line react/no-this-in-sfc
        this.svg[0][0].getElementsByTagName('defs')[0].innerHTML += grad1;
      }
    });
  }, [range, type, stats]);
  return /*#__PURE__*/react.createElement("div", {
    className: "chart",
    id: "chart"
  });
};
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Stats/StatsChart/stats-chart.pcss
var stats_chart = __webpack_require__(95191);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/stats-chart.pcss

      
      
      
      
      
      
      
      
      

var stats_chart_options = {};

stats_chart_options.styleTagTransform = (styleTagTransform_default());
stats_chart_options.setAttributes = (setAttributesWithoutAttributes_default());

      stats_chart_options.insert = insertBySelector_default().bind(null, "head");
    
stats_chart_options.domAPI = (styleDomAPI_default());
stats_chart_options.insertStyleElement = (insertStyleElement_default());

var stats_chart_update = injectStylesIntoStyleTag_default()(stats_chart/* default */.Z, stats_chart_options);




       /* harmony default export */ const StatsChart_stats_chart = (stats_chart/* default */.Z && stats_chart/* default.locals */.Z.locals ? stats_chart/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/StatsChart.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */







const StatsChart = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const {
    stats
  } = store;
  if (!stats) {
    return null;
  }
  return /*#__PURE__*/react.createElement("div", {
    className: "stats-chart"
  }, /*#__PURE__*/react.createElement(Filters, null), /*#__PURE__*/react.createElement(Chart, {
    stats: stats,
    range: store.selectedTimeRange,
    type: store.selectedBlockedType
  }));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/MainContainer/main-container.pcss
var main_container = __webpack_require__(20291);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/MainContainer/main-container.pcss

      
      
      
      
      
      
      
      
      

var main_container_options = {};

main_container_options.styleTagTransform = (styleTagTransform_default());
main_container_options.setAttributes = (setAttributesWithoutAttributes_default());

      main_container_options.insert = insertBySelector_default().bind(null, "head");
    
main_container_options.domAPI = (styleDomAPI_default());
main_container_options.insertStyleElement = (insertStyleElement_default());

var main_container_update = injectStylesIntoStyleTag_default()(main_container/* default */.Z, main_container_options);




       /* harmony default export */ const MainContainer_main_container = (main_container/* default */.Z && main_container/* default.locals */.Z.locals ? main_container/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/MainContainer/MainContainer.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */








const MainContainer = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const contentMap = {
    [VIEW_STATES.ACTIONS]: Main,
    [VIEW_STATES.STATS]: StatsChart
  };
  const Content = contentMap[store.viewState];
  return /*#__PURE__*/react.createElement("div", {
    className: "main-container"
  }, /*#__PURE__*/react.createElement(Content, null));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/MainContainer/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/PromoNotification/promo-notification.pcss
var promo_notification = __webpack_require__(60384);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/PromoNotification/promo-notification.pcss

      
      
      
      
      
      
      
      
      

var promo_notification_options = {};

promo_notification_options.styleTagTransform = (styleTagTransform_default());
promo_notification_options.setAttributes = (setAttributesWithoutAttributes_default());

      promo_notification_options.insert = insertBySelector_default().bind(null, "head");
    
promo_notification_options.domAPI = (styleDomAPI_default());
promo_notification_options.insertStyleElement = (insertStyleElement_default());

var promo_notification_update = injectStylesIntoStyleTag_default()(promo_notification/* default */.Z, promo_notification_options);




       /* harmony default export */ const PromoNotification_promo_notification = (promo_notification/* default */.Z && promo_notification/* default.locals */.Z.locals ? promo_notification/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/PromoNotification/PromoNotification.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */








const PromoNotification = (0,mobxreact_esm/* observer */.Pi)(() => {
  const {
    promoNotification,
    closePromoNotification,
    openPromoNotificationUrl
  } = (0,react.useContext)(popupStore);
  const [notificationOnClose, setNotificationOnClose] = (0,react.useState)(false);

  // schedule notification removal
  (0,react.useEffect)(() => {
    if (promoNotification) {
      messenger/* messenger.sendMessage */.d.sendMessage(messages/* MessageType.SetNotificationViewed */.Cs.SetNotificationViewed, {
        withDelay: true
      });
    }
  }, [promoNotification]);
  if (!promoNotification) {
    return null;
  }
  const closeTimeoutMs = 300;
  const handleNotificationClose = e => {
    setNotificationOnClose(true);
    setTimeout(() => {
      e.preventDefault();
      closePromoNotification();
    }, closeTimeoutMs);
  };
  const handleNotificationClick = e => {
    e.preventDefault();
    openPromoNotificationUrl();
  };
  const {
    title,
    btn
  } = promoNotification.text;
  const notificationClassnames = classnames_default()('promo-notification', {
    'promo-notification--close': notificationOnClose
  });
  return /*#__PURE__*/react.createElement("div", {
    className: notificationClassnames
  }, /*#__PURE__*/react.createElement("button", {
    "aria-label": "close",
    type: "button",
    className: "promo-notification__close",
    onClick: handleNotificationClose
  }, /*#__PURE__*/react.createElement("svg", {
    className: "icon icon--button"
  }, /*#__PURE__*/react.createElement("use", {
    xlinkHref: "#cross-gray"
  }))), /*#__PURE__*/react.createElement("div", {
    className: "promo-notification__content"
  }, /*#__PURE__*/react.createElement("div", {
    className: "promo-notification__title"
  }, title), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: "promo-notification__btn",
    onClick: handleNotificationClick
  }, btn)));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/PromoNotification/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// EXTERNAL MODULE: ./Extension/src/pages/common/hooks/useAppearanceTheme.js
var useAppearanceTheme = __webpack_require__(72730);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/styles/main.pcss
var styles_main = __webpack_require__(65201);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/styles/main.pcss

      
      
      
      
      
      
      
      
      

var styles_main_options = {};

styles_main_options.styleTagTransform = (styleTagTransform_default());
styles_main_options.setAttributes = (setAttributesWithoutAttributes_default());

      styles_main_options.insert = insertBySelector_default().bind(null, "head");
    
styles_main_options.domAPI = (styleDomAPI_default());
styles_main_options.insertStyleElement = (insertStyleElement_default());

var styles_main_update = injectStylesIntoStyleTag_default()(styles_main/* default */.Z, styles_main_options);




       /* harmony default export */ const popup_styles_main = (styles_main/* default */.Z && styles_main/* default.locals */.Z.locals ? styles_main/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Popup/popup.pcss
var popup = __webpack_require__(12845);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Popup/popup.pcss

      
      
      
      
      
      
      
      
      

var popup_options = {};

popup_options.styleTagTransform = (styleTagTransform_default());
popup_options.setAttributes = (setAttributesWithoutAttributes_default());

      popup_options.insert = insertBySelector_default().bind(null, "head");
    
popup_options.domAPI = (styleDomAPI_default());
popup_options.insertStyleElement = (insertStyleElement_default());

var popup_update = injectStylesIntoStyleTag_default()(popup/* default */.Z, popup_options);




       /* harmony default export */ const Popup_popup = (popup/* default */.Z && popup/* default.locals */.Z.locals ? popup/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Popup/Popup.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */














const Popup = (0,mobxreact_esm/* observer */.Pi)(() => {
  const {
    appearanceTheme,
    getPopupData,
    updateBlockedStats
  } = (0,react.useContext)(popupStore);
  (0,useAppearanceTheme/* useAppearanceTheme */.D)(appearanceTheme);

  // retrieve init data
  (0,react.useEffect)(() => {
    (async () => {
      await getPopupData();
    })();
  }, [getPopupData]);

  // subscribe to stats change
  (0,react.useEffect)(() => {
    const messageHandler = message => {
      switch (message.type) {
        case 'updateTotalBlocked':
          {
            updateBlockedStats(message.data);
            break;
          }
        case 'appInitialized':
          {
            getPopupData();
            break;
          }
        default:
          break;
      }
    };
    messenger/* messenger.onMessage.addListener */.d.onMessage.addListener(messageHandler);
    return () => {
      messenger/* messenger.onMessage.removeListener */.d.onMessage.removeListener(messageHandler);
    };
  }, [updateBlockedStats, getPopupData]);
  return /*#__PURE__*/react.createElement("div", {
    className: "popup"
  }, /*#__PURE__*/react.createElement(Icons, null), /*#__PURE__*/react.createElement(Header, null), /*#__PURE__*/react.createElement(MainContainer, null), /*#__PURE__*/react.createElement(Tabs, null), /*#__PURE__*/react.createElement(Footer, null), /*#__PURE__*/react.createElement(PromoNotification, null));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Popup/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


;// CONCATENATED MODULE: ./Extension/src/pages/popup/index.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */





const popupPage = {
  init: () => {
    document.documentElement.lang = i18n/* i18n.getUILanguage */.a.getUILanguage();
    react_dom.render( /*#__PURE__*/react.createElement(Popup, null), document.getElementById('root'));
  }
};
;// CONCATENATED MODULE: ./Extension/pages/popup/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


popupPage.init();

/***/ }),

/***/ 51699:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Zi": () => (/* reexport */ AllowlistOption),
  "A0": () => (/* reexport */ ExtensionSpecificSettingsOption),
  "_q": () => (/* reexport */ FiltersOption),
  "bf": () => (/* reexport */ GeneralSettingsOption),
  "Rv": () => (/* reexport */ PROTOCOL_VERSION),
  "_p": () => (/* reexport */ RootOption),
  "kE": () => (/* reexport */ SchemaPreprocessor),
  "qY": () => (/* reexport */ SettingOption),
  "Fq": () => (/* reexport */ StealthOption),
  "qf": () => (/* reexport */ UserFilterOption),
  "WD": () => (/* reexport */ configValidator),
  "Cc": () => (/* reexport */ customFilterMetadataStorageDataValidator),
  "_F": () => (/* reexport */ filterStateStorageDataValidator),
  "Pr": () => (/* reexport */ filterVersionStorageDataValidator),
  "rs": () => (/* reexport */ groupStateStorageDataValidator),
  "dj": () => (/* reexport */ hitStatsStorageDataValidator),
  "mj": () => (/* reexport */ i18nMetadataValidator),
  "h0": () => (/* reexport */ localScriptRulesValidator),
  "Qy": () => (/* reexport */ metadataValidator),
  "hf": () => (/* reexport */ notificationTextRecordValidator),
  "er": () => (/* reexport */ pageStatsValidator),
  "_": () => (/* reexport */ safebrowsingStorageDataValidator),
  "hN": () => (/* reexport */ settingsValidator)
});

// UNUSED EXPORTS: CustomFilterOption, allowlistValidator, baseMetadataValidator, customFilterMetadataValidator, customFiltersConfigValidator, extensionSpecificSettingsConfigValidator, filterStateDataValidator, filterVersionDataValidator, filtersConfigValidator, filtersI18nRecordValidator, generalSettingsConfigValidator, groupI18nMetadataValidator, groupMetadataValidator, groupStateDataValidator, groupsI18nRecordValidator, hitStatsValidator, pageStatsDataItemValidator, pageStatsDataValidator, regularFilterI18nMetadataValidator, regularFilterMetadataValidator, safebrowsingCacheDataValidator, stealthConfigValidator, tagI18nMetadataValidator, tagMetadataValidator, tagsI18nRecordValidator, trustedDomainDataValidator, userFilterValidator

// EXTERNAL MODULE: ./node_modules/zod/lib/index.mjs
var lib = __webpack_require__(1604);
// EXTERNAL MODULE: ./Extension/src/common/constants.ts
var constants = __webpack_require__(21059);
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/general-settings.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



// General settings configuration

let GeneralSettingsOption = /*#__PURE__*/function (GeneralSettingsOption) {
  GeneralSettingsOption["AppLanguage"] = "app-language";
  GeneralSettingsOption["AllowAcceptableAds"] = "allow-acceptable-ads";
  GeneralSettingsOption["ShowBlockedAdsCount"] = "show-blocked-ads-count";
  GeneralSettingsOption["AutodetectFilters"] = "autodetect-filters";
  GeneralSettingsOption["SafebrowsingEnabled"] = "safebrowsing-enabled";
  GeneralSettingsOption["FiltersUpdatePeriod"] = "filters-update-period";
  GeneralSettingsOption["AppearanceTheme"] = "appearance-theme";
  return GeneralSettingsOption;
}({});
const generalSettingsConfigValidator = lib/* default.object */.ZP.object({
  /**
   * The two-letter code of the application language that is used to display
   * the translations in the user interface.
   */
  [GeneralSettingsOption.AppLanguage]: lib/* default.string */.ZP.string().optional(),
  /**
   * This option allows for "Search advertising and self-promotion":
   * advertising that the user sees among search results when using online
   * search engines, as well as a kind of "first-party" advertising on sites
   * that promote that particular site or closely related sites, social
   * networks, and so on.
   *
   * @see https://adguard.com/kb/general/ad-filtering/search-ads/
   */
  [GeneralSettingsOption.AllowAcceptableAds]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Whether or not to show the number of blocked ads on the extension icon.
   */
  [GeneralSettingsOption.ShowBlockedAdsCount]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Should the extension automatically enable a language filter that matches
   * the top-level domain.
   */
  [GeneralSettingsOption.AutodetectFilters]: lib/* default.boolean */.ZP.boolean(),
  /**
   * This setting enables module that protects against malicious and phishing
   * sites by checking the url hash in a database of malicious or phishing
   * sites.
   *
   * @see https://adguard.com/kb/general/browsing-security/
   */
  [GeneralSettingsOption.SafebrowsingEnabled]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Time interval between filter updates.
   */
  [GeneralSettingsOption.FiltersUpdatePeriod]: lib/* default.nativeEnum */.ZP.nativeEnum(constants/* FiltersUpdateTime */.OL),
  // TODO: Should be not optional?
  /**
   * Appearance theme of the application.
   */
  [GeneralSettingsOption.AppearanceTheme]: lib/* default.enum */.ZP["enum"](['system', 'dark', 'light']).optional()
});

/**
 * Contains general application settings: appearance theme, language, time
 * to check for updates to filters and some filtering options.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/extension-specific-settings.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


/**
 * Extension specific settings configuration.
 */
let ExtensionSpecificSettingsOption = /*#__PURE__*/function (ExtensionSpecificSettingsOption) {
  ExtensionSpecificSettingsOption["UseOptimizedFilters"] = "use-optimized-filters";
  ExtensionSpecificSettingsOption["CollectHitsCount"] = "collect-hits-count";
  ExtensionSpecificSettingsOption["ShowContextMenu"] = "show-context-menu";
  ExtensionSpecificSettingsOption["ShowInfoAboutAdguard"] = "show-info-about-adguard";
  ExtensionSpecificSettingsOption["ShowAppUpdatedInfo"] = "show-app-updated-info";
  ExtensionSpecificSettingsOption["HideRateAdguard"] = "hide-rate-adguard";
  ExtensionSpecificSettingsOption["UserRulesEditorWrap"] = "user-rules-editor-wrap";
  return ExtensionSpecificSettingsOption;
}({});
const extensionSpecificSettingsConfigValidator = lib/* default.object */.ZP.object({
  /**
   * If the flag is set to true, the application uses the optimized versions
   * of filter lists — the lists which contain needed and popular rules.
   *
   * @see https://adguard.com/kb/general/ad-filtering/create-own-filters/#not_optimized-hint for details.
   */
  [ExtensionSpecificSettingsOption.UseOptimizedFilters]: lib/* default.boolean */.ZP.boolean(),
  /**
   * If the flag is set to true, the application will send anonymous
   * statistics about the use of ad filters, which will help us to improve and
   * optimize them: for example, to remove obsolete rules in order to reduce
   * the time it takes to apply the rules.
   *
   * @see https://adguard.com/kb/general/ad-filtering/tracking-filter-statistics/ for clarification.
   */
  [ExtensionSpecificSettingsOption.CollectHitsCount]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Whether or not to add filtering options (add domain to allowlist,
   * enable or disable filtering) to the context menu (available by
   * right-clicking) in the browser.
   */
  [ExtensionSpecificSettingsOption.ShowContextMenu]: lib/* default.boolean */.ZP.boolean(),
  /**
   * If set to true - a banner will be displayed in the extensions
   * settings with information about AdGuard's system ad blocking app.
   */
  [ExtensionSpecificSettingsOption.ShowInfoAboutAdguard]: lib/* default.boolean */.ZP.boolean(),
  /**
   * If set to true - the extension will show app update notifications.
   */
  [ExtensionSpecificSettingsOption.ShowAppUpdatedInfo]: lib/* default.boolean */.ZP.boolean(),
  /**
   * If set to true - the extension will hide the block about requesting
   * feedback with rating in the extension settings.
   */
  [ExtensionSpecificSettingsOption.HideRateAdguard]: lib/* default.boolean */.ZP.boolean(),
  /**
   * If set to true - the extension will enable word wrap in the user rules
   * editor to display a window without horizontal scroll bars.
   */
  [ExtensionSpecificSettingsOption.UserRulesEditorWrap]: lib/* default.boolean */.ZP.boolean()
});

/**
 * Contains some additional extension settings and UI settings.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/custom-filters.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


/**
 * Keys of options for custom filter in the configuration.
 */
let CustomFilterOption = /*#__PURE__*/function (CustomFilterOption) {
  CustomFilterOption["CustomUrl"] = "customUrl";
  CustomFilterOption["Title"] = "title";
  CustomFilterOption["Trusted"] = "trusted";
  CustomFilterOption["Enabled"] = "enabled";
  return CustomFilterOption;
}({});
const customFiltersConfigValidator = lib/* default.array */.ZP.array(lib/* default.object */.ZP.object({
  /**
   * The filter subscription URL from which the application retrieved
   * the rules when adding the filter and should retrieve the rules when
   * updating it.
   */
  [CustomFilterOption.CustomUrl]: lib/* default.string */.ZP.string(),
  /**
   * Name of the filter.
   */
  [CustomFilterOption.Title]: lib/* default.string */.ZP.string().optional(),
  /**
   * If this filter is not trusted - tsurlfilter will not execute JS rules
   * and will not apply header removal rules from this filter.
   * Otherwise, no restrictions.
   *
   * @see https://adguard.com/kb/general/ad-filtering/create-own-filters/#trusted-filters.
   */
  [CustomFilterOption.Trusted]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Is filter enabled or not.
   */
  [CustomFilterOption.Enabled]: lib/* default.boolean */.ZP.boolean()
}));

/**
 * Describes custom filter information. This type has several of the same
 * fields as {@link CustomFilterMetadata} - this is because this type is only
 * used to import and export custom filters, so we only need a small set of
 * custom filter settings.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/user-filter.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// User filter configuration

let UserFilterOption = /*#__PURE__*/function (UserFilterOption) {
  UserFilterOption["Rules"] = "rules";
  UserFilterOption["DisabledRules"] = "disabled-rules";
  UserFilterOption["Enabled"] = "enabled";
  return UserFilterOption;
}({});
const userFilterValidator = lib/* default.object */.ZP.object({
  /**
   * User rules concatenated with '\n'.
   */
  [UserFilterOption.Rules]: lib/* default.string */.ZP.string(),
  /**
   * In previous versions, rules could be marked as disabled.
   * Currently not in use.
   *
   * @deprecated
   */
  [UserFilterOption.DisabledRules]: lib/* default.string */.ZP.string(),
  /**
   * Is enabled user rules or not.
   */
  [UserFilterOption.Enabled]: lib/* default.boolean */.ZP.boolean().optional()
});

/**
 * Contains the user rules filter and its status: enabled or disabled.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/allowlist.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// Allowlist configuration

let AllowlistOption = /*#__PURE__*/function (AllowlistOption) {
  AllowlistOption["Inverted"] = "inverted";
  AllowlistOption["Domains"] = "domains";
  AllowlistOption["InvertedDomains"] = "inverted-domains";
  AllowlistOption["Enabled"] = "enabled";
  return AllowlistOption;
}({});
const allowlistValidator = lib/* default.object */.ZP.object({
  /**
   * If `AllowlistOption.Inverted` === false (the default state),
   * the extension will use this list of domains to disable ad blocking on
   * them. In other words, the extension will apply ad blocking everywhere,
   * EXCEPT the domains on this list.
   */
  [AllowlistOption.Domains]: lib/* default.array */.ZP.array(lib/* default.string */.ZP.string()),
  /**
   * If `AllowlistOption.Inverted` === true, the extension will use this list
   * to disable ad blocking for all sites but not these sites. In other words,
   * the extension will work ONLY on domains from this list.
   */
  [AllowlistOption.InvertedDomains]: lib/* default.array */.ZP.array(lib/* default.string */.ZP.string()),
  /**
   * Is allowlist list enabled or not.
   */
  [AllowlistOption.Enabled]: lib/* default.boolean */.ZP.boolean().optional(),
  /**
   * If this flag is true, the application will work ONLY with domains from
   * the 'domains' list, otherwise it will work everywhere EXCLUDING domains
   * from the list.
   */
  [AllowlistOption.Inverted]: lib/* default.boolean */.ZP.boolean().optional()
});

/**
 * Describes a special list of domains on which the extension should work or
 * should exclude them from filtering.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/filters.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */





// AdGuard filters configuration
let FiltersOption = /*#__PURE__*/function (FiltersOption) {
  FiltersOption["EnabledGroups"] = "enabled-groups";
  FiltersOption["EnabledFilters"] = "enabled-filters";
  FiltersOption["CustomFilters"] = "custom-filters";
  FiltersOption["UserFilter"] = "user-filter";
  FiltersOption["Allowlist"] = "allowlist";
  return FiltersOption;
}({});
const filtersConfigValidator = lib/* default.object */.ZP.object({
  /**
   * List of IDs of enabled filter groups.
   */
  [FiltersOption.EnabledGroups]: lib/* default.array */.ZP.array(lib/* default.number */.ZP.number().int()),
  /**
   * List of IDs of enabled filters.
   */
  [FiltersOption.EnabledFilters]: lib/* default.array */.ZP.array(lib/* default.number */.ZP.number().int()),
  /**
   * List of objects with information about custom filters.
   */
  [FiltersOption.CustomFilters]: customFiltersConfigValidator,
  /**
   * An object with concatenated user rules and their status - enabled or not.
   */
  [FiltersOption.UserFilter]: userFilterValidator,
  /**
   * Object with the allowlist domains, the inverted allowlist domains and
   * which one applies.
   */
  [FiltersOption.Allowlist]: allowlistValidator
});

/**
 * Contains all information about filters: regular, custom, user filter and
 * allowlist.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/stealth.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


// Stealth configuration

let StealthOption = /*#__PURE__*/function (StealthOption) {
  StealthOption["DisableStealthMode"] = "stealth-disable-stealth-mode";
  StealthOption["HideReferrer"] = "stealth-hide-referrer";
  StealthOption["HideSearchQueries"] = "stealth-hide-search-queries";
  StealthOption["SendDoNotTrack"] = "stealth-send-do-not-track";
  StealthOption["BlockWebRTC"] = "stealth-block-webrtc";
  StealthOption["RemoveXClientData"] = "stealth-remove-x-client";
  StealthOption["SelfDestructThirdPartyCookies"] = "stealth-block-third-party-cookies";
  StealthOption["SelfDestructThirdPartyCookiesTime"] = "stealth-block-third-party-cookies-time";
  StealthOption["SelfDestructFirstPartyCookies"] = "stealth-block-first-party-cookies";
  StealthOption["SelfDestructFirstPartyCookiesTime"] = "stealth-block-first-party-cookies-time";
  StealthOption["BlockKnownTrackers"] = "block-known-trackers";
  StealthOption["StripTrackingParams"] = "strip-tracking-parameters";
  return StealthOption;
}({});
const stealthConfigValidator = lib/* default.object */.ZP.object({
  /**
   * Whether Stealth mode is disabled or not.
   */
  [StealthOption.DisableStealthMode]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Should the application hide the origin referrer in third-party requests
   * by replacing the referrer url with the url from the requested url.
   */
  [StealthOption.HideReferrer]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Should the application hide the original referrer from the search page
   * containing the search query in third-party queries, replacing
   * the referrer url with the url from the requested url.
   */
  [StealthOption.HideSearchQueries]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Includes HTTP headers 'DNT' and 'Sec-GPC' in all requests.
   *
   * @see https://www.wikiwand.com/en/Do_Not_Track
   * @see https://globalprivacycontrol.org
   */
  [StealthOption.SendDoNotTrack]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Blocks the possibility of leaking your IP address through WebRTC, even if
   * you use a proxy server or VPN.
   */
  [StealthOption.BlockWebRTC]: lib/* default.boolean */.ZP.boolean(),
  /**
   * For Google Chrome, it removes the 'X-Client-Data' header from
   * the requests, which contains information about the browser version
   * and modifications.
   */
  [StealthOption.RemoveXClientData]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Whether or not the application should set a fixed lifetime from
   * `StealthOption.SelfDestructThirdPartyCookiesTime` for third-party
   * cookies.
   */
  [StealthOption.SelfDestructThirdPartyCookies]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Time in milliseconds to delete third-party cookies.
   */
  [StealthOption.SelfDestructThirdPartyCookiesTime]: lib/* default.number */.ZP.number(),
  /**
   * Whether or not the application should set a fixed lifetime from
   * `StealthOption.SelfDestructFirstPartyCookiesTime` for first-party
   * cookies.
   */
  [StealthOption.SelfDestructFirstPartyCookies]: lib/* default.boolean */.ZP.boolean(),
  /**
   * Time in milliseconds to delete first-party cookies.
   */
  [StealthOption.SelfDestructFirstPartyCookiesTime]: lib/* default.number */.ZP.number(),
  /**
   * If true application will enable AdGuard Tracking Protection filter
   * {@link AntiBannerFiltersId.TrackingFilterId}.
   */
  [StealthOption.BlockKnownTrackers]: lib/* default.boolean */.ZP.boolean().optional(),
  /**
   * If true application will enable AdGuard URL Tracking filter
   * {@link AntiBannerFiltersId.UrlTrackingFilterId}.
   */
  [StealthOption.StripTrackingParams]: lib/* default.boolean */.ZP.boolean()
});

/**
 * Contains various secure browsing settings: cookie deletion time, privacy
 * headers, referrer hiding, and the ability to enable additional filters.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/main.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */






// Root configuration

const PROTOCOL_VERSION = '2.0';
let RootOption = /*#__PURE__*/function (RootOption) {
  RootOption["ProtocolVersion"] = "protocol-version";
  RootOption["GeneralSettings"] = "general-settings";
  RootOption["ExtensionSpecificSettings"] = "extension-specific-settings";
  RootOption["Filters"] = "filters";
  RootOption["Stealth"] = "stealth";
  return RootOption;
}({});
const configValidator = lib/* default.object */.ZP.object({
  /**
   * Describes the current version of the object. This is necessary to check
   * if we need to migrate from the old settings.
   */
  [RootOption.ProtocolVersion]: lib/* default.literal */.ZP.literal(PROTOCOL_VERSION),
  /**
   * Contains general application settings: appearance theme, language, time
   * to check for updates to filters and some filtering options.
   */
  [RootOption.GeneralSettings]: generalSettingsConfigValidator,
  /**
   * Contains some additional extension settings and UI settings.
   */
  [RootOption.ExtensionSpecificSettings]: extensionSpecificSettingsConfigValidator,
  /**
   * Contains all information about filters: regular, custom, user filter and
   * allowlist.
   */
  [RootOption.Filters]: filtersConfigValidator,
  /**
   * Contains various secure browsing settings: cookie deletion time, privacy
   * headers, referrer hiding, and the ability to enable additional filters.
   */
  [RootOption.Stealth]: stealthConfigValidator.optional()
});

/**
 * This is the root object for exported/imported settings, which contains all
 * the information needed to start the application.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/configuration/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */








;// CONCATENATED MODULE: ./Extension/src/background/schema/preprocessor.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


/**
 * In some cases we want to preprocessing input before validation
 * For example, cast loaded filter metadata item id field from string to number before validation:
 *
 * { filterId: "1", ... } -> { filterId: 1, ... }.
 */
class SchemaPreprocessor {
  /**
   * If {@link value} is string, cast it to number, else returns original value.
   *
   * @param value Preprocessed value.
   * @returns Number value, if string passed, else returns original value.
   */
  static castStringToNumber(value) {
    if (typeof value === 'string') {
      return Number(JSON.parse(value));
    }
    return value;
  }

  /**
   * If {@link value} is string, cast it to boolean, else returns original value.
   *
   * @param value Preprocessed value.
   * @returns Boolean value, if string passed, else returns original value.
   */
  static castStringToBoolean(value) {
    if (typeof value === 'string') {
      try {
        return Boolean(JSON.parse(value));
      } catch (e) {
        return value;
      }
    }
    return value;
  }
}
/**
 * Runtime {@link zod} validator with {@link SchemaPreprocessor.castStringToBoolean} preprocessor.
 */
SchemaPreprocessor.booleanValidator = lib/* default.preprocess */.ZP.preprocess(SchemaPreprocessor.castStringToBoolean, lib/* default.boolean */.ZP.boolean());
/**
 * Runtime {@link zod} validator with {@link SchemaPreprocessor.castStringToNumber} preprocessor.
 */
SchemaPreprocessor.numberValidator = lib/* default.preprocess */.ZP.preprocess(SchemaPreprocessor.castStringToNumber, lib/* default.number */.ZP.number());
;// CONCATENATED MODULE: ./Extension/src/background/schema/settings/main.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


let SettingOption = /*#__PURE__*/function (SettingOption) {
  SettingOption["AppearanceTheme"] = "appearance-theme";
  SettingOption["DisableShowPageStats"] = "disable-show-page-statistic";
  SettingOption["DisableDetectFilters"] = "detect-filters-disabled";
  SettingOption["DisableSafebrowsing"] = "safebrowsing-disabled";
  SettingOption["FiltersUpdatePeriod"] = "filters-update-period";
  SettingOption["UseOptimizedFilters"] = "use-optimized-filters";
  SettingOption["DisableCollectHits"] = "hits-count-disabled";
  SettingOption["DisableShowContextMenu"] = "context-menu-disabled";
  SettingOption["DisableShowAdguardPromoInfo"] = "show-info-about-adguard-disabled";
  SettingOption["DisableShowAppUpdatedNotification"] = "show-app-updated-disabled";
  SettingOption["HideRateBlock"] = "hide-rate-block";
  SettingOption["UserRulesEditorWrap"] = "user-rules-editor-wrap";
  SettingOption["AllowlistDomains"] = "allowlist-domains";
  SettingOption["InvertedAllowlistDomains"] = "block-list-domains";
  SettingOption["AllowlistEnabled"] = "allowlist-enabled";
  SettingOption["DefaultAllowlistMode"] = "default-allowlist-mode";
  SettingOption["DisableStealthMode"] = "stealth-disable-stealth-mode";
  SettingOption["HideReferrer"] = "stealth-hide-referrer";
  SettingOption["HideSearchQueries"] = "stealth-hide-search-queries";
  SettingOption["SendDoNotTrack"] = "stealth-send-do-not-track";
  SettingOption["RemoveXClientData"] = "stealth-remove-x-client";
  SettingOption["BlockWebRTC"] = "stealth-block-webrtc";
  SettingOption["SelfDestructThirdPartyCookies"] = "stealth-block-third-party-cookies";
  SettingOption["SelfDestructThirdPartyCookiesTime"] = "stealth-block-third-party-cookies-time";
  SettingOption["SelfDestructFirstPartyCookies"] = "stealth-block-first-party-cookies";
  SettingOption["SelfDestructFirstPartyCookiesTime"] = "stealth-block-first-party-cookies-time";
  SettingOption["FiltersState"] = "filters-state";
  SettingOption["FiltersVersion"] = "filters-version";
  SettingOption["GroupsState"] = "groups-state";
  SettingOption["UserFilterEnabled"] = "user-filter-enabled";
  SettingOption["Metadata"] = "filters-metadata";
  SettingOption["I18nMetadata"] = "filters-i18n-metadata";
  SettingOption["CustomFilters"] = "custom-filters";
  SettingOption["DisableFiltering"] = "adguard-disabled";
  return SettingOption;
}({});

// Setting options may be stringified, use preprocessors for correct type casting

const settingsValidator = lib/* default.object */.ZP.object({
  // ----- General settings section -----
  /**
   * See {@link GeneralSettingsConfig[GeneralSettingsOption.AppearanceTheme]}.
   */
  [SettingOption.AppearanceTheme]: lib/* default.enum */.ZP["enum"](['system', 'dark', 'light']),
  /**
   * See {@link GeneralSettingsConfig[GeneralSettingsOption.ShowBlockedAdsCount]}.
   */
  [SettingOption.DisableShowPageStats]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link GeneralSettingsConfig[GeneralSettingsOption.AutodetectFilters]}.
   */
  [SettingOption.DisableDetectFilters]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link GeneralSettingsConfig[GeneralSettingsOption.SafebrowsingEnabled]}.
   */
  [SettingOption.DisableSafebrowsing]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link GeneralSettingsConfig[GeneralSettingsOption.FiltersUpdatePeriod]}.
   */
  [SettingOption.FiltersUpdatePeriod]: SchemaPreprocessor.numberValidator,
  // ----- General settings section -----

  // ----- Extension specific settings section -----
  /**
   * See {@link ExtensionSpecificSettingsConfig[ExtensionSpecificSettingsOption.UseOptimizedFilters]}.
   */
  [SettingOption.UseOptimizedFilters]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link ExtensionSpecificSettingsConfig[ExtensionSpecificSettingsOption.CollectHitsCount]}.
   */
  [SettingOption.DisableCollectHits]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link ExtensionSpecificSettingsConfig[ExtensionSpecificSettingsOption.ShowContextMenu]}.
   */
  [SettingOption.DisableShowContextMenu]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link ExtensionSpecificSettingsConfig[ExtensionSpecificSettingsOption.ShowInfoAboutAdguard]}.
   */
  [SettingOption.DisableShowAdguardPromoInfo]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link ExtensionSpecificSettingsConfig[ExtensionSpecificSettingsOption.ShowAppUpdatedInfo]}.
   */
  [SettingOption.DisableShowAppUpdatedNotification]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link ExtensionSpecificSettingsConfig[ExtensionSpecificSettingsOption.HideRateAdguard]}.
   */
  [SettingOption.HideRateBlock]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link ExtensionSpecificSettingsConfig[ExtensionSpecificSettingsOption.UserRulesEditorWrap]}.
   */
  [SettingOption.UserRulesEditorWrap]: SchemaPreprocessor.booleanValidator,
  // ----- Extension specific settings section -----

  // ----- Allowlist section -----
  /**
   * See {@link AllowlistConfig[AllowlistOption.Domains]}.
   */
  [SettingOption.AllowlistDomains]: lib/* default.string */.ZP.string(),
  /**
   * See {@link AllowlistConfig[AllowlistOption.InvertedDomains]}.
   */
  [SettingOption.InvertedAllowlistDomains]: lib/* default.string */.ZP.string(),
  /**
   * See {@link AllowlistConfig[AllowlistOption.Enabled]}.
   */
  [SettingOption.AllowlistEnabled]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link AllowlistConfig[AllowlistOption.Inverted]}.
   */
  [SettingOption.DefaultAllowlistMode]: SchemaPreprocessor.booleanValidator,
  // ----- Allowlist section -----

  // ----- Stealth section -----
  /**
   * See {@link StealthConfig[StealthOption.DisableStealthMode]}.
   */
  [SettingOption.DisableStealthMode]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link StealthConfig[StealthOption.HideReferrer]}.
   */
  [SettingOption.HideReferrer]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link StealthConfig[StealthOption.HideSearchQueries]}.
   */
  [SettingOption.HideSearchQueries]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link StealthConfig[StealthOption.SendDoNotTrack]}.
   */
  [SettingOption.SendDoNotTrack]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link StealthConfig[StealthOption.BlockWebRTC]}.
   */
  [SettingOption.BlockWebRTC]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link StealthConfig[StealthOption.RemoveXClientData]}.
   */
  [SettingOption.RemoveXClientData]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link StealthConfig[StealthOption.SelfDestructThirdPartyCookies]}.
   */
  [SettingOption.SelfDestructThirdPartyCookies]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link StealthConfig[StealthOption.SelfDestructThirdPartyCookiesTime]}.
   */
  [SettingOption.SelfDestructThirdPartyCookiesTime]: lib/* default.number */.ZP.number(),
  /**
   * See {@link StealthConfig[StealthOption.SelfDestructFirstPartyCookies]}.
   */
  [SettingOption.SelfDestructFirstPartyCookies]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link StealthConfig[StealthOption.SelfDestructFirstPartyCookiesTime]}.
   */
  [SettingOption.SelfDestructFirstPartyCookiesTime]: lib/* default.number */.ZP.number(),
  // ----- Stealth section -----

  // ----- Statuses section -----
  /**
   * See {@link UserFilterConfig[UserFilterOption.Enabled]}.
   */
  [SettingOption.UserFilterEnabled]: SchemaPreprocessor.booleanValidator,
  /**
   * See {@link FilterStateStorageData}.
   */
  [SettingOption.FiltersState]: lib/* default.string */.ZP.string().optional(),
  /**
   * See {@link FilterVersionStorageData}.
   */
  [SettingOption.FiltersVersion]: lib/* default.string */.ZP.string().optional(),
  /**
   * See {@link GroupStateStorageData}.
   */
  [SettingOption.GroupsState]: lib/* default.string */.ZP.string().optional(),
  // ----- Statuses section -----

  // ----- Metadata section -----
  /**
   * See {@link Metadata}.
   */
  [SettingOption.Metadata]: lib/* default.string */.ZP.string().optional(),
  /**
   * See {@link I18nMetadata}.
   */
  [SettingOption.I18nMetadata]: lib/* default.string */.ZP.string().optional(),
  /**
   * See {@link CustomFilterMetadataStorageData}.
   */
  [SettingOption.CustomFilters]: lib/* default.string */.ZP.string().optional(),
  // ----- Metadata section -----

  /**
   * Is filtering enabled or not. Is needed for fast toggling filtering
   * without reload entire extension.
   */
  [SettingOption.DisableFiltering]: SchemaPreprocessor.booleanValidator
});

/**
 * Describes the root flat object with all the settings that are necessary for
 * the application to work and that are stored in the storage.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/settings/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

;// CONCATENATED MODULE: ./Extension/src/background/schema/metadata/filter.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const baseMetadataValidator = lib/* default.object */.ZP.object({
  /**
   * Description of the filter.
   */
  description: lib/* default.string */.ZP.string(),
  /**
   * Display number is used to arrange the filters in the layout.
   */
  displayNumber: lib/* default.number */.ZP.number(),
  /**
   * The time in milliseconds during which the filter content remains fresh
   * and does not need to be updated. Used to auto-renew filters if the user
   * has not selected a custom update period for filters.
   */
  expires: lib/* default.number */.ZP.number(),
  /**
   * Id of the filter.
   */
  filterId: lib/* default.number */.ZP.number(),
  /**
   * Id of the filter's group.
   */
  groupId: lib/* default.number */.ZP.number(),
  /**
   * URL address of the filter's homepage.
   */
  homepage: lib/* default.string */.ZP.string(),
  /**
   * Name of the filter.
   */
  name: lib/* default.string */.ZP.string(),
  /**
   * Filter tags are used to group filters by different characteristics:
   * language, target, platform, etc.
   */
  tags: lib/* default.number */.ZP.number().array(),
  /**
   * Version filter. Supports up to {@link Version.MAX_LENGTH} parts per
   * version.
   */
  version: lib/* default.string */.ZP.string()
});
const regularFilterMetadataValidator = baseMetadataValidator.merge(lib/* default.object */.ZP.object({
  /**
   * Two-letter language codes that are associated with the filter.
   */
  languages: lib/* default.string */.ZP.string().array(),
  /**
   * Timestamp of adding filters in MS.
   * String format, since these values are retrieved from the backend.
   */
  timeAdded: lib/* default.string */.ZP.string(),
  /**
   * When the filter was last updated in milliseconds since the start of
   * the UNIX epoch.
   * String format, since these values are retrieved from the backend.
   */
  timeUpdated: lib/* default.string */.ZP.string(),
  /**
   * The filter subscription URL from which the application retrieved
   * the rules when adding the filter and should retrieve the rules when
   * updating it.
   */
  subscriptionUrl: lib/* default.string */.ZP.string()
}));

/**
 * Filter metadata describes all the metadata (except its contents) of a filter
 * from {@link https://github.com/AdguardTeam/FiltersRegistry the AdGuard filter registry}
 * to work with it.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/metadata/tag.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const tagMetadataValidator = lib/* default.object */.ZP.object({
  /**
   * Id of the tag.
   */
  tagId: lib/* default.number */.ZP.number(),
  /**
   * Tag value, e.g., `lang:en`, `recommended`.
   */
  keyword: lib/* default.string */.ZP.string(),
  /**
   * Description of the tag.
   */
  description: lib/* default.string */.ZP.string().optional(),
  /**
   * Name of the tag.
   */
  name: lib/* default.string */.ZP.string().optional()
});

/**
 * Describes the tag's metadata: ID, name, keyword and display number.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/metadata/group.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const groupMetadataValidator = lib/* default.object */.ZP.object({
  /**
   * Display number is used to arrange the groups in the layout.
   */
  displayNumber: lib/* default.number */.ZP.number(),
  /**
   * Id of the group.
   */
  groupId: lib/* default.number */.ZP.number(),
  /**
   * Name of the group.
   */
  groupName: lib/* default.string */.ZP.string()
});

/**
 * Describes the group's metadata: ID, name and display number.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/metadata/metadata.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */




const metadataValidator = lib/* default.object */.ZP.object({
  /**
   * Array of {@link RegularFilterMetadata}.
   */
  filters: regularFilterMetadataValidator.array(),
  /**
   * Array of {@link GroupMetadata}.
   */
  groups: groupMetadataValidator.array(),
  /**
   * Array of {@link TagMetadata}.
   */
  tags: tagMetadataValidator.array()
});

/**
 * Describes the root object with all filters, groups and tags.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/metadata/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */




;// CONCATENATED MODULE: ./Extension/src/background/schema/i18n-metadata/filter.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const filterInfoValidator = lib/* default.object */.ZP.object({
  /**
   * Description of the filter.
   */
  description: lib/* default.string */.ZP.string(),
  /**
   * Name of the filter.
   */
  name: lib/* default.string */.ZP.string()
});
const regularFilterI18nMetadataValidator = lib/* default.record */.ZP.record(
/**
 * Two-letter language code.
 */
lib/* default.string */.ZP.string(), filterInfoValidator);

/**
 * Describes an object where the language codes are keys and the description and
 * filter name are values.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/i18n-metadata/tag.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const tagInfoValidator = lib/* default.object */.ZP.object({
  /**
   * Description of the tag.
   */
  description: lib/* default.string */.ZP.string(),
  /**
   * Name of the tag.
   */
  name: lib/* default.string */.ZP.string()
});
const tagI18nMetadataValidator = lib/* default.record */.ZP.record(
/**
 * Two-letter language code.
 */
lib/* default.string */.ZP.string(), tagInfoValidator);

/**
 * Describes an object where the language codes are keys and the description and
 * tag name are values.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/i18n-metadata/group.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const groupName = lib/* default.object */.ZP.object({
  /**
   * The name of the filter group.
   */
  name: lib/* default.string */.ZP.string()
});
const groupI18nMetadataValidator = lib/* default.record */.ZP.record(
/**
 * Two-letter language code.
 */
lib/* default.string */.ZP.string(), groupName);

/**
 * Describes an object in which the language codes are keys and the group name
 * is the value.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/i18n-metadata/i18n-metadata.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */





const filtersI18nRecordValidator = lib/* default.record */.ZP.record(SchemaPreprocessor.numberValidator, regularFilterI18nMetadataValidator);

/**
 * Describes an object where the language codes are keys and the description and
 * filter name are values.
 */

const groupsI18nRecordValidator = lib/* default.record */.ZP.record(SchemaPreprocessor.numberValidator, groupI18nMetadataValidator);

/**
 * Describes an object in which the language codes are keys and the group name
 * is the value.
 */

const tagsI18nRecordValidator = lib/* default.record */.ZP.record(SchemaPreprocessor.numberValidator, tagI18nMetadataValidator);

/**
 * Describes an object where the language codes are keys and the description and
 * tag name are values.
 */

const i18nMetadataValidator = lib/* default.object */.ZP.object({
  /**
   * Item of {@link FiltersI18n}.
   */
  filters: filtersI18nRecordValidator,
  /**
   * Item of {@link GroupsI18n}.
   */
  groups: groupsI18nRecordValidator,
  /**
   * Item of {@link TagsI18n}.
   */
  tags: tagsI18nRecordValidator
});

/**
 * Describes the root object with translations to all filters, groups and tags.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/i18n-metadata/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */




;// CONCATENATED MODULE: ./Extension/src/background/schema/filter-version/filter-version.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



/**
 * Runtime validator for persistent filter version data.
 */
const filterVersionDataValidator = lib/* default.object */.ZP.object({
  /**
   * Version of filter. Usually consists of 4 parts: 1.2.3.4.
   */
  version: lib/* default.string */.ZP.string(),
  /**
   * Time of the last check by the scheduler: every
   * {@link FilterUpdateService.CHECK_PERIOD_MS period} the time of the last
   * check will be overwritten by the scheduler or if the user clicks
   * the forced update check from the user interface or if the user enabled
   * the filter or group.
   */
  lastCheckTime: lib/* default.number */.ZP.number(),
  /**
   * Time of the last update filter from remote resources.
   */
  lastUpdateTime: lib/* default.number */.ZP.number(),
  /**
   * Property from filter metadata: after how long to check the update.
   */
  expires: lib/* default.number */.ZP.number()
});

/**
 * Describes the filter version and timestamps of the last filter check,
 * update and expiration.
 */

/**
 * Runtime validator for persistent key value storage of filter version data.
 *
 * Key is filter metadata id.
 * Value is {@link FilterVersionData}.
 */
const filterVersionStorageDataValidator = lib/* default.record */.ZP.record(SchemaPreprocessor.numberValidator, filterVersionDataValidator);

/**
 * Describes an object with numeric keys and {@link FilterVersionData}
 * as values.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/filter-version/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

// Filter version schema entry point

// Filter version validators and types

;// CONCATENATED MODULE: ./Extension/src/background/schema/filter-state/filter-state.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



/**
 * Runtime validator for persistent filter state data.
 */
const filterStateDataValidator = lib/* default.object */.ZP.object({
  /**
   * Is filter enabled or not.
   */
  enabled: lib/* default.boolean */.ZP.boolean(),
  /**
   * Is filter rules loaded into browser storage or not.
   *
   * TODO: Check if it can be deleted, because we add all filters to
   * the browser storage and this field is always true.
   */
  installed: lib/* default.boolean */.ZP.boolean(),
  /**
   * Is filter loaded.
   *
   * TODO: Check if it can be deleted.
   */
  loaded: lib/* default.boolean */.ZP.boolean()
});

/**
 * Contains boolean flags about the filter status: enabled, installed, loaded.
 */

/**
 * Runtime validator for persistent key value storage of filter state data.
 *
 * Key is filter metadata id.
 * Value is {@link FilterStateData}.
 */
const filterStateStorageDataValidator = lib/* default.record */.ZP.record(SchemaPreprocessor.numberValidator, filterStateDataValidator);

/**
 * Describes an object with numeric keys and filter states as values.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/filter-state/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

// Filter state schema entry point

// Filter state validators and types

;// CONCATENATED MODULE: ./Extension/src/background/schema/group-state/group-state.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



/**
 * Runtime validator for persistent group state data.
 */
const groupStateDataValidator = lib/* default.object */.ZP.object({
  /**
   * Is group enabled or not.
   */
  enabled: lib/* default.boolean */.ZP.boolean(),
  /**
   * Whether the group has ever been switched. Can be affected
   * programmatically, e.g. After importing settings.
   */
  touched: lib/* default.boolean */.ZP.boolean()
});

/**
 * Contains boolean flags about the state of the filter group:
 * enabled and touched.
 */

/**
 * Runtime validator for persistent key value storage of group state data.
 *
 * Key is group metadata id.
 * Value is {@link GroupStateData}.
 */
const groupStateStorageDataValidator = lib/* default.record */.ZP.record(SchemaPreprocessor.numberValidator, groupStateDataValidator);

/**
 * Describes an object with numeric keys and group states as values.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/group-state/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

// Group state schema entry point

// Group state validators and types

;// CONCATENATED MODULE: ./Extension/src/background/schema/trusted-domains/trusted-domains.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


/**
 * Runtime validator for persistent trusted domains data.
 */
const trustedDomainDataValidator = lib/* default.object */.ZP.object({
  /**
   * String domain which was excluded from filtering.
   */
  domain: lib/* default.string */.ZP.string(),
  /**
   * For what time domain was excluded in milliseconds.
   */
  expires: lib/* default.number */.ZP.number()
});

/**
 * Describes the object with the trusted domain that was excluded from the loc
 * by the $document rules and for how long it was excluded.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/trusted-domains/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


;// CONCATENATED MODULE: ./Extension/src/background/schema/page-stats/page-stats.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


/**
 * Describes the relationship between the number of blocked requests and
 * the name of the group (similar to the tag).
 */
const pageStatsDataItemValidator = lib/* default.record */.ZP.record(lib/* default.string */.ZP.string(), lib/* default.number */.ZP.number());

/**
 * Describes the relationship between the number of blocked requests and
 * the name of the group (similar to the tag).
 */

const pageStatsDataValidator = lib/* default.object */.ZP.object({
  /**
   * Blocked requests grouped by hours.
   */
  hours: pageStatsDataItemValidator.array(),
  /**
   * Blocked requests grouped by days.
   */
  days: pageStatsDataItemValidator.array(),
  /**
   * Blocked requests grouped by months.
   */
  months: pageStatsDataItemValidator.array(),
  /**
   * The time stamp of the last update. In milliseconds.
   */
  updated: lib/* default.number */.ZP.number()
});

/**
 * Describes an object with blocked requests grouped by time and timestamp of
 * the last update.
 */

const pageStatsValidator = lib/* default.object */.ZP.object({
  /**
   * Total blocked requests.
   */
  totalBlocked: lib/* default.number */.ZP.number().optional(),
  /**
   * Blocked requests grouped by time.
   */
  data: pageStatsDataValidator.optional()
});

/**
 * Contains.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/page-stats/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

// Page stats schema entry point

// page stats validators and types

;// CONCATENATED MODULE: ./Extension/src/background/schema/hit-stats/hit-stats.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const filterRulesHitsValidator = lib/* default.record */.ZP.record(
/**
 * Text of rule.
 */
lib/* default.string */.ZP.string(),
/**
 * The number of matches of this rule.
 */
lib/* default.number */.ZP.number());
const filterHitsValidator = lib/* default.record */.ZP.record(
/**
 * Filter's id.
 */
lib/* default.string */.ZP.string(), filterRulesHitsValidator.optional());
const hitStatsValidator = lib/* default.object */.ZP.object({
  /**
   * Contains an object with filter IDs as keys and their
   * {@link filterRulesHitsValidator} as values.
   */
  filters: filterHitsValidator.optional()
}).strict();

/**
 * Contains an object 'filters' with filter IDs as keys and their
 * {@link filterRulesHitsValidator} as values or undefined.
 */

const hitStatsStorageDataValidator = lib/* default.object */.ZP.object({
  /**
   * The number of hits in relation to the hit rule.
   */
  stats: hitStatsValidator.optional(),
  /**
   * The total number of hits with no link to the rules.
   */
  totalHits: lib/* default.number */.ZP.number().optional()
}).strict();

/**
 * Contains the number of hits overall and in relation to the hit rule.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/hit-stats/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

// Hit stats schema entry point

// hit stats validators and types

;// CONCATENATED MODULE: ./Extension/src/background/schema/custom-filter-metadata/custom-filter-metadata.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


const customFilterMetadataValidator = baseMetadataValidator.merge(lib/* default.object */.ZP.object({
  /**
   * The filter subscription URL from which the application retrieved
   * the rules when adding the filter and should retrieve the rules when
   * updating it.
   */
  customUrl: lib/* default.string */.ZP.string(),
  /**
   * If this filter is not trusted - tsurlfilter will not execute JS rules
   * and will not apply header removal rules from this filter.
   * Otherwise, no restrictions.
   */
  trusted: lib/* default.boolean */.ZP.boolean(),
  /**
   * When the filter was last updated in milliseconds since the start of
   * the UNIX epoch.
   */
  timeUpdated: lib/* default.number */.ZP.number(),
  /**
   * Contains MD5 checksum for the filter content.
   */
  checksum: lib/* default.string */.ZP.string().or(lib/* default.null */.ZP["null"]())
}));

/**
 * Contains all information about the custom filter except its contents.
 */

const customFilterMetadataStorageDataValidator = customFilterMetadataValidator.array();

/**
 * Contains a list of custom filter metadata.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/custom-filter-metadata/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

// Custom filter metadata schema entry point

// Custom filter metadata validators and types

;// CONCATENATED MODULE: ./Extension/src/background/schema/local-script-rules/local-script-rules.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const localScriptRulesValidator = lib/* default.object */.ZP.object({
  /**
   * Contains a comment describing the purpose of the local script rules file.
   */
  comment: lib/* default.string */.ZP.string(),
  /**
   * JS rules from all of our filters are pre-assembled into this object to be
   * checked in Firefox AMO to see if they can be executed.
   */
  rules: lib/* default.object */.ZP.object({
    /**
     * Domains in which the rule should be applied.
     */
    domains: lib/* default.string */.ZP.string(),
    /**
     * The text of the script rule.
     */
    script: lib/* default.string */.ZP.string()
  }).array()
}).strict();

/**
 * Describes the structure of the local script rules file, which is necessary
 * for Firefox AMO to check if JS rules can be executed.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/local-script-rules/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

;// CONCATENATED MODULE: ./Extension/src/background/schema/notification/notification-text-record.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


const notificationTextRecordValidator = lib/* default.object */.ZP.object({
  /**
   * Notification title.
   */
  title: lib/* default.string */.ZP.string(),
  /**
   * Notification description.
   */
  desc: lib/* default.string */.ZP.string().optional(),
  /**
   * Text for the notification button.
   */
  btn: lib/* default.string */.ZP.string()
}).strict();

/**
 * Describes texts for an notification.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/notification/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


;// CONCATENATED MODULE: ./Extension/src/background/schema/safebrowsing/safebrowsing.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


/**
 * Safebrowsing cache data schema validator.
 */
const safebrowsingCacheDataValidator = lib/* default.object */.ZP.object({
  /**
   * Name of the safebrowsing list.
   */
  list: lib/* default.string */.ZP.string(),
  /**
   * Record expiration time in milliseconds.
   * Optional, because it is not defined for safebrowsing allowlist.
   */
  expires: lib/* default.number */.ZP.number().optional()
}).strict();

/**
 * Safebrowsing cache data type inferred from {@link safebrowsingCacheDataValidator} schema.
 */

/**
 * Safebrowsing persisted storage data schema validator.
 */
const safebrowsingStorageDataValidator = lib/* default.object */.ZP.object({
  /**
   * Resource url hash.
   */
  key: lib/* default.string */.ZP.string(),
  /**
   * Cache data.
   */
  value: safebrowsingCacheDataValidator
}).strict().array();

/**
 * Safebrowsing persisted storage data type inffered from {@link safebrowsingStorageDataValidator} schema.
 */
;// CONCATENATED MODULE: ./Extension/src/background/schema/safebrowsing/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

;// CONCATENATED MODULE: ./Extension/src/background/schema/index.ts
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */
















/***/ }),

/***/ 21059:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HB": () => (/* binding */ BACKGROUND_TAB_ID),
/* harmony export */   "OL": () => (/* binding */ FiltersUpdateTime),
/* harmony export */   "Oi": () => (/* binding */ FULLSCREEN_USER_RULES_EDITOR),
/* harmony export */   "Rm": () => (/* binding */ LAST_NOTIFICATION_TIME_KEY),
/* harmony export */   "VC": () => (/* binding */ CUSTOM_FILTERS_GROUP_DISPLAY_NUMBER),
/* harmony export */   "XR": () => (/* binding */ TRUSTED_TAG),
/* harmony export */   "XS": () => (/* binding */ WASTE_CHARACTERS),
/* harmony export */   "Z1": () => (/* binding */ VIEWED_NOTIFICATIONS_KEY),
/* harmony export */   "du": () => (/* binding */ FILTERING_LOG),
/* harmony export */   "ih": () => (/* binding */ CUSTOM_FILTERS_START_ID),
/* harmony export */   "jF": () => (/* binding */ SCHEMA_VERSION_KEY),
/* harmony export */   "jm": () => (/* binding */ TRUSTED_DOCUMENTS_CACHE_KEY),
/* harmony export */   "m6": () => (/* binding */ AntiBannerFiltersId),
/* harmony export */   "mY": () => (/* binding */ PAGE_STATISTIC_KEY),
/* harmony export */   "ni": () => (/* binding */ SB_SUSPENDED_CACHE_KEY),
/* harmony export */   "nn": () => (/* binding */ SCROLLBAR_WIDTH),
/* harmony export */   "o4": () => (/* binding */ HIT_STATISTIC_KEY),
/* harmony export */   "oY": () => (/* binding */ CLIENT_ID_KEY),
/* harmony export */   "q7": () => (/* binding */ APP_VERSION_KEY),
/* harmony export */   "r_": () => (/* binding */ AntibannerGroupsId),
/* harmony export */   "sP": () => (/* binding */ APP_SCHEMA_VERSION),
/* harmony export */   "sg": () => (/* binding */ ADGUARD_SETTINGS_KEY),
/* harmony export */   "uq": () => (/* binding */ NotifierType),
/* harmony export */   "wi": () => (/* binding */ FILTERING_LOG_WINDOW_STATE),
/* harmony export */   "wo": () => (/* binding */ SB_LRU_CACHE_KEY),
/* harmony export */   "zb": () => (/* binding */ NavigationTag)
/* harmony export */ });
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Current version of app storage data schema.
 *
 * Schema version is used on extension version update.
 *
 * Note: Do not to be confused with the protocol version of the imported config.
 */
const APP_SCHEMA_VERSION = 3;
const CLIENT_ID_KEY = 'client-id';
const APP_VERSION_KEY = 'app-version';
const SCHEMA_VERSION_KEY = 'schema-version';
const ADGUARD_SETTINGS_KEY = 'adguard-settings';
const PAGE_STATISTIC_KEY = 'page-statistic';
const TRUSTED_DOCUMENTS_CACHE_KEY = 'trusted-documents';
const SB_LRU_CACHE_KEY = 'sb-lru-cache';
const SB_SUSPENDED_CACHE_KEY = 'safebrowsing-suspended-from';
const VIEWED_NOTIFICATIONS_KEY = 'viewed-notifications';
const LAST_NOTIFICATION_TIME_KEY = 'viewed-notification-time';
const FILTERING_LOG_WINDOW_STATE = 'filtering-log-window-state';
const HIT_STATISTIC_KEY = 'filters-hit-count';

// Filter ids used in the code on the background page and filtering log page
let AntiBannerFiltersId = /*#__PURE__*/function (AntiBannerFiltersId) {
  AntiBannerFiltersId[AntiBannerFiltersId["StealthModeFilterId"] = -1] = "StealthModeFilterId";
  AntiBannerFiltersId[AntiBannerFiltersId["UserFilterId"] = 0] = "UserFilterId";
  AntiBannerFiltersId[AntiBannerFiltersId["EnglishFilterId"] = 2] = "EnglishFilterId";
  AntiBannerFiltersId[AntiBannerFiltersId["TrackingFilterId"] = 3] = "TrackingFilterId";
  AntiBannerFiltersId[AntiBannerFiltersId["SocialFilterId"] = 4] = "SocialFilterId";
  AntiBannerFiltersId[AntiBannerFiltersId["SearchAndSelfPromoFilterId"] = 10] = "SearchAndSelfPromoFilterId";
  AntiBannerFiltersId[AntiBannerFiltersId["UrlTrackingFilterId"] = 17] = "UrlTrackingFilterId";
  AntiBannerFiltersId[AntiBannerFiltersId["AllowlistFilterId"] = 100] = "AllowlistFilterId";
  AntiBannerFiltersId[AntiBannerFiltersId["MobileAdsFilterId"] = 11] = "MobileAdsFilterId";
  return AntiBannerFiltersId;
}({});

// Group ids used in the code on the multiple entry points
let AntibannerGroupsId = /*#__PURE__*/function (AntibannerGroupsId) {
  AntibannerGroupsId[AntibannerGroupsId["AdBlockingGroupId"] = 1] = "AdBlockingGroupId";
  AntibannerGroupsId[AntibannerGroupsId["CustomFilterGroupId"] = 0] = "CustomFilterGroupId";
  AntibannerGroupsId[AntibannerGroupsId["PrivacyFilterGroupId"] = 2] = "PrivacyFilterGroupId";
  AntibannerGroupsId[AntibannerGroupsId["OtherFiltersGroupId"] = 6] = "OtherFiltersGroupId";
  AntibannerGroupsId[AntibannerGroupsId["LanguageFiltersGroupId"] = 7] = "LanguageFiltersGroupId";
  return AntibannerGroupsId;
}({});
let NotifierType = /*#__PURE__*/function (NotifierType) {
  NotifierType["RequestFilterUpdated"] = "event.request.filter.updated";
  NotifierType["userFilterUpdated"] = "event.user.filter.updated";
  NotifierType["UpdateAllowlistFilterRules"] = "event.update.allowlist.filter.rules";
  NotifierType["SettingUpdated"] = "event.update.setting.value";
  NotifierType["FiltersUpdateCheckReady"] = "event.update.filters.check";
  NotifierType["TabAdded"] = "log.tab.added";
  NotifierType["TabClose"] = "log.tab.close";
  NotifierType["TabUpdate"] = "log.tab.update";
  NotifierType["TabReset"] = "log.tab.reset";
  NotifierType["LogEventAdded"] = "log.event.added";
  NotifierType["SettingsUpdated"] = "event.sync.finished";
  NotifierType["FullscreenUserRulesEditorUpdated"] = "event.user.rules.editor.updated";
  return NotifierType;
}({});
const FULLSCREEN_USER_RULES_EDITOR = 'fullscreen_user_rules_editor';
const FILTERING_LOG = 'filtering-log';
let NavigationTag = /*#__PURE__*/function (NavigationTag) {
  NavigationTag["Regular"] = "regular";
  NavigationTag["Party"] = "party";
  return NavigationTag;
}({});

/**
 * Trusted tag for custom filters
 */
const TRUSTED_TAG = 'trusted';

/**
 * Custom filters group display number
 */
const CUSTOM_FILTERS_GROUP_DISPLAY_NUMBER = 99;

/**
 * Custom filters identifiers starts from this number
 *
 * @type {number}
 */
const CUSTOM_FILTERS_START_ID = 1000;

// Unnecessary characters that will be replaced
const WASTE_CHARACTERS = /[.*+?^${}()|[\]\\]/g;

// Custom scrollbar width
const SCROLLBAR_WIDTH = 12;
const BACKGROUND_TAB_ID = -1;

/**
 *  Time interval between filter updates.
 */
let FiltersUpdateTime = /*#__PURE__*/function (FiltersUpdateTime) {
  FiltersUpdateTime[FiltersUpdateTime["Disabled"] = 0] = "Disabled";
  FiltersUpdateTime[FiltersUpdateTime["OneHour"] = 3600000] = "OneHour";
  FiltersUpdateTime[FiltersUpdateTime["SixHours"] = 21600000] = "SixHours";
  FiltersUpdateTime[FiltersUpdateTime["TwelveHours"] = 43200000] = "TwelveHours";
  FiltersUpdateTime[FiltersUpdateTime["TwentyFourHours"] = 86400000] = "TwentyFourHours";
  FiltersUpdateTime[FiltersUpdateTime["FortyEightHours"] = 172800000] = "FortyEightHours";
  FiltersUpdateTime[FiltersUpdateTime["Default"] = -1] = "Default";
  return FiltersUpdateTime;
}({});

/***/ }),

/***/ 65586:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "e": () => (/* binding */ getErrorMessage)
/* harmony export */ });
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Checks if error has message.
 *
 * @param error Error object.
 */
function isErrorWithMessage(error) {
  return typeof error === 'object' && error !== null && 'message' in error && typeof error.message === 'string';
}

/**
 * Converts error to the error with message.
 *
 * @param maybeError Possible error.
 */
function toErrorWithMessage(maybeError) {
  if (isErrorWithMessage(maybeError)) {
    return maybeError;
  }
  try {
    return new Error(JSON.stringify(maybeError));
  } catch {
    // fallback in case there's an error stringifying the maybeError
    // like with circular references for example.
    return new Error(String(maybeError));
  }
}

/**
 * Converts error object to error with message. This method might be helpful to handle thrown errors.
 *
 * @param error Error object.
 *
 * @returns Message of the error.
 */
function getErrorMessage(error) {
  return toErrorWithMessage(error).message;
}

/***/ }),

/***/ 82637:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OU": () => (/* binding */ Forward),
/* harmony export */   "UU": () => (/* binding */ ForwardFrom),
/* harmony export */   "xD": () => (/* binding */ ForwardAction)
/* harmony export */ });
/* unused harmony export ForwardApp */
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * IMPORTANT: do not change the values as tds is already configured for that specific strings.
 */
let ForwardAction = /*#__PURE__*/function (ForwardAction) {
  ForwardAction["UninstallExtension"] = "adguard_uninstal_ext";
  ForwardAction["ThankYou"] = "thank_you_page";
  ForwardAction["SiteReport"] = "site_report_page";
  ForwardAction["IssueReport"] = "report";
  ForwardAction["BugReport"] = "bug_report";
  ForwardAction["Privacy"] = "privacy";
  ForwardAction["Acknowledgments"] = "acknowledgments";
  ForwardAction["Github"] = "github_options";
  ForwardAction["Website"] = "adguard_site";
  ForwardAction["Discuss"] = "discuss";
  ForwardAction["Compare"] = "compare";
  ForwardAction["ComparePromo"] = "compare_promo";
  ForwardAction["Changelog"] = "github_version_popup";
  ForwardAction["GlobalPrivacyControl"] = "global_privacy_control";
  ForwardAction["DoNotTrack"] = "do_not_track";
  ForwardAction["HowToCreateRules"] = "userfilter_description";
  ForwardAction["AdguardSite"] = "adguard_site";
  ForwardAction["SelfPromotion"] = "self_promotion";
  ForwardAction["ProtectionWorks"] = "protection_works";
  ForwardAction["CollectHitsLearnMore"] = "filter_rules";
  ForwardAction["OperaStore"] = "opera_store";
  ForwardAction["FirefoxStore"] = "firefox_store";
  ForwardAction["ChromeStore"] = "chrome_store";
  ForwardAction["EdgeStore"] = "edge_store";
  ForwardAction["IOS"] = "ios_about";
  ForwardAction["Android"] = "android_about";
  ForwardAction["GithubVersion"] = "github_version_popup";
  ForwardAction["LearnAboutAdGuard"] = "learn_about_adguard";
  ForwardAction["BackToSchool"] = "back_to_school";
  return ForwardAction;
}({});
let ForwardFrom = /*#__PURE__*/function (ForwardFrom) {
  ForwardFrom["Background"] = "background";
  ForwardFrom["Options"] = "options_screen";
  ForwardFrom["OptionsFooter"] = "options_screen_footer";
  ForwardFrom["ContextMenu"] = "context_menu";
  ForwardFrom["Popup"] = "popup";
  ForwardFrom["Safebrowsing"] = "safebrowsing";
  ForwardFrom["Adblocker"] = "adblocked";
  ForwardFrom["VersionPopup"] = "version_popup";
  return ForwardFrom;
}({});
let ForwardApp = /*#__PURE__*/function (ForwardApp) {
  ForwardApp["BrowserExtension"] = "browser_extension";
  return ForwardApp;
}({});
/**
 * Class for creating forward links
 */
class Forward {
  static get(params) {
    const queryString = Object.entries({
      ...Forward.defaultParams,
      ...params
    }).map(([key, value]) => `${key}=${value}`).join('&');
    return `${Forward.url}?${queryString}`;
  }
}
Forward.url = 'https://link.adtidy.org/forward.html';
Forward.defaultParams = {
  app: ForwardApp.BrowserExtension
};

/***/ }),

/***/ 59948:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LK": () => (/* binding */ LogLevelString),
/* harmony export */   "Zb": () => (/* binding */ Log)
/* harmony export */ });
/* unused harmony exports LogLevel, LogMethod */
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93620);
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65586);
/**
 * @file
 *
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



/**
 * Number presentation of log levels. Order is important. Higher number, more messages to be visible.
 */
let LogLevel = /*#__PURE__*/function (LogLevel) {
  LogLevel[LogLevel["Error"] = 1] = "Error";
  LogLevel[LogLevel["Warn"] = 2] = "Warn";
  LogLevel[LogLevel["Info"] = 3] = "Info";
  LogLevel[LogLevel["Debug"] = 4] = "Debug";
  return LogLevel;
}({});

/**
 * Methods supported by console. Used to manage levels.
 */
let LogMethod = /*#__PURE__*/function (LogMethod) {
  LogMethod["Log"] = "log";
  LogMethod["Info"] = "info";
  LogMethod["Error"] = "error";
  return LogMethod;
}({});

/**
 * String presentation of log levels, for convenient users usage.
 */
let LogLevelString = /*#__PURE__*/function (LogLevelString) {
  LogLevelString["Error"] = "error";
  LogLevelString["Warn"] = "warn";
  LogLevelString["Info"] = "info";
  LogLevelString["Debug"] = "debug";
  return LogLevelString;
}({});

/**
 * Simple logger with log levels
 */
class Log {
  /**
   * Print debug messages. Usually used for technical information.
   *
   * @param args Printed arguments.
   */
  static debug(...args) {
    Log.print(LogLevel.Debug, LogMethod.Log, args);
  }

  /**
   * Print messages you want to disclose to users.
   *
   * @param args Printed arguments.
   */
  static info(...args) {
    Log.print(LogLevel.Info, LogMethod.Info, args);
  }

  /**
   * Print warn messages.
   *
   * @param args Printed arguments.
   */
  static warn(...args) {
    Log.print(LogLevel.Warn, LogMethod.Info, args);
  }

  /**
   * Print error messages.
   *
   * @param args Printed arguments.
   */
  static error(...args) {
    Log.print(LogLevel.Error, LogMethod.Error, args);
  }

  /**
   * Setter for log level. With this method log level can be updated dynamically.
   *
   * @param logLevel Log level.
   */
  static set currentLevel(logLevel) {
    switch (logLevel) {
      case LogLevelString.Error:
        Log.currentLevelValue = LogLevel.Error;
        break;
      case LogLevelString.Warn:
        Log.currentLevelValue = LogLevel.Warn;
        break;
      case LogLevelString.Info:
        Log.currentLevelValue = LogLevel.Info;
        break;
      case LogLevelString.Debug:
        Log.currentLevelValue = LogLevel.Debug;
        break;
      default:
        throw new Error(`Logger supports only next levels: ${[Object.values(LogLevelString).join(', ')]}`);
    }
  }

  /**
   * Converts error to string.
   *
   * @param error Error to print.
   * @private
   */
  static errorToString(error) {
    const message = (0,_error__WEBPACK_IMPORTED_MODULE_0__/* .getErrorMessage */ .e)(error);
    return `${message}\nStack trace:\n${error.stack}`;
  }

  /**
   * Wrapper over log methods.
   *
   * @param level Log level.
   * @param method Log method.
   * @param args
   * @private
   */
  static print(level, method,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  args) {
    // check log level
    if (Log.currentLevelValue < level) {
      return;
    }
    if (!args || args.length === 0 || !args[0]) {
      return;
    }
    const formattedArgs = args.map(value => {
      if (value instanceof Error) {
        return Log.errorToString(value);
      }
      if (typeof value.message === 'string') {
        return value.message;
      }
      if (typeof value === 'object') {
        return JSON.stringify(value);
      }
      return String(value);
    });
    const formattedTime = `${(0,date_fns__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(Date.now(), "yyyy-MM-dd'T'HH:mm:ss:SSS")}:`;

    // eslint-disable-next-line no-console
    console[method](formattedTime, ...formattedArgs);
  }

  /**
   * Exposes logger globally, so user be able to update log level and print more info.
   *
   * @param window DOM Window object.
   */
  static expose(window) {
    var _window$adguard;
    const adguard = (_window$adguard = window.adguard) != null ? _window$adguard : {};
    window.adguard = adguard;
    adguard.Log = Log;
  }
}
Log.currentLevelValue = LogLevel.Info;
Log.expose(window);

/***/ }),

/***/ 50545:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": () => (/* binding */ MessageType),
/* harmony export */   "Z": () => (/* binding */ APP_MESSAGE_HANDLER_NAME)
/* harmony export */ });
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Message types used for message passing between extension contexts
 * (popup, filtering log, content scripts, background)
 */

const APP_MESSAGE_HANDLER_NAME = 'app';
let MessageType = /*#__PURE__*/function (MessageType) {
  MessageType["CreateEventListener"] = "createEventListener";
  MessageType["RemoveListener"] = "removeListener";
  MessageType["OpenExtensionStore"] = "openExtensionStore";
  MessageType["AddAndEnableFilter"] = "addAndEnableFilter";
  MessageType["ApplySettingsJson"] = "applySettingsJson";
  MessageType["OpenFilteringLog"] = "openFilteringLog";
  MessageType["OpenFullscreenUserRules"] = "openFullscreenUserRules";
  MessageType["ResetBlockedAdsCount"] = "resetBlockedAdsCount";
  MessageType["ResetSettings"] = "resetSettings";
  MessageType["GetUserRules"] = "getUserRules";
  MessageType["SaveUserRules"] = "saveUserRules";
  MessageType["GetAllowlistDomains"] = "getAllowlistDomains";
  MessageType["SaveAllowlistDomains"] = "saveAllowlistDomains";
  MessageType["CheckFiltersUpdate"] = "checkFiltersUpdate";
  MessageType["DisableFiltersGroup"] = "disableFiltersGroup";
  MessageType["DisableFilter"] = "disableFilter";
  MessageType["LoadCustomFilterInfo"] = "loadCustomFilterInfo";
  MessageType["SubscribeToCustomFilter"] = "subscribeToCustomFilter";
  MessageType["RemoveAntiBannerFilter"] = "removeAntiBannerFilter";
  MessageType["GetTabInfoForPopup"] = "getTabInfoForPopup";
  MessageType["ChangeApplicationFilteringDisabled"] = "changeApplicationFilteringDisabled";
  MessageType["OpenSettingsTab"] = "openSettingsTab";
  MessageType["OpenAssistant"] = "openAssistant";
  MessageType["OpenAbuseTab"] = "openAbuseTab";
  MessageType["OpenSiteReportTab"] = "openSiteReportTab";
  MessageType["OpenComparePage"] = "openComparePage";
  MessageType["ResetCustomRulesForPage"] = "resetCustomRulesForPage";
  MessageType["RemoveAllowlistDomain"] = "removeAllowlistDomainPopup";
  MessageType["AddAllowlistDomainPopup"] = "addAllowlistDomainPopup";
  MessageType["GetStatisticsData"] = "getStatisticsData";
  MessageType["OnOpenFilteringLogPage"] = "onOpenFilteringLogPage";
  MessageType["GetFilteringLogData"] = "getFilteringLogData";
  MessageType["InitializeFrameScript"] = "initializeFrameScript";
  MessageType["OnCloseFilteringLogPage"] = "onCloseFilteringLogPage";
  MessageType["GetFilteringInfoByTabId"] = "getFilteringInfoByTabId";
  MessageType["SynchronizeOpenTabs"] = "synchronizeOpenTabs";
  MessageType["ClearEventsByTabId"] = "clearEventsByTabId";
  MessageType["RefreshPage"] = "refreshPage";
  MessageType["AddUserRule"] = "addUserRule";
  MessageType["RemoveUserRule"] = "removeUserRule";
  MessageType["EnableFiltersGroup"] = "enableFiltersGroup";
  MessageType["NotifyListeners"] = "notifyListeners";
  MessageType["AddLongLivedConnection"] = "addLongLivedConnection";
  MessageType["GetOptionsData"] = "getOptionsData";
  MessageType["ChangeUserSettings"] = "changeUserSetting";
  MessageType["CheckRequestFilterReady"] = "checkRequestFilterReady";
  MessageType["OpenThankyouPage"] = "openThankYouPage";
  MessageType["OpenSafebrowsingTrusted"] = "openSafebrowsingTrusted";
  MessageType["GetSelectorsAndScripts"] = "getSelectorsAndScripts";
  MessageType["CheckPageScriptWrapperRequest"] = "checkPageScriptWrapperRequest";
  MessageType["ProcessShouldCollapse"] = "processShouldCollapse";
  MessageType["ProcessShouldCollapseMany"] = "processShouldCollapseMany";
  MessageType["AddFilteringSubscription"] = "addFilterSubscription";
  MessageType["SetNotificationViewed"] = "setNotificationViewed";
  MessageType["SaveCssHitsStats"] = "saveCssHitStats";
  MessageType["GetCookieRules"] = "getCookieRules";
  MessageType["SaveCookieLogEvent"] = "saveCookieRuleEvent";
  MessageType["LoadSettingsJson"] = "loadSettingsJson";
  MessageType["AddUrlToTrusted"] = "addUrlToTrusted";
  MessageType["SetPreserveLogState"] = "setPreserveLogState";
  MessageType["GetUserRulesEditorData"] = "getUserRulesEditorData";
  MessageType["GetEditorStorageContent"] = "getEditorStorageContent";
  MessageType["SetEditorStorageContent"] = "setEditorStorageContent";
  MessageType["ConvertRulesText"] = "convertRulesText";
  MessageType["SetFilteringLogWindowState"] = "setFilteringLogWindowState";
  MessageType["AppInitialized"] = "appInitialized";
  MessageType["UpdateTotalBlocked"] = "updateTotalBlocked";
  MessageType["ScriptletCloseWindow"] = "scriptletCloseWindow";
  MessageType["ShowAlertPopup"] = "showAlertPopup";
  MessageType["ShowVersionUpdatedPopup"] = "showVersionUpdatedPopup";
  return MessageType;
}({});

/***/ }),

/***/ 23104:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Cs": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.C),
/* harmony export */   "D7": () => (/* reexport safe */ _send_message__WEBPACK_IMPORTED_MODULE_1__.D),
/* harmony export */   "ZA": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.Z),
/* harmony export */   "bG": () => (/* reexport safe */ _send_message__WEBPACK_IMPORTED_MODULE_1__.b),
/* harmony export */   "pF": () => (/* reexport safe */ _message_handler__WEBPACK_IMPORTED_MODULE_2__.p)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50545);
/* harmony import */ var _send_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(75983);
/* harmony import */ var _message_handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(165);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */





/***/ }),

/***/ 165:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "p": () => (/* binding */ MessageHandler)
/* harmony export */ });
/* harmony import */ var core_js_modules_esnext_map_delete_all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13929);
/* harmony import */ var core_js_modules_esnext_map_delete_all_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_delete_all_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_esnext_map_every_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57851);
/* harmony import */ var core_js_modules_esnext_map_every_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_every_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_esnext_map_filter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63633);
/* harmony import */ var core_js_modules_esnext_map_filter_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_filter_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_esnext_map_find_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81652);
/* harmony import */ var core_js_modules_esnext_map_find_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_find_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_esnext_map_find_key_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(67515);
/* harmony import */ var core_js_modules_esnext_map_find_key_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_find_key_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_esnext_map_includes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(68034);
/* harmony import */ var core_js_modules_esnext_map_includes_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_includes_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_esnext_map_key_of_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(61480);
/* harmony import */ var core_js_modules_esnext_map_key_of_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_key_of_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_esnext_map_map_keys_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(59027);
/* harmony import */ var core_js_modules_esnext_map_map_keys_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_map_keys_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_esnext_map_map_values_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(35739);
/* harmony import */ var core_js_modules_esnext_map_map_values_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_map_values_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_esnext_map_merge_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(99283);
/* harmony import */ var core_js_modules_esnext_map_merge_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_merge_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_esnext_map_reduce_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(4473);
/* harmony import */ var core_js_modules_esnext_map_reduce_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_reduce_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_esnext_map_some_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(90989);
/* harmony import */ var core_js_modules_esnext_map_some_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_some_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_esnext_map_update_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(17194);
/* harmony import */ var core_js_modules_esnext_map_update_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_map_update_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(53679);
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_13__);













/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * API for handling Messages via {@link browser.runtime.onMessage}
 */
class MessageHandler {
  constructor() {
    this.listeners = new Map();
    this.handleMessage = this.handleMessage.bind(this);
  }
  init() {
    webextension_polyfill__WEBPACK_IMPORTED_MODULE_13___default().runtime.onMessage.addListener(this.handleMessage);
  }

  /**
   * Add message listener.
   * Listeners limited to 1 per message type to prevent race
   * condition while response processing.
   *
   * TODO: implement listeners priority execution strategy
   *
   * @param type - {@link MessageType}
   * @param listener - {@link MessageListener}
   * @throws error, if message listener already added
   */
  addListener(type, listener) {
    if (this.listeners.has(type)) {
      throw new Error(`Message handler: ${type} listener has already been registered`);
    }
    this.listeners.set(type, listener);
  }

  /**
   * Removes message listener.
   *
   * @param type - {@link MessageType}
   */
  removeListener(type) {
    this.listeners.delete(type);
  }

  /**
   * Removes all listeners
   */
  removeListeners() {
    this.listeners.clear();
  }

  /**
   * Handles data from {@link browser.runtime.onMessage} and match specified listener.
   *
   * @param message - {@link Message}
   * @param sender - An object containing information about the script context that sent a message or request.
   */
}

/***/ }),

/***/ 75983:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => (/* binding */ sendTabMessage),
/* harmony export */   "b": () => (/* binding */ sendMessage)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53679);
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50545);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



/**
 * {@link sendMessage} sends app message via {@link browser.runtime.sendMessage} and
 * gets response from another extension page message handler
 *
 * @param message - partial {@link Message} record without {@link Message.handlerName} field
 *
 * @returns message handler response
 */
async function sendMessage(message) {
  try {
    return await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.sendMessage({
      handlerName: _constants__WEBPACK_IMPORTED_MODULE_1__/* .APP_MESSAGE_HANDLER_NAME */ .Z,
      ...message
    });
  } catch (e) {
    // do nothing
  }
}

/**
 * {@link sendTabMessage} sends message to specified tab via {@link browser.tabs.sendMessage} and
 * gets response from it
 *
 * @param tabId - tab id
 * @param message - partial {@link Message} record without {@link Message.handlerName} field
 *
 * @returns tab message handler response
 */
async function sendTabMessage(tabId, message) {
  return webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().tabs.sendMessage(tabId, {
    handlerName: _constants__WEBPACK_IMPORTED_MODULE_1__/* .APP_MESSAGE_HANDLER_NAME */ .Z,
    ...message
  });
}

/***/ }),

/***/ 71012:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "YK": () => (/* binding */ DEFAULT_FILTERS_UPDATE_PERIOD),
/* harmony export */   "eN": () => (/* binding */ DEFAULT_THIRD_PARTY_COOKIES_SELF_DESTRUCT_MIN),
/* harmony export */   "hJ": () => (/* binding */ AppearanceTheme),
/* harmony export */   "he": () => (/* binding */ defaultSettings),
/* harmony export */   "uj": () => (/* binding */ DEFAULT_FIRST_PARTY_COOKIES_SELF_DESTRUCT_MIN)
/* harmony export */ });
/* unused harmony exports DEFAULT_ALLOWLIST, DEFAULT_INVERTED_ALLOWLIST */
/* harmony import */ var _background_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51699);
/* harmony import */ var _user_agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43347);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



let AppearanceTheme = /*#__PURE__*/function (AppearanceTheme) {
  AppearanceTheme["System"] = "system";
  AppearanceTheme["Dark"] = "dark";
  AppearanceTheme["Light"] = "light";
  return AppearanceTheme;
}({});
const DEFAULT_FILTERS_UPDATE_PERIOD = -1;
const DEFAULT_FIRST_PARTY_COOKIES_SELF_DESTRUCT_MIN = 4320;
const DEFAULT_THIRD_PARTY_COOKIES_SELF_DESTRUCT_MIN = 2880;
const DEFAULT_ALLOWLIST = [];
const DEFAULT_INVERTED_ALLOWLIST = [];
const defaultSettings = {
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableShowAdguardPromoInfo */ .qY.DisableShowAdguardPromoInfo]: !_user_agent__WEBPACK_IMPORTED_MODULE_1__/* .UserAgent.isWindows */ .Z.isWindows && !_user_agent__WEBPACK_IMPORTED_MODULE_1__/* .UserAgent.isMacOs */ .Z.isMacOs || _user_agent__WEBPACK_IMPORTED_MODULE_1__/* .UserAgent.isEdge */ .Z.isEdge,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableSafebrowsing */ .qY.DisableSafebrowsing]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableCollectHits */ .qY.DisableCollectHits]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DefaultAllowlistMode */ .qY.DefaultAllowlistMode]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.AllowlistEnabled */ .qY.AllowlistEnabled]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.UseOptimizedFilters */ .qY.UseOptimizedFilters]: _user_agent__WEBPACK_IMPORTED_MODULE_1__/* .UserAgent.isAndroid */ .Z.isAndroid,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableDetectFilters */ .qY.DisableDetectFilters]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableShowAppUpdatedNotification */ .qY.DisableShowAppUpdatedNotification]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.FiltersUpdatePeriod */ .qY.FiltersUpdatePeriod]: DEFAULT_FILTERS_UPDATE_PERIOD,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableStealthMode */ .qY.DisableStealthMode]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.HideReferrer */ .qY.HideReferrer]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.HideSearchQueries */ .qY.HideSearchQueries]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.SendDoNotTrack */ .qY.SendDoNotTrack]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.RemoveXClientData */ .qY.RemoveXClientData]: _user_agent__WEBPACK_IMPORTED_MODULE_1__/* .UserAgent.isChrome */ .Z.isChrome,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.BlockWebRTC */ .qY.BlockWebRTC]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.SelfDestructThirdPartyCookies */ .qY.SelfDestructThirdPartyCookies]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.SelfDestructThirdPartyCookiesTime */ .qY.SelfDestructThirdPartyCookiesTime]: DEFAULT_THIRD_PARTY_COOKIES_SELF_DESTRUCT_MIN,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.SelfDestructFirstPartyCookies */ .qY.SelfDestructFirstPartyCookies]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.SelfDestructFirstPartyCookiesTime */ .qY.SelfDestructFirstPartyCookiesTime]: DEFAULT_FIRST_PARTY_COOKIES_SELF_DESTRUCT_MIN,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.AppearanceTheme */ .qY.AppearanceTheme]: AppearanceTheme.System,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.UserFilterEnabled */ .qY.UserFilterEnabled]: true,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.HideRateBlock */ .qY.HideRateBlock]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.UserRulesEditorWrap */ .qY.UserRulesEditorWrap]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableFiltering */ .qY.DisableFiltering]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableShowPageStats */ .qY.DisableShowPageStats]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.DisableShowContextMenu */ .qY.DisableShowContextMenu]: false,
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.AllowlistDomains */ .qY.AllowlistDomains]: JSON.stringify(DEFAULT_ALLOWLIST),
  [_background_schema__WEBPACK_IMPORTED_MODULE_0__/* .SettingOption.InvertedAllowlistDomains */ .qY.InvertedAllowlistDomains]: JSON.stringify(DEFAULT_INVERTED_ALLOWLIST)
};

/***/ }),

/***/ 98133:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ i18n)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53679);
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const i18n = {
  getMessage: (webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().i18n.getMessage),
  getUILanguage: (webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().i18n.getUILanguage),
  getBaseMessage: key => key,
  // TODO: export 'Locales' type from '@adguard/translate'
  getBaseUILanguage: () => 'en'
};

/***/ }),

/***/ 38647:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_": () => (/* binding */ reactTranslator)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70846);
/* harmony import */ var _adguard_translate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58396);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(98133);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */





/**
 * Retrieves localised messages by key, formats and converts into react components or string
 */
const reactTranslator = _adguard_translate__WEBPACK_IMPORTED_MODULE_1__/* .translate.createReactTranslator */ .Iu.createReactTranslator(_i18n__WEBPACK_IMPORTED_MODULE_2__/* .i18n */ .a, react__WEBPACK_IMPORTED_MODULE_0__);

/***/ }),

/***/ 43347:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ UserAgent)
/* harmony export */ });
/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58171);
/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_0__);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



/**
 * Helper class for user agent data.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/User-Agent_Client_Hints_API#browser_compatibility
 */
class UserAgent {
  /**
   * Returns current browser name.
   *
   * @returns user agent browser name.
   */
  static getBrowserName() {
    return UserAgent.parser.getBrowser().name;
  }

  /**
   * Check if the current browser is as given.
   *
   * @param browserName Browser Name.
   * @returns true, if current browser has specified name.
   */
  static isTargetBrowser(browserName) {
    return UserAgent.parser.getBrowser().name === browserName;
  }

  /**
   * Check if current platform is as given.
   *
   * @param platformName Platform name.
   * @returns true, if current browser has specified name.
   */
  static isTargetPlatform(platformName) {
    return UserAgent.parser.getOS().name === platformName;
  }

  /**
   * Check if current engine is as given.
   *
   * @param engineName Engine name.
   * @returns true, if current engine has specified name.
   */
  static isTargetEngine(engineName) {
    return UserAgent.parser.getEngine().name === engineName;
  }

  /**
   * Returns a major browser version.
   *
   * @returns browser version number or undefined.
   */
  static getVersion() {
    var _browser$version;
    const browser = this.parser.getBrowser();
    const versionNumber = Number((_browser$version = browser.version) === null || _browser$version === void 0 ? void 0 : _browser$version.split('.')[0]);
    return Number.isNaN(versionNumber) ? undefined : versionNumber;
  }
}
UserAgent.parser = new (ua_parser_js__WEBPACK_IMPORTED_MODULE_0___default())(navigator.userAgent);
UserAgent.version = UserAgent.getVersion();
UserAgent.isChrome = UserAgent.isTargetBrowser('Chrome');
UserAgent.isFirefox = UserAgent.isTargetBrowser('Firefox');
UserAgent.isOpera = UserAgent.isTargetBrowser('Opera');
UserAgent.isYandex = UserAgent.isTargetBrowser('Yandex');
UserAgent.isEdge = UserAgent.isTargetBrowser('Edge');
UserAgent.isEdgeChromium = UserAgent.isEdge && !!(UserAgent.version && UserAgent.version >= 79);
UserAgent.isMacOs = UserAgent.isTargetPlatform('Mac OS');
UserAgent.isWindows = UserAgent.isTargetPlatform('Windows');
UserAgent.isAndroid = UserAgent.isTargetPlatform('Android');
UserAgent.isChromium = UserAgent.isTargetEngine('Blink');
UserAgent.isSupportedBrowser = UserAgent.isChrome && Number(UserAgent.version) >= 79 || UserAgent.isEdgeChromium && Number(UserAgent.version) >= 79 || UserAgent.isFirefox && Number(UserAgent.version) >= 78 || UserAgent.isOpera && Number(UserAgent.version) >= 66;
UserAgent.browserName = UserAgent.getBrowserName();

/***/ }),

/***/ 87235:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": () => (/* binding */ Icon)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70846);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8356);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



const Svg = ({
  id,
  classname,
  title
}) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
  className: classname
}, title && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("title", null, title), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("use", {
  xlinkHref: id
}));

/**
 * Wrapper removes animation stuttering and makes icon resetting on animation end smooth
 */
const AnimatedWrapper = ({
  children,
  className
}) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {
  className: className
}, children);
const Icon = ({
  id,
  classname,
  title,
  animationCondition,
  animationClassname
}) => {
  const iconClassname = classnames__WEBPACK_IMPORTED_MODULE_1___default()('icon', classname);
  const icon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Svg, {
    id: id,
    classname: iconClassname,
    title: title
  });
  return animationCondition && animationClassname ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(AnimatedWrapper, {
    className: animationClassname
  }, icon) : icon;
};

/***/ }),

/***/ 58374:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L7": () => (/* binding */ useSelect),
/* harmony export */   "XB": () => (/* binding */ SelectProvider)
/* harmony export */ });
/* unused harmony export SelectContext */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70846);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


const noop = () => {};
const SelectContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  currentSelect: null,
  setCurrentSelect: noop
});
const SelectProvider = ({
  currentSelect: currentSelectProp = null,
  children
}) => {
  const [currentSelect, setCurrentSelect] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(currentSelectProp);
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      currentSelect,
      setCurrentSelect
    };
  }, [currentSelect]);
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(SelectContext.Provider, {
    value: context
  }, children);
};
const useSelect = id => {
  const {
    currentSelect,
    setCurrentSelect
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SelectContext);
  const hidden = currentSelect !== id;
  const setHidden = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(hide => {
    setCurrentSelect(hide ? null : id);
  }, [setCurrentSelect, id]);
  return [hidden, setHidden];
};

/***/ }),

/***/ 78650:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "P": () => (/* reexport */ SelectWrapper)
});

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(70846);
// EXTERNAL MODULE: ./Extension/src/pages/common/components/ui/Select/SelectProvider.jsx
var SelectProvider = __webpack_require__(58374);
// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(8356);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);
// EXTERNAL MODULE: ./Extension/src/pages/common/hooks/useOutsideClick.js
var useOutsideClick = __webpack_require__(31479);
// EXTERNAL MODULE: ./Extension/src/pages/common/hooks/useOutsideFocus.js
var useOutsideFocus = __webpack_require__(40536);
// EXTERNAL MODULE: ./Extension/src/pages/common/components/ui/Icon.jsx
var Icon = __webpack_require__(87235);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(35491);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(19532);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(48190);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(47630);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(60664);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(82563);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/common/components/ui/Select/select.pcss
var Select_select = __webpack_require__(79461);
;// CONCATENATED MODULE: ./Extension/src/pages/common/components/ui/Select/select.pcss

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(Select_select/* default */.Z, options);




       /* harmony default export */ const ui_Select_select = (Select_select/* default */.Z && Select_select/* default.locals */.Z.locals ? Select_select/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/common/components/ui/Select/Select.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */







const Select = ({
  id,
  handler,
  options,
  value,
  hidden,
  setHidden,
  popupModification = false
}) => {
  const ref = (0,react.useRef)(null);
  const refList = (0,react.useRef)(null);
  const renderItems = () => options.map(option => {
    const {
      value: currentValue,
      title
    } = option;
    const handleOptionClick = e => {
      e.stopPropagation();
      handler(currentValue);
      setHidden(true);
    };
    return /*#__PURE__*/react.createElement("button", {
      type: "button",
      className: "select__item",
      onClick: handleOptionClick,
      key: currentValue,
      value: currentValue
    }, title);
  });
  (0,react.useEffect)(() => {
    return () => {
      setHidden(true);
    };
  }, [setHidden]);
  (0,useOutsideClick/* useOutsideClick */.O)(ref, () => {
    setHidden(true);
  });
  (0,useOutsideFocus/* useOutsideFocus */.W)(refList, () => {
    setHidden(true);
  });
  const handleSelectClick = e => {
    e.stopPropagation();
    setHidden(!hidden);
  };
  const currentValue = options.find(i => i.value === value);
  const currentTitle = currentValue.title;
  return /*#__PURE__*/react.createElement("div", {
    id: id,
    className: classnames_default()('select', popupModification ? 'popup-modification' : ''),
    ref: ref
  }, /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: "select__value",
    onClick: handleSelectClick
  }, currentTitle), /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#select",
    classname: "icon--select select__ico"
  }), !hidden && /*#__PURE__*/react.createElement("div", {
    className: "select__list",
    ref: refList
  }, renderItems(options)));
};
;// CONCATENATED MODULE: ./Extension/src/pages/common/components/ui/Select/SelectWithContext.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */





const SelectWithContext = ({
  id,
  handler,
  options,
  value,
  popupModification = false
}) => {
  const [hidden, setHidden] = (0,SelectProvider/* useSelect */.L7)(id);
  return /*#__PURE__*/react.createElement(Select, {
    id: id,
    handler: handler,
    options: options,
    value: value,
    hidden: hidden,
    setHidden: setHidden,
    popupModification: popupModification
  });
};
;// CONCATENATED MODULE: ./Extension/src/pages/common/components/ui/Select/SelectWithoutContext.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */




const SelectWithoutContext = ({
  id,
  handler,
  options,
  value,
  popupModification = false
}) => {
  const [hidden, setHidden] = (0,react.useState)(true);
  return /*#__PURE__*/react.createElement(Select, {
    id: id,
    handler: handler,
    options: options,
    value: value,
    hidden: hidden,
    setHidden: setHidden,
    popupModification: popupModification
  });
};
;// CONCATENATED MODULE: ./Extension/src/pages/common/components/ui/Select/SelectWrapper.jsx
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */





const SelectWrapper = ({
  id,
  handler,
  options,
  value,
  // Boolean flag indicating the need to render Select in a popup page with
  // almost the same business logic (useState instead of a hook with
  // Context.Provider), but a different layout: reverse order of icons,
  // smaller text, using all the space of the parent element.
  popupModification,
  withContext
}) => {
  const props = {
    id,
    handler,
    options,
    value,
    popupModification
  };
  return withContext ? /*#__PURE__*/react.createElement(SelectWithContext, props) : /*#__PURE__*/react.createElement(SelectWithoutContext, props);
};
;// CONCATENATED MODULE: ./Extension/src/pages/common/components/ui/Select/index.js
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */



/***/ }),

/***/ 79735:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dR": () => (/* binding */ MIN_FILTERS_UPDATE_DISPLAY_DURATION_MS),
/* harmony export */   "nD": () => (/* binding */ MIN_USER_RULES_REMOVAL_DISPLAY_DURATION_MS)
/* harmony export */ });
/* unused harmony export HANDLER_DELAY_MS */
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const MIN_FILTERS_UPDATE_DISPLAY_DURATION_MS = 2000;
const MIN_USER_RULES_REMOVAL_DISPLAY_DURATION_MS = 1500;
const HANDLER_DELAY_MS = 2000; // less time leads to interface freeze

/***/ }),

/***/ 72730:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => (/* binding */ useAppearanceTheme)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70846);
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(49789);
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _common_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(71012);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */




const useAppearanceTheme = appearanceTheme => {
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    const STORAGE_KEY = 'appearance_theme';
    const DARK_THEME_CLASS = 'dark-mode';
    const LIGHT_THEME_CLASS = 'light-mode';
    const SET_TO_STORAGE_TIMEOUT = 500;
    const throttledSetToStorage = lodash_throttle__WEBPACK_IMPORTED_MODULE_1___default()(mode => {
      localStorage.setItem(STORAGE_KEY, mode);
    }, SET_TO_STORAGE_TIMEOUT);
    let theme = appearanceTheme;
    if (!theme) {
      theme = localStorage.getItem(STORAGE_KEY);
    } else {
      throttledSetToStorage(theme);
    }
    switch (theme) {
      case _common_settings__WEBPACK_IMPORTED_MODULE_2__/* .AppearanceTheme.Dark */ .hJ.Dark:
        {
          document.documentElement.classList.add(DARK_THEME_CLASS);
          document.documentElement.classList.remove(LIGHT_THEME_CLASS);
          break;
        }
      case _common_settings__WEBPACK_IMPORTED_MODULE_2__/* .AppearanceTheme.Light */ .hJ.Light:
        {
          document.documentElement.classList.add(LIGHT_THEME_CLASS);
          document.documentElement.classList.remove(DARK_THEME_CLASS);
          break;
        }
      default:
        {
          document.documentElement.classList.remove(DARK_THEME_CLASS);
          document.documentElement.classList.remove(LIGHT_THEME_CLASS);
        }
    }
  }, [appearanceTheme]);
};

/***/ }),

/***/ 31479:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "O": () => (/* binding */ useOutsideClick)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70846);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


const useOutsideClick = (ref, callback) => {
  const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    if (ref.current && !ref.current.contains(e.target)) {
      callback();
    }
  }, [ref, callback]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    document.addEventListener('click', handleClick);
    return () => {
      document.removeEventListener('click', handleClick);
    };
  }, [ref, handleClick]);
};

/***/ }),

/***/ 40536:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": () => (/* binding */ useOutsideFocus)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70846);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */


const useOutsideFocus = (ref, callback) => {
  const handleFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    if (ref.current && !ref.current.contains(e.target)) {
      callback();
    }
  }, [ref, callback]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    document.addEventListener('focusin', handleFocus);
    return () => {
      document.removeEventListener('focusin', handleFocus);
    };
  }, [ref, handleFocus]);
};

/***/ }),

/***/ 37916:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ messenger)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53679);
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32380);
/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59948);
/* harmony import */ var _common_messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23104);
/**
 * @file
 * This file is part of AdGuard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * AdGuard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AdGuard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdGuard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */





class Messenger {
  constructor() {
    this.onMessage = (webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.onMessage);
    /**
     * Creates long lived connections between popup and background page.
     *
     * @param {string} page
     * @param events
     * @param callback
     * @returns {Function}
     */
    this.createLongLivedConnection = (page, events, callback) => {
      const eventListener = (...args) => {
        callback(...args);
      };
      const port = webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.connect({
        name: `${page}_${(0,nanoid__WEBPACK_IMPORTED_MODULE_3__/* .nanoid */ .x0)()}`
      });
      port.postMessage({
        type: _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.AddLongLivedConnection */ .Cs.AddLongLivedConnection,
        data: {
          events
        }
      });
      port.onMessage.addListener(message => {
        if (message.type === _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.NotifyListeners */ .Cs.NotifyListeners) {
          const [type, ...data] = message.data;
          eventListener({
            type,
            data
          });
        }
      });
      port.onDisconnect.addListener(() => {
        if ((webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.lastError)) {
          _common_log__WEBPACK_IMPORTED_MODULE_1__/* .Log.error */ .Zb.error((webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.lastError.message));
        }
      });
      const onUnload = () => {
        port.disconnect();
      };
      window.addEventListener('beforeunload', onUnload);
      window.addEventListener('unload', onUnload);
      return onUnload;
    };
    /**
     * Method subscribes to notifier module events.
     *
     * @param events - list of events to which subscribe
     * @param callback - callback called when event fires
     * @param onUnloadCallback - callback used to remove listener on unload
     * @returns {Promise<function(): Promise<void>>}
     */
    this.createEventListener = async (events, callback, onUnloadCallback) => {
      const eventListener = (...args) => {
        callback(...args);
      };
      let {
        listenerId
      } = await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.CreateEventListener */ .Cs.CreateEventListener, {
        events
      });
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.onMessage.addListener(message => {
        if (message.type === _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.NotifyListeners */ .Cs.NotifyListeners) {
          const [type, ...data] = message.data;
          eventListener({
            type,
            data
          });
        }
      });
      const onUnload = async () => {
        if (listenerId) {
          const type = _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.RemoveListener */ .Cs.RemoveListener;
          this.sendMessage(type, {
            listenerId
          });
          listenerId = null;
          if (typeof onUnloadCallback === 'function') {
            onUnloadCallback();
          }
        }
      };
      window.addEventListener('beforeunload', onUnload);
      window.addEventListener('unload', onUnload);
      return onUnload;
    };
    this.openExtensionStore = async () => {
      return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OpenExtensionStore */ .Cs.OpenExtensionStore);
    };
    this.openComparePage = async () => {
      return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OpenComparePage */ .Cs.OpenComparePage);
    };
    this.resetCustomRulesForPage = this.resetCustomRulesForPage.bind(this);
    this.updateFilters = this.updateFilters.bind(this);
  }

  // eslint-disable-next-line class-methods-use-this
  async sendMessage(type, data) {
    _common_log__WEBPACK_IMPORTED_MODULE_1__/* .Log.debug */ .Zb.debug('Request type:', type);
    if (data) {
      _common_log__WEBPACK_IMPORTED_MODULE_1__/* .Log.debug */ .Zb.debug('Request data:', data);
    }
    const response = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.sendMessage({
      handlerName: _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .APP_MESSAGE_HANDLER_NAME */ .ZA,
      type,
      data
    });
    if (response) {
      _common_log__WEBPACK_IMPORTED_MODULE_1__/* .Log.debug */ .Zb.debug('Response type:', type);
      _common_log__WEBPACK_IMPORTED_MODULE_1__/* .Log.debug */ .Zb.debug('Response data:', response);
    }
    return response;
  }
  async getOptionsData() {
    const res = await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.GetOptionsData */ .Cs.GetOptionsData);
    return res;
  }
  async changeUserSetting(settingId, value) {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.ChangeUserSettings */ .Cs.ChangeUserSettings, {
      key: settingId,
      value
    });
  }
  async enableFilter(filterId) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.AddAndEnableFilter */ .Cs.AddAndEnableFilter, {
      filterId
    });
  }
  async disableFilter(filterId) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.DisableFilter */ .Cs.DisableFilter, {
      filterId
    });
  }
  async applySettingsJson(json) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.ApplySettingsJson */ .Cs.ApplySettingsJson, {
      json
    });
  }
  async openFilteringLog() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OpenFilteringLog */ .Cs.OpenFilteringLog);
  }
  async resetStatistics() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.ResetBlockedAdsCount */ .Cs.ResetBlockedAdsCount);
  }
  async setFilteringLogWindowState(windowState) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.SetFilteringLogWindowState */ .Cs.SetFilteringLogWindowState, {
      windowState
    });
  }
  async resetSettings() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.ResetSettings */ .Cs.ResetSettings);
  }
  async getUserRules() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.GetUserRules */ .Cs.GetUserRules);
  }
  async saveUserRules(value) {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.SaveUserRules */ .Cs.SaveUserRules, {
      value
    });
  }
  async getAllowlist() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.GetAllowlistDomains */ .Cs.GetAllowlistDomains);
  }
  async saveAllowlist(value) {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.SaveAllowlistDomains */ .Cs.SaveAllowlistDomains, {
      value
    });
  }
  async updateFilters() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.CheckFiltersUpdate */ .Cs.CheckFiltersUpdate);
  }
  async updateGroupStatus(id, data) {
    const type = data ? _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.EnableFiltersGroup */ .Cs.EnableFiltersGroup : _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.DisableFiltersGroup */ .Cs.DisableFiltersGroup;
    const groupId = id - 0;
    await this.sendMessage(type, {
      groupId
    });
  }
  async updateFilterStatus(filterId, data) {
    const type = data ? _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.AddAndEnableFilter */ .Cs.AddAndEnableFilter : _common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.DisableFilter */ .Cs.DisableFilter;
    await this.sendMessage(type, {
      filterId
    });
  }
  async checkCustomUrl(url) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.LoadCustomFilterInfo */ .Cs.LoadCustomFilterInfo, {
      url
    });
  }
  async addCustomFilter(filter) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.SubscribeToCustomFilter */ .Cs.SubscribeToCustomFilter, {
      filter
    });
  }
  async removeCustomFilter(filterId) {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.RemoveAntiBannerFilter */ .Cs.RemoveAntiBannerFilter, {
      filterId
    });
  }
  async getTabInfoForPopup(tabId) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.GetTabInfoForPopup */ .Cs.GetTabInfoForPopup, {
      tabId
    });
  }
  async changeApplicationFilteringDisabled(state) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.ChangeApplicationFilteringDisabled */ .Cs.ChangeApplicationFilteringDisabled, {
      state
    });
  }
  async openSettingsTab() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OpenSettingsTab */ .Cs.OpenSettingsTab);
  }
  async openAssistant() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OpenAssistant */ .Cs.OpenAssistant);
  }
  async openAbuseSite(url, from) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OpenAbuseTab */ .Cs.OpenAbuseTab, {
      url,
      from
    });
  }
  async checkSiteSecurity(url, from) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OpenSiteReportTab */ .Cs.OpenSiteReportTab, {
      url,
      from
    });
  }
  async resetCustomRulesForPage(url) {
    const [currentTab] = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().tabs.query({
      active: true,
      currentWindow: true
    });
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.ResetCustomRulesForPage */ .Cs.ResetCustomRulesForPage, {
      url,
      tabId: currentTab === null || currentTab === void 0 ? void 0 : currentTab.id
    });
  }
  async removeAllowlistDomain(tabId, tabRefresh) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.RemoveAllowlistDomain */ .Cs.RemoveAllowlistDomain, {
      tabId,
      tabRefresh
    });
  }
  async addAllowlistDomain(tabId) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.AddAllowlistDomainPopup */ .Cs.AddAllowlistDomainPopup, {
      tabId
    });
  }
  async getStatisticsData() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.GetStatisticsData */ .Cs.GetStatisticsData);
  }
  async onOpenFilteringLogPage() {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OnOpenFilteringLogPage */ .Cs.OnOpenFilteringLogPage);
  }
  async getFilteringLogData() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.GetFilteringLogData */ .Cs.GetFilteringLogData);
  }
  async onCloseFilteringLogPage() {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.OnCloseFilteringLogPage */ .Cs.OnCloseFilteringLogPage);
  }
  async getFilteringInfoByTabId(tabId) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.GetFilteringInfoByTabId */ .Cs.GetFilteringInfoByTabId, {
      tabId
    });
  }
  async synchronizeOpenTabs() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.SynchronizeOpenTabs */ .Cs.SynchronizeOpenTabs);
  }
  async clearEventsByTabId(tabId, ignorePreserveLog) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.ClearEventsByTabId */ .Cs.ClearEventsByTabId, {
      tabId,
      ignorePreserveLog
    });
  }
  async refreshPage(tabId, preserveLogEnabled) {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.RefreshPage */ .Cs.RefreshPage, {
      tabId,
      preserveLogEnabled
    });
  }
  async addUserRule(ruleText) {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.AddUserRule */ .Cs.AddUserRule, {
      ruleText
    });
  }
  async removeUserRule(ruleText) {
    await this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.RemoveUserRule */ .Cs.RemoveUserRule, {
      ruleText
    });
  }
  async setPreserveLogState(state) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.SetPreserveLogState */ .Cs.SetPreserveLogState, {
      state
    });
  }
  async getEditorStorageContent() {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.GetEditorStorageContent */ .Cs.GetEditorStorageContent);
  }
  async setEditorStorageContent(content) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.SetEditorStorageContent */ .Cs.SetEditorStorageContent, {
      content
    });
  }
  async convertRuleText(content) {
    return this.sendMessage(_common_messages__WEBPACK_IMPORTED_MODULE_2__/* .MessageType.ConvertRulesText */ .Cs.ConvertRulesText, {
      content
    });
  }
}
const messenger = new Messenger();


/***/ }),

/***/ 79461:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".select {\n    display: inline-block;\n    position: relative;\n}\n\n    .select__value {\n        font-weight: 500;\n        white-space: nowrap;\n        font-size: 16px;\n        -moz-text-align-last: right;\n             text-align-last: right;\n        color: var(--gray-base);\n        padding-right: 25px;\n        cursor: pointer;\n        border: 0;\n        background-color: transparent;\n        -webkit-appearance: none;\n    }\n\n    @media (color-index: 48) {\n\n    .select__value {\n            color: var(--gray300)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .select__value {\n            color: var(--gray300)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .select__value {\n            color: var(--gray300)\n    }\n        }\n\n    .select__ico {\n        position: absolute;\n        pointer-events: none;\n        right: 5px;\n        top: calc(50% - 4px);\n    }\n\n    .select__list {\n        position: absolute;\n        right: 0;\n        z-index: 10;\n        border: 1px solid var(--gray700);\n        border-radius: 4px;\n        max-height: 265px;\n        min-width: 160px;\n        max-width: 220px;\n        overflow-y: auto;\n        box-shadow: 0 0 7px 3px rgba(0, 0, 0, 0.1);\n        margin: 13px 0 0 0;\n        background-color: var(--white);\n        scrollbar-width: thin;\n    }\n\n    @media (color-index: 48) {\n\n    .select__list {\n            background-color: var(--black)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .select__list {\n            background-color: var(--black)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .select__list {\n            background-color: var(--black)\n    }\n        }\n\n    .select__list[hidden] {\n            display: none;\n        }\n\n    .select__list::-webkit-scrollbar {\n            width: 4px;\n        }\n\n    .select__list::-webkit-scrollbar-thumb {\n            border-radius: 0;\n            background-color: var(--gray700);\n        }\n\n    .select__item {\n        font-size: 15px;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        max-width: 100%;\n        padding: 16px 25px;\n        cursor: pointer;\n        border: 0;\n        background-color: transparent;\n        color: var(--gray900);\n        width: 100%;\n        text-align: left;\n    }\n\n    .select__item.focus-visible {\n            outline: none;\n            box-shadow: inset 0 0 0 2px var(--outline);\n        }\n\n    .select__item:focus-visible {\n            outline: none;\n            box-shadow: inset 0 0 0 2px var(--outline);\n        }\n\n    @media (color-index: 48) {\n\n    .select__item {\n            color: var(--gray300)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .select__item {\n            color: var(--gray300)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .select__item {\n            color: var(--gray300)\n    }\n        }\n\n    .select__item:hover {\n            background-color: var(--gray100);\n        }\n\n    @media (color-index: 48) {\n\n    .select__item:hover {\n                background-color: var(--gray900)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .select__item:hover {\n                background-color: var(--gray900)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .select__item:hover {\n                background-color: var(--gray900)\n        }\n            }\n\n    /* Reverse order of icon, smaller text, using full space of parent element */\n\n    .select.popup-modification {\n        width: 100%;\n        height: 100%;\n        display: flex;\n    }\n\n    .select.popup-modification .select__ico {\n            position: absolute;\n            pointer-events: none;\n            left: 5px;\n            top: calc(50% - 4px);\n        }\n\n    .select.popup-modification .select__value {\n            width: 100%;\n            font-size: 12px;\n            -moz-text-align-last: left;\n                 text-align-last: left;\n            padding-left: 25px;\n        }\n\n    .select.popup-modification .select__list {\n            left: 0;\n            right: auto;\n            right: initial;\n        }\n\n.light-mode .select__value {\n            color: var(--gray-base);\n        }\n\n.light-mode .select__list {\n            background-color: var(--white);\n        }\n\n.light-mode .select__item {\n            color: var(--gray900);\n        }\n\n.light-mode .select__item:hover {\n                background-color: var(--gray100);\n                color: var(--gray900);\n            }\n\n.dark-mode .select__value {\n            color: var(--gray300);\n        }\n\n.dark-mode .select__list {\n            background-color: var(--black);\n        }\n\n.dark-mode .select__item {\n            color: var(--gray300);\n        }\n\n.dark-mode .select__item:hover {\n                background-color: var(--gray900);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 84381:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n    font-family: 'Roboto Flex';\n    src: url('../../../../assets/fonts/Roboto-Flex-Regular.woff2') format('woff2 supports variations'),\n       url('../../../../assets/fonts/Roboto-Flex-Regular.woff2') format('woff2-variations');\n    font-weight: 100 1000;\n    font-stretch: 25% 151%;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 26834:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ":root {\n    /*GRAYSCALE*/\n    --white: #ffffff;\n    --gray100: #f3f3f3;\n    --gray300: #d8d8d8;\n    --gray400: #a4a4a4;\n    --gray700: #888888;\n    --gray900: #4d4d4d;\n    --grayDark: #2a2a2a;\n    --black: #131313;\n    /*FEEDBACK*/\n    --red300: #bf4829;\n    --red400: #c23814;\n    --orange400: #eb9300;\n    /*BRAND*/\n    --green400: #67b279;\n    --green700: #4d995f;\n    /*ADDITIONAL*/\n    --purple400: #b267a0;\n    --purple700: #994d87;\n    --slateblue400: #677bb2;\n    --slateblue700: #4d6199;\n    --outline: #005ecc;\n    /*EDITOR*/\n    --green-editor: #338033;\n    --yellow-editor500: #ffff00;\n    --blue-selection: rgb(181, 213, 255);\n    /* - dark mode*/\n    --cyan-editor: #4093d6;\n    --yellow-editor: #dbdb84;\n    --pink-editor: #c46cbd;\n    --orange-editor: #cf8263;\n    --blueDark-editor: #264f78;\n    /* - light mode*/\n    --blue-editor: #4141e2;\n    --brown-editor: #795e26;\n    --purple-editor: #9e45b4;\n    --red-editor: #a31515;\n    /*FILTERING-LOG*/\n    --regular-row-hover: var(--gray100);\n    --regular-row-active: var(--gray300);\n    --red-row: #ffd3c7;\n    --red-row-hover: #ffb5a1;\n    --red-row-active: #ff967b;\n    --green-row: #dcffe5;\n    --green-row-hover: #c3ffd1;\n    --green-row-active: #a9ffbe;\n    --orange-row: #ffe4b7;\n    --orange-row-hover: #ffdda5;\n    --orange-row-active: #ffcf7d;\n    /*GRADIENTS*/\n}\n    /*FILTERING-LOG-DARK*/\n    @media (color-index: 48) {:root {\n        --regular-row-hover: #2f2f2f;\n        --regular-row-active: #3b3b3b;\n        --red-row: #46231a;\n        --red-row-hover: #692d1e;\n        --red-row-active: #7a3320;\n        --green-row: #2c4332;\n        --green-row-hover: #3d6246;\n        --green-row-active: #457250;\n        --orange-row: #4d350d;\n        --orange-row-hover: #61410B;\n        --orange-row-active: #744c0a;\n        --blue-selection: #556a86;\n        --outline: #99c9ff;\n}\n    }\n    @media (color: 48842621) {:root {\n        --regular-row-hover: #2f2f2f;\n        --regular-row-active: #3b3b3b;\n        --red-row: #46231a;\n        --red-row-hover: #692d1e;\n        --red-row-active: #7a3320;\n        --green-row: #2c4332;\n        --green-row-hover: #3d6246;\n        --green-row-active: #457250;\n        --orange-row: #4d350d;\n        --orange-row-hover: #61410B;\n        --orange-row-active: #744c0a;\n        --blue-selection: #556a86;\n        --outline: #99c9ff;\n}\n    }\n    @media (prefers-color-scheme: dark) {:root {\n        --regular-row-hover: #2f2f2f;\n        --regular-row-active: #3b3b3b;\n        --red-row: #46231a;\n        --red-row-hover: #692d1e;\n        --red-row-active: #7a3320;\n        --green-row: #2c4332;\n        --green-row-hover: #3d6246;\n        --green-row-active: #457250;\n        --orange-row: #4d350d;\n        --orange-row-hover: #61410B;\n        --orange-row-active: #744c0a;\n        --blue-selection: #556a86;\n        --outline: #99c9ff;\n}\n    }\n    :root {\n\n    --switch-btn-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\n    --swamp: #547b88;\n    --switch-field-enabled: linear-gradient(90deg, #67B279 0%, #39774C 100%);\n    --switch-field-disabled: linear-gradient(90deg, #732613 0%, #BF4829 100%);\n\n    --greyf7: #f7f7f7;\n    --gray05: rgba(239, 239, 239, 0.5);\n    --greye7: #e7e7e7;\n    --gey6a: #d1d1d1;\n    --grayd8: var(--gray700);\n    --grey78: #787878;\n    --gray-base: var(--gray900);\n    --gray4a: #4a4a4a;\n    --gray88: var(--gray700);\n    --green74: #66b574;\n    --green86: #68bc86;\n    --green75: #5ba575;\n    --red23: #F66F23;\n    --t3: 0.3s ease;\n    --overlay-gray: rgba(137, 137, 137, 0.5);\n    --light-shadow: rgba(0, 0, 0, 0.05);\n    --sidebar-transition: 0.3s ease;\n    --z-idx5: 5;\n    --z-idx6: 6;\n    --z-idx7: 7;\n    --z-idx8: 8;\n}\n\n.dark-mode {\n    --regular-row-hover: #2f2f2f;\n    --regular-row-active: #3b3b3b;\n    --red-row: #46231a;\n    --red-row-hover: #692d1e;\n    --red-row-active: #7a3320;\n    --green-row: #2c4332;\n    --green-row-hover: #3d6246;\n    --green-row-active: #457250;\n    --orange-row: #4d350d;\n    --orange-row-hover: #61410B;\n    --orange-row-active: #744c0a;\n    --blue-selection: #556a86;\n    --outline: #99c9ff;\n}\n\n.light-mode {\n    --regular-row-hover: var(--gray100);\n    --regular-row-active: var(--gray300);\n    --red-row: #ffd3c7;\n    --red-row-hover: #ffb5a1;\n    --red-row-active: #ff967b;\n    --green-row: #dcffe5;\n    --green-row-hover: #c3ffd1;\n    --green-row-active: #a9ffbe;\n    --orange-row: #ffe4b7;\n    --orange-row-hover: #ffdda5;\n    --orange-row-active: #ffcf7d;\n    --blue-selection: rgb(181, 213, 255);\n    --outline: #005ecc;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 82328:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".actions {\n    background-color: transparent;\n    border: 0;\n    height: 168px;\n    padding-top: 9px;\n    padding-bottom: 9px;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    max-width: 320px;\n}\n\n    @media (color-index: 48) {.actions {\n        background-color: var(--black)\n}\n    }\n\n    @media (color: 48842621) {.actions {\n        background-color: var(--black)\n}\n    }\n\n    @media (prefers-color-scheme: dark) {.actions {\n        background-color: var(--black)\n}\n    }\n\n    .actions .action {\n        width: 100%;\n        display: flex;\n        align-items: center;\n        padding: 0 20px;\n        cursor: pointer;\n        transition: 0.3s ease background-color;\n        height: 35px;\n    }\n\n    .actions .action:hover {\n            background-color: var(--gray100);\n        }\n\n    @media (color-index: 48) {\n\n    .actions .action:hover {\n                background-color: var(--grayDark)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .actions .action:hover {\n                background-color: var(--grayDark)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .actions .action:hover {\n                background-color: var(--grayDark)\n        }\n            }\n\n    .actions .action_disabled {\n            cursor: auto;\n            cursor: initial;\n            opacity: 0.5;\n        }\n\n    .actions .action_disabled:hover {\n                background-color: inherit;\n            }\n\n    .actions .action .action-title {\n            padding-left: 15px;\n            font-size: 13px;\n            color: var(--gray900);\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            max-width: 100%;\n        }\n\n    @media (color-index: 48) {\n\n    .actions .action .action-title {\n                color: var(--gray300)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .actions .action .action-title {\n                color: var(--gray300)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .actions .action .action-title {\n                color: var(--gray300)\n        }\n            }\n\n.light-mode .actions {\n        background-color: var(--white);\n    }\n\n.light-mode .actions .action:hover {\n                background-color: var(--gray100);\n            }\n\n.light-mode .actions .action .action-title {\n                color: var(--gray900);\n            }\n\n.dark-mode .actions {\n        background-color: var(--black);\n    }\n\n.dark-mode .actions .action:hover {\n                background-color: var(--grayDark);\n            }\n\n.dark-mode .actions .action .action-title {\n                color: var(--gray300);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 9066:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".footer {\n    margin-top: auto;\n    display: flex;\n    align-items: center;\n    height: 40px;\n    padding: 0 12px 0 16px;\n    font-size: 13px;\n    color: var(--gray900);\n    background-color: var(--gray100);\n}\n\n    @media (color-index: 48) {.footer {\n        color: var(--gray300);\n        background-color: var(--gray900)\n}\n    }\n\n    @media (color: 48842621) {.footer {\n        color: var(--gray300);\n        background-color: var(--gray900)\n}\n    }\n\n    @media (prefers-color-scheme: dark) {.footer {\n        color: var(--gray300);\n        background-color: var(--gray900)\n}\n    }\n\n    .footer__text {\n        max-width: 215px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n\n    .footer__platforms {\n        flex-grow: 1;\n        flex-shrink: 0;\n        text-align: right;\n    }\n\n    .footer__link {\n        margin-left: 10px;\n    }\n\n    .footer__icon {\n        width: 24px;\n        height: 24px;\n        color: var(--gray300);\n        transition: 0.3s ease color;\n    }\n\n    @media (color-index: 48) {\n\n    .footer__icon {\n            color: var(--gray400)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .footer__icon {\n            color: var(--gray400)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .footer__icon {\n            color: var(--gray400)\n    }\n        }\n\n    .footer__icon:hover {\n            color: var(--gray700);\n        }\n\n    @media (color-index: 48) {\n\n    .footer__icon:hover {\n                color: var(--gray300)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .footer__icon:hover {\n                color: var(--gray300)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .footer__icon:hover {\n                color: var(--gray300)\n        }\n            }\n\n.light-mode .footer {\n        color: var(--gray900);\n        background-color: var(--gray100);\n    }\n\n.light-mode .footer__icon {\n            color: var(--gray300);\n        }\n\n.light-mode .footer__icon:hover {\n                color: var(--gray700);\n            }\n\n.dark-mode .footer {\n        color: var(--gray300);\n        background-color: var(--gray900);\n    }\n\n.dark-mode .footer__icon {\n            color: var(--gray400);\n        }\n\n.dark-mode .footer__icon:hover {\n                color: var(--gray300)\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 69091:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".popup-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    min-height: 50px;\n    padding: 0 16px;\n}\n\n    @media (color-index: 48) {.popup-header {\n        background-color: var(--black)\n}\n    }\n\n    @media (color: 48842621) {.popup-header {\n        background-color: var(--black)\n}\n    }\n\n    @media (prefers-color-scheme: dark) {.popup-header {\n        background-color: var(--black)\n}\n    }\n\n    .popup-header__logo {\n        width: 113px;\n        height: 25px;\n    }\n\n    .popup-header__buttons {\n        display: flex;\n    }\n\n    .popup-header__button {\n        width: 24px;\n        height: 24px;\n        margin: 0 8px;\n        padding: 0;\n        border-radius: 4px;\n        color: var(--gray400);\n        transition: var(--t3) color, var(--t3) background-color;\n    }\n\n    @media (color-index: 48) {\n\n    .popup-header__button {\n            color: var(--gray700)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .popup-header__button {\n            color: var(--gray700)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .popup-header__button {\n            color: var(--gray700)\n    }\n        }\n\n    .popup-header__button:hover {\n            color: var(--gray700);\n            background-color: var(--gray100);\n        }\n\n    @media (color-index: 48) {\n\n    .popup-header__button:hover {\n                background-color: var(--gray900);\n                color: var(--gray400)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .popup-header__button:hover {\n                background-color: var(--gray900);\n                color: var(--gray400)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .popup-header__button:hover {\n                background-color: var(--gray900);\n                color: var(--gray400)\n        }\n            }\n\n@keyframes spin {\n    0% {transform: rotate(0)}\n    100% {transform: rotate(360deg)}\n}\n\n.light-mode .popup-header {\n        background-color: var(--white);\n    }\n\n.light-mode .popup-header__button {\n            color: var(--gray400);\n        }\n\n.light-mode .popup-header__button:hover {\n                background-color: var(--gray100);\n                color: var(--gray700);\n            }\n\n.dark-mode .popup-header {\n        background-color: var(--black);\n    }\n\n.dark-mode .popup-header__button {\n            color: var(--gray700);\n        }\n\n.dark-mode .popup-header__button:hover {\n                background-color: var(--gray900);\n                color: var(--gray400);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 21936:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".main {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 300px;\n    color: var(--gray900);\n}\n\n    @media (color-index: 48) {.main {\n        color: var(--gray300)\n}\n    }\n\n    @media (color: 48842621) {.main {\n        color: var(--gray300)\n}\n    }\n\n    @media (prefers-color-scheme: dark) {.main {\n        color: var(--gray300)\n}\n    }\n\n    .main__header {\n        min-height: 75px;\n    }\n\n    .main__cta-link {\n        text-align: center;\n        font-size: 12px;\n        color: var(--gray700);\n        transition: var(--t3) color;\n    }\n\n    @media (color-index: 48) {\n\n    .main__cta-link {\n            color: var(--gray400)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .main__cta-link {\n            color: var(--gray400)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .main__cta-link {\n            color: var(--gray400)\n    }\n        }\n\n    .main__cta-link:hover {\n            color: var(--gray900);\n        }\n\n    @media (color-index: 48) {\n\n    .main__cta-link:hover {\n                color: var(--gray100)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .main__cta-link:hover {\n                color: var(--gray100)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .main__cta-link:hover {\n                color: var(--gray100)\n        }\n            }\n\n    .main__total-blocked-tab {\n        font-weight: bold;\n        text-align: center;\n        font-size: 24px;\n    }\n\n    .main__total-blocked-all {\n        text-align: center;\n        font-size: 16px;\n    }\n\n    .main .current-site {\n        padding-bottom: 2px;\n        font-size: 16px;\n        max-width: 260px;\n        text-align: center;\n        margin: 0 auto;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        font-weight: bold;\n    }\n\n    .main .current-status {\n        font-size: 14px;\n        text-align: center;\n        max-width: 280px;\n    }\n\n    .main--allowlisted .switcher {\n            opacity: 1;\n        }\n\n    .main--allowlisted .switcher__btn {\n                right: 36px;\n            }\n\n    .main--allowlisted .switcher__btn .switcher__icon--play {\n                    display: none;\n                }\n\n    .main--allowlisted .switcher__btn .switcher__icon--checkmark {\n                    display: none;\n                }\n\n    .main--allowlisted .switcher__btn .switcher__icon--circle {\n                    display: block;\n                }\n\n    .main--disabled .switcher {\n            opacity: 1;\n        }\n\n    .main--disabled .switcher__center {\n                opacity: 0;\n            }\n\n    .main--disabled .switcher__btn {\n                right: 18px;\n            }\n\n    .main--disabled .switcher__btn .switcher__icon--play {\n                    display: block;\n                }\n\n    .main--disabled .switcher__btn .switcher__icon--checkmark {\n                    display: none;\n                }\n\n    .main--disabled .switcher__btn .switcher__icon--circle {\n                    display: none;\n                }\n\n    .main--enabled .switcher, .main--unavailable .switcher, .main--in-exception .switcher {\n            opacity: 1;\n        }\n\n    .main--unavailable .switcher {\n            pointer-events: none;\n        }\n\n    .main--unavailable .switcher__center {\n                opacity: 0;\n            }\n\n    .main--unavailable .switcher__btn {\n                right: 18px;\n            }\n\n    .main--in-exception .switcher {\n            cursor: default;\n        }\n\n    .main--in-exception .switcher:hover .switcher__btn {\n                    transform: none;\n                }\n\n    .main--in-exception .switcher__btn {\n                cursor: default;\n                right: 22px;\n            }\n\n    .main--in-exception .switcher__btn:before {\n                    display: none;\n                }\n\n    .main--in-exception .switcher .switcher__icon--checkmark {\n                display: none;\n            }\n\n    .main--in-exception .switcher .switcher__icon--exclamation {\n                display: block;\n            }\n\n.switcher {\n    opacity: 0;\n    position: relative;\n    cursor: pointer;\n    height: 80px;\n    padding: 0 5px;\n}\n\n.switcher__info {\n        padding-top: 35px;\n    }\n\n.switcher__center {\n        width: 80px;\n        height: 30px;\n        border-radius: 100px;\n    }\n\n.switcher__center--enabled {\n            background-image: var(--switch-field-enabled);\n        }\n\n.switcher__center--allowlisted {\n            background-image: var(--switch-field-disabled);\n        }\n\n.switcher__btn {\n        position: absolute;\n        width: 50px;\n        height: 50px;\n        right: 5px;\n        top: 15px;\n        border-radius: 50%;\n        box-shadow: var(--switch-btn-shadow);\n        background-color: var(--white);\n        padding: 4px;\n        cursor: pointer;\n        transition: var(--t3) box-shadow;\n    }\n\n.switcher__btn:before {\n            content: '';\n            display: block;\n            width: 100%;\n            height: 100%;\n            border-radius: 50%;\n            background-color: var(--white);\n        }\n\n.switcher:hover .switcher__btn {\n            box-shadow: 0 0 0 6px rgba(0, 0, 0, 0.1);\n        }\n\n@media (color-index: 48) {\n\n.switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.2)\n        }\n            }\n\n@media (color: 48842621) {\n\n.switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.2)\n        }\n            }\n\n@media (prefers-color-scheme: dark) {\n\n.switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.2)\n        }\n            }\n\n.switcher__icon {\n        position: absolute;\n        left: 13px;\n        top: 13px;\n    }\n\n.switcher__icon--play {\n            display: none;\n        }\n\n.switcher__icon--circle {\n            display: none;\n        }\n\n.switcher__icon--checkmark {\n            display: block;\n        }\n\n.switcher__icon--exclamation {\n            display: none;\n            left: calc(50% - 2px);\n            top: 14px;\n        }\n\n.switcher__icon--cross {\n            color: var(--white);\n            display: none;\n            left: 17px;\n            top: 17px;\n        }\n\n.light-mode .main {\n        color: var(--gray900);\n    }\n\n.light-mode .main__cta-link {\n            color: var(--gray700);\n        }\n\n.light-mode .main__cta-link:hover {\n                color: var(--gray900);\n            }\n\n.light-mode .switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(0, 0, 0, 0.1);\n            }\n\n.dark-mode .main {\n        color: var(--gray300);\n    }\n\n.dark-mode .main__cta-link {\n            color: var(--gray400);\n        }\n\n.dark-mode .main__cta-link:hover {\n                color: var(--gray100);\n            }\n\n.dark-mode .switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.2);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 20291:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".main-container {\n    height: 300px;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 12845:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".popup {\n    height: 100%;\n    min-height: 600px;\n    overflow: hidden;\n    display: flex;\n    justify-content: flex-start;\n    align-items: stretch;\n    flex-direction: column;\n}\n\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 60384:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@keyframes notify-show {\n    0% {\n        transform: translateY(200px);\n    }\n\n    100% {\n        transform: translateY(0);\n    }\n}\n\n@keyframes notify-show-reverse {\n    0% {\n        transform: translateY(0);\n    }\n\n    100% {\n        transform: translateY(200px);\n    }\n}\n\n.promo-notification {\n    position: fixed;\n    font-family: 'Roboto Flex', 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Ubuntu, Arial, sans-serif;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 194px;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-image: url('../assets/images/compare-light-23.svg');\n    animation: notify-show 0.3s ease-in;\n    transition: 0.3s ease transform;\n}\n\n@media (color-index: 48) {\n\n.promo-notification {\n        background-image: url('../assets/images/compare-dark-23.svg')\n}\n    }\n\n@media (color: 48842621) {\n\n.promo-notification {\n        background-image: url('../assets/images/compare-dark-23.svg')\n}\n    }\n\n@media (prefers-color-scheme: dark) {\n\n.promo-notification {\n        background-image: url('../assets/images/compare-dark-23.svg')\n}\n    }\n\n.promo-notification__close {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        cursor: pointer;\n        padding: 0;\n    }\n\n.promo-notification__content {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        padding: 0 5px 0 75px;\n    }\n\n.promo-notification__title {\n        white-space: pre-wrap;\n        text-align: center;\n        font-weight: 700;\n        line-height: 29px;\n        font-size: 24px;\n        color: #4d4d4d;\n    }\n\n@media (color-index: 48) {\n\n.promo-notification__title {\n            color: #fff\n    }\n        }\n\n@media (color: 48842621) {\n\n.promo-notification__title {\n            color: #fff\n    }\n        }\n\n@media (prefers-color-scheme: dark) {\n\n.promo-notification__title {\n            color: #fff\n    }\n        }\n\n.promo-notification__btn {\n        color: #fff;\n        font-weight: 400;\n        font-size: 16px;\n        line-height: 24px;\n        background-color: #67b279;\n        padding: 12px 24px 12px 24px;\n        min-width: 168px;\n        border: 0;\n        border-radius: 8px;\n        margin-top: 14px;\n    }\n\n.light-mode .promo-notification {\n        background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='320' height='194' viewBox='0 0 320 194' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg clip-path='url%28%23clip0_6029_1157%29'%3E%3Crect width='320' height='194' fill='%23E4F3FF'/%3E%3Cpath d='M196.774 143.101C199.505 142.029 201.648 139.885 203.86 137.948C209.339 133.193 215.786 129.58 222.7 127.366C225.552 126.45 228.663 125.793 231.498 126.761C235.387 128.093 237.737 132.225 238.325 136.288C238.913 140.369 238.118 144.484 237.668 148.582C237.219 152.68 237.132 157.02 239.016 160.669C239.673 161.931 240.572 163.366 239.984 164.663C239.5 165.735 238.238 166.15 237.098 166.427C225.949 169.141 214.041 168.674 203.134 165.112C200.473 164.248 197.828 163.159 195.702 161.343C192.107 158.248 190.707 153.631 190.102 149.084C189.895 147.528 189.03 144.087 190.465 143.153C191.433 142.565 195.166 143.724 196.774 143.101Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.64' d='M237.582 155.81C229.907 155.516 222.337 152.248 217.204 146.473C214.732 143.689 212.917 140.456 211.776 136.928C211.379 135.701 210.964 134.352 210.687 132.951C208.285 134.438 206.003 136.116 203.86 137.983C201.648 139.902 199.505 142.064 196.774 143.136C195.184 143.758 191.45 142.6 190.482 143.222C189.065 144.139 189.929 147.597 190.119 149.153C190.724 153.7 192.124 158.317 195.719 161.412C197.845 163.228 200.49 164.317 203.152 165.182C214.058 168.744 225.967 169.21 237.115 166.496C238.256 166.219 239.535 165.787 240.001 164.732C240.589 163.435 239.69 162 239.033 160.738C238.238 159.147 237.806 157.504 237.582 155.81Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.64' d='M239.033 160.686C237.149 157.02 237.218 152.68 237.685 148.6C238.135 144.502 238.947 140.386 238.342 136.306C237.772 132.381 235.577 128.404 231.93 126.934C231.964 127.539 231.964 128.127 231.964 128.663C231.809 139.193 223.166 147.234 214.248 151.453C208.786 154.029 202.84 155.551 196.825 155.966C195.166 156.069 193.524 156.069 191.899 155.983C192.764 158.023 193.991 159.873 195.736 161.378C197.862 163.193 200.507 164.282 203.169 165.147C214.075 168.709 225.984 169.176 237.132 166.461C238.273 166.184 239.552 165.752 240.019 164.697C240.572 163.383 239.69 161.948 239.033 160.686Z' fill='%23E9E9E9'/%3E%3Cpath d='M-8.57976 79.4876C-1.9772 76.3234 2.93151 70.5655 8.03035 65.309C13.9243 59.2226 20.596 53.4647 28.685 50.8884C36.774 48.312 46.5741 49.6089 52.2087 55.9546C59.1397 63.7701 57.636 75.5799 58.8977 85.9544C59.8311 93.6489 62.7521 101.413 68.5941 106.496C72.6214 109.989 77.7202 111.977 82.8018 113.516C90.7525 115.92 99.7403 117.303 107.069 113.378C114.466 109.401 118.269 101.067 124.146 95.0667C128.173 90.9688 133.41 87.8737 139.131 87.2512C144.835 86.6288 150.971 88.7728 154.427 93.3722C159.837 100.583 157.383 110.663 157.815 119.654C158.766 139.781 175.739 156.346 194.803 162.865C198.606 164.161 202.702 165.268 205.519 168.138C210.566 173.274 209.495 181.677 207.663 188.645C206.384 193.504 204.724 198.605 200.818 201.752C196.705 205.072 191.035 205.504 185.764 205.573C153.097 206.057 120.896 198.57 89.0932 191.135C61.1792 184.599 33.0406 177.994 7.04515 165.908C2.91423 163.988 -1.28583 161.827 -4.18958 158.317C-9.66866 151.695 -9.23656 142.219 -9.65138 133.643C-10.2563 121.193 -13.2811 108.865 -18.5009 97.5394C-19.7108 94.9284 -27.4022 82.4444 -24.9306 80.5769C-23.7207 79.6605 -18.5873 81.5279 -16.9626 81.4934C-14.0588 81.4415 -11.1724 80.7326 -8.57976 79.4876Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.34' d='M205.537 168.156C202.72 165.285 198.623 164.196 194.821 162.882C175.773 156.363 158.8 139.781 157.833 119.672C157.4 110.68 159.855 100.6 154.445 93.3895C153.788 92.5077 153.01 91.7123 152.181 91.0034C150.781 93.5797 149.208 96.0869 147.427 98.3866C145.198 101.274 142.553 103.816 139.615 105.977C136.504 108.26 133.064 109.85 129.711 111.735C127.983 112.703 125.667 114.173 123.714 112.946C122.365 112.098 121.691 110.456 121.259 109.003C120.378 105.995 120.205 102.692 120.412 99.4932C116.385 104.681 112.824 110.352 107.103 113.412C99.7749 117.337 90.7871 115.954 82.8364 113.551C77.7376 112.012 72.6387 110.023 68.6288 106.531C62.7868 101.447 59.8657 93.6835 58.9324 85.989C57.6706 75.6144 59.1744 63.8047 52.2434 55.9892C46.6088 49.6434 36.8086 48.3466 28.7196 50.923C20.5961 53.4647 13.9244 59.2226 8.03045 65.309C2.93161 70.5655 -1.9771 76.3234 -8.57966 79.4876C-11.1723 80.7326 -14.0587 81.4415 -16.9279 81.5106C-18.5526 81.5452 -23.686 79.6951 -24.8959 80.5942C-27.3676 82.4444 -19.6761 94.9457 -18.4662 97.5566C-13.2464 108.882 -10.2217 121.211 -9.61671 133.66C-9.20189 142.236 -9.63399 151.729 -4.15491 158.334C-1.25116 161.844 2.94889 164.006 7.07981 165.925C33.0752 178.011 61.2139 184.617 89.1279 191.152C120.948 198.588 153.148 206.075 185.798 205.59C191.07 205.504 196.739 205.089 200.853 201.769C204.759 198.622 206.418 193.504 207.697 188.663C209.512 181.677 210.584 173.291 205.537 168.156Z' fill='%23D8D8D8'/%3E%3Cpath d='M32.1769 96.4157C65.2761 84.2428 70.5305 55.9376 88.5233 53.7589C120.568 49.8512 111.892 104.75 113.879 116.456C115.003 122.992 117.716 129.58 122.988 133.591C144.732 150.104 179.265 119.395 182.549 117.787C189.636 114.346 199.108 113.793 204.569 119.464C214.456 129.753 203.152 149.533 212.624 160.219C217.308 165.51 225.414 166.185 232.328 164.749C306.805 149.361 324.02 228 319.25 234.778C313.581 242.818 279.064 229.452 269.351 231.043C224.394 238.392 178.436 233.101 133.186 227.792C109.696 225.043 86.19 222.276 62.8217 218.611C39.972 214.98 16.5174 210.501 -6.12488 215.343C-15.4929 186.086 -17.0485 154.98 -17.809 124.271C-17.9646 117.77 -18.0337 92.6981 -7.30021 95.4647C-0.628511 97.1937 4.86786 99.7701 12.0235 99.8911C18.8681 100.012 25.7472 98.7845 32.1769 96.4157Z' fill='%23F3F3F3'/%3E%3Cg opacity='0.34'%3E%3Cpath opacity='0.34' d='M175.618 168.277C174.91 170.749 174.529 173.447 175.186 175.971C180.181 195.216 221.629 173.291 242.94 164.801C244.755 164.075 246.587 163.383 248.437 162.761C243.39 162.917 238.031 163.539 232.328 164.715C225.414 166.15 217.308 165.476 212.624 160.185C203.152 149.516 214.456 129.718 204.569 119.43C203.705 118.531 202.737 117.787 201.683 117.182C213.35 134.732 180.648 150.64 175.618 168.277Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M212.623 160.202C209.253 156.398 208.51 151.453 208.51 146.196C207.939 146.974 207.334 147.718 206.695 148.427C205.243 150.035 203.48 151.383 201.734 152.663C198.104 155.308 194.164 157.747 191.606 161.551C189.618 164.49 187.665 168.121 188.408 171.804C189.134 175.401 192.522 176.922 195.892 177.13C198.45 177.285 201.06 176.818 203.549 176.248C205.9 175.712 208.216 174.968 210.445 174.052C214.853 172.254 218.811 169.746 222.907 167.378C224.117 166.686 225.344 165.994 226.606 165.372C221.317 165.476 216.063 164.075 212.623 160.202Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M263.768 163.885C289.487 181.262 219.002 183.821 178.488 201.959C192.782 201.752 255.212 233.343 269.368 231.026C279.082 229.435 313.598 242.801 319.267 234.76C323.26 229.072 311.749 172.617 263.768 163.885Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M292.581 177.285C293.721 181.954 293.687 186.83 291.855 191.464C288.415 200.109 280.326 205.47 272.462 209.688C266.689 212.784 260.639 215.308 254.4 217.297C246.795 223.815 237.358 229.798 226.659 234.587C240.953 234.38 255.212 233.325 269.368 231.008C279.082 229.417 313.598 242.783 319.267 234.743C322.292 230.455 316.433 197.049 292.581 177.285Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M103.975 60.4159C114.864 89.309 58.9846 91.9891 70.1502 145.02C74.7132 166.686 97.7358 197.983 145.527 138.899C145.993 138.329 146.494 137.793 147.013 137.274C138.665 139.332 130.144 139.003 123.005 133.574C117.734 129.562 115.003 122.974 113.896 116.439C112.237 106.825 117.803 68.0758 102.074 56.7156C102.835 57.8741 103.474 59.1018 103.975 60.4159Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M122.21 140.179C121.536 141.476 121.346 142.963 122.418 144.104C123.506 145.245 125.131 145.453 126.618 145.211C129.314 144.778 132.028 143.222 133.877 141.234C134.689 140.352 135.398 139.384 136.055 138.381C132.632 138.156 129.297 137.291 126.168 135.614C124.613 136.911 123.126 138.381 122.21 140.179Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M113.084 84.8825C111.908 86.9229 110.543 88.8595 109.074 90.7096C102.229 99.3032 93.3451 105.908 85.6018 113.62C81.6091 117.597 77.8239 123.355 79.9153 129.217C81.6783 134.179 86.8462 136.997 91.7031 138.156C97.3205 139.487 103.007 138.778 108.521 137.343C113.256 136.116 117.906 134.611 122.625 133.297C117.578 129.268 114.95 122.836 113.861 116.456C112.997 111.338 114.173 97.9718 113.084 84.8825Z' fill='%23888888'/%3E%3C/g%3E%3Cg opacity='0.5'%3E%3Cpath opacity='0.5' d='M89.7497 70.116C90.2682 70.2716 90.8559 70.0468 91.046 69.5454C91.0979 69.407 91.1152 69.2687 91.1152 69.1304C91.0979 68.8364 90.9423 68.5425 90.7349 68.3177C90.0608 67.5396 88.9028 67.2111 87.8657 67.2975C86.8287 67.3667 85.8608 67.7817 84.9793 68.2312C85.9126 67.6261 86.9497 67.0555 87.6238 66.1736C88.2978 65.2918 88.5053 63.9777 87.5892 63.1131C86.7768 62.335 85.3941 62.2486 84.2188 62.3696C81.8336 62.629 79.6212 63.5627 77.9619 64.946C77.3397 65.4301 76.4582 66.2601 75.8187 67.1419C75.2483 67.9373 75.8878 69.0266 76.8557 68.9229C81.2113 68.4042 85.5842 68.8191 89.7497 70.116Z' fill='%23D8D8D8'/%3E%3C/g%3E%3Cpath d='M83.9768 64.4101C84.4953 63.8914 84.8065 63.1478 84.5299 62.4735C84.3744 62.0758 84.0632 61.7819 83.7003 61.5571C82.5595 60.8136 81.0385 60.8136 79.7422 61.2286C78.4459 61.6608 77.3051 62.4562 76.1816 63.2689C77.3397 62.2487 78.515 61.1767 79.1372 59.7588C79.7422 58.341 79.5866 56.4735 78.3767 55.5398C77.2705 54.6926 75.7149 54.8482 74.3668 55.194C71.6359 55.8857 69.0778 57.1998 66.9 58.9807C65.4827 60.1392 62.6999 62.387 62.3888 64.4101H83.9768Z' fill='%23D8D8D8'/%3E%3Cpath d='M77.9618 62.0757C77.5296 62.7501 78.9988 63.0267 79.4136 63.044C80.3643 63.0959 81.3322 62.7328 82.1272 62.2486C82.5593 61.9893 82.9396 61.6607 83.2507 61.2976C82.1791 60.8135 80.8828 60.8481 79.742 61.2285C79.1198 61.436 78.5321 61.7126 77.979 62.0584C77.979 62.0584 77.979 62.0757 77.9618 62.0757Z' fill='white'/%3E%3Cpath d='M67.5911 62.4388C70.201 62.6117 73.4677 62.6117 75.5591 60.7962C76.7863 59.7241 77.7888 57.8567 77.0456 56.2487C76.8209 55.7645 76.4752 55.2977 76.0604 54.9173C75.49 54.9346 74.9196 55.0556 74.3665 55.1939C71.6356 55.8856 69.0776 57.1997 66.8998 58.9806C66.0701 59.655 64.7565 60.727 63.754 61.9028C64.9985 62.214 66.3121 62.3697 67.5911 62.4388Z' fill='%23F3F3F3'/%3E%3Cpath d='M245.912 145.038C246.275 145.038 246.535 144.692 246.431 144.346C246.206 143.654 245.29 143.464 244.581 143.672C243.89 143.879 243.302 144.346 242.594 144.553C243.562 144.259 244.27 143.239 244.184 142.219C244.08 141.043 243.009 140.092 241.851 139.85C240.693 139.591 239.483 139.902 238.376 140.369C237.201 140.87 236.13 141.597 235.127 142.375C234.539 142.842 233.883 143.36 233.779 144.138C233.762 144.242 233.762 144.38 233.762 144.519C233.779 144.813 234.021 145.038 234.297 145.038H245.912Z' fill='%23D8D8D8'/%3E%3Cpath d='M-65.6456 -15.8729C-73.4353 -10.7411 -75.7152 -0.984327 -78.0585 7.44199C-80.7817 17.0087 -81.9217 27.1456 -80.1484 37.0291C-77.6152 51.2842 -68.3055 64.969 -54.5627 69.6574C-36.7033 75.8029 -30.2436 55.339 -13.8408 52.9948C31.8208 46.4691 20.2946 -1.04768 15.6714 -8.77709C12.8849 -13.212 8.95834 -16.7599 4.5885 -19.5476C-17.1974 -33.4858 -47.9762 -27.467 -65.6456 -15.8729Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.52' d='M-65.6456 -15.8729C-73.4353 -10.7411 -75.7152 -0.984327 -78.0585 7.44199C-80.7817 17.0087 -81.9217 27.1456 -80.1484 37.0291C-77.6152 51.2842 -68.3055 64.969 -54.5627 69.6574C-36.7033 75.8029 -30.2436 55.339 -13.8408 52.9948C31.8208 46.4691 20.2946 -1.04768 15.6714 -8.77709C12.8849 -13.212 8.95834 -16.7599 4.5885 -19.5476C-17.1974 -33.4858 -47.9762 -27.467 -65.6456 -15.8729Z' fill='%2393BC82'/%3E%3Cpath d='M54.6679 120.574C54.4468 120.409 54.1704 120.464 53.9493 120.519C53.1202 120.684 52.2911 120.795 51.462 120.96C51.0198 116.217 52.4017 110.813 53.065 106.07C53.2308 104.802 53.2308 99.7281 53.673 98.57C49.7485 96.8604 45.4371 96.0332 41.0705 95.8677C42.3971 99.5627 42.6734 108.166 42.784 111.033C43.1156 118.092 42.1207 125.206 39.6887 131.879C38.5279 135.133 36.9802 138.332 36.3722 141.751C35.6537 145.611 36.0958 149.582 36.4828 153.442L38.6384 172.965C39.0806 176.88 39.3017 180.63 38.8043 184.491C38.4174 187.689 38.9701 191.108 41.4021 193.535C43.6684 195.796 49.03 197.616 50.7987 194.086C52.7333 190.281 49.9143 183.498 48.7536 179.803C46.9295 174.123 46.8743 168.222 45.603 162.321C44.7739 158.571 43.6131 154.6 44.8844 150.961C45.2713 149.802 45.9346 148.7 46.3215 147.486C46.3768 147.321 46.4321 147.211 46.4321 147.045C46.819 145.556 46.8743 143.957 46.9848 142.413C47.2612 139.159 47.9798 136.015 49.0852 132.927C50.0802 130.17 51.5173 129.398 53.286 127.247C54.6679 125.593 55.2759 123.276 54.9443 121.181C54.889 120.96 54.8337 120.739 54.6679 120.574Z' fill='%23B5926E'/%3E%3Cpath d='M46.2661 147.486C46.3214 147.321 46.3767 147.211 46.3767 147.045C46.7636 145.556 46.8189 143.957 46.9294 142.413C47.2058 139.159 47.9244 136.015 49.0298 132.927C50.0248 130.17 51.4619 129.398 53.2307 127.247C54.6125 125.593 55.2205 123.276 54.8889 121.181C54.8336 120.96 54.7783 120.739 54.6125 120.574C54.3914 120.409 54.115 120.464 53.8939 120.519C53.0648 120.684 52.2357 120.795 51.4066 120.96C50.9644 116.217 52.3463 110.813 53.0096 106.07C53.1754 104.802 53.1754 99.7281 53.6176 98.57C49.6931 96.8604 45.3818 96.0332 41.0151 95.8677C41.6231 97.6325 42.01 100.555 42.2864 103.368C45.437 104.691 48.4218 107.228 49.8037 109.544C52.7332 114.453 49.7484 121.346 47.3716 125.758C46.9294 126.585 45.7134 128.515 46.2109 129.563C46.3214 129.784 46.7636 129.894 46.9294 130.059C47.4269 130.721 47.9244 131.052 48.1455 131.879C48.6982 133.699 47.8138 135.685 46.9847 137.284C44.3868 142.192 40.2966 146.328 36.6485 150.464C36.4826 150.63 36.3168 150.85 36.151 151.071C36.2063 151.843 36.3168 152.615 36.3721 153.387L38.5278 172.909C38.97 176.825 39.1911 180.575 38.6936 184.435C38.3067 187.634 38.8594 191.053 41.2915 193.48C43.5577 195.741 48.9193 197.561 50.6881 194.031C52.6226 190.226 49.8037 183.443 48.6429 179.748C46.8189 174.068 46.7636 168.167 45.4923 162.266C44.6632 158.516 43.5024 154.545 44.7737 150.905C45.2159 149.747 45.8792 148.644 46.2661 147.486Z' fill='%238B7E74'/%3E%3Cpath d='M108.725 23.6774C104.248 19.6516 97.4494 15.7361 91.2035 15.7361C86.4499 15.7912 81.9727 17.8869 77.0534 17.942C62.3505 18.2177 47.4818 16.2324 33.2764 19.3759C25.5933 21.0854 18.0208 23.512 11.4985 27.8686C0.664757 35.093 -6.02339 46.8947 -12.3799 58.2552C-14.4803 62.0052 -16.5807 65.8656 -17.1335 70.112C-18.4048 79.432 -11.5508 88.366 -3.0386 92.4469C5.41832 96.5279 15.2018 96.8588 24.6537 96.8036C34.1055 96.7485 43.7232 96.4727 52.6776 99.561C56.9336 101.05 60.8581 103.201 64.9484 104.966C82.1386 112.411 104.414 111.252 117.072 97.4102C124.036 89.7998 127.242 79.3217 127.187 69.009C127.132 58.7515 124.036 48.6594 119.67 39.3394C116.795 33.6592 113.479 27.9789 108.725 23.6774Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.2' d='M108.725 23.6774C104.248 19.6516 97.4494 15.7361 91.2035 15.7361C86.4499 15.7912 81.9727 17.8869 77.0534 17.942C62.3505 18.2177 47.4818 16.2324 33.2764 19.3759C25.5933 21.0854 18.0208 23.512 11.4985 27.8686C0.664757 35.093 -6.02339 46.8947 -12.3799 58.2552C-14.4803 62.0052 -16.5807 65.8656 -17.1335 70.112C-18.4048 79.432 -11.5508 88.366 -3.0386 92.4469C5.41832 96.5279 15.2018 96.8588 24.6537 96.8036C34.1055 96.7485 43.7232 96.4727 52.6776 99.561C56.9336 101.05 60.8581 103.201 64.9484 104.966C82.1386 112.411 104.414 111.252 117.072 97.4102C124.036 89.7998 127.242 79.3217 127.187 69.009C127.132 58.7515 124.036 48.6594 119.67 39.3394C116.795 33.6592 113.479 27.9789 108.725 23.6774Z' fill='%2393BC82'/%3E%3Cpath d='M-67.599 8.2913C-74.3977 12.7583 -76.3876 21.2511 -78.4327 28.5858C-80.8095 36.9131 -81.8044 45.7368 -80.2568 54.3399C-78.0458 66.7482 -69.9205 78.6601 -57.9261 82.7411C-42.3388 88.0905 -36.7009 70.2776 -22.3849 68.2372C17.4676 62.5569 7.40775 21.1959 3.37275 14.4679C0.940697 10.6075 -2.48629 7.51923 -6.30019 5.09272C-25.3144 -7.03984 -52.1776 -1.80078 -67.599 8.2913Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.52' d='M-67.599 8.2913C-74.3977 12.7583 -76.3876 21.2511 -78.4327 28.5858C-80.8095 36.9131 -81.8044 45.7368 -80.2568 54.3399C-78.0458 66.7482 -69.9205 78.6601 -57.9261 82.7411C-42.3388 88.0905 -36.7009 70.2776 -22.3849 68.2372C17.4676 62.5569 7.40775 21.1959 3.37275 14.4679C0.940697 10.6075 -2.48629 7.51923 -6.30019 5.09272C-25.3144 -7.03984 -52.1776 -1.80078 -67.599 8.2913Z' fill='%2393BC82'/%3E%3Cpath d='M38.914 34.9275C37.9744 35.0378 37.0347 35.1481 36.0398 35.2584C36.0951 39.6151 35.6529 44.1373 33.4972 47.9425C23.4926 65.4244 18.4074 46.4535 19.2918 37.5195C19.6787 33.3834 21.2264 29.4127 22.7188 25.5524C25.2061 19.2104 27.9145 12.7029 26.8643 5.75424C26.6985 4.70643 26.4774 3.65862 26.0905 2.66595C25.2061 6.19543 24.6533 -1.415 23.1609 1.72844C19.6787 9.17342 13.6538 25.6075 5.14164 23.7325C-6.18953 21.1957 -14.4253 9.94549 -19.2342 0.184296C-22.8823 -7.26068 -25.4801 -15.4777 -26.6962 -23.8051C-28.5755 -23.8051 -30.3995 -23.4742 -32.2236 -22.7021C-37.751 -20.3859 -41.6754 -14.9263 -42.7809 -9.13572C-44.0522 -2.84884 -41.786 3.54832 -37.9168 8.51165C-33.4949 14.1367 -27.4147 17.2802 -20.8371 19.7618C-13.7068 22.4641 -5.58151 25.056 -1.27014 31.8392C2.65431 38.0158 0.99609 45.2402 -1.04905 51.7477C-2.98363 57.8691 -5.47096 64.2111 -4.58658 70.7186C-4.03384 74.7444 -2.04398 78.2739 -0.772675 82.0791C0.553898 86.1049 0.774994 90.2961 0.443348 94.4874C-0.219936 102.649 -2.76254 110.48 -3.26 118.642C-3.86802 129.341 -0.21994 139.764 1.32773 150.242C0.830265 158.073 -0.219936 182.669 -4.58658 186.585C-6.79754 188.57 -10.0034 188.79 -12.9329 188.79C-19.6764 188.846 -26.4751 187.798 -33.1079 188.018C-28.1886 192.154 -15.5861 193.643 -9.06377 195.849C1.6041 199.434 14.4829 201.254 23.1057 194.085C16.3623 189.232 15.8648 179.581 16.0306 171.309C16.307 156.915 16.4728 142.576 16.5833 128.183C16.6386 121.069 15.8648 113.403 16.7492 106.344C17.0808 103.752 17.523 101.822 17.3019 99.0647C17.0808 96.2521 16.5833 93.3293 18.1863 90.7924C18.9601 89.524 20.1762 88.6417 21.2264 87.5939C30.844 77.943 24.2112 67.906 28.3567 60.5714C29.1305 59.1927 30.4018 58.2 31.5073 57.0419C34.271 54.0639 35.8187 50.1484 37.2005 46.288C38.5271 42.6483 39.9642 38.6776 38.914 34.9275Z' fill='%23B5926E'/%3E%3Cpath d='M15.9741 171.309C16.2505 156.915 16.4163 142.576 16.5268 128.183C16.5821 121.069 15.8083 113.403 16.6926 106.344C17.0243 103.752 17.4665 101.822 17.2454 99.0647C17.0796 97.0242 16.7479 94.8735 17.2454 92.833C14.5922 94.1014 12.1602 95.5904 10.9994 98.2375C9.72812 101.105 11.2758 104.469 12.2155 107.227C13.2104 110.315 13.7631 113.458 13.9289 116.712C14.2606 124.543 10.8889 131.878 10.6125 139.709C10.3914 145.665 12.934 152.448 10.3361 158.073C10.1703 158.459 9.61757 158.459 9.34121 158.183C7.57244 156.584 4.256 150.683 0.829018 147.374C0.994839 148.312 1.16066 149.249 1.32648 150.242C0.829014 158.073 -0.221188 182.669 -4.58783 186.585C-6.79879 188.57 -10.0047 188.791 -12.9342 188.791C-19.6776 188.846 -26.4763 187.798 -33.1092 188.018C-28.1898 192.155 -15.5873 193.644 -9.06502 195.849C1.60285 199.434 14.4817 201.254 23.1044 194.085C16.3057 189.232 15.8083 179.581 15.9741 171.309Z' fill='%238B7E74'/%3E%3Cpath d='M38.914 34.9276C37.9744 35.0378 37.0347 35.1482 36.0398 35.2584C36.0951 39.6151 35.6529 44.1373 33.4972 47.9425C23.4926 65.4244 18.4074 46.4535 19.2918 37.5195C19.6787 33.3834 21.2264 29.4128 22.7188 25.5524C25.2061 19.2104 27.9145 12.7029 26.8643 5.75426C26.6985 4.70644 26.4774 3.65863 26.0905 2.66596C25.2061 6.19544 24.6534 -1.41499 23.161 1.72845C19.6787 9.17343 13.6538 25.6075 5.14165 23.7325C-6.18952 21.1957 -14.4253 9.9455 -19.2342 0.184303C-22.8823 -7.26068 -25.4801 -15.4777 -26.6962 -23.8051C-28.5755 -23.8051 -30.3995 -23.4742 -32.2236 -22.7021C-37.751 -20.3859 -41.6754 -14.9263 -42.7809 -9.13571C-44.0522 -2.84884 -41.786 3.54833 -37.9168 8.51165C-33.4949 14.1368 -27.4147 17.2802 -20.8371 19.7618C-13.7068 22.4641 -5.5815 25.0561 -1.27013 31.8393C0.830276 35.1481 1.32774 38.7328 0.996098 42.4277C3.92562 41.2144 7.07624 40.5527 9.83994 41.9865C14.8146 44.5785 15.8648 52.1337 15.3121 57.3176C18.4627 56.2147 22.0002 55.8287 24.7639 58.0346C26.0352 59.0824 27.0301 60.4059 27.7487 61.8949C27.9145 61.5089 28.0803 61.0677 28.3014 60.6817C29.0753 59.303 30.3466 58.3103 31.4521 57.1522C34.2158 54.1742 35.7634 50.2587 37.1453 46.3983C38.5271 42.6483 39.9642 38.6776 38.914 34.9276Z' fill='%238B7E74'/%3E%3Cpath d='M11.1664 76.3435C11.0559 78.0531 11.0559 80.0384 12.3272 81.2517C13.5432 82.4098 15.5884 82.465 17.0808 81.6377C18.5732 80.8105 19.5681 79.3767 20.3419 77.8325C22.166 74.0273 22.5529 69.7258 22.3318 65.4794C22.1107 61.4536 16.4727 59.6888 13.8749 62.722C11.4428 65.5345 11.3875 72.9243 11.1664 76.3435Z' fill='%238B7E74'/%3E%3Cpath d='M55.8833 50.4247C58.039 52.2997 58.9234 55.2226 60.6922 57.4285C71.9128 71.4361 113.81 56.7667 108.007 19.3764C100.711 -27.6097 34.3818 -22.6464 28.6333 4.04524C17.4127 56.0498 51.0192 46.2886 55.8833 50.4247Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.34' d='M55.8833 50.4247C58.039 52.2997 58.9234 55.2226 60.6922 57.4285C71.9128 71.4361 113.81 56.7667 108.007 19.3764C100.711 -27.6097 34.3818 -22.6464 28.6333 4.04524C17.4127 56.0498 51.0192 46.2886 55.8833 50.4247Z' fill='%2393BC82'/%3E%3Cpath d='M55.8285 18.0515C56.4365 19.7059 55.939 21.5258 56.2154 23.2905C57.8736 34.2098 84.7368 39.1732 93.1384 17.5C103.696 -9.79825 66.828 -27.5008 55.4968 -14.9822C33.6083 9.2278 54.5019 14.3566 55.8285 18.0515Z' fill='%23BDDA97'/%3E%3Cpath d='M3.48365 37.1332C6.52371 32.9971 7.4081 26.9309 11.9406 24.4492C15.3675 22.5742 19.6236 23.5117 23.4375 22.6845C41.8438 18.7138 37.0349 -14.4301 29.186 -24.4671C23.2717 -32.0224 13.1013 -34.6695 3.53892 -36.0482C-2.43067 -36.8754 -8.5108 -37.3717 -14.5357 -36.6548C-29.128 -34.7798 -37.7507 -25.4597 -47.5342 -15.5883C-56.4886 -6.59913 -52.2325 3.82385 -47.7 14.4674C-27.3039 62.1704 -0.0538864 42.0414 3.48365 37.1332Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.34' d='M29.186 -24.4126C23.2717 -31.9678 13.1013 -34.6149 3.53891 -35.9936C0.609388 -36.4348 -2.26485 -36.7657 -5.19438 -36.876C-0.38554 -35.9936 4.14692 -34.2841 7.79501 -31.1406C17.4679 -22.8684 28.6333 8.78653 11.3325 16.2315C7.73973 17.7757 3.37309 17.6654 0.388294 20.2022C-3.53616 23.5111 -3.25979 29.6325 -5.41547 34.2649C-6.52095 36.6363 -11.3851 42.5923 -18.847 45.1842C-7.62643 47.1695 1.54905 39.8349 3.48363 37.1326C6.5237 32.9965 7.40809 26.9302 11.9406 24.4486C15.3675 22.5735 19.6236 23.5111 23.4375 22.6838C41.8438 18.7683 37.0349 -14.4308 29.186 -24.4126Z' fill='%2393BC82'/%3E%3Cpath d='M111.212 211.985V211.998C111.212 212.1 111.208 212.188 111.194 212.272C111.186 212.321 111.181 212.365 111.164 212.409L111.15 212.466C111.15 212.466 111.141 212.506 111.137 212.524C111.133 212.542 111.124 212.559 111.11 212.577C111.106 212.595 111.097 212.612 111.093 212.617C111.088 212.634 111.08 212.656 111.066 212.674C111.013 212.771 111.013 212.776 111.009 212.78C110.978 212.82 110.951 212.86 110.916 212.891C110.885 212.922 110.854 212.953 110.819 212.984C110.779 213.019 110.739 213.054 110.691 213.081C110.651 213.107 110.607 213.129 110.562 213.156C110.562 213.156 110.558 213.165 110.554 213.165C110.483 213.2 110.408 213.227 110.328 213.262H110.324C110.24 213.297 110.151 213.319 110.054 213.346C109.97 213.364 109.886 213.386 109.798 213.403C109.784 213.403 109.767 213.408 109.749 213.412C109.701 213.417 109.647 213.43 109.594 213.439C109.541 213.448 109.488 213.452 109.426 213.456C109.413 213.461 109.396 213.461 109.382 213.465C109.369 213.465 109.351 213.47 109.338 213.47C109.214 213.483 109.095 213.496 108.962 213.505C108.702 213.523 108.423 213.536 108.136 213.549C107.99 213.554 107.844 213.558 107.689 213.563C107.61 213.563 107.526 213.563 107.446 213.567C107.225 213.567 107 213.576 106.766 213.593C105.435 213.646 103.963 213.784 102.58 214.314H102.571C101.886 214.579 101.214 214.937 100.604 215.423H100.6C100.481 215.525 100.37 215.618 100.255 215.728C100.158 215.821 100.069 215.918 99.9855 216.016C99.9855 216.016 99.984 216.019 99.9811 216.024C98.9424 217.236 98.9822 218.911 98.7214 220.639L98.6772 220.891C98.4871 222 98.1424 223.123 97.2805 224.153C97.2716 224.157 97.2672 224.166 97.254 224.17C97.223 224.219 97.1788 224.268 97.1302 224.316C97.0904 224.36 97.0551 224.4 97.0197 224.44C96.2771 225.253 95.4108 225.938 94.4871 226.539H94.4827V226.553L93.802 226.981C93.771 226.995 93.7489 227.017 93.718 227.03C93.5191 227.149 93.3158 227.26 93.1125 227.375C92.8826 227.503 92.6484 227.622 92.4141 227.746C92.4141 227.746 92.4112 227.748 92.4053 227.751H92.392L92.1268 227.883C92.1268 227.883 92.0959 227.901 92.0826 227.91C91.9942 227.954 91.9058 227.994 91.8174 228.033C91.8042 228.042 91.7821 228.051 91.7688 228.064C91.76 228.069 91.7555 228.073 91.7423 228.078C91.7158 228.086 91.6937 228.104 91.6671 228.113C91.4285 228.223 91.1854 228.334 90.9467 228.436C90.9069 228.449 90.8716 228.467 90.8362 228.48C90.6285 228.568 90.4251 228.657 90.2174 228.741H90.213C89.9699 228.838 89.7268 228.931 89.4837 229.019C89.3334 229.077 89.1787 229.13 89.0284 229.187C88.9356 229.222 88.8384 229.258 88.75 229.289C88.7367 229.289 88.7146 229.293 88.7102 229.293C88.4671 229.377 88.224 229.457 87.9765 229.527C87.8306 229.576 87.6759 229.625 87.5257 229.669C87.4328 229.7 87.3356 229.722 87.2428 229.753C87.2163 229.762 87.1986 229.766 87.1721 229.766C86.929 229.841 86.6814 229.907 86.4383 229.983C86.1952 230.053 85.9433 230.115 85.7002 230.177C85.466 230.239 85.2361 230.296 85.0063 230.349C84.9267 230.367 84.8516 230.385 84.772 230.403C84.3698 230.5 83.9588 230.597 83.5521 230.685C83.2029 230.685 82.8715 230.69 82.5532 230.69H82.54C82.4471 230.699 82.3543 230.699 82.2615 230.699H82.2571C81.8283 230.703 81.4261 230.716 81.0372 230.73H81.0328C79.5432 230.783 78.3057 230.871 77.2625 230.986C76.9311 231.021 76.6172 231.057 76.3167 231.092C73.8503 231.406 72.6083 231.821 71.4636 232.003C70.9641 232.087 70.4779 232.122 69.921 232.082C69.7044 232.069 69.479 232.042 69.2359 231.998C68.7718 231.927 68.2414 231.812 67.6138 231.636H67.6094C67.5564 231.622 67.5033 231.605 67.4414 231.591C67.3795 231.574 67.3088 231.552 67.2425 231.534C66.8624 231.424 66.4425 231.295 65.9828 231.136C65.6646 231.03 65.3464 230.928 65.037 230.836C64.4403 230.654 63.8701 230.504 63.3309 230.385C63.1806 230.345 63.0303 230.314 62.8889 230.288C62.7209 230.252 62.5618 230.226 62.3983 230.195C62.217 230.164 62.0358 230.137 61.859 230.106C61.8193 230.098 61.7839 230.093 61.753 230.089C61.722 230.084 61.6822 230.08 61.6513 230.08C60.7054 229.947 59.8612 229.912 59.0966 229.952C58.9065 229.961 58.7209 229.978 58.5352 229.996C58.354 230.014 58.1772 230.04 58.0004 230.067C57.828 230.093 57.6557 230.124 57.4921 230.159C57.4789 230.164 57.4568 230.168 57.4435 230.168C57.4435 230.168 57.4037 230.177 57.3905 230.182C57.2579 230.212 57.1297 230.243 57.0103 230.279C56.9264 230.296 56.8424 230.323 56.7584 230.354C56.5684 230.407 56.3827 230.473 56.1971 230.54C56.1043 230.575 56.0114 230.61 55.923 230.646C55.6888 230.738 55.4545 230.845 55.2291 230.959C55.1009 231.017 54.9728 231.083 54.8534 231.149C54.5838 231.291 54.323 231.441 54.0667 231.6C53.3153 232.06 52.5993 232.559 51.8346 233.041C51.786 233.077 51.7329 233.112 51.6843 233.138C51.6401 233.174 51.5959 233.196 51.5517 233.227C51.534 233.236 51.5164 233.245 51.4987 233.258C51.3882 233.329 51.2688 233.395 51.1539 233.466C50.9241 233.603 50.6898 233.731 50.4467 233.859C50.2567 233.952 50.0666 234.049 49.8633 234.137C49.7926 234.168 49.7307 234.195 49.6688 234.221C49.5981 234.257 49.5274 234.283 49.4522 234.314C49.3948 234.345 49.3285 234.367 49.271 234.394C49.134 234.447 48.997 234.495 48.8555 234.544H48.8511C48.776 234.571 48.7097 234.593 48.6345 234.619C48.4622 234.677 48.281 234.725 48.0997 234.774C48.0158 234.8 47.9274 234.818 47.8301 234.845C47.6799 234.88 47.5296 234.915 47.3837 234.942C47.3484 234.951 47.3086 234.955 47.2776 234.968C47.1848 234.986 47.092 235.004 46.9992 235.017C46.9859 235.021 46.9638 235.021 46.9506 235.026C46.8401 235.039 46.7251 235.061 46.6146 235.074C46.5793 235.079 46.5395 235.083 46.5086 235.083C46.3141 235.114 46.1108 235.132 45.9075 235.145C45.85 235.15 45.7969 235.154 45.7351 235.154C45.6864 235.158 45.6334 235.163 45.5804 235.167H45.5362C45.4831 235.172 45.4257 235.172 45.3682 235.172C45.3108 235.172 45.2577 235.176 45.2003 235.176H45.1958C45.0588 235.18 44.9262 235.185 44.7848 235.18C44.7848 235.18 44.7848 235.185 44.7804 235.18C44.7804 235.18 44.7804 235.185 44.7759 235.18C44.7583 235.185 44.7362 235.185 44.7141 235.185H44.6522C44.5196 235.185 44.387 235.185 44.25 235.18C43.8036 235.163 43.335 235.132 42.8444 235.079C42.6765 235.066 42.5129 235.043 42.345 235.021C42.3361 235.021 42.3184 235.017 42.3096 235.017C42.3096 235.017 42.3081 235.017 42.3052 235.017C42.2433 235.008 42.177 234.999 42.1107 234.986H42.1063C41.8941 234.955 41.6864 234.924 41.4654 234.884C41.3328 234.867 41.1958 234.84 41.0588 234.809C40.9969 234.8 40.9306 234.792 40.8643 234.774C40.8068 234.765 40.7405 234.747 40.6786 234.738L40.5328 234.708C40.4002 234.677 40.272 234.655 40.135 234.619C40.051 234.601 39.9626 234.579 39.8742 234.562H39.8698C39.7991 234.548 39.7284 234.531 39.6576 234.517C39.2112 234.416 38.7648 234.323 38.314 234.239C38.3096 234.243 38.3096 234.239 38.3096 234.239C37.7306 234.12 37.1427 234.018 36.5637 233.93C36.4841 233.921 36.409 233.903 36.3294 233.894C36.325 233.894 36.3206 233.894 36.3162 233.89H36.3117C36.0952 233.855 35.883 233.828 35.662 233.797C35.525 233.779 35.388 233.757 35.2465 233.744C35.083 233.717 34.9195 233.695 34.7559 233.673C34.6675 233.664 34.5791 233.656 34.4907 233.642C34.199 233.607 33.9073 233.58 33.6156 233.55C32.7935 233.466 31.9714 233.408 31.1448 233.364C30.8266 233.351 30.5128 233.337 30.1945 233.329C29.0719 233.253 27.9492 233.205 26.8221 233.174C26.3183 233.156 25.8144 233.138 25.3105 233.125C23.074 233.068 20.8331 233.032 18.601 232.962C18.159 232.948 17.7215 232.944 17.2795 232.931H17.275C17.054 232.931 16.8463 232.926 16.6253 232.926C16.4574 232.917 16.2982 232.913 16.1391 232.909C16.0861 232.909 16.0375 232.904 15.9844 232.904C15.6485 232.891 15.3126 232.864 14.9899 232.833C14.8352 232.816 14.6717 232.794 14.5214 232.776C14.5037 232.772 14.4861 232.767 14.4728 232.767C14.3844 232.754 14.296 232.736 14.212 232.723C14.1546 232.714 14.0883 232.696 14.0308 232.683C13.9468 232.666 13.8584 232.643 13.7744 232.626C13.7612 232.621 13.7435 232.617 13.7347 232.617C13.7214 232.617 13.7037 232.612 13.6949 232.612C13.6595 232.604 13.633 232.595 13.6021 232.582C13.5534 232.568 13.5048 232.551 13.4562 232.533C13.0319 232.396 12.6474 232.21 12.3114 231.954C12.2009 231.87 12.0904 231.777 11.9932 231.68C11.8606 231.552 11.7324 231.401 11.6219 231.238C11.6219 231.238 11.6205 231.236 11.6175 231.233C11.6175 231.233 11.5998 231.203 11.5822 231.185L11.4496 230.964C11.4363 230.937 11.423 230.92 11.4098 230.893C11.4009 230.884 11.3965 230.867 11.3921 230.858C11.3788 230.822 11.3567 230.796 11.3435 230.761C11.3435 230.761 11.3346 230.725 11.3258 230.712C11.3214 230.703 11.317 230.694 11.3125 230.677C11.2728 230.593 11.2374 230.504 11.2065 230.416C11.202 230.407 11.202 230.398 11.1976 230.38C11.1799 230.332 11.1578 230.283 11.149 230.235C11.1402 230.199 11.1225 230.164 11.1136 230.133C11.1048 230.102 11.096 230.058 11.0783 230.022C11.0783 230.014 11.0739 230.009 11.0739 229.996C11.0694 229.987 11.0694 229.983 11.0694 229.969C11.0562 229.93 11.0429 229.89 11.0385 229.85C11.0341 229.824 11.0252 229.801 11.0208 229.775C11.0164 229.762 11.0164 229.74 11.012 229.722C11.0031 229.673 10.9987 229.625 10.9855 229.572C10.9501 229.364 10.9236 229.147 10.8971 228.917C10.8573 228.449 10.8573 227.919 10.9015 227.326C10.9103 227.198 10.928 227.061 10.9324 226.924C10.9501 226.712 10.9766 226.5 11.0076 226.274C11.0164 226.204 11.0341 226.137 11.0429 226.062C11.0473 226.014 11.0562 225.96 11.0694 225.907C11.0827 225.784 11.1048 225.669 11.1269 225.541C11.1446 225.421 11.1667 225.302 11.1888 225.178C11.2241 224.993 11.2639 224.807 11.3081 224.608C11.3435 224.44 11.3833 224.276 11.4186 224.104C11.4584 223.932 11.5026 223.755 11.5468 223.574V223.565C10.6849 223.671 9.14235 224.011 7.48045 224.038C7.42299 224.047 7.35227 224.047 7.28597 224.047C7.10475 224.047 6.92353 224.047 6.74232 224.038H6.73789C6.58761 224.033 6.43292 224.029 6.28706 224.011C6.1633 224.002 6.04396 223.985 5.92462 223.967L5.77876 223.954C5.71689 223.949 5.65059 223.941 5.59313 223.927C5.44285 223.901 5.28815 223.874 5.13787 223.834C5.03622 223.808 4.93014 223.786 4.82848 223.755C4.7445 223.737 4.66052 223.706 4.58096 223.68C4.46162 223.644 4.35113 223.6 4.23621 223.556C4.15665 223.525 4.08593 223.499 4.01079 223.459C3.93123 223.423 3.86051 223.388 3.78537 223.353C3.67929 223.295 3.5688 223.233 3.46272 223.171C3.37432 223.118 3.29034 223.065 3.21078 222.999C3.17542 222.981 3.14006 222.955 3.10912 222.928C2.96768 222.818 2.83066 222.699 2.69806 222.57C2.68038 222.544 2.65386 222.526 2.62292 222.495C2.56988 222.442 2.52127 222.385 2.47265 222.327C2.37541 222.208 2.28259 222.097 2.18977 221.965C2.18977 221.965 2.18977 221.96 2.18535 221.96C2.11463 221.859 2.04833 221.753 1.98645 221.642C1.80965 221.342 1.65496 221.006 1.5312 220.63L1.52678 220.617C1.52236 220.612 1.52236 220.608 1.52236 220.604C1.52236 220.59 1.51794 220.577 1.51352 220.564C1.50026 220.511 1.47816 220.453 1.4649 220.387C1.46048 220.378 1.46048 220.36 1.45606 220.352C1.4428 220.281 1.42512 220.219 1.41186 220.144C1.40744 220.126 1.40302 220.104 1.40302 220.086C1.3986 220.06 1.39418 220.047 1.38976 220.029C1.38976 220.024 1.38534 220.02 1.38976 220.011C1.38534 220.002 1.38092 219.994 1.38534 219.98C1.3765 219.923 1.37208 219.861 1.35882 219.799C1.34556 219.702 1.3323 219.605 1.32788 219.499C1.32346 219.459 1.32346 219.423 1.32346 219.392C1.31904 219.335 1.31904 219.269 1.31462 219.211C1.3102 219.194 1.3102 219.167 1.3102 219.149C1.30578 218.986 1.30578 218.822 1.3102 218.654C1.3102 218.641 1.3102 218.623 1.31462 218.606C1.31462 218.548 1.31904 218.482 1.32346 218.416V218.305C1.32346 218.305 1.32788 218.274 1.32788 218.261V218.217C1.32788 218.217 1.3323 218.19 1.3323 218.177C1.33672 218.173 1.33672 218.164 1.33672 218.159C1.34114 218.111 1.34556 218.058 1.34998 218.005V217.987C1.34998 217.96 1.3544 217.938 1.3544 217.912C1.3544 217.872 1.35882 217.832 1.36324 217.788C1.36766 217.753 1.36766 217.717 1.37208 217.686C1.3765 217.673 1.3765 217.655 1.3765 217.642C1.38534 217.545 1.40302 217.448 1.41628 217.35C1.42954 217.249 1.44722 217.152 1.46048 217.045V217.019C1.46932 216.926 1.487 216.838 1.50026 216.745C1.50026 216.727 1.50468 216.71 1.5091 216.692C1.52678 216.581 1.54888 216.471 1.56656 216.356C1.5754 216.276 1.59308 216.201 1.60634 216.122C1.6196 216.047 1.63286 215.971 1.65054 215.896C1.66822 215.812 1.68148 215.733 1.69916 215.658C1.7301 215.507 1.75662 215.353 1.79198 215.202C1.80524 215.14 1.8185 215.074 1.83176 215.012C1.83618 214.981 1.84059 214.959 1.84943 214.928C1.86711 214.822 1.89363 214.716 1.92015 214.61C1.93783 214.535 1.95551 214.464 1.97319 214.385C1.99087 214.292 2.01739 214.199 2.04391 214.106C2.06159 214.013 2.08811 213.921 2.11463 213.823C2.11463 213.814 2.11905 213.806 2.11905 213.792C2.14557 213.691 2.17209 213.585 2.19861 213.479C2.21629 213.403 2.23397 213.333 2.25165 213.258C2.35773 212.829 2.47265 212.391 2.58315 211.967L2.67597 211.618C2.76437 211.286 2.85276 210.95 2.94116 210.623C2.94116 210.614 2.94558 210.597 2.95 210.588C2.96326 210.53 2.97652 210.469 2.98978 210.416C3.00304 210.371 3.0163 210.332 3.02514 210.292C3.03398 210.252 3.05166 210.212 3.0605 210.172C3.06934 210.133 3.07376 210.097 3.08702 210.066C3.12238 209.925 3.15774 209.788 3.18868 209.655C3.25056 209.417 3.31244 209.169 3.3699 208.93L3.38316 208.886C3.38316 208.886 3.38758 208.855 3.392 208.838C3.48482 208.462 3.57763 208.038 3.67929 207.582C3.70581 207.472 3.72791 207.357 3.75443 207.233C3.76327 207.185 3.77211 207.136 3.78537 207.083C3.83841 206.831 3.89145 206.575 3.95333 206.309C3.98427 206.168 4.01079 206.031 4.04173 205.885L4.05499 205.81C4.10803 205.545 4.16107 205.266 4.22295 204.983C4.24063 204.886 4.26272 204.789 4.2804 204.692C4.30692 204.568 4.32902 204.449 4.35554 204.32C4.3688 204.259 4.38207 204.197 4.39533 204.135C4.40859 204.038 4.43068 203.94 4.44836 203.843C4.47488 203.71 4.5014 203.573 4.52792 203.436C4.57654 203.193 4.62074 202.941 4.66936 202.681C4.7224 202.389 4.77986 202.093 4.83732 201.788C4.8771 201.589 4.91246 201.381 4.94782 201.178C4.95224 201.142 4.96108 201.103 4.9655 201.072C4.97876 200.992 4.99644 200.917 5.0097 200.833C5.02738 200.714 5.0539 200.594 5.07158 200.471C5.15114 200.055 5.22185 199.622 5.30141 199.189C5.35003 198.915 5.39865 198.641 5.44727 198.362C5.46053 198.278 5.47821 198.19 5.49147 198.106C5.54009 197.823 5.58871 197.536 5.63733 197.244C5.66385 197.12 5.68152 196.992 5.70804 196.864C5.75224 196.639 5.79203 196.409 5.83181 196.174C5.86717 195.958 5.90695 195.737 5.94231 195.52C6.2075 193.978 6.47712 192.351 6.75999 190.645C6.80419 190.389 6.8484 190.128 6.88818 189.863C7.01635 189.103 7.14453 188.325 7.26829 187.538C7.35669 186.99 7.44508 186.437 7.53348 185.872C7.54232 185.819 7.55117 185.761 7.56443 185.699C7.63956 185.231 7.71028 184.753 7.78984 184.276C7.81636 184.135 7.83846 183.989 7.86498 183.838C7.8694 183.799 7.87824 183.759 7.88266 183.715C7.95338 183.308 8.01526 182.897 8.07713 182.481C8.10365 182.327 8.12576 182.168 8.15228 182.013C8.16554 181.951 8.17879 181.88 8.18763 181.818C8.23625 181.5 8.28487 181.182 8.33349 180.864C8.33791 180.851 8.33791 180.833 8.34233 180.82C8.37769 180.607 8.40421 180.4 8.43957 180.183C8.48377 179.9 8.53239 179.604 8.57659 179.317C8.61637 179.052 8.66057 178.786 8.70035 178.526C8.73129 178.34 8.75781 178.159 8.78875 177.973C8.82411 177.761 8.85063 177.549 8.88599 177.332C8.90367 177.213 8.92577 177.102 8.93903 176.983C8.95671 176.881 8.97439 176.771 8.98765 176.665C9.08047 176.086 9.16445 175.502 9.25727 174.919C9.27053 174.822 9.29263 174.72 9.30589 174.618C9.36776 174.203 9.43406 173.783 9.50036 173.359C9.54898 173.036 9.60202 172.709 9.65064 172.373C9.69926 172.046 9.74787 171.719 9.79649 171.387C9.90699 170.663 10.0219 169.933 10.128 169.2C10.2517 168.417 10.3667 167.622 10.4904 166.83C10.5258 166.587 10.5656 166.34 10.5965 166.097C10.6672 165.646 10.7335 165.195 10.8042 164.74C10.8617 164.36 10.9236 163.98 10.9766 163.604C11.0208 163.317 11.065 163.025 11.1092 162.733C11.1932 162.189 11.2772 161.646 11.3523 161.102C11.37 160.983 11.3921 160.864 11.4054 160.74C11.4407 160.554 11.4628 160.364 11.4938 160.17C11.5247 159.957 11.5556 159.745 11.5866 159.529C11.6043 159.418 11.6219 159.303 11.6396 159.184C11.6882 158.857 11.7368 158.53 11.7855 158.194C12.0286 156.541 12.2761 154.87 12.5236 153.195C12.7402 151.723 12.9612 150.238 13.1778 148.748C13.1822 148.744 13.1822 148.735 13.1822 148.731C13.2352 148.364 13.2883 147.993 13.3457 147.626C13.3546 147.542 13.3722 147.458 13.3811 147.374C13.5181 146.463 13.6507 145.553 13.7833 144.638C13.8805 143.993 13.9733 143.338 14.0662 142.693C14.0971 142.472 14.1236 142.256 14.159 142.043C14.2385 141.54 14.3093 141.036 14.38 140.532C14.517 139.617 14.6496 138.706 14.7778 137.796C14.8397 137.341 14.9104 136.885 14.9723 136.43C15.1667 135.064 15.3656 133.703 15.5601 132.346C15.6131 131.979 15.6662 131.608 15.7236 131.241C15.7325 131.157 15.7502 131.073 15.759 130.989C15.8297 130.538 15.8916 130.087 15.9535 129.637C15.9712 129.508 15.9933 129.38 16.0109 129.256C16.0109 129.256 16.0109 129.23 16.0154 129.221V129.208C16.033 129.053 16.0596 128.894 16.0861 128.739C16.1435 128.315 16.2054 127.891 16.2673 127.466C16.3557 126.848 16.4441 126.229 16.5325 125.61C16.5723 125.34 16.6121 125.071 16.6518 124.797C16.6518 124.788 16.6518 124.779 16.6562 124.77C16.6607 124.735 16.6651 124.7 16.6695 124.673C16.6828 124.567 16.7005 124.461 16.7137 124.359C16.7137 124.328 16.7181 124.302 16.7226 124.275C16.7491 124.094 16.7712 123.913 16.8021 123.732C16.8463 123.404 16.8949 123.082 16.9391 122.759C16.9833 122.467 17.0231 122.176 17.0673 121.884C17.1513 121.292 17.2353 120.699 17.3192 120.112C17.3546 119.851 17.3944 119.594 17.4297 119.334C17.4784 118.967 17.5314 118.6 17.5844 118.229C17.6728 117.628 17.7568 117.022 17.8452 116.425C17.9027 116.01 17.9557 115.594 18.0176 115.179C18.0353 115.055 18.053 114.927 18.0706 114.808C18.1104 114.52 18.1546 114.229 18.1944 113.941C18.1944 113.924 18.1988 113.902 18.1988 113.888C18.2563 113.477 18.3181 113.071 18.3756 112.664C18.3712 112.66 18.3756 112.651 18.3756 112.646C18.3889 112.558 18.4021 112.47 18.4154 112.381C18.4507 112.125 18.4861 111.882 18.517 111.63L18.5303 111.537C18.5347 111.493 18.5436 111.444 18.548 111.395V111.378C18.6054 110.967 18.6673 110.556 18.7248 110.149V110.14C18.7513 109.99 18.769 109.84 18.7867 109.694C18.7911 109.641 18.7999 109.588 18.8132 109.539C18.8441 109.327 18.8706 109.124 18.9016 108.911C18.959 108.505 19.0121 108.098 19.074 107.696C19.127 107.294 19.1845 106.892 19.2463 106.498C19.3568 105.694 19.4629 104.907 19.5778 104.129C19.5955 103.961 19.622 103.793 19.6397 103.625C19.6707 103.404 19.7016 103.183 19.7325 102.971C19.7414 102.9 19.7502 102.838 19.7635 102.777C19.7988 102.52 19.8342 102.277 19.8651 102.025L19.8961 101.817C19.927 101.583 19.958 101.349 19.9933 101.119C19.9933 101.11 19.9933 101.106 19.9977 101.093C20.1436 100.005 20.2983 98.9489 20.4441 97.9102L20.4574 97.8218C20.4574 97.7865 20.4618 97.7511 20.4707 97.7202C20.4839 97.6008 20.5016 97.4903 20.5149 97.371C20.5591 97.0572 20.6033 96.7434 20.6475 96.434V96.4163C20.6563 96.3588 20.6607 96.2969 20.674 96.2395C20.6917 96.1025 20.7138 95.9655 20.7314 95.8329V95.824C20.7491 95.6826 20.7712 95.5456 20.7889 95.4085C20.7977 95.3246 20.8066 95.2406 20.8243 95.1654V95.1566C20.8419 95.0063 20.8685 94.8516 20.8861 94.7013C20.895 94.6129 20.9127 94.5245 20.9259 94.4361C20.9348 94.3522 20.9436 94.2815 20.9569 94.2107C20.9701 94.1179 20.9834 94.0251 20.9922 93.9323C21.0011 93.9058 21.0011 93.8837 21.0055 93.8571C21.0364 93.6317 21.0629 93.4107 21.0983 93.1897C21.1027 93.1367 21.1116 93.0836 21.116 93.0262C21.1337 92.8936 21.1558 92.7566 21.1734 92.624C21.1734 92.6063 21.1779 92.5886 21.1779 92.5709C21.1955 92.4428 21.2176 92.3146 21.2309 92.1908C21.2486 92.045 21.2707 91.8991 21.2884 91.7532C21.306 91.6295 21.3237 91.519 21.337 91.3996C21.3458 91.3378 21.3547 91.267 21.3679 91.2052C21.3768 91.1521 21.3812 91.0991 21.3856 91.0416C21.3944 91.0019 21.3989 90.9621 21.4033 90.9223C21.4165 90.8162 21.4342 90.7101 21.4475 90.6085C21.5226 90.0604 21.5978 89.5212 21.6729 88.9996C21.6861 88.9024 21.7038 88.8007 21.7171 88.6991C21.7171 88.6814 21.7215 88.6593 21.7215 88.646C21.7392 88.5267 21.7569 88.4118 21.7745 88.2968V88.288C21.7834 88.1908 21.7922 88.0979 21.8099 88.0051C21.8143 87.9653 21.8187 87.9211 21.8232 87.8814C21.832 87.8018 21.8497 87.7267 21.8585 87.6515C21.8585 87.6427 21.8585 87.6339 21.8629 87.6206L21.8762 87.5189C21.8762 87.5189 21.8806 87.4924 21.8806 87.4792C21.8895 87.3775 21.9071 87.267 21.9204 87.1653C21.9248 87.1477 21.9248 87.13 21.9292 87.1123C21.9337 87.0814 21.9337 87.0593 21.9381 87.0327C21.9558 86.8692 21.9823 86.7145 22 86.5598C22.0265 86.383 22.0486 86.215 22.0751 86.0515V86.0383C22.1547 85.4637 22.2298 84.9067 22.3049 84.3631C22.3138 84.288 22.3226 84.2172 22.3359 84.1421C22.3447 84.0846 22.3491 84.0316 22.3624 83.9741C22.3624 83.9476 22.3668 83.9255 22.3668 83.899C22.3712 83.8946 22.3712 83.899 22.3712 83.899C22.3978 83.7266 22.4154 83.5675 22.442 83.3995C22.4508 83.3509 22.4552 83.3023 22.4596 83.2537C22.4994 83.0106 22.5304 82.7719 22.5613 82.5377C22.6453 81.941 22.7248 81.3664 22.7956 80.8183C22.8044 80.7343 22.8221 80.6503 22.8309 80.5664C22.8398 80.5045 22.8486 80.4382 22.8574 80.3807C22.8663 80.3277 22.8751 80.2791 22.884 80.226C22.884 80.2128 22.8884 80.1951 22.8884 80.1818C22.937 79.8371 22.9856 79.5056 23.0298 79.1829V79.1741C23.0784 78.7763 23.1315 78.405 23.1801 78.0426C23.1889 77.9851 23.1934 77.9321 23.2066 77.8702C23.2066 77.8614 23.211 77.8569 23.2066 77.8437H23.211C23.2199 77.7685 23.2287 77.6978 23.2375 77.6271C23.2464 77.5962 23.2464 77.5696 23.2508 77.5387C23.2552 77.5078 23.2596 77.4901 23.2596 77.4636C23.3436 76.858 23.4143 76.2967 23.4895 75.7928C23.4939 75.7398 23.5027 75.6823 23.5072 75.6249C23.5425 75.3818 23.5779 75.1519 23.6044 74.9309C23.7679 74.7364 23.9403 74.5552 24.1171 74.3873C24.3072 74.2061 24.5061 74.0425 24.705 73.8967C24.7094 73.8922 24.7138 73.8922 24.7182 73.8878C24.8287 73.8038 24.9436 73.7199 25.0541 73.6536C25.0983 73.6226 25.1381 73.5961 25.1823 73.5696C25.284 73.5077 25.3901 73.4414 25.4873 73.3928H25.4917C25.9912 73.1055 26.4774 72.9022 26.8973 72.7607C26.9105 72.7563 26.9238 72.7519 26.937 72.7475C27.1625 72.6679 27.3658 72.6105 27.5426 72.5663C27.5735 72.5618 27.6 72.553 27.6266 72.5486C27.6752 72.5353 27.7194 72.5221 27.7592 72.5132H27.768L33.5846 72.637H33.7217L34.3537 72.6502L36.5769 72.6989L43.7063 72.8491L45.1251 72.8801L45.713 72.8889L46.482 72.9066L46.9417 72.9154H47.0434L49.6423 72.9685L49.9429 72.9773H50.1329L50.8489 72.9906H50.9374L51.5738 73.0083H51.6578L52.3738 73.0215L53.4435 73.048H53.523L56.4844 73.1099L59.1275 73.1629H59.1319L60.2988 73.1895H60.4314L61.1784 73.2071H61.4789L62.0093 73.2248H62.0491L62.7828 73.2381L63.5563 73.2514H63.711L64.9442 73.2823H65.2005L65.7618 73.3H65.9917L66.995 73.3265C66.995 73.3265 66.995 73.3221 66.9994 73.3265H67.0038L68.3166 73.3574L69.6779 73.3884L71.2647 73.4193L71.8967 73.4326L72.5465 73.4458H72.7012L74.1244 73.4812L74.7874 73.4944H74.7918L76.8648 73.5386L78.783 73.5784L80.383 73.6138L82.2615 73.6536L83.3842 73.6801H83.3886H83.6891L86.8848 73.7552L88.8958 73.795L90.6638 73.8348H90.6682L91.539 73.848L92.9887 73.879C93.4395 74.3829 93.8683 74.9132 94.2882 75.4657C94.2882 75.4657 94.297 75.4702 94.297 75.4746C94.5799 75.8459 94.8539 76.2304 95.1191 76.6193C95.6318 77.3619 96.1136 78.1442 96.5644 78.9442C96.9313 79.5807 97.2805 80.2437 97.6031 80.9111C97.6739 81.0393 97.7357 81.1675 97.7932 81.2912C97.8551 81.4238 97.9214 81.5564 97.9788 81.6934C98.0098 81.7421 98.0319 81.7951 98.054 81.8481C98.1335 82.0028 98.2042 82.1664 98.275 82.3299C98.6462 83.1609 98.9954 84.0095 99.3136 84.8714C99.3446 84.9509 99.3711 85.0261 99.3976 85.1056C99.4065 85.1145 99.4109 85.1233 99.4109 85.141C99.9103 86.4979 100.348 87.8814 100.715 89.2781C100.98 90.246 101.21 91.2228 101.409 92.1952C101.678 93.508 101.895 94.8163 102.05 96.1025C102.169 97.0174 102.257 97.9235 102.31 98.8163C102.319 98.8959 102.324 98.9799 102.328 99.055C102.527 102.246 102.673 105.415 102.774 108.571C102.805 109.362 102.823 110.158 102.845 110.945C102.85 111.029 102.854 111.108 102.854 111.188C102.863 111.453 102.867 111.718 102.872 111.979C102.881 112.297 102.889 112.615 102.898 112.929C102.903 113.19 102.907 113.442 102.911 113.703C102.916 113.734 102.916 113.756 102.916 113.787V113.968C102.92 114.025 102.92 114.092 102.92 114.149C102.925 114.158 102.925 114.162 102.92 114.176C102.929 114.534 102.938 114.892 102.947 115.25V115.312C102.951 115.413 102.951 115.519 102.951 115.617C102.965 116.372 102.982 117.124 102.991 117.875C103.004 118.98 103.022 120.09 103.035 121.194C103.049 122.653 103.062 124.116 103.071 125.579V125.61C103.075 125.76 103.075 125.915 103.075 126.065C103.088 128.143 103.102 130.216 103.115 132.297C103.115 132.443 103.119 132.589 103.119 132.744V132.757C103.137 135.825 103.163 138.892 103.212 141.973V141.982C103.225 142.817 103.243 143.635 103.256 144.47V144.51C103.353 149.831 103.526 155.175 103.857 160.581L105.042 168.819V168.846L106.324 177.805V177.832L109.241 198.163L109.647 200.988L109.705 201.412V201.43L109.714 201.478L111.199 211.825L111.212 211.905L111.221 211.963L111.212 211.985Z' fill='%232B6B40'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.65'%3E%3Cpath d='M111.208 211.989H111.204C111.208 212.091 111.204 212.184 111.195 212.272C111.186 212.321 111.182 212.365 111.164 212.409C111.164 212.427 111.16 212.444 111.155 212.462C111.151 212.48 111.142 212.506 111.138 212.524C111.133 212.542 111.125 212.564 111.12 212.581C111.107 212.612 111.089 212.643 111.071 212.674C111.018 212.771 111.018 212.776 111.014 212.78C110.983 212.82 110.957 212.86 110.921 212.891C110.89 212.922 110.859 212.953 110.824 212.984C110.784 213.019 110.744 213.054 110.696 213.081C110.656 213.112 110.612 213.134 110.568 213.16C110.563 213.16 110.563 213.165 110.559 213.165C110.488 213.2 110.413 213.227 110.333 213.262H110.329C110.245 213.297 110.157 213.319 110.059 213.346C109.975 213.364 109.891 213.386 109.803 213.403C109.79 213.403 109.772 213.408 109.754 213.412C109.706 213.417 109.653 213.43 109.6 213.439C109.542 213.448 109.489 213.452 109.432 213.465C109.418 213.465 109.401 213.465 109.387 213.47C109.374 213.47 109.357 213.474 109.343 213.474C109.22 213.487 109.1 213.501 108.968 213.509C108.707 213.527 108.428 213.54 108.141 213.554C107.995 213.558 107.849 213.563 107.695 213.567C107.615 213.567 107.531 213.567 107.452 213.571C107.231 213.571 107.005 213.58 106.771 213.598C105.834 212.356 104.574 210.902 103.151 210.115H103.147C102.66 209.845 102.156 209.655 101.639 209.58C101.215 209.518 100.808 209.527 100.419 209.593H100.415C100.008 209.673 99.6283 209.819 99.2658 210.031C98.1166 210.694 97.1884 211.98 96.468 213.598C96.3486 213.872 96.2337 214.155 96.1232 214.447C95.3453 216.497 94.8591 218.95 94.616 221.293C94.616 221.306 94.616 221.324 94.6116 221.333C94.5939 221.554 94.5718 221.775 94.5541 221.987C94.5541 221.987 94.5497 221.987 94.5541 221.991C94.5541 221.996 94.5497 221.996 94.5497 221.996C94.4923 222.769 94.4525 223.53 94.4436 224.25C94.4304 224.944 94.4436 225.611 94.479 226.221C94.479 226.239 94.479 226.261 94.4834 226.279C94.4834 226.372 94.4878 226.456 94.4967 226.544V226.553C94.4967 226.553 94.4923 226.553 94.4923 226.557C94.2624 226.699 94.0414 226.84 93.8116 226.982C93.7807 226.999 93.7541 227.017 93.7232 227.03C93.5243 227.154 93.321 227.264 93.1221 227.379C92.8923 227.507 92.658 227.627 92.4237 227.746C92.4193 227.746 92.4149 227.755 92.4149 227.755C92.4105 227.755 92.4061 227.755 92.4016 227.759C92.3132 227.804 92.2248 227.848 92.1364 227.888C92.1232 227.901 92.1055 227.905 92.0922 227.914C91.9906 227.967 91.8801 228.016 91.7784 228.064C91.7696 228.069 91.7652 228.073 91.7519 228.078C91.7254 228.086 91.7033 228.104 91.6768 228.113C91.4381 228.224 91.195 228.334 90.9563 228.436C90.9165 228.449 90.8812 228.467 90.8458 228.48C90.6381 228.568 90.4348 228.657 90.227 228.741H90.2226C89.9795 228.838 89.7364 228.931 89.4933 229.019C89.343 229.077 89.1883 229.13 89.038 229.183C88.9452 229.222 88.848 229.253 88.7552 229.284C88.7419 229.284 88.7287 229.293 88.7198 229.293C88.4767 229.377 88.2336 229.457 87.9861 229.527C87.8402 229.576 87.6856 229.625 87.5353 229.669C87.4425 229.7 87.3452 229.726 87.2524 229.757C87.2259 229.762 87.2082 229.766 87.1905 229.77C86.9474 229.846 86.6955 229.912 86.4524 229.983C86.2093 230.053 85.9574 230.115 85.7143 230.177C85.6435 229.629 85.5684 229.085 85.4888 228.537C85.312 227.326 85.1131 226.12 84.901 224.913C84.8303 224.524 84.764 224.139 84.6933 223.751C84.4944 222.623 84.2734 221.505 84.0435 220.383C83.8888 219.578 83.7209 218.778 83.5573 217.969C83.4468 217.43 83.3363 216.886 83.2347 216.343C83.2037 216.21 83.1816 216.077 83.1551 215.94V215.932C83.0932 215.627 83.0358 215.322 82.9783 215.012C82.9474 214.862 82.9253 214.712 82.8943 214.561C82.8899 214.526 82.8811 214.486 82.8766 214.455C82.775 213.894 82.6645 213.324 82.5584 212.763C82.5275 212.617 82.5009 212.462 82.4744 212.316C82.2932 211.41 82.112 210.504 81.9131 209.602C81.8954 209.514 81.8733 209.421 81.8556 209.333C81.7054 208.648 81.5418 207.967 81.3694 207.282C81.3385 207.176 81.312 207.065 81.2855 206.959C80.7153 204.771 80.039 202.597 79.1197 200.546C78.6468 199.472 78.1119 198.438 77.4932 197.447C77.3385 197.191 77.1749 196.948 77.0025 196.705C76.9628 196.643 76.9186 196.577 76.8699 196.519C76.7418 196.329 76.6047 196.139 76.4545 195.949C76.1804 195.582 75.8799 195.229 75.5616 194.893C75.208 194.504 74.8324 194.132 74.4301 193.801C74.1782 193.58 73.9263 193.381 73.6611 193.191C72.9804 192.696 72.2157 192.25 71.4157 191.936C71.3318 191.9 71.2434 191.865 71.1594 191.839C70.6555 191.662 70.1428 191.538 69.6168 191.494C69.387 191.467 69.1616 191.458 68.9317 191.476C68.7682 191.48 68.6046 191.494 68.4411 191.52C66.7969 191.763 64.9759 193.089 63.0709 195.136C61.1703 197.182 59.1946 199.949 57.2454 203.101C57.02 203.467 56.7901 203.839 56.5647 204.219C56.5161 204.298 56.4719 204.373 56.4233 204.453C56.4233 204.457 56.4189 204.457 56.4189 204.462C55.9592 205.235 55.4995 206.022 55.0487 206.827C54.8409 207.189 54.642 207.551 54.4431 207.914C53.979 208.749 53.5194 209.602 53.0685 210.464C52.2995 211.918 51.5569 213.39 50.832 214.862C50.3237 215.905 49.8243 216.948 49.3381 217.978C49.1039 218.478 48.874 218.973 48.6486 219.463C48.6486 219.463 48.6442 219.468 48.6486 219.472C48.5248 219.728 48.4099 219.98 48.295 220.237C48.2817 220.263 48.2685 220.29 48.2596 220.316C48.021 220.833 47.7911 221.355 47.5613 221.863C47.5348 221.916 47.5171 221.965 47.4994 222.013C47.495 222.018 47.495 222.022 47.4906 222.027C47.3801 222.283 47.2651 222.535 47.1591 222.787C47.1591 222.791 47.1591 222.8 47.1547 222.805C47.1016 222.924 47.0486 223.034 47 223.154C46.3458 224.657 45.7314 226.098 45.1833 227.441C44.8828 228.17 44.6043 228.869 44.3391 229.536C44.0651 230.23 43.8132 230.889 43.5789 231.503C43.3005 232.25 43.0485 232.944 42.8364 233.558C42.7966 233.682 42.7524 233.797 42.7126 233.916C42.6419 234.115 42.58 234.31 42.5225 234.491H42.5181C42.4783 234.632 42.4341 234.761 42.3944 234.889L42.3634 234.977L42.3502 235.026C42.3502 235.026 42.3237 235.021 42.3148 235.021C42.3148 235.021 42.3133 235.021 42.3104 235.021C42.2485 235.013 42.1822 235.004 42.1159 234.99H42.1115C41.8993 234.96 41.6916 234.929 41.4706 234.889C41.338 234.871 41.201 234.845 41.064 234.818C41.0021 234.805 40.9358 234.792 40.8695 234.778C40.812 234.769 40.7457 234.752 40.6838 234.743L40.538 234.712C40.4054 234.681 40.2772 234.659 40.1402 234.624C40.0562 234.61 39.9722 234.588 39.8838 234.571H39.875C39.8043 234.553 39.7336 234.535 39.6628 234.522C39.2164 234.42 38.77 234.327 38.3192 234.243C38.3148 234.248 38.3148 234.243 38.3148 234.243C37.7357 234.124 37.1479 234.022 36.5689 233.934C36.4849 233.916 36.4009 233.903 36.3169 233.894H36.3125C36.3125 233.894 36.3081 233.894 36.3037 233.89C36.0871 233.855 35.8794 233.828 35.6628 233.801C35.5214 233.771 35.3799 233.753 35.2385 233.74C35.0749 233.713 34.9202 233.695 34.7567 233.682C34.6683 233.669 34.5799 233.656 34.4915 233.647C34.2042 233.607 33.9081 233.576 33.6164 233.554C32.7943 233.466 31.9677 233.404 31.1323 233.364C30.8185 233.351 30.5003 233.333 30.1865 233.324C29.0682 233.253 27.95 233.205 26.8273 233.174C26.3235 233.156 25.8152 233.138 25.3113 233.125C23.0704 233.068 20.825 233.037 18.593 232.962C18.1554 232.953 17.7134 232.948 17.2758 232.944H17.2714C16.8913 232.94 16.5068 232.935 16.1355 232.917C16.0824 232.917 16.0338 232.913 15.9808 232.913C15.6449 232.9 15.3089 232.873 14.9863 232.842C14.8316 232.825 14.6681 232.803 14.5178 232.785C14.5001 232.78 14.4824 232.776 14.4692 232.776C14.3808 232.763 14.2924 232.745 14.2084 232.732C14.1509 232.723 14.0846 232.705 14.0272 232.692C13.9432 232.674 13.8548 232.652 13.7708 232.635C13.7575 232.63 13.7399 232.626 13.731 232.626C13.7178 232.621 13.7001 232.621 13.6912 232.617C13.6603 232.608 13.6294 232.599 13.5984 232.59C13.5498 232.577 13.5012 232.559 13.4526 232.542C13.0283 232.405 12.6437 232.219 12.3078 231.963C12.1973 231.879 12.0868 231.786 11.9896 231.689C11.857 231.561 11.7288 231.41 11.6183 231.247C11.6183 231.247 11.6168 231.245 11.6139 231.242C11.6139 231.242 11.5962 231.211 11.5785 231.194C11.5343 231.123 11.4857 231.048 11.4415 230.973C11.4282 230.946 11.415 230.929 11.4061 230.902C11.3973 230.893 11.3929 230.875 11.3885 230.867C11.3708 230.831 11.3531 230.805 11.3443 230.769H11.3398C11.3398 230.769 11.331 230.734 11.3222 230.721C11.3177 230.712 11.3133 230.703 11.3089 230.685C11.2691 230.601 11.2338 230.513 11.2028 230.425C11.1763 230.367 11.1542 230.305 11.1409 230.243C11.1144 230.173 11.0923 230.102 11.0791 230.027C11.0791 230.018 11.0746 230.014 11.0746 230C11.0658 229.987 11.0614 229.965 11.0614 229.952C11.0481 229.899 11.0304 229.846 11.0216 229.784C11.0083 229.735 10.9951 229.687 10.9907 229.638C10.973 229.532 10.9509 229.426 10.9376 229.32C10.9376 229.306 10.9376 229.289 10.9332 229.275C10.9199 229.174 10.9067 229.059 10.8978 228.953C10.8846 228.829 10.8802 228.71 10.8713 228.577C10.8713 228.484 10.8713 228.383 10.8713 228.285C10.8713 228.215 10.8713 228.14 10.8713 228.064C10.8713 227.963 10.8713 227.87 10.8713 227.768C10.8713 227.689 10.8757 227.614 10.8802 227.53C10.8802 227.468 10.8846 227.397 10.889 227.335H10.8978C11.5255 227.229 12.1443 227.119 12.7719 227.012C13.9785 226.791 15.1808 226.557 16.3697 226.257C16.8736 226.128 17.3775 225.991 17.8769 225.841C18.9024 225.527 19.9101 225.16 20.8825 224.705C20.8869 224.705 20.8913 224.701 20.8958 224.701C22.3057 224.047 23.614 223.202 24.7986 222.173C24.9754 222.022 25.1566 221.859 25.329 221.7C25.5411 221.501 25.7444 221.289 25.9389 221.068C25.9787 221.028 26.0185 220.984 26.045 220.944C26.0583 220.935 26.0715 220.917 26.0759 220.909H26.0804C26.2351 220.727 26.3853 220.542 26.5268 220.356C26.5975 220.259 26.6638 220.162 26.7257 220.064C26.7301 220.064 26.7301 220.06 26.7301 220.06C26.9599 219.711 27.1588 219.344 27.3268 218.959C27.371 218.849 27.4196 218.729 27.4594 218.61C27.6273 218.142 27.7202 217.62 27.729 217.107C27.7378 216.913 27.729 216.718 27.7113 216.528C27.7025 216.418 27.6848 216.312 27.6627 216.206C27.6627 216.197 27.6627 216.188 27.6583 216.17C27.561 215.653 27.3577 215.158 27.0351 214.734C26.7433 214.34 26.3588 214.053 25.9345 213.845C25.4218 213.589 24.8428 213.465 24.2814 213.403C24.14 213.39 24.003 213.377 23.8615 213.377H23.8527C23.5698 213.364 23.2825 213.368 22.9997 213.386C22.2792 213.434 21.5543 213.571 20.8604 213.748C20.7676 213.775 20.6703 213.797 20.5775 213.828C19.4151 214.137 18.288 214.548 17.2095 215.083C17.0725 215.154 16.9355 215.22 16.7985 215.295C15.583 215.936 14.4426 216.714 13.373 217.58C13.1609 217.748 12.9575 217.916 12.7542 218.093C11.5078 219.167 10.3542 220.369 9.31108 221.651C8.78511 222.288 8.28124 222.942 7.7862 223.605C7.68454 223.746 7.57846 223.896 7.47238 224.042C7.47238 224.047 7.46797 224.047 7.46797 224.051C7.41935 224.051 7.36631 224.051 7.31769 224.051C7.30443 224.051 7.29116 224.051 7.2779 224.051C7.09669 224.051 6.91547 224.051 6.73425 224.042H6.72984C6.57956 224.038 6.42486 224.033 6.279 224.016C6.15524 224.007 6.04032 223.989 5.91656 223.976C5.86794 223.971 5.81933 223.967 5.77071 223.958C5.70883 223.954 5.64252 223.945 5.58506 223.932C5.43479 223.905 5.28009 223.879 5.12981 223.839C5.02815 223.821 4.92207 223.79 4.82042 223.764H4.816C4.73202 223.737 4.64804 223.715 4.5729 223.684C4.45356 223.649 4.34306 223.605 4.22814 223.56C4.14859 223.53 4.07787 223.503 4.00273 223.463C3.92317 223.428 3.85245 223.393 3.77731 223.357C3.67123 223.3 3.56073 223.238 3.45465 223.176C3.36626 223.123 3.28227 223.07 3.20271 223.004C3.16735 222.986 3.132 222.955 3.10106 222.928C2.95962 222.822 2.8226 222.703 2.69442 222.57C2.66348 222.553 2.64138 222.526 2.61486 222.495C2.56182 222.447 2.5132 222.389 2.46458 222.332C2.36735 222.212 2.27453 222.097 2.18171 221.969C2.18171 221.969 2.18171 221.965 2.17729 221.965C2.10657 221.863 2.04027 221.757 1.97839 221.647C1.8016 221.346 1.6469 221.01 1.52314 220.634H1.51872V220.621C1.51872 220.621 1.5143 220.612 1.5143 220.608C1.5143 220.595 1.50988 220.581 1.50546 220.568C1.4922 220.515 1.4701 220.458 1.45684 220.391C1.45242 220.383 1.45242 220.365 1.448 220.356C1.43474 220.285 1.41706 220.223 1.4038 220.148C1.39938 220.131 1.39496 220.108 1.39496 220.091C1.38612 220.073 1.3817 220.051 1.3817 220.033C1.3817 220.029 1.37728 220.025 1.3817 220.016C1.37728 220.007 1.37286 219.998 1.37728 219.985C1.36844 219.927 1.36402 219.865 1.35076 219.804C1.3375 219.706 1.32424 219.609 1.31982 219.503C1.31098 219.441 1.30656 219.375 1.30656 219.308C1.30214 219.278 1.30214 219.251 1.30656 219.216C1.30214 219.198 1.30214 219.171 1.30214 219.154C1.29772 218.99 1.29772 218.827 1.30214 218.659C1.30214 218.645 1.30214 218.628 1.30656 218.61C1.30214 218.584 1.30656 218.562 1.30656 218.531C1.30656 218.478 1.31098 218.42 1.3154 218.358V218.332C1.3154 218.305 1.3154 218.283 1.31982 218.257V218.239C1.31982 218.239 1.32424 218.221 1.32424 218.208V218.173C1.32424 218.146 1.32866 218.124 1.32866 218.097C1.33308 218.058 1.33308 218.018 1.3375 217.974C1.34192 217.947 1.34192 217.925 1.34634 217.898C1.34634 217.859 1.35076 217.819 1.35518 217.775C1.3596 217.739 1.3596 217.704 1.36402 217.673C1.36844 217.66 1.36844 217.642 1.36844 217.629C1.3817 217.487 1.4038 217.346 1.42148 217.2C1.4259 217.169 1.43032 217.138 1.43474 217.103C1.43474 217.068 1.43916 217.041 1.448 217.01C1.45684 216.917 1.47452 216.829 1.48778 216.736C1.48778 216.718 1.4922 216.701 1.49662 216.683C1.52755 216.493 1.55849 216.303 1.59385 216.108C1.60711 216.033 1.62038 215.958 1.63806 215.883C1.64248 215.843 1.64689 215.808 1.65573 215.773C1.66457 215.728 1.67342 215.689 1.68668 215.644C1.70436 215.521 1.73529 215.401 1.76181 215.277C1.76623 215.247 1.77065 215.22 1.77949 215.189C1.78391 215.145 1.79276 215.105 1.80602 215.061C1.81044 215.043 1.81486 215.017 1.81928 214.999C1.8237 214.968 1.82811 214.946 1.83695 214.915C1.87673 214.734 1.92093 214.553 1.96071 214.371C1.97839 214.279 2.00491 214.186 2.02259 214.093H2.02701C2.04469 214 2.07121 213.907 2.09773 213.81C2.09773 213.801 2.10215 213.792 2.10215 213.779C2.12867 213.677 2.15519 213.571 2.18171 213.465C2.19939 213.39 2.21707 213.319 2.23475 213.244C2.34083 212.816 2.45575 212.378 2.56625 211.954L2.65906 211.605C2.74746 211.273 2.83586 210.937 2.92426 210.61C2.92426 210.601 2.92868 210.584 2.9331 210.575L3.00824 210.283C3.01708 210.243 3.03476 210.203 3.0436 210.164C3.07896 210.031 3.11432 209.898 3.14526 209.77C3.21598 209.483 3.2867 209.196 3.35741 208.917C3.35741 208.904 3.36184 208.886 3.36626 208.873C3.37068 208.86 3.37067 208.842 3.37509 208.824C3.46791 208.449 3.56073 208.024 3.66239 207.569C3.71985 207.313 3.77289 207.052 3.83477 206.769C3.87455 206.588 3.91433 206.407 3.95411 206.221C4.00715 205.951 4.06461 205.673 4.12649 205.386C4.15301 205.249 4.17952 205.112 4.20604 204.97C4.22372 204.873 4.24583 204.776 4.2635 204.678C4.29002 204.555 4.31212 204.435 4.33864 204.307C4.3519 204.245 4.36516 204.183 4.37842 204.122C4.39168 204.024 4.41378 203.927 4.43146 203.83C4.45798 203.697 4.4845 203.56 4.51102 203.423C4.55964 203.18 4.60384 202.928 4.65246 202.667C4.7055 202.376 4.76296 202.08 4.82042 201.775C4.8602 201.576 4.89555 201.368 4.93091 201.165C4.93533 201.129 4.94418 201.089 4.9486 201.059C4.96186 200.979 4.97953 200.904 4.99279 200.82C5.04141 200.541 5.09445 200.25 5.14749 199.958C5.19169 199.702 5.24031 199.441 5.28451 199.176C5.33313 198.902 5.38175 198.628 5.43037 198.349C5.44363 198.261 5.46131 198.172 5.47899 198.088C5.50551 197.925 5.53203 197.77 5.56297 197.607C5.60275 197.355 5.64695 197.103 5.69115 196.846C5.73534 196.621 5.77512 196.391 5.8149 196.157C5.85026 195.94 5.89004 195.719 5.9254 195.503C6.1906 193.96 6.46022 192.334 6.74309 190.627C6.78729 190.371 6.83149 190.11 6.87127 189.845C6.99945 189.085 7.12763 188.307 7.25139 187.52C7.33978 186.972 7.42819 186.42 7.51658 185.854C7.52542 185.801 7.53426 185.743 7.54752 185.682C7.5652 185.575 7.58289 185.461 7.60056 185.354C7.65802 184.992 7.7199 184.621 7.77736 184.254C7.80388 184.112 7.82156 183.971 7.84808 183.825C7.8525 183.785 7.86134 183.746 7.86576 183.701C7.93648 183.295 7.99836 182.884 8.06024 182.468C8.08676 182.314 8.10885 182.154 8.13537 182C8.19725 181.62 8.25913 181.235 8.31659 180.851C8.32101 180.837 8.32102 180.82 8.32544 180.806C8.3608 180.594 8.38732 180.386 8.42268 180.17C8.46687 179.887 8.51549 179.591 8.55969 179.304C8.59947 179.038 8.64367 178.773 8.68345 178.512C8.71439 178.327 8.74091 178.146 8.77185 177.96C8.80721 177.743 8.84257 177.536 8.86909 177.319C8.88677 177.2 8.90886 177.089 8.92212 176.97C8.99284 176.541 9.05914 176.104 9.12986 175.662C9.1829 175.308 9.23594 174.954 9.2934 174.605C9.35528 174.19 9.42158 173.77 9.48788 173.345C9.5365 173.023 9.58954 172.696 9.63816 172.36C9.79286 171.317 9.96081 170.256 10.1199 169.186C10.2437 168.404 10.3586 167.608 10.4824 166.817C10.531 166.495 10.5796 166.172 10.6282 165.854C10.7387 165.102 10.8536 164.351 10.9641 163.591C11.0083 163.303 11.0525 163.012 11.0967 162.72C11.1807 162.176 11.2647 161.633 11.3398 161.089C11.3575 160.97 11.3796 160.85 11.3929 160.727C11.4238 160.541 11.4459 160.355 11.4769 160.165H11.4813C11.5122 159.949 11.5432 159.736 11.5741 159.52C11.5918 159.409 11.6095 159.294 11.6271 159.175C11.6316 159.122 11.6404 159.069 11.6448 159.012C11.689 158.738 11.7288 158.464 11.773 158.185C12.0161 156.532 12.2636 154.861 12.5111 153.186C12.7277 151.714 12.9487 150.229 13.1653 148.74V148.726C13.2051 148.47 13.2448 148.214 13.2758 147.953C13.2935 147.842 13.3111 147.727 13.3288 147.617C13.3377 147.533 13.3553 147.449 13.3642 147.365C13.5012 146.455 13.6338 145.544 13.7664 144.629C13.7796 144.51 13.8017 144.39 13.815 144.271C13.8636 143.935 13.9122 143.595 13.9609 143.263C14.0183 142.852 14.0846 142.446 14.1421 142.035C14.2216 141.531 14.2924 141.027 14.3631 140.523C14.425 140.068 14.4957 139.612 14.5576 139.157C14.6283 138.702 14.6902 138.247 14.7565 137.787C14.8183 137.332 14.889 136.876 14.9509 136.421C15.1454 135.055 15.3443 133.694 15.5388 132.337C15.5918 131.97 15.6449 131.599 15.7023 131.232C15.7112 131.148 15.7288 131.064 15.7377 130.98C15.8084 130.529 15.8703 130.079 15.9322 129.628C15.9454 129.5 15.9675 129.367 15.9852 129.239C15.9852 129.23 15.9896 129.221 15.9896 129.208V129.195H15.994C16.0073 129.058 16.0294 128.925 16.0471 128.792C16.0515 128.766 16.0515 128.748 16.0559 128.722C16.0869 128.505 16.1134 128.293 16.1487 128.081C16.1797 127.869 16.2062 127.661 16.2416 127.449C16.33 126.83 16.4184 126.211 16.5068 125.592C16.5465 125.323 16.5863 125.053 16.6261 124.779V124.753H16.6305C16.6305 124.717 16.6349 124.682 16.6394 124.651C16.6526 124.549 16.6703 124.443 16.688 124.342C16.688 124.324 16.688 124.297 16.6924 124.28C16.6924 124.271 16.6924 124.266 16.6968 124.262C16.7233 124.081 16.7454 123.9 16.7764 123.718C16.794 123.546 16.8206 123.369 16.8471 123.201C16.8648 123.051 16.8913 122.896 16.9178 122.746L17.0062 122.114C17.0195 122.03 17.0327 121.946 17.046 121.871C17.13 121.279 17.2139 120.686 17.2979 120.098C17.3333 119.838 17.3731 119.581 17.4084 119.32C17.457 118.954 17.5101 118.587 17.5631 118.215C17.5764 118.092 17.5985 117.972 17.6117 117.844C17.709 117.137 17.8062 116.439 17.9123 115.74C17.9432 115.541 17.9698 115.343 17.9963 115.144C18.014 115.024 18.0316 114.914 18.0449 114.794C18.0493 114.759 18.0537 114.733 18.0581 114.697C18.0979 114.436 18.1333 114.185 18.1686 113.928C18.1686 113.91 18.1731 113.888 18.1731 113.875C18.1908 113.738 18.2128 113.597 18.2305 113.455C18.2703 113.181 18.3101 112.907 18.3499 112.633V112.615C18.3631 112.531 18.3764 112.447 18.3852 112.363C18.425 112.112 18.4604 111.868 18.4913 111.621C18.4957 111.586 18.4957 111.563 18.5001 111.533C18.509 111.484 18.5134 111.435 18.5267 111.387V111.369C18.5841 110.958 18.646 110.547 18.7035 110.14V110.131C18.73 109.981 18.7477 109.831 18.7653 109.685C18.8051 109.424 18.8405 109.168 18.8714 108.907C18.9289 108.5 18.9819 108.094 19.0438 107.692C19.0482 107.656 19.0526 107.63 19.0571 107.599C19.2427 106.246 19.4328 104.916 19.614 103.612C19.6449 103.391 19.6759 103.17 19.7068 102.958C19.7156 102.896 19.7245 102.83 19.7333 102.768H19.7377C19.7731 102.507 19.8084 102.264 19.8394 102.012L19.8703 101.804C19.9013 101.57 19.9322 101.336 19.9676 101.106V101.079H19.972C20.1178 99.9921 20.2725 98.9357 20.4184 97.897C20.4184 97.8661 20.4228 97.8351 20.4272 97.8042L20.4405 97.7025C20.4538 97.5832 20.4759 97.4727 20.4891 97.3578C20.5068 97.2119 20.5289 97.0705 20.5466 96.929C20.5731 96.7522 20.5952 96.5799 20.6217 96.4031C20.6306 96.3456 20.635 96.2837 20.6482 96.2263C20.6659 96.0892 20.688 95.9478 20.7057 95.8108C20.7322 95.6163 20.7587 95.4218 20.7853 95.2318C20.7897 95.2008 20.7941 95.1699 20.7985 95.139C20.8162 94.9887 20.8427 94.834 20.8604 94.6837C20.8692 94.5953 20.8869 94.5069 20.9002 94.4185C20.909 94.3345 20.9179 94.2638 20.9311 94.1931C20.94 94.1003 20.9576 94.0074 20.9709 93.9191C20.9709 93.8925 20.9753 93.866 20.9797 93.8395C21.0107 93.6141 21.0372 93.3931 21.0726 93.1721C21.077 93.119 21.0858 93.066 21.0902 93.0085C21.1079 92.8759 21.13 92.7389 21.1477 92.6063C21.1477 92.5886 21.1521 92.571 21.1521 92.5533C21.1698 92.4251 21.1919 92.2969 21.2052 92.1732C21.2228 92.0273 21.2449 91.8815 21.2626 91.7356H21.267C21.2803 91.6163 21.298 91.5013 21.3112 91.382C21.3201 91.3201 21.3289 91.2494 21.3422 91.1875C21.351 91.1345 21.3554 91.0814 21.3687 91.0328C21.3731 90.9886 21.3775 90.9488 21.382 90.9091C21.3952 90.803 21.4129 90.6969 21.4262 90.5952C21.5013 90.0472 21.5764 89.5079 21.6516 88.9864C21.6604 88.8892 21.6781 88.7875 21.6913 88.6858C21.6958 88.6726 21.6958 88.6505 21.6958 88.6372C21.7002 88.6372 21.7002 88.6328 21.7002 88.6328C21.7134 88.5223 21.7311 88.4118 21.7444 88.3013C21.7576 88.1996 21.7753 88.0936 21.7886 87.9919C21.793 87.9521 21.7974 87.9079 21.8018 87.8681C21.8107 87.7886 21.8195 87.7134 21.8328 87.6339C21.8372 87.6295 21.8372 87.6206 21.8372 87.6074L21.8505 87.5057C21.8637 87.3864 21.8858 87.2715 21.8991 87.1521C21.8991 87.1521 21.9035 87.1123 21.9035 87.0991H21.9079C21.9123 87.0681 21.9123 87.046 21.9168 87.0195C21.9344 86.856 21.961 86.7013 21.9786 86.5466C22.0052 86.3698 22.0273 86.2018 22.0538 86.0383V86.025C22.1333 85.4504 22.2085 84.8935 22.2836 84.3499C22.2969 84.257 22.3146 84.1687 22.3234 84.0803L22.3367 83.9609C22.3411 83.9344 22.3411 83.9123 22.3455 83.8858C22.372 83.7134 22.3897 83.5543 22.4162 83.3863C22.4251 83.3377 22.4295 83.2891 22.4339 83.2405C22.4737 82.9974 22.5046 82.7587 22.5356 82.5244C22.6195 81.9277 22.6991 81.3531 22.7698 80.8051C22.7787 80.7211 22.7963 80.6371 22.8052 80.5531C22.814 80.4913 22.8229 80.425 22.8317 80.3675C22.8405 80.3145 22.845 80.2658 22.8494 80.2172C22.8494 80.2172 22.8538 80.2172 22.8538 80.2128C22.8538 80.1995 22.8582 80.1819 22.8582 80.1686C22.9068 79.8238 22.951 79.4968 22.9952 79.1741V79.1653C23.0483 78.7675 23.1013 78.3918 23.1499 78.0293C23.1588 77.9719 23.1632 77.9188 23.1764 77.857C23.1764 77.8481 23.1765 77.8437 23.1809 77.8304C23.1897 77.7553 23.1985 77.689 23.2118 77.6183C23.2118 77.5874 23.2162 77.5564 23.2206 77.5255H23.2251C23.2251 77.4945 23.2295 77.4769 23.2295 77.4503C23.3135 76.8448 23.393 76.2835 23.4593 75.7796C23.4637 75.7266 23.4726 75.6691 23.477 75.6116C23.5124 75.3685 23.5477 75.1387 23.5742 74.9177C23.7378 74.7232 23.9102 74.542 24.087 74.3741H24.0914C24.2814 74.1928 24.4803 74.0293 24.6748 73.8834C24.6792 73.879 24.6836 73.879 24.6881 73.8746C24.7986 73.7906 24.9135 73.7066 25.024 73.6403C25.0682 73.6094 25.108 73.5829 25.1522 73.5564C25.2538 73.4945 25.3599 73.4282 25.4571 73.3796H25.4616C25.961 73.0923 26.4472 72.8889 26.8671 72.7475C26.8804 72.7431 26.8936 72.7387 26.9069 72.7342C27.1323 72.6591 27.3356 72.6017 27.5124 72.553C27.5434 72.5486 27.5699 72.5398 27.5964 72.5354C27.6406 72.5265 27.6848 72.5177 27.7246 72.5044C27.729 72.5044 27.7378 72.5 27.7378 72.5C27.7423 72.5 27.7467 72.4956 27.7511 72.4956L33.5456 72.6149H33.6871L34.3147 72.6282L36.5512 72.6724L43.6761 72.8138L45.095 72.8447L45.6828 72.8536L46.4475 72.8668L46.9116 72.8757H47.0088L49.6033 72.9287L49.926 72.9376H50.0939L50.8099 72.9508H50.8983L51.526 72.9641H51.6144L52.3834 72.9818L53.3824 72.9994H53.4619L56.3835 73.0569L59.1106 73.1099L60.2554 73.1365H60.388L60.9272 73.1497L61.5504 73.1586L62.0322 73.1674H62.072L62.6775 73.1807L64.9759 73.2249H65.1527L65.7936 73.2425H65.9836L67.0356 73.2691C67.0356 73.2691 67.04 73.2646 67.0444 73.2691L68.2732 73.2956L69.7141 73.3265L71.3185 73.3575L71.8975 73.3707L72.6091 73.3796H72.7064L74.0589 73.4105L74.7439 73.4238H74.7528L76.9451 73.468L78.8103 73.5077L80.4103 73.5387L82.2137 73.5785L83.4291 73.605H83.7297L86.6955 73.6669L88.7419 73.7066L90.585 73.7464C90.5983 73.7729 90.6248 73.795 90.6425 73.8171H90.6469C90.7707 73.9586 90.8856 74.1 91.0049 74.2415C91.1022 74.352 91.195 74.4713 91.2834 74.5906C91.2834 74.5906 91.2849 74.5906 91.2878 74.5906C92.9409 76.6415 94.2271 78.962 95.2216 81.4415C95.2481 81.5034 95.2702 81.5697 95.2967 81.636C95.3232 81.6979 95.3497 81.7686 95.3718 81.8305C95.4337 81.994 95.5 82.1532 95.5531 82.3167C95.5884 82.4007 95.6149 82.4802 95.6459 82.5598C96.0039 83.5543 96.3177 84.5664 96.5873 85.5963C96.6006 85.6361 96.6138 85.6803 96.6227 85.72C96.6271 85.7245 96.6271 85.7289 96.6271 85.7333C97.1619 87.7576 97.542 89.8394 97.8205 91.9389C98.0061 93.3798 98.1476 94.8251 98.2448 96.2528C98.2492 96.3014 98.2492 96.3456 98.2536 96.3942C98.1166 96.6373 97.9796 96.8893 97.847 97.1368C96.9365 98.8561 96.1276 100.686 95.4205 102.626C94.9917 103.789 94.5984 104.987 94.2403 106.22C93.8956 107.409 93.5862 108.633 93.3033 109.884C93.3033 109.884 93.2989 109.897 93.2989 109.902C92.9674 111.365 92.6801 112.863 92.437 114.401C92.437 114.401 92.437 114.428 92.4326 114.432C92.3309 115.077 92.2381 115.731 92.1541 116.386C92.1409 116.47 92.1276 116.558 92.1143 116.642C92.1055 116.735 92.0878 116.832 92.079 116.925C92.0701 117.013 92.0525 117.106 92.0436 117.199C92.0127 117.42 91.9906 117.645 91.9641 117.871C91.9552 117.946 91.9464 118.012 91.9375 118.087C91.774 119.506 91.6502 120.947 91.5574 122.41C91.3629 125.451 91.3011 128.585 91.3718 131.78C91.3718 131.917 91.3762 132.05 91.3806 132.183V132.262C91.6989 144.466 93.8956 157.566 97.5509 169.982C98.7664 174.101 100.141 178.146 101.666 182.053C102.74 184.815 103.885 187.507 105.1 190.11C106.095 192.25 107.138 194.331 108.225 196.342C108.252 196.387 108.274 196.435 108.3 196.479C108.605 197.041 108.91 197.602 109.22 198.15L109.622 200.957L109.684 201.403H109.688V201.474L111.182 211.821L111.191 211.901C111.191 211.901 111.195 211.945 111.2 211.963L111.208 211.989Z' fill='%23949984'/%3E%3C/g%3E%3Cpath d='M111.208 211.989C111.208 211.989 111.199 211.945 111.199 211.927C110.969 210.5 109.731 207.286 103.221 206.557C103.185 206.553 103.15 206.548 103.119 206.548H103.115C102.257 206.455 101.303 206.407 100.246 206.407C99.7468 206.407 99.2208 206.42 98.6727 206.451C98.0009 206.486 97.5898 206.172 97.3909 205.669C97.2716 205.377 97.2274 205.019 97.2495 204.621C97.2495 204.612 97.2539 204.608 97.2495 204.603C97.2495 204.546 97.2539 204.48 97.2583 204.422C97.2628 204.391 97.2628 204.365 97.2716 204.329C97.3733 203.388 97.8727 201.978 98.6064 201.275C98.7832 201.107 98.9733 200.975 99.1766 200.908L100.127 197.655L100.79 195.392H100.794L101.223 193.907L101.674 182.088L103.026 146.41L103.243 144.496L103.371 143.365L104.609 132.337V132.328L104.653 131.908L104.976 129.044L105.174 131.705L105.205 132.099L105.471 135.648L111.203 211.936V211.998L111.208 211.989Z' fill='%233B754B'/%3E%3Cpath d='M109.834 201.509C109.79 201.483 109.745 201.465 109.697 201.439C109.683 201.43 109.666 201.425 109.648 201.412C109.608 201.394 109.564 201.372 109.515 201.359C109.498 201.35 109.471 201.341 109.454 201.328C109.051 201.165 108.592 201.041 108.088 200.939C107.991 200.926 107.893 200.904 107.796 200.891C107.168 200.798 106.488 200.749 105.785 200.749C105.613 200.749 105.436 200.754 105.272 200.762H105.246C105.1 200.762 104.945 200.771 104.799 200.78C104.76 200.78 104.724 200.78 104.689 200.784C104.216 200.82 103.734 200.868 103.261 200.939H103.257C102.497 201.05 101.75 201.213 101.06 201.425C99.9817 201.748 99.0314 202.186 98.3551 202.716C97.7275 203.215 97.3297 203.799 97.2811 204.457C97.2767 204.466 97.2767 204.471 97.2767 204.484C97.2767 204.449 97.2767 204.391 97.2811 204.307C97.2899 203.724 97.3253 201.987 97.3651 199.317V199.304C97.3827 198.3 97.4004 197.16 97.4137 195.9C97.4225 195.489 97.4269 195.069 97.4314 194.632C97.4358 194.406 97.4358 194.181 97.4402 193.951C97.4402 193.69 97.4446 193.434 97.449 193.169C97.449 192.837 97.4535 192.501 97.4579 192.161C97.5286 186.252 97.5861 178.596 97.564 170C97.5507 158.689 97.4137 145.738 97.0203 132.987L97.007 132.532C96.9805 131.794 96.9628 131.051 96.9363 130.313C96.8965 129.164 96.8523 128.014 96.8126 126.874C96.7684 125.756 96.7242 124.651 96.6755 123.546C96.6004 121.809 96.5253 120.085 96.4369 118.379C96.3927 117.442 96.3441 116.514 96.2954 115.59C96.2954 115.572 96.2954 115.555 96.291 115.541C96.291 115.497 96.2866 115.457 96.2866 115.413C96.2601 115.046 96.2424 114.675 96.2247 114.308C96.2115 113.99 96.1893 113.672 96.1761 113.354C96.1717 113.318 96.1717 113.292 96.1717 113.265C96.1673 113.203 96.1628 113.141 96.1584 113.084C96.1584 113.031 96.154 112.978 96.154 112.92H96.1496C96.1496 112.92 96.1452 112.894 96.1496 112.885C96.1496 112.885 96.154 112.881 96.1496 112.876C96.1186 112.377 96.0921 111.882 96.0612 111.387C96.0479 111.144 96.0302 110.896 96.0126 110.657C95.986 110.242 95.9639 109.831 95.933 109.42C95.9065 109.031 95.8844 108.651 95.8534 108.271C95.8269 107.873 95.8004 107.484 95.7695 107.09C95.7385 106.666 95.712 106.237 95.6811 105.818C95.6766 105.769 95.6722 105.72 95.6722 105.667C95.6457 105.362 95.6236 105.066 95.5971 104.761C95.544 104.05 95.491 103.347 95.4291 102.653C95.4247 102.595 95.4203 102.542 95.4159 102.48C95.3717 101.977 95.3319 101.477 95.2877 100.982C95.2346 100.359 95.1816 99.7489 95.1197 99.139L95.0181 98.0517C94.9739 97.5787 94.9252 97.1014 94.881 96.6373C94.8192 96.0406 94.7573 95.4527 94.6954 94.8737C94.6556 94.5246 94.6203 94.1842 94.5849 93.8439C94.5451 93.4991 94.5054 93.1632 94.4656 92.8317C94.2092 90.6483 93.9352 88.5709 93.6435 86.6305C93.639 86.6261 93.639 86.6305 93.639 86.6305V86.604C93.639 86.604 93.6346 86.5908 93.6346 86.5863C93.5241 85.857 93.4092 85.1454 93.2899 84.4603C93.2412 84.1775 93.1926 83.899 93.144 83.625L93.1308 83.5233C93.1308 83.5233 93.1263 83.4968 93.1219 83.4879C93.0777 83.2272 93.0291 82.9752 92.9849 82.7189C92.9805 82.6879 92.9716 82.6614 92.9716 82.6305C92.9318 82.436 92.8921 82.2415 92.8611 82.0515C92.8567 82.0382 92.8567 82.0205 92.8523 82.0073L93.2633 81.9498L95.3142 81.6581L97.7938 81.3045L100.817 80.8758C100.835 81.0216 100.857 81.1631 100.874 81.3045C100.91 81.5653 100.95 81.8216 100.981 82.078C101.02 82.3874 101.065 82.7012 101.104 83.0062C101.175 83.5145 101.241 84.0183 101.303 84.5222C101.316 84.6062 101.33 84.6902 101.339 84.7742C101.343 84.7874 101.343 84.8007 101.343 84.8139C101.511 86.0604 101.666 87.2979 101.812 88.5267C101.94 89.5389 102.063 90.5422 102.178 91.5411C102.183 91.572 102.183 91.5985 102.187 91.6295C102.329 92.8361 102.466 94.0339 102.594 95.2185C102.775 96.8273 102.943 98.4274 103.102 100.001C103.407 103.046 103.681 106.03 103.92 108.938C103.973 109.588 104.026 110.229 104.075 110.874C104.105 111.232 104.132 111.59 104.159 111.948C104.22 112.726 104.282 113.504 104.335 114.273C104.335 114.299 104.34 114.321 104.34 114.348C104.353 114.534 104.366 114.719 104.38 114.9C104.517 116.801 104.64 118.666 104.751 120.501C104.751 120.532 104.755 120.558 104.755 120.589V120.598C104.786 121.102 104.813 121.606 104.848 122.105C104.879 122.609 104.901 123.108 104.932 123.603C104.972 124.333 105.012 125.058 105.043 125.778C105.056 125.986 105.069 126.185 105.078 126.384C105.082 126.445 105.082 126.507 105.087 126.569C105.096 126.755 105.104 126.94 105.118 127.126C105.18 128.403 105.241 129.663 105.294 130.91C105.303 131.139 105.312 131.369 105.325 131.599C105.33 131.74 105.339 131.873 105.343 132.01C105.356 132.47 105.378 132.925 105.392 133.38C105.423 134.127 105.449 134.879 105.476 135.617C105.586 138.759 105.67 141.8 105.741 144.735C105.767 145.69 105.785 146.631 105.803 147.555C105.812 148.236 105.829 148.912 105.838 149.579C105.856 150.406 105.869 151.224 105.882 152.037C105.882 152.121 105.882 152.209 105.887 152.293C105.896 153.018 105.904 153.734 105.918 154.441C105.949 156.762 105.975 159.007 106.002 161.182C106.006 161.602 106.01 162.03 106.015 162.446C106.024 163.18 106.028 163.904 106.041 164.62C106.05 165.266 106.059 165.902 106.068 166.53C106.108 169.261 106.152 171.874 106.218 174.353C106.236 175.091 106.258 175.825 106.276 176.541C106.289 176.97 106.307 177.403 106.324 177.827C106.404 179.86 106.492 181.796 106.616 183.653C106.656 184.289 106.7 184.917 106.749 185.531C106.833 186.504 106.917 187.454 107.014 188.378C107.014 188.422 107.018 188.466 107.027 188.515C107.129 189.474 107.244 190.415 107.372 191.321C107.372 191.335 107.372 191.357 107.376 191.379C107.637 193.191 107.938 194.893 108.313 196.484C108.649 197.951 109.047 199.33 109.507 200.612C109.546 200.731 109.591 200.842 109.635 200.961C109.639 200.966 109.639 200.97 109.644 200.979C109.701 201.142 109.767 201.297 109.829 201.461C109.834 201.47 109.834 201.474 109.838 201.487L109.834 201.509Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.65' d='M109.834 201.509C109.79 201.483 109.745 201.465 109.697 201.447C109.639 201.416 109.577 201.39 109.515 201.363C109.502 201.359 109.48 201.35 109.467 201.346C109.462 201.341 109.458 201.337 109.454 201.337C109.051 201.173 108.592 201.05 108.088 200.948C107.991 200.935 107.893 200.913 107.796 200.899C107.168 200.806 106.488 200.758 105.785 200.758C105.613 200.758 105.436 200.762 105.272 200.771H105.246C105.1 200.771 104.945 200.78 104.799 200.789C104.76 200.789 104.724 200.789 104.689 200.793C104.813 200.002 105.003 195.976 105.113 190.137C105.215 184.36 105.241 176.802 105.038 168.859C104.813 160.223 104.322 151.122 103.372 143.352C103.319 142.892 103.261 142.441 103.199 141.995V141.986C102.771 138.711 102.249 135.692 101.626 133.093C101.617 133.049 101.608 133.005 101.591 132.965C101.564 132.854 101.542 132.739 101.511 132.633C100.609 128.991 99.4999 126.193 98.1341 124.655C97.6789 124.143 97.1883 123.762 96.6755 123.55C96.6004 121.813 96.5253 120.089 96.4369 118.383C96.3927 117.446 96.3441 116.518 96.2954 115.594C96.2954 115.577 96.2954 115.559 96.291 115.546C96.291 115.502 96.2866 115.462 96.2866 115.418C96.2601 115.051 96.2424 114.679 96.2247 114.313C96.207 113.994 96.1894 113.676 96.1717 113.358C96.1717 113.327 96.1673 113.3 96.1673 113.269C96.1628 113.212 96.1584 113.15 96.1584 113.088C96.154 113.035 96.1496 112.978 96.1496 112.92C96.1496 112.911 96.1452 112.903 96.1496 112.889C96.1496 112.889 96.1452 112.881 96.1452 112.876C96.101 112.134 96.0568 111.395 96.0126 110.662C95.986 110.246 95.9639 109.835 95.933 109.424H95.9286C95.9021 109.035 95.88 108.655 95.8534 108.275C95.8269 107.877 95.8004 107.488 95.7695 107.095C95.7385 106.671 95.7076 106.242 95.6766 105.822C95.6722 105.773 95.6722 105.72 95.6678 105.672C95.6413 105.367 95.6236 105.07 95.5971 104.766C95.544 104.054 95.491 103.351 95.4291 102.657C95.4247 102.6 95.4203 102.547 95.4159 102.485C95.3717 101.981 95.3319 101.481 95.2877 100.986C95.2346 100.363 95.1816 99.7533 95.1197 99.1433C95.0888 98.7809 95.0578 98.4185 95.0181 98.056C94.9739 97.5831 94.9252 97.1057 94.881 96.6417C94.8192 96.045 94.7573 95.4571 94.6954 94.8781C94.6601 94.5333 94.6203 94.193 94.5849 93.8482C94.5451 93.5123 94.5054 93.172 94.4656 92.8361C94.2092 90.6526 93.9352 88.5753 93.6435 86.6349C93.639 86.6261 93.639 86.6216 93.639 86.6084C93.6346 86.604 93.6346 86.5951 93.6346 86.5907C93.5241 85.8614 93.4092 85.1498 93.2899 84.4647C93.2412 84.1818 93.1926 83.9034 93.144 83.6293C93.1396 83.594 93.1352 83.5586 93.1263 83.5277C93.1263 83.5188 93.1263 83.51 93.1219 83.4967C93.0777 83.2315 93.0291 82.9796 92.9849 82.7232C92.9805 82.6923 92.9761 82.6702 92.9672 82.6393C92.9319 82.4448 92.8921 82.2459 92.8611 82.0558C92.8567 82.0426 92.8567 82.0249 92.8523 82.0116L93.2633 81.9542L95.3142 81.6625L97.7938 81.3089L100.817 80.8801C100.835 81.026 100.857 81.1674 100.874 81.3089C100.91 81.5696 100.95 81.826 100.981 82.0824C101.02 82.3917 101.065 82.7056 101.104 83.0105C101.175 83.5188 101.241 84.0227 101.303 84.5266C101.316 84.6106 101.33 84.6945 101.339 84.7785C101.343 84.7918 101.343 84.805 101.343 84.8183C101.511 86.0647 101.666 87.3023 101.812 88.5311C101.94 89.5432 102.063 90.5465 102.178 91.5455C102.183 91.5764 102.183 91.6029 102.187 91.6339C102.329 92.8405 102.466 94.0383 102.594 95.2228C102.775 96.8317 102.943 98.4317 103.102 100.005C103.407 103.051 103.681 106.034 103.92 108.942C103.973 109.592 104.026 110.233 104.075 110.878C104.105 111.236 104.132 111.594 104.159 111.952C104.22 112.73 104.282 113.508 104.335 114.277C104.335 114.304 104.34 114.326 104.34 114.352C104.353 114.538 104.366 114.724 104.38 114.905C104.517 116.805 104.64 118.671 104.751 120.505C104.751 120.536 104.755 120.562 104.755 120.593V120.602C104.786 121.106 104.813 121.61 104.848 122.109C104.879 122.613 104.901 123.113 104.932 123.608C104.972 124.337 105.012 125.062 105.043 125.782C105.056 125.99 105.069 126.189 105.078 126.388C105.082 126.45 105.082 126.512 105.087 126.574C105.096 126.759 105.104 126.945 105.118 127.13C105.18 128.408 105.241 129.667 105.294 130.914C105.303 131.144 105.312 131.374 105.325 131.603C105.33 131.745 105.334 131.877 105.339 132.014C105.356 132.474 105.378 132.929 105.392 133.385C105.423 134.132 105.449 134.883 105.476 135.621C105.586 138.764 105.67 141.805 105.741 144.739C105.767 145.694 105.785 146.636 105.803 147.559C105.812 148.24 105.829 148.916 105.838 149.584C105.856 150.41 105.869 151.228 105.882 152.041C105.882 152.125 105.882 152.214 105.887 152.298C105.896 153.022 105.904 153.739 105.918 154.446C105.949 156.766 105.975 159.011 106.002 161.186C106.006 161.606 106.01 162.035 106.015 162.45C106.024 163.184 106.028 163.909 106.041 164.625C106.05 165.27 106.059 165.907 106.068 166.534C106.108 169.266 106.152 171.878 106.218 174.358C106.236 175.096 106.258 175.829 106.276 176.545C106.289 176.974 106.307 177.407 106.324 177.832C106.404 179.865 106.492 181.801 106.616 183.657C106.656 184.294 106.7 184.921 106.749 185.536C106.833 186.508 106.917 187.458 107.014 188.382C107.014 188.426 107.018 188.47 107.027 188.519C107.129 189.478 107.244 190.42 107.372 191.326C107.372 191.339 107.372 191.361 107.376 191.383C107.584 193.098 107.862 194.747 108.238 196.351C108.574 197.801 108.994 199.215 109.507 200.616C109.546 200.736 109.591 200.846 109.635 200.966C109.639 200.97 109.639 200.974 109.644 200.983C109.701 201.147 109.767 201.302 109.829 201.465C109.834 201.474 109.834 201.478 109.838 201.492L109.834 201.509Z' fill='%233B754B'/%3E%3Cpath opacity='0.65' d='M104.75 120.598C103.526 118.627 102.222 116.708 100.724 114.958C99.6851 113.743 98.5359 112.585 97.2586 111.639C97.1569 111.568 96.684 111.484 96.0519 111.4C95.3359 99.8684 94.306 89.5213 92.8386 82.0206L100.799 80.8847C101.307 84.5577 101.767 88.1467 102.174 91.6473C103.389 101.999 104.193 111.612 104.742 120.518C104.742 120.549 104.742 120.576 104.742 120.607L104.75 120.598Z' fill='%233B754B'/%3E%3Cpath d='M33.5318 89.9057C33.4965 90.5775 33.4744 91.2803 33.4302 92.0582C33.4302 92.0582 33.4346 92.0582 33.4302 92.0626C31.2644 129.022 27.8566 177.036 23.6665 209.204C23.6621 209.209 23.6665 209.213 23.6665 209.213C23.1096 211.989 23.1229 214.712 21.8632 216.939H21.8588C16.4399 219.733 5.86741 214.583 1.71708 219.357C1.71708 219.366 1.71266 219.37 1.71266 219.384C1.53144 219.773 1.47398 220.201 1.48282 220.639H1.4784C1.24415 219.852 1.23088 219.017 1.28834 218.203C1.46072 216.1 2.01321 214.018 2.54803 211.98C3.80771 207.436 4.62983 202.773 5.45194 198.124H5.45635C8.2807 181.743 10.7161 165.204 13.1471 148.748H13.1515C14.3404 140.594 15.5162 132.43 16.6874 124.284C17.2355 120.408 17.7792 116.536 18.3361 112.664C18.5659 111.015 18.7957 109.336 19.0344 107.696C19.83 101.968 20.63 96.3146 21.4212 90.6129C21.5096 89.9455 21.6113 89.3046 21.6908 88.6548C21.7439 88.3278 21.7836 87.983 21.8278 87.6515C22.0311 86.2371 22.2212 84.8095 22.4157 83.4084C25.5583 84.0581 30.8578 85.0968 33.5584 85.7288C33.6512 85.7686 33.6379 87.267 33.5274 89.9101L33.5318 89.9057Z' fill='%23702B2B'/%3E%3Cpath d='M33.5318 89.9057C33.4965 90.5775 33.4744 91.2803 33.4302 92.0582C33.4302 92.0582 33.4346 92.0582 33.4302 92.0626C31.2644 129.022 27.8566 177.036 23.6665 209.204C23.6621 209.209 23.6665 209.213 23.6665 209.213C23.1096 211.989 23.1229 214.712 21.8632 216.939H21.8588C16.4399 219.733 5.86741 214.583 1.71708 219.357C1.71708 219.366 1.71266 219.37 1.71266 219.384C1.53144 219.773 1.47398 220.201 1.48282 220.639H1.4784C1.24415 219.852 1.23088 219.017 1.28834 218.203C1.46072 216.1 2.01321 214.018 2.54803 211.98C3.80771 207.436 4.62983 202.773 5.45194 198.124H5.45635C8.2807 181.743 10.7161 165.204 13.1471 148.748H13.1515C14.3404 140.594 15.5162 132.43 16.6874 124.284C17.2355 120.408 17.7792 116.536 18.3361 112.664C18.5659 111.015 18.7957 109.336 19.0344 107.696C19.83 101.968 20.63 96.3146 21.4212 90.6129C21.5096 89.9455 21.6113 89.3046 21.6908 88.6548C21.7439 88.3278 21.7836 87.983 21.8278 87.6515C22.0311 86.2371 22.2212 84.8095 22.4157 83.4084C25.5583 84.0581 30.8578 85.0968 33.5584 85.7288C33.6512 85.7686 33.6379 87.267 33.5274 89.9101L33.5318 89.9057Z' fill='%233B754B'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M22.376 215.918C22.1948 216.497 22.0224 216.847 21.8633 216.944C20.0776 218.018 16.4047 217.797 12.661 217.558C12.2632 211.357 12.0466 198.115 17.492 181.894C17.9384 180.563 18.4202 179.215 18.9461 177.849C19.1716 179.591 19.5605 181.31 20.0511 182.985C19.9892 184.674 19.9495 186.261 19.9406 187.719C19.9318 188.895 19.9053 189.991 19.8566 191.043C19.8522 191.056 19.8434 191.069 19.839 191.078C19.6489 191.503 19.5163 191.949 19.3704 192.387C19.0743 193.293 18.7959 194.208 18.5616 195.131C18.0887 196.997 17.8411 198.893 17.819 200.82C17.8014 202.787 17.9958 204.754 18.3273 206.69C18.4953 207.68 18.703 208.661 18.9329 209.638C19.0566 210.159 19.1804 210.676 19.3307 211.189C19.4235 211.503 19.5251 211.817 19.6401 212.122C19.9274 212.886 20.3252 213.607 20.8379 214.234C21.218 214.703 21.6114 215.154 22.0357 215.582C22.1462 215.697 22.2611 215.803 22.376 215.914V215.918Z' fill='%23949984'/%3E%3C/g%3E%3Cpath d='M23.618 86.33C23.6047 86.5819 23.5561 87.0548 23.4765 87.7355C23.4765 87.762 23.4721 87.7886 23.4721 87.8195C23.4588 87.9212 23.4456 88.0317 23.4323 88.1422L23.4191 88.2615C23.4191 88.2615 23.4191 88.2969 23.4146 88.3145C23.3174 89.1676 23.1848 90.2549 23.0257 91.5499C23.0213 91.5853 23.0168 91.6251 23.0124 91.656C22.955 92.1422 22.8887 92.6505 22.8224 93.1897C22.6588 94.4583 22.4864 95.8726 22.2831 97.4152C22.2389 97.76 22.1947 98.1047 22.1505 98.4627C22.1461 98.4937 22.1417 98.5246 22.1417 98.56C22.0577 99.1788 21.9737 99.8152 21.8898 100.465C21.5317 103.201 21.1339 106.242 20.7052 109.521V109.53C20.6654 109.822 20.6256 110.123 20.5859 110.423C20.5726 110.525 20.5594 110.631 20.5461 110.728C20.4975 111.086 20.4533 111.444 20.4046 111.807C20.3737 112.019 20.3516 112.231 20.3207 112.447C20.2367 113.053 20.1571 113.667 20.0776 114.291C20.0732 114.326 20.0687 114.361 20.0643 114.397C20.0555 114.472 20.0466 114.542 20.0334 114.618C19.9406 115.325 19.8477 116.032 19.7549 116.752C19.7151 117.031 19.6798 117.309 19.6444 117.597C19.6444 117.597 19.64 117.597 19.64 117.601C19.3173 120.067 18.977 122.622 18.6278 125.23C18.6278 125.27 18.6234 125.305 18.619 125.332C18.6102 125.389 18.6057 125.451 18.5925 125.508C18.4245 126.777 18.2566 128.054 18.0842 129.349L18.009 129.893V129.902C18.009 129.902 18.0046 129.919 18.0046 129.933C13.7836 161.61 8.65202 199.392 8.20119 202.659C7.32604 209.014 8.4266 212.453 8.64318 213.753C8.82882 214.88 9.08517 215.989 9.26639 217.116C9.27965 217.205 9.29733 217.289 9.30617 217.377C9.00562 217.368 8.7139 217.359 8.41776 217.359C7.77687 217.346 7.15366 217.355 6.5658 217.386C6.42878 217.39 6.29177 217.395 6.15917 217.412C6.02215 217.417 5.88955 217.43 5.75695 217.448C5.49176 217.465 5.24424 217.501 4.99673 217.54C4.87297 217.554 4.75804 217.58 4.63871 217.602C4.40445 217.642 4.18345 217.695 3.9713 217.753C3.8608 217.788 3.7503 217.815 3.64864 217.854C3.54698 217.885 3.44974 217.925 3.35692 217.96C3.26411 217.996 3.1757 218.036 3.09173 218.08C3.08731 218.08 3.08289 218.084 3.07847 218.084C2.99891 218.124 2.92819 218.164 2.85305 218.208C2.83979 218.212 2.82211 218.221 2.80885 218.234C2.74697 218.27 2.68509 218.305 2.63205 218.34C2.4641 218.451 2.31382 218.575 2.18122 218.712C2.1326 218.76 2.0884 218.809 2.0442 218.862C2.01768 218.893 2 218.915 1.98232 218.946C1.9558 218.973 1.93812 218.999 1.92044 219.03C1.90276 219.057 1.88509 219.083 1.86741 219.11C1.85857 219.136 1.84088 219.154 1.82762 219.171C1.8011 219.216 1.78343 219.26 1.75691 219.304C1.74807 219.322 1.73923 219.348 1.72155 219.366C1.72155 219.375 1.71712 219.379 1.71712 219.392C1.70386 219.419 1.69061 219.441 1.68177 219.468C1.65525 219.525 1.63315 219.591 1.61105 219.658C1.55801 219.826 1.52265 220.002 1.50497 220.188C1.48729 220.334 1.47845 220.489 1.48729 220.648L1.47403 220.604C1.46077 220.55 1.43867 220.493 1.42541 220.427C1.42099 220.418 1.42099 220.4 1.41657 220.391C1.40331 220.321 1.38563 220.259 1.37237 220.184C1.36795 220.166 1.36353 220.144 1.36353 220.126C1.34585 220.029 1.32817 219.936 1.31933 219.839C1.30607 219.742 1.29281 219.644 1.28839 219.538C1.28397 219.499 1.28397 219.463 1.28397 219.432C1.27955 219.401 1.27955 219.375 1.27513 219.344C1.27513 219.295 1.27071 219.242 1.27071 219.189C1.26629 219.026 1.26629 218.862 1.27071 218.694C1.27071 218.65 1.27513 218.61 1.27513 218.566C1.27513 218.504 1.27955 218.438 1.28397 218.371V218.34C1.28397 218.34 1.28839 218.31 1.28839 218.296V218.279C1.28839 218.279 1.29281 218.261 1.29281 218.248V218.212C1.29281 218.212 1.29723 218.199 1.29723 218.195V218.142C1.30165 218.102 1.30165 218.062 1.30607 218.018C1.31049 217.991 1.31049 217.969 1.31491 217.943C1.31491 217.903 1.31933 217.863 1.32375 217.819C1.32817 217.788 1.32817 217.761 1.33259 217.731V217.717C1.33259 217.717 1.33701 217.686 1.33701 217.673C1.34585 217.576 1.36353 217.479 1.37679 217.381C1.38121 217.337 1.38563 217.293 1.39005 217.244C1.39447 217.213 1.39889 217.182 1.40331 217.147C1.40331 217.112 1.40773 217.09 1.41215 217.054C1.42541 216.961 1.44309 216.873 1.45635 216.78C1.45635 216.763 1.46077 216.745 1.46519 216.727C1.49613 216.537 1.52707 216.347 1.56243 216.153C1.57569 216.077 1.58894 216.002 1.60662 215.927C1.61104 215.887 1.61547 215.852 1.62431 215.817C1.65525 215.653 1.68618 215.49 1.72596 215.322C1.73038 215.291 1.73481 215.264 1.74365 215.233C1.74807 215.189 1.75691 215.149 1.77017 215.105C1.77459 215.087 1.77901 215.061 1.78343 215.043C1.78785 215.012 1.79226 214.99 1.8011 214.959C1.81878 214.853 1.8453 214.747 1.87182 214.641C1.8895 214.566 1.90718 214.495 1.92486 214.416C1.94254 214.323 1.96906 214.23 1.98674 214.137C2.01326 214.044 2.03536 213.951 2.06188 213.854C2.06188 213.845 2.0663 213.837 2.0663 213.823C2.09282 213.722 2.11934 213.616 2.14586 213.509C2.16354 213.434 2.18122 213.364 2.1989 213.288C2.30498 212.86 2.4199 212.422 2.5304 211.998C2.5304 211.998 2.53039 211.993 2.53481 211.993C2.56575 211.883 2.59227 211.764 2.62321 211.649C2.71161 211.317 2.80001 210.981 2.88841 210.654C2.88841 210.645 2.89283 210.628 2.89725 210.619L2.97239 210.327C2.98123 210.287 2.99891 210.248 3.00775 210.208C3.01659 210.168 3.02101 210.133 3.03427 210.102C3.06079 210.004 3.08289 209.912 3.11383 209.819C3.18455 209.532 3.25526 209.244 3.32598 208.966C3.32598 208.953 3.3304 208.935 3.33482 208.922C3.33924 208.908 3.33925 208.891 3.34367 208.873C3.43648 208.497 3.5293 208.073 3.63096 207.618C3.65748 207.507 3.67958 207.392 3.7061 207.269C3.74146 207.123 3.76798 206.968 3.80334 206.818C3.84312 206.636 3.8829 206.455 3.92268 206.27C3.94036 206.15 3.96688 206.035 3.9934 205.916L4.00666 205.841C4.0376 205.708 4.06412 205.571 4.09505 205.43C4.12157 205.293 4.1481 205.156 4.17462 205.014C4.1923 204.917 4.21439 204.82 4.23207 204.723C4.25859 204.599 4.28069 204.48 4.30721 204.351C4.32047 204.289 4.33373 204.228 4.34699 204.166C4.36025 204.068 4.38235 203.971 4.40003 203.874C4.42655 203.741 4.45307 203.604 4.47959 203.467C4.52821 203.224 4.57241 202.972 4.62103 202.712C4.67407 202.42 4.73153 202.124 4.78899 201.819C4.82877 201.62 4.86413 201.412 4.89949 201.209C4.90391 201.173 4.91274 201.134 4.91716 201.103C4.93042 201.023 4.94811 200.948 4.96137 200.864C4.97905 200.745 5.00557 200.625 5.02325 200.502C5.05419 200.334 5.08512 200.175 5.11606 200.002C5.16026 199.746 5.20888 199.485 5.25308 199.22C5.3017 198.946 5.35032 198.672 5.39894 198.393C5.4122 198.309 5.42988 198.221 5.44314 198.137H5.44756C5.47408 197.969 5.5006 197.814 5.53154 197.651C5.61552 197.178 5.6995 196.696 5.78348 196.201C5.81884 195.984 5.85862 195.763 5.89398 195.547C6.15917 194.004 6.42878 192.378 6.71166 190.672C6.75586 190.411 6.80006 190.154 6.83984 189.889C6.96802 189.129 7.0962 188.351 7.21996 187.564C7.30836 187.016 7.39675 186.464 7.48515 185.898C7.49399 185.845 7.50283 185.788 7.51609 185.726C7.53377 185.62 7.55145 185.505 7.56913 185.399C7.62659 185.036 7.68847 184.669 7.74593 184.298C7.77245 184.157 7.79013 184.015 7.81665 183.869C7.82107 183.83 7.82991 183.79 7.83433 183.746C7.89621 183.339 7.96692 182.928 8.0288 182.512C8.06416 182.291 8.09952 182.07 8.13488 181.845C8.1835 181.518 8.23655 181.182 8.28959 180.846C8.32494 180.634 8.35146 180.426 8.38682 180.21C8.43102 179.927 8.47964 179.631 8.52384 179.343C8.56362 179.078 8.60782 178.813 8.6476 178.552C8.67854 178.366 8.70506 178.185 8.736 178C8.77136 177.783 8.80672 177.575 8.83324 177.359C8.85092 177.239 8.87301 177.129 8.88627 177.01C8.90395 176.908 8.92163 176.797 8.93489 176.691C8.98793 176.364 9.03655 176.037 9.08959 175.701C9.14263 175.348 9.19567 174.994 9.25313 174.645C9.31501 174.229 9.38131 173.81 9.44761 173.385C9.54485 172.735 9.64651 172.077 9.74817 171.418C9.85867 170.693 9.97359 169.964 10.0797 169.23C10.2034 168.448 10.3183 167.653 10.4421 166.861C10.4907 166.539 10.5393 166.216 10.588 165.898C10.641 165.522 10.6985 165.142 10.7559 164.771C10.8134 164.391 10.8753 164.011 10.9283 163.635C10.9725 163.348 11.0167 163.056 11.0609 162.764C11.1449 162.22 11.2288 161.677 11.304 161.133C11.3217 161.014 11.3438 160.894 11.357 160.771C11.388 160.585 11.4101 160.399 11.441 160.209C11.4764 159.993 11.5029 159.781 11.5382 159.564C11.5648 159.396 11.5869 159.228 11.6134 159.06C11.6576 158.786 11.6974 158.512 11.7416 158.234C11.9847 156.581 12.2322 154.91 12.4797 153.235C12.6963 151.763 12.9173 150.278 13.1338 148.788V148.775H13.1383C13.1736 148.514 13.2134 148.262 13.2443 148.001L13.3327 147.414C13.483 146.384 13.6333 145.354 13.7836 144.32C13.8322 143.984 13.8808 143.643 13.9294 143.312C13.9604 143.117 13.9869 142.923 14.0178 142.733C14.0488 142.512 14.0753 142.295 14.1107 142.083C14.1902 141.579 14.2609 141.075 14.3316 140.572C14.3935 140.116 14.4642 139.661 14.5261 139.206C14.6587 138.291 14.7913 137.38 14.9239 136.47C15.1184 135.104 15.3173 133.743 15.5118 132.386C15.5648 132.019 15.6179 131.648 15.6753 131.281C15.6841 131.197 15.7018 131.113 15.7107 131.029C15.7814 130.578 15.8433 130.127 15.9051 129.676C15.9184 129.548 15.9405 129.416 15.9582 129.287C15.9582 129.279 15.9626 129.27 15.9626 129.256V129.243C15.9803 129.111 16.0024 128.974 16.0201 128.841C16.0245 128.814 16.0245 128.797 16.0289 128.77C16.0598 128.554 16.0864 128.342 16.1217 128.129C16.2411 127.298 16.356 126.463 16.4797 125.641C16.5151 125.367 16.5549 125.097 16.5902 124.828C16.5902 124.819 16.5947 124.814 16.5947 124.801L16.6079 124.7C16.6212 124.593 16.6389 124.487 16.6521 124.386C16.6565 124.368 16.6565 124.346 16.661 124.328C16.661 124.319 16.661 124.315 16.6654 124.311C16.714 123.953 16.7626 123.599 16.8112 123.25C16.8289 123.1 16.8554 122.945 16.882 122.795L16.9704 122.162C17.0632 121.491 17.1604 120.819 17.2532 120.156C17.293 119.891 17.3328 119.63 17.3637 119.369C17.4345 118.874 17.5052 118.379 17.5759 117.888C17.6731 117.181 17.7704 116.483 17.8764 115.784C17.903 115.594 17.9295 115.404 17.9604 115.21V115.183C17.9781 115.064 17.9958 114.954 18.009 114.834C18.0135 114.799 18.0179 114.772 18.0223 114.737C18.0621 114.463 18.1019 114.189 18.1416 113.915C18.1593 113.778 18.1814 113.636 18.1991 113.495C18.2389 113.225 18.2742 112.96 18.3184 112.691C18.314 112.686 18.3184 112.677 18.3184 112.673V112.655C18.3317 112.571 18.345 112.492 18.3582 112.412C18.3936 112.156 18.4289 111.913 18.4599 111.661C18.4643 111.625 18.4643 111.603 18.4687 111.572C18.4776 111.524 18.482 111.475 18.4952 111.426V111.409C18.5527 110.998 18.6146 110.587 18.672 110.18V110.171C18.6986 110.021 18.7162 109.871 18.7339 109.725C18.7383 109.672 18.7472 109.619 18.7604 109.57C18.787 109.358 18.8135 109.155 18.8444 108.947C18.9019 108.54 18.9549 108.134 19.0168 107.731C19.0168 107.727 19.0212 107.727 19.0212 107.727C19.0212 107.696 19.0256 107.669 19.0301 107.639C19.2157 106.286 19.4057 104.956 19.587 103.652C19.6179 103.431 19.6488 103.21 19.6798 102.998C19.6886 102.936 19.6975 102.869 19.7063 102.808C19.7461 102.551 19.7814 102.304 19.8124 102.052L19.8433 101.844C19.8743 101.61 19.9052 101.375 19.9406 101.146C19.9406 101.137 19.9406 101.132 19.945 101.119C20.0908 100.032 20.2455 98.9754 20.3914 97.9368C20.3914 97.9058 20.3958 97.8749 20.4002 97.8439L20.4135 97.7423C20.4268 97.6229 20.4489 97.5124 20.4621 97.3975C20.4798 97.2517 20.5019 97.1102 20.5196 96.9688C20.5461 96.7964 20.5682 96.6329 20.5947 96.4649V96.4472C20.6035 96.3898 20.608 96.3279 20.6212 96.2704C20.6389 96.1334 20.661 95.9964 20.6787 95.8638V95.855C20.6964 95.7135 20.7185 95.5765 20.7361 95.4395C20.7406 95.3864 20.7494 95.3334 20.7538 95.2759C20.7582 95.245 20.7627 95.2229 20.7671 95.192V95.1831C20.7848 95.0329 20.8113 94.8782 20.829 94.7279C20.8378 94.6395 20.8555 94.5511 20.8687 94.4627C20.8776 94.3787 20.8864 94.308 20.8997 94.2373C20.9085 94.1444 20.9262 94.0516 20.9395 93.9632C20.9395 93.9367 20.9439 93.9102 20.9483 93.8837C20.9792 93.6582 21.0058 93.4373 21.0411 93.2163C21.0455 93.1632 21.0544 93.1102 21.0588 93.0527C21.0765 92.9201 21.0986 92.7831 21.1163 92.6505C21.1163 92.6328 21.1207 92.6151 21.1207 92.5975C21.1384 92.4693 21.1605 92.3411 21.1737 92.2173C21.1914 92.0715 21.2135 91.9256 21.2312 91.7798C21.2489 91.656 21.2665 91.5455 21.2798 91.4262C21.2886 91.3643 21.2975 91.2936 21.3107 91.2317C21.3196 91.1787 21.324 91.1256 21.3284 91.0682C21.3373 91.0284 21.3417 90.9886 21.3461 90.9488C21.3594 90.8427 21.377 90.7367 21.3903 90.635C21.4654 90.0869 21.5406 89.5477 21.6157 89.0261C21.6246 88.9289 21.6422 88.8272 21.6555 88.7256C21.6599 88.7123 21.6599 88.6902 21.6599 88.677C21.6643 88.677 21.6643 88.6726 21.6643 88.6726C21.6776 88.5621 21.6953 88.4516 21.7085 88.3411C21.713 88.3366 21.713 88.3322 21.7174 88.3278C21.8411 88.1289 21.9516 87.9344 22.0666 87.7532C22.0842 87.7178 22.1063 87.6913 22.124 87.6604C22.1638 87.5985 22.2036 87.5366 22.2345 87.4792C22.2434 87.4659 22.2522 87.4482 22.261 87.4394H22.2654C22.3406 87.32 22.4069 87.214 22.4776 87.1123C22.6721 86.8118 22.8489 86.5687 23.0036 86.383C23.1362 86.2151 23.2555 86.0957 23.3395 86.0338C23.5207 85.9101 23.6091 85.9985 23.5826 86.3565L23.618 86.33Z' fill='%233E8E5B'/%3E%3Cpath d='M19.1446 200.015C18.8087 203.733 18.959 207.551 20.117 211.114C19.8739 211.136 19.6087 211.162 19.3347 211.193C16.9921 211.441 13.6904 211.976 13.3722 213.505L17.4872 181.894L23.6176 134.803C23.6176 134.803 27.2066 125.853 25.4607 134.803C22.99 147.445 19.4231 197.01 19.1491 200.02L19.1446 200.015Z' fill='%233E8E5B'/%3E%3Cpath d='M29.5143 57.8426C29.5978 58.549 30.8968 58.1616 30.3954 58.663C27.9494 61.1242 24.5615 62.2256 22.0927 65.8718C21.6445 66.5327 21.1963 67.2088 20.7634 67.8773C20.0645 68.9635 19.2593 70.1561 17.9983 70.46C17.1551 70.6651 16.2739 70.4144 15.4763 70.0878C15.3624 70.0422 15.2332 69.9814 15.1573 69.8827C15.0813 69.7763 15.0585 69.6396 15.0509 69.5105C14.7623 66.4871 16.0992 63.5246 17.8312 61.033C18.8643 59.5517 20.1177 58.1312 21.7889 57.4551C22.2598 57.2652 22.746 57.1361 23.2398 57.0222C24.2045 56.8019 25.1768 56.612 26.1491 56.46C26.8252 56.3537 27.5165 56.2701 28.1773 56.46C28.8306 56.6423 29.4383 57.1665 29.5219 57.8426H29.5143Z' fill='%2334381B'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M97.7364 79.3712C97.7136 79.3102 97.6983 79.2492 97.6907 79.2034C97.6907 79.2263 97.7136 79.2873 97.7364 79.3712Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M49.6061 63.3043C49.6061 63.3043 47.669 63.1372 47.4943 65.2718C47.3272 67.4063 49.6061 68.0064 49.72 68.0368C49.8339 68.0672 49.6061 63.3043 49.6061 63.3043Z' fill='%23B4B296'/%3E%3Cpath d='M48.52 63.5093C48.52 63.5093 47.6844 63.3346 47.5097 65.4616C47.3426 67.5885 48.558 68.371 48.5428 68.257C48.0414 64.7247 48.5124 63.5169 48.5124 63.5169L48.52 63.5093Z' fill='%23BBB99D'/%3E%3Cpath d='M102.606 86.2908C102.606 86.2908 102.59 86.2832 102.59 86.2756C102.142 85.7439 101.702 85.2197 101.284 84.7411C100.19 83.465 99.2861 82.4623 98.9974 82.3027C98.215 81.8773 98.2074 80.7911 97.387 80.4492C96.4223 80.039 95.4196 79.7504 94.3865 79.5833C93.3306 79.4085 92.2367 79.3402 91.1657 79.4997C90.2389 79.6288 89.2818 79.9707 88.6513 80.6999C87.8841 81.5963 87.8385 82.9028 88.1575 83.9891C88.4006 84.8171 88.8184 85.5767 89.145 86.3667C89.4717 87.172 89.6312 88.0075 89.5856 88.8735C89.5477 89.5876 89.297 90.2333 88.9703 90.8638C88.788 91.2208 88.5753 91.5702 88.393 91.9272C88.2259 92.2539 88.1044 92.6033 88.0132 92.9527C87.6106 94.4948 87.7473 96.1736 88.0208 97.7232H88.0284C88.2031 98.7107 88.507 99.6603 88.8944 100.587C88.7728 100.42 88.6513 100.253 88.5221 100.086C86.2888 97.1079 83.7517 94.3353 81.7766 91.1752C80.8879 89.7547 78.7989 87.7721 76.8011 85.6755C76.7707 85.6527 76.7479 85.6223 76.7251 85.5995C76.5124 85.3716 76.2997 85.1513 76.1022 84.931C73.9069 82.5762 72.0078 80.153 72.1673 78.2995C72.3648 76.0054 73.7853 73.8177 72.1445 72.2073C73.7246 71.0602 77.0366 70.7792 80.4169 70.9463C80.4169 70.9463 80.422 70.9463 80.4321 70.9463H80.4549C83.8428 71.1134 87.2991 71.7211 89.145 72.3516C91.8189 73.2631 94.0826 75.0559 96.2932 76.8106C98.2682 78.3906 99.0506 79.0971 100.691 81.0266C100.897 81.2696 101.079 81.5203 101.254 81.7862C101.276 81.8014 101.284 81.8242 101.292 81.847C101.345 81.9077 101.383 81.9761 101.428 82.0369C101.687 82.6294 101.876 83.2447 101.975 83.8752C102.211 84.6804 102.423 85.4856 102.606 86.2908Z' fill='%23BBBBA5'/%3E%3Cpath d='M88.4006 88.9268C88.788 85.6755 85.6279 82.3256 87.5726 80.4797C89.8818 78.2919 95.6854 78.3831 99.8634 80.3505C99.9545 80.3961 100.061 80.3961 100.152 80.4189C98.8455 78.93 98.0327 78.2084 96.2779 76.8107C94.0674 75.0483 91.8037 73.2632 89.1298 72.3516C85.4304 71.0907 75.297 69.9208 72.1217 72.2073C73.7625 73.8177 72.342 76.0055 72.1445 78.2995C71.8254 82.0141 79.7712 88.0152 81.7462 91.1753C83.3035 93.6592 85.2025 95.9078 87.0332 98.2094C86.0837 92.2691 88.1271 91.0841 88.3778 88.9344L88.4006 88.9268Z' fill='%23BBB99D'/%3E%3Cpath d='M93.4896 191.742C93.3909 191.256 93.1478 190.77 92.7452 190.443C92.5781 190.299 92.335 190.178 92.259 189.965C92.1527 189.661 92.1906 189.57 92.1071 189.258C91.9324 188.62 91.8716 187.732 91.7805 187.071C91.6817 186.387 91.6665 185.688 91.6665 184.997C91.6665 183.576 91.5754 182.156 91.4386 180.735C91.431 180.644 90.0029 167.184 89.3344 167.419C83.2042 169.531 67.8066 171.931 68.042 173.147C68.1636 173.747 69.4777 178.616 69.7208 179.178C69.9943 179.824 70.1386 180.538 70.3513 181.199C70.564 181.844 70.8147 182.475 71.0198 183.121C71.2021 183.728 71.2857 184.336 71.5819 184.913C71.8554 185.453 72.2808 185.901 72.5163 186.455C72.7897 187.109 72.9037 188.567 72.9417 189.251C73.0024 190.413 72.9417 190.846 73.1088 192.001C73.3974 193.991 74.1571 195.958 75.5472 197.523C77.0361 199.202 79.3453 200 81.609 200.288C84.0398 200.6 86.5694 200.334 88.8787 199.589C89.9497 199.24 90.9525 198.761 91.8336 198.101C92.2514 197.789 92.6084 197.417 92.8895 196.992C93.2313 196.483 93.2997 195.89 93.3301 195.313C93.3985 194.12 93.7479 192.935 93.4972 191.742H93.4896Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.3' d='M93.4895 191.742C93.3907 191.256 93.1476 190.77 92.745 190.443C92.5779 190.299 92.3348 190.178 92.2589 189.965C92.1525 189.661 92.1905 189.57 92.1069 189.258C91.9322 188.62 91.8715 187.732 91.7803 187.071C91.6816 186.387 91.6664 185.688 91.6664 184.997C91.6664 183.576 91.5752 182.156 91.4385 180.735C91.4309 180.644 90.0028 167.184 89.3343 167.419C86.7516 168.308 82.5356 169.25 78.5248 170.131C78.7907 170.389 79.0413 170.648 79.2844 170.913C80.4391 172.182 81.5101 173.595 82.3305 175.091C84.1764 178.426 84.8753 182.346 83.9181 186.045C83.0446 189.41 81.3734 192.548 79.1249 195.252C78.2437 196.308 77.279 197.295 76.2535 198.214C77.712 199.43 79.6794 200.053 81.6013 200.296C84.0321 200.607 86.5617 200.341 88.8709 199.597C89.942 199.248 90.9447 198.769 91.8259 198.108C92.2437 197.797 92.6007 197.424 92.8818 196.999C93.2236 196.49 93.292 195.898 93.3223 195.32C93.3907 194.128 93.7401 192.943 93.4895 191.75V191.742Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M69.714 179.178C69.8583 179.512 69.9646 179.862 70.0634 180.211C74.5832 179.961 84.071 179.338 91.6824 186.053C91.6673 185.703 91.6597 185.346 91.6597 184.997C91.6597 183.576 91.5685 182.156 91.4318 180.735C91.4242 180.652 89.9961 167.184 89.3276 167.419C83.1974 169.531 67.7997 171.931 68.0352 173.147C68.1567 173.747 69.4709 178.616 69.714 179.178Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M69.7132 179.178C69.7664 179.292 69.8044 179.414 69.85 179.535H69.8651C77.7957 177.742 87.0024 178.821 91.3399 179.854C91.0056 176.846 89.9042 167.229 89.3344 167.419C83.2042 169.531 67.8066 171.931 68.042 173.147C68.1636 173.747 69.4777 178.616 69.7208 179.178H69.7132Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M92.6848 193.634C91.0364 194.447 89.2892 195.001 87.4737 195.335C84.0022 195.974 80.2269 195.723 77.1048 194.014C75.7906 193.3 74.5296 192.441 73.5269 191.347C73.3294 191.135 73.1471 190.907 72.9724 190.679C72.9876 191.059 73.0104 191.454 73.0939 192.008C73.3826 193.999 74.1422 195.966 75.5324 197.531C77.0212 199.21 79.3305 200.007 81.5942 200.296C84.025 200.607 86.5546 200.341 88.8638 199.597C89.9349 199.248 90.9376 198.769 91.8188 198.108C92.2366 197.797 92.5936 197.424 92.8747 196.999C93.2165 196.49 93.2849 195.898 93.3153 195.32C93.3609 194.606 93.4976 193.892 93.5508 193.178C93.2621 193.338 92.9734 193.49 92.6772 193.642L92.6848 193.634Z' fill='%233B754B'/%3E%3Cpath d='M49.6365 189.259C49.2566 187.884 50.039 186.486 50.1682 185.073C50.2973 183.698 51.7558 178.183 51.6723 176.808C51.5051 174.127 50.9278 175.638 50.5252 172.98C50.1758 170.724 48.535 168.756 46.4612 167.639C44.395 166.523 41.949 166.189 39.5942 166.333C37.2317 166.477 34.9376 167.07 32.6739 167.723C32.2941 167.829 31.9143 167.943 31.5877 168.164C30.5925 168.824 30.4558 170.169 30.4178 171.339L30.2887 175.312L30.1975 178.176C30.1595 179.262 30.1823 180.31 30.1747 181.396C30.1747 182.034 30.1064 182.673 29.9392 183.288C29.7114 184.116 29.4835 184.837 29.3847 185.688C29.324 186.19 29.1948 186.828 29.0049 187.306C28.7922 187.83 28.2757 189.069 27.987 189.555C27.8807 189.729 27.7819 189.904 27.7059 190.094C27.5768 191.021 27.63 191.97 27.7743 192.897C27.9414 193.991 28.2377 195.077 28.7618 196.065C29.719 197.88 31.3977 199.278 33.2968 200.167C35.1959 201.048 37.3077 201.443 39.4042 201.572C42.0098 201.732 44.6989 201.481 47.0689 200.425C47.6918 200.152 48.3071 199.802 48.7173 199.278C49.0667 198.83 49.2414 198.275 49.4009 197.736C49.8491 196.217 50.2138 194.675 50.4872 193.11C50.586 192.533 50.6771 191.932 50.548 191.355C50.3809 190.618 49.8719 189.995 49.6744 189.274L49.6365 189.259Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.3' d='M49.636 189.258C49.2562 187.883 50.0386 186.486 50.1677 185.073C50.2969 183.698 51.7554 178.183 51.6718 176.808C51.5047 174.127 50.9274 175.638 50.5248 172.98C50.1753 170.723 48.5345 168.756 46.4607 167.639C44.8959 166.796 43.1184 166.401 41.3257 166.318C41.4472 166.705 41.5688 167.092 41.6599 167.495C41.827 168.171 41.9486 168.855 42.0397 169.546C42.2068 170.746 42.2828 171.954 42.3436 173.169C42.4043 174.339 42.4803 175.509 42.5031 176.679C42.5335 179.019 42.4195 181.366 42.0701 183.683C41.7207 185.984 41.1509 188.256 40.2698 190.413C39.5025 192.289 38.2947 193.938 36.8363 195.335C35.3626 196.748 33.6762 197.926 31.929 198.959C31.7999 199.035 31.6784 199.111 31.5568 199.187C32.0962 199.567 32.6735 199.893 33.266 200.167C35.1651 201.048 37.2768 201.443 39.3734 201.572C41.9789 201.732 44.6604 201.481 47.0305 200.425C47.6534 200.152 48.2687 199.81 48.6789 199.278C49.0283 198.83 49.203 198.275 49.3625 197.736C49.8107 196.217 50.1753 194.675 50.4488 193.11C50.5476 192.532 50.6387 191.932 50.5096 191.355C50.3425 190.618 49.8335 189.995 49.636 189.274V189.258Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M49.6365 189.258C49.401 188.415 49.6061 187.565 49.834 186.699C38.9561 196.331 27.7212 195.153 28.9897 187.291C28.7619 187.83 28.1542 189.236 27.9718 189.547C27.8655 189.722 27.7667 189.897 27.6832 190.086C27.554 191.013 27.6072 191.963 27.7515 192.89C27.9187 193.983 28.2149 195.07 28.7391 196.057C29.6962 197.873 31.375 199.27 33.2741 200.159C35.1731 201.04 37.2849 201.435 39.3815 201.564C41.987 201.724 44.6685 201.473 47.0385 200.417C47.6614 200.144 48.2767 199.795 48.6869 199.27C49.0364 198.822 49.2111 198.268 49.3706 197.728C49.8188 196.209 50.1834 194.667 50.4569 193.102C50.5556 192.525 50.6468 191.925 50.5176 191.347C50.3505 190.611 49.8416 189.988 49.6441 189.266L49.6365 189.258Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M49.6365 189.259C49.5985 189.114 49.5681 188.977 49.5529 188.833C48.2463 192.267 45.6864 197.007 38.1737 196.202C29.5595 195.275 27.9491 190.444 28.9822 187.299C28.7543 187.838 28.1466 189.243 27.9643 189.555C27.8579 189.73 27.7591 189.904 27.6832 190.094C27.554 191.021 27.6072 191.97 27.7515 192.897C27.9187 193.991 28.2149 195.077 28.7391 196.065C29.6962 197.88 31.375 199.278 33.2741 200.167C35.1731 201.048 37.2849 201.443 39.3815 201.572C41.987 201.732 44.6761 201.481 47.0461 200.425C47.669 200.152 48.2843 199.802 48.6945 199.278C49.044 198.83 49.2187 198.275 49.3782 197.736C49.8264 196.217 50.191 194.675 50.4645 193.11C50.5632 192.525 50.6544 191.932 50.5252 191.355C50.3581 190.618 49.8492 189.995 49.6517 189.274L49.6365 189.259Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M49.6365 189.259C49.2567 187.884 50.0391 186.486 50.1683 185.073C50.2974 183.698 51.7559 178.183 51.6647 176.808C51.4976 174.127 50.9203 175.638 50.5177 172.98C50.1683 170.724 48.5275 168.756 46.4537 167.639C44.3875 166.523 41.9415 166.189 39.5866 166.333C37.2242 166.477 34.9301 167.07 32.6664 167.723C32.2866 167.829 31.9068 167.943 31.5801 168.164C30.585 168.824 30.4483 170.169 30.4103 171.339L30.2204 177.066C31.5422 177.446 32.8183 177.993 34.0489 178.609C34.7858 178.981 35.5074 179.376 36.2215 179.786C36.8976 180.173 37.5736 180.561 38.2117 181.001C40.9616 182.9 43.0505 185.65 44.3495 188.719C44.9952 190.246 45.4662 191.849 45.7396 193.482C45.8764 194.318 45.9447 195.153 46.0207 195.996C46.1043 196.916 46.1802 197.835 46.241 198.761C46.2866 199.407 46.3169 200.053 46.3473 200.699C46.5752 200.615 46.8031 200.516 47.031 200.417C47.6539 200.144 48.2692 199.795 48.6794 199.27C49.0288 198.822 49.2035 198.268 49.3631 197.728C49.8112 196.209 50.1759 194.667 50.4493 193.102C50.5481 192.517 50.6392 191.925 50.5101 191.348C50.343 190.611 49.834 189.988 49.6365 189.266V189.259Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M50.0551 185.795C50.1083 185.552 50.1463 185.308 50.1691 185.073C50.2982 183.698 51.7567 178.183 51.6655 176.808C51.4984 174.127 50.9211 175.638 50.5185 172.98C50.1767 170.724 48.5283 168.756 46.4545 167.639C44.3883 166.523 41.9423 166.189 39.5874 166.333C37.225 166.477 34.9309 167.07 32.6672 167.723C32.2874 167.829 31.9076 167.943 31.5809 168.164C30.5858 168.824 30.4491 170.169 30.4111 171.339L30.2516 176.261C36.4046 176.732 45.7632 181.427 50.0551 185.795Z' fill='%233B754B'/%3E%3Cpath d='M49.705 189.433C49.705 189.433 48.3832 197.554 38.6676 196.786C35.8113 196.559 35.1201 195.176 33.9502 196.103C33.8971 196.148 33.8515 196.194 33.8211 196.247C27.3795 193.968 28.5341 190.064 28.9747 187.321C28.8379 187.23 27.3263 188.955 24.8955 191.287C23.2167 192.905 22.2747 194.454 21.6822 196.186C21.5531 196.315 21.4316 196.452 21.3176 196.597C19.5553 199.027 18.3475 204.884 19.2438 208.667C19.297 208.88 19.3502 209.108 19.3806 209.328C18.3854 214.425 20.1706 217.813 21.7202 216.522C21.8114 216.924 21.9101 217.319 22.0241 217.707C22.2292 218.406 22.609 219.91 23.5889 219.94C24.1282 219.955 24.3941 219.575 24.5157 219.104C25.8298 220.692 32.1499 224.733 33.578 223.974C33.578 223.928 33.578 223.875 33.578 223.829C33.4945 220.669 34.8238 217.304 36.4798 214.592C36.5026 214.554 36.571 214.577 36.5634 214.623C36.4874 215.99 36.6165 217.365 36.8748 218.717C37.6952 217.494 39.0094 216.696 40.1412 215.762C41.463 214.668 42.7392 213.513 43.9166 212.26C43.9546 212.222 44.0001 212.268 43.9925 212.306C43.4608 214.433 43.0962 216.605 42.3062 218.671C42.967 218.086 43.5064 217.198 44.4104 216.985C44.4331 216.985 44.4559 216.985 44.4635 217.008C44.9573 217.995 44.9649 219.158 44.8509 220.221C44.7446 221.148 44.5395 222.059 44.228 222.941C44.1673 223.108 44.1065 223.267 44.0457 223.434C45.2839 222.28 46.7728 220.251 47.5324 217.448C49.4239 220.077 55.5465 190.17 49.6974 189.441L49.705 189.433Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.5' d='M28.9747 187.314C28.8987 187.261 28.3594 187.815 27.4402 188.749C27.3719 188.947 27.3111 189.152 27.2579 189.357C27.0452 190.102 26.8553 190.861 26.7565 191.628C26.673 192.305 26.6198 193.057 26.8857 193.702C26.992 193.528 27.1819 193.414 27.3035 193.246C27.3187 193.224 27.3567 193.224 27.3643 193.246C28.0783 195.366 27.4706 197.736 28.367 199.802C28.9595 198.944 29.4684 198.025 29.9394 197.09C29.947 197.067 29.985 197.067 29.9926 197.09C30.6079 198.328 30.9345 199.711 31.6789 200.888C31.7701 201.025 31.8613 201.169 31.9676 201.291C31.9828 201.306 32.0132 201.375 32.036 201.337C32.0815 201.283 32.1195 201.23 32.1651 201.169C32.2183 201.101 32.2715 201.025 32.3246 200.949C32.5601 200.622 32.7728 200.281 32.9855 199.939C33.3957 199.278 33.8059 198.617 34.3149 198.025C34.3376 198.002 34.368 198.025 34.368 198.047C34.4136 198.602 34.368 199.179 34.5276 199.711C34.5959 199.954 34.7175 200.227 34.9681 200.334C35.2036 200.433 35.4087 200.364 35.6214 200.25C36.1456 199.969 36.6165 199.589 37.1331 199.286C37.4293 199.111 37.7484 198.966 38.0598 198.822C38.4548 198.64 38.8574 198.48 39.2828 198.404C39.3056 198.404 39.3284 198.42 39.3208 198.442C39.2221 198.693 39.1157 198.974 39.1157 199.255C39.1157 199.316 39.0929 199.437 39.1689 199.437C39.1993 199.437 39.2373 199.437 39.2752 199.437C39.3588 199.437 39.4348 199.437 39.5183 199.422C39.8905 199.377 40.24 199.225 40.5666 199.042C41.2047 198.67 41.7592 198.169 42.253 197.622C42.61 197.235 42.9442 196.809 43.2329 196.369C41.9719 196.726 40.4679 196.885 38.6903 196.741C35.8341 196.513 35.1428 195.13 33.973 196.057C33.9198 196.103 33.8743 196.148 33.8439 196.201C27.4022 193.923 28.5569 190.018 28.9975 187.276L28.9747 187.314Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.5' d='M49.705 189.433C49.705 189.433 49.1504 192.806 46.1651 194.994C45.6865 197.219 44.6914 199.331 43.0354 200.942C43.0126 200.964 42.9746 200.942 42.9822 200.911C43.0354 200.539 43.0886 200.167 43.1418 199.795C42.3669 201.458 40.9692 202.871 39.4272 203.843C39.3968 203.859 39.374 203.828 39.3816 203.805C39.5031 203.114 39.5031 202.408 39.336 201.724C38.8574 202.712 38.2574 203.631 37.5965 204.497C37.0268 205.249 36.4114 205.978 35.7809 206.684C35.2188 207.315 34.6567 207.945 34.0338 208.515C32.8868 209.548 31.5042 210.543 30.9497 212.047C30.9421 212.078 30.8813 212.078 30.8889 212.04C30.9497 210.285 31.4131 208.568 31.4207 206.806C31.4283 205.142 30.9953 203.509 31.0105 201.846C30.7522 202.757 30.2205 203.585 29.6887 204.36C29.0886 205.234 28.4202 206.077 27.8656 206.988C27.858 207.003 27.8276 207.011 27.8124 206.988C27.5466 206.753 27.3567 206.434 27.2123 206.115C26.6578 204.899 26.4907 203.524 26.3084 202.21C26.2552 201.815 26.1717 201.42 26.1337 201.025C26.0805 200.516 26.0653 200.007 26.0729 199.498C26.0881 198.503 26.164 197.516 26.1413 196.521C25.1006 197.82 24.151 199.21 23.6345 200.805C23.6345 200.828 23.5889 200.843 23.5737 200.805C23.1331 199.833 23.3838 198.693 23.4294 197.675C23.4902 196.452 23.5129 195.229 23.7332 194.021C23.8624 193.292 24.0523 192.578 24.303 191.887C22.9888 193.292 22.2064 194.667 21.6822 196.179C21.5531 196.308 21.4316 196.445 21.3176 196.589C19.5553 199.02 18.3475 204.876 19.2438 208.659C19.297 208.872 19.3502 209.1 19.3806 209.32C18.3854 214.417 20.1706 217.805 21.7202 216.514C21.8114 216.917 21.9101 217.312 22.0241 217.699C22.2292 218.398 22.609 219.902 23.5889 219.932C24.1282 219.948 24.3941 219.568 24.5157 219.097C25.8298 220.684 32.1499 224.726 33.578 223.966C33.578 223.92 33.578 223.867 33.578 223.822C33.4945 220.662 34.8238 217.296 36.4798 214.585C36.5026 214.547 36.571 214.569 36.5634 214.615C36.4874 215.982 36.6165 217.357 36.8748 218.709C37.6952 217.486 39.0094 216.689 40.1412 215.754C41.463 214.661 42.7392 213.506 43.9166 212.252C43.9546 212.215 44.0001 212.26 43.9925 212.306C43.4608 214.433 43.0962 216.605 42.3062 218.664C42.967 218.079 43.5064 217.19 44.4104 216.977C44.4331 216.977 44.4559 216.977 44.4635 217C44.9573 217.988 44.9649 219.15 44.8509 220.213C44.7446 221.14 44.5395 222.052 44.228 222.933C44.1673 223.1 44.1065 223.26 44.0457 223.427C45.2839 222.272 46.7728 220.244 47.5324 217.441C49.4239 220.069 55.5465 190.162 49.6974 189.433H49.705Z' fill='%23C2C2AC'/%3E%3Cpath d='M28.9745 187.314C28.9061 187.268 28.4351 187.732 27.6451 188.537C27.5084 189.532 27.554 190.557 27.7515 191.537C27.873 192.137 28.0477 192.715 28.3288 193.254C28.6858 193.938 29.1568 194.561 29.7265 195.085C30.8963 196.156 32.4156 196.771 34.0108 196.703C34.026 196.703 34.0412 196.718 34.0412 196.733C34.1172 197.546 34.8236 197.979 35.5605 198.161C36.5252 198.404 37.5583 198.359 38.5458 198.268C39.5941 198.169 40.6424 197.979 41.6679 197.728C42.5946 197.5 43.4834 197.219 44.3266 196.756C45.6559 196.027 46.8182 194.986 47.6462 193.702C47.7221 193.581 47.7981 193.459 47.8741 193.33C46.3396 195.282 43.5746 197.159 38.6674 196.771C35.8111 196.543 35.1199 195.161 33.95 196.088C33.8969 196.133 33.8513 196.179 33.8209 196.232C27.3793 193.953 28.5339 190.049 28.9745 187.306V187.314Z' fill='%23C2C2AC'/%3E%3Cpath d='M49.7052 189.433C49.7052 189.433 49.6368 189.874 49.4013 190.535C49.5381 191.211 49.6444 191.894 49.7128 192.578C49.8571 193.953 49.8647 195.336 49.7508 196.71C49.6292 198.161 49.3558 199.605 48.8316 200.964C47.7681 203.729 45.7247 205.879 43.4611 207.718C43.4383 207.74 43.4003 207.718 43.4079 207.687C43.5902 206.608 44.0384 205.537 43.8181 204.436C43.6586 204.846 43.4534 205.241 43.218 205.613C41.5164 208.234 38.5007 209.518 36.3357 211.675C36.3129 211.698 36.2749 211.675 36.2825 211.645C36.4497 210.452 36.2598 209.244 36.3889 208.052C36.3053 208.318 36.2142 208.591 36.1002 208.849C34.7633 212.093 32.0666 214.493 30.2663 217.456C30.2511 217.479 30.2207 217.479 30.2131 217.456C29.8865 216.977 29.5978 216.476 29.3319 215.967C28.5343 214.402 27.9874 212.716 27.5696 211.022C27.167 209.396 26.8783 207.74 26.6581 206.084C25.9668 207.406 24.8805 208.53 24.5843 210.034C24.5843 210.065 24.5387 210.065 24.5235 210.034C23.0118 207.368 21.9028 204.459 21.3027 201.451C21.0444 200.152 20.8697 198.822 20.7937 197.485C19.3428 200.25 18.454 205.294 19.2592 208.675C19.3124 208.887 19.3656 209.115 19.396 209.336C18.4009 214.433 20.186 217.828 21.7356 216.529C21.8268 216.932 21.9256 217.327 22.0395 217.722C22.2446 218.421 22.6244 219.925 23.6043 219.955C24.1437 219.97 24.4095 219.591 24.5311 219.12C25.8452 220.7 32.1653 224.748 33.5935 223.989C33.5935 223.943 33.5935 223.89 33.5935 223.844C33.5099 220.684 34.8392 217.319 36.4952 214.607C36.518 214.569 36.5864 214.592 36.5788 214.638C36.5636 214.911 36.556 215.185 36.556 215.458C36.7383 215.215 36.9282 214.987 37.1257 214.767C37.6803 214.144 38.3032 213.567 39.002 213.103C39.0248 213.088 39.0476 213.103 39.0476 213.134C39.116 213.65 38.9868 214.174 38.8045 214.653C38.5766 215.238 38.2728 215.792 37.931 216.324C37.5739 216.886 37.1789 217.418 36.7611 217.935C36.7991 218.2 36.8447 218.466 36.8978 218.725C37.7182 217.502 39.0324 216.704 40.1643 215.77C41.486 214.676 42.7622 213.521 43.9396 212.268C43.9776 212.23 44.0232 212.275 44.0156 212.321C43.894 212.815 43.7801 213.308 43.6661 213.802C43.7345 213.719 43.8105 213.635 43.8864 213.559C44.3802 213.027 44.9955 212.48 45.7399 212.359C45.7551 212.359 45.7703 212.359 45.7779 212.382C45.9298 212.845 45.6944 213.362 45.4741 213.757C45.1702 214.303 44.7828 214.805 44.3802 215.283C43.9776 215.77 43.5902 216.256 43.18 216.727C43.0736 216.856 42.9597 216.985 42.8458 217.114C42.6938 217.646 42.5191 218.17 42.3216 218.687C42.9825 218.102 43.5218 217.213 44.4258 217C44.4486 217 44.4714 217 44.479 217.023C44.9727 218.01 44.9803 219.173 44.8664 220.236C44.76 221.163 44.5549 222.075 44.2435 222.956C44.1827 223.123 44.1219 223.282 44.0611 223.449C45.2993 222.295 46.7882 220.267 47.5479 217.464C49.4393 220.092 55.5619 190.185 49.7128 189.456L49.7052 189.433Z' fill='%23C2C2AC'/%3E%3Cpath d='M49.7049 189.433C49.7049 189.433 49.0972 192.487 46.8714 194.5C46.9474 194.492 47.0158 194.477 47.0917 194.47C48.0793 194.318 49.2491 194.09 49.8112 193.201C49.834 193.163 49.9024 193.186 49.8948 193.231C49.8796 196.878 50.2138 200.531 49.9707 204.178C49.7884 206.829 49.4086 209.571 48.3527 212.04C47.464 214.129 46.1726 216.058 44.7825 217.881C44.9572 218.641 44.942 219.454 44.8584 220.221C44.7521 221.148 44.547 222.059 44.2355 222.94C44.1748 223.108 44.114 223.267 44.0532 223.434C45.2914 222.28 46.7803 220.251 47.5399 217.448C49.4314 220.077 55.554 190.17 49.7049 189.441V189.433Z' fill='%23BBB99D'/%3E%3Cpath d='M92.107 189.258C92.0158 189.35 91.2638 196.262 83.5611 196.201C82.8015 196.201 82.1027 195.928 81.3962 195.7C80.6822 195.472 79.9833 195.389 79.2313 195.465C74.757 195.913 73.253 191.735 72.9339 189.258C70.4044 191.818 68.4521 200.63 69.3029 204.724C69.4852 205.613 70.4575 204.231 70.8677 203.767C70.8829 203.828 70.8905 203.889 70.8981 203.934C71.0045 204.405 71.0348 204.899 71.05 205.378C71.1716 208.621 71.1716 216.218 72.6073 218.026C73.4277 219.059 74.1417 213.825 73.9974 212.131C73.967 211.804 73.9366 211.478 73.8987 211.151C74.6431 212.192 75.4939 213.141 76.7093 213.756C76.96 213.886 77.2714 213.726 77.279 213.453C77.279 212.913 77.2486 212.366 77.1727 211.827C77.6133 212.526 78.1222 213.217 78.8211 213.696C79.4136 214.098 79.5731 212.974 79.4971 212.275C80.6594 213.316 81.7608 213.248 81.7456 211.356C81.7456 211.121 81.7304 210.885 81.7001 210.65C88.6583 213.924 88.5063 213.794 90.3598 220.586C90.451 220.92 90.9979 220.927 91.0891 220.586C91.636 218.474 91.5752 216.218 91.5069 214.053C91.7272 214.607 91.8943 215.162 92.0082 215.648C92.3501 217.053 94.3023 213.521 94.4694 210.148C95.7076 212.89 95.5481 213.361 95.6772 215.883C95.7836 217.942 100.136 212.533 98.3511 200.744C98.579 200.881 98.9209 200.759 98.936 200.455C99.3159 193.573 92.3729 188.985 92.0994 189.251L92.107 189.258Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.5' d='M84.9971 212.23C85.0426 212.161 85.0958 212.101 85.1414 212.04C85.6883 211.303 86.1441 210.536 86.5011 209.692C87.238 207.953 87.8685 206.137 87.8988 204.246C87.6937 204.641 87.3975 204.975 87.0556 205.279C86.691 205.598 86.3036 205.887 85.9618 206.236C85.939 206.259 85.901 206.236 85.9086 206.206C86.0226 205.712 86.0149 205.195 85.9618 204.694C85.9162 204.216 85.8174 203.737 85.6275 203.289C85.3996 204.55 84.5337 205.53 83.9715 206.662C83.9564 206.692 83.9032 206.669 83.9108 206.639C84.1767 205.37 84.1159 204.018 83.7437 202.772C83.379 201.557 82.6954 200.395 81.6091 199.65C81.7838 200.782 81.5939 201.937 81.404 203.061C81.404 203.091 81.3508 203.091 81.3432 203.061C81.2217 202.567 80.9862 202.127 80.6292 201.762C80.4621 203.319 79.4214 204.626 79.1555 206.153C79.1555 206.168 79.1327 206.183 79.1175 206.175C78.563 205.985 78.0388 205.712 77.5603 205.393C76.2765 204.542 75.2206 203.395 74.3471 202.165C73.5039 200.98 72.7974 199.696 72.3037 198.344C72.0302 198.685 71.9011 199.096 71.8327 199.529C71.8327 199.559 71.7795 199.551 71.7719 199.529C71.5668 199.042 71.3921 198.541 71.263 198.032C71.0351 197.136 70.9211 196.224 70.8831 195.305C70.8452 194.454 70.8148 193.581 70.9591 192.738C69.5158 196.475 68.703 201.8 69.3031 204.724C69.4854 205.613 70.4577 204.231 70.8679 203.767C70.8831 203.828 70.8907 203.889 70.8983 203.934C71.0047 204.405 71.0351 204.899 71.0502 205.378C71.1718 208.621 71.1718 216.218 72.6075 218.026C73.4279 219.059 74.1419 213.825 73.9976 212.131C73.9672 211.804 73.9368 211.478 73.8989 211.151C74.6433 212.192 75.4941 213.141 76.7095 213.756C76.9602 213.886 77.2716 213.726 77.2792 213.453C77.2792 212.913 77.2488 212.366 77.1729 211.827C77.6135 212.526 78.1224 213.217 78.8213 213.696C79.4138 214.098 79.5733 212.974 79.4973 212.275C80.6672 213.316 81.761 213.248 81.7458 211.356C81.7458 211.121 81.7306 210.885 81.7003 210.65C83.0372 211.28 84.1083 211.781 84.9894 212.237L84.9971 212.23Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.5' d='M92.1073 189.258C92.0162 189.349 91.2641 196.262 83.5615 196.201C82.8019 196.201 82.103 195.928 81.3966 195.7C80.6825 195.472 79.9836 195.389 79.2316 195.464C74.7574 195.913 73.2533 191.735 72.9343 189.258C72.714 189.479 72.5089 189.744 72.2962 190.048C71.7569 191.97 71.7417 193.619 72.4405 195.533C72.8659 196.703 73.5876 197.804 74.6434 198.503L74.5675 196.855C74.5979 197.531 75.555 198.579 76.064 198.966C75.593 198.609 77.8947 198.009 78.039 198.009C79.1177 197.956 80.2115 197.895 81.2902 198.161C82.1942 198.389 83.1057 198.792 83.6451 199.521C84.1844 200.258 84.2376 201.374 83.5539 201.997C85.0808 201.154 86.4405 200.022 87.5116 198.67C88.3548 199.149 88.727 200.174 88.6662 201.116C88.6054 202.058 88.1876 202.939 87.7774 203.798C88.4991 203.418 89.0916 202.818 89.441 202.104C89.3879 202.21 90.1627 203.517 90.231 203.737C90.4513 204.367 90.5653 205.005 90.6337 205.666C90.74 206.692 91.0438 207.695 90.9223 208.728C90.6564 210.915 89.5398 212.944 88.294 214.751C89.122 215.944 89.5474 217.592 90.3678 220.593C90.4589 220.927 91.0059 220.935 91.097 220.593C91.644 218.481 91.5832 216.225 91.5148 214.06C91.7351 214.615 91.8946 215.169 92.0162 215.655C92.358 217.061 94.3103 213.528 94.4774 210.156C95.7156 212.898 95.5561 213.369 95.6852 215.891C95.7915 217.95 100.144 212.541 98.3591 200.752C98.587 200.888 98.9288 200.767 98.944 200.463C99.3238 193.581 92.3808 188.992 92.1073 189.258Z' fill='%23C2C2AC'/%3E%3Cpath d='M72.7974 189.395C72.3796 191.347 72.9569 193.611 74.5446 194.91C75.213 195.457 76.041 195.844 76.9146 195.943C77.8262 196.042 78.677 195.799 79.5126 195.465C79.5353 195.457 79.5581 195.449 79.5809 195.434C79.467 195.434 79.3454 195.442 79.2239 195.457C74.7497 195.905 73.2456 191.727 72.9266 189.251C72.881 189.296 72.8354 189.342 72.7974 189.395Z' fill='%23BBB99D'/%3E%3Cpath d='M92.1078 189.258C92.1078 189.258 92.0699 189.418 92.0167 189.661C92.0471 189.707 92.0774 189.752 92.1078 189.805C96.7112 197.341 92.7991 203.236 92.085 205.454C92.0699 205.492 92.0167 205.476 92.0243 205.438C92.4041 203.349 92.237 201.587 91.7356 199.529C91.2267 202.559 86.9879 207.922 84.6559 210.277C84.6407 210.292 84.6255 210.285 84.6103 210.277C82.0427 208.553 81.7921 203.547 81.7693 203.479C80.9413 204.785 80.1969 207.406 80.4627 208.986C80.4627 209.009 80.4399 209.024 80.4172 209.016C76.3455 206.92 74.0287 204.443 73.0108 202.476C72.7069 201.883 72.4562 201.23 72.4486 200.562C72.0536 201.253 71.8637 201.99 71.8561 202.787C71.8561 202.825 71.803 202.825 71.7954 202.795C70.7623 200.265 70.0634 197.09 70.3749 194.507C69.3266 198.017 68.81 202.233 69.3266 204.724C69.5089 205.613 70.4812 204.231 70.8914 203.767C70.9066 203.828 70.9142 203.889 70.9218 203.934C71.0281 204.405 71.0585 204.899 71.0737 205.378C71.1953 208.621 71.1953 216.218 72.631 218.026C73.4514 219.059 74.1654 213.825 74.0211 212.131C73.9907 211.804 73.9603 211.477 73.9223 211.151C74.6668 212.192 75.5175 213.141 76.7329 213.756C76.9836 213.886 77.2951 213.726 77.3027 213.453C77.3027 212.913 77.2723 212.366 77.1963 211.827C77.6369 212.526 78.1459 213.217 78.8447 213.696C79.4372 214.098 79.5968 212.974 79.5208 212.275C80.6906 213.316 81.7845 213.247 81.7693 211.356C81.7693 211.12 81.7541 210.885 81.7237 210.649C83.7519 211.607 85.1724 212.268 86.2207 212.898C88.7275 211.295 89.0541 208.606 89.1301 209.259C89.1985 209.913 89.434 210.551 87.9679 214.288C89.0389 215.511 89.4643 217.175 90.3987 220.578C90.4898 220.912 91.0368 220.92 91.1279 220.578C91.6749 218.466 91.6141 216.21 91.5457 214.045C91.766 214.6 91.9255 215.154 92.0471 215.64C92.3889 217.046 94.3411 213.513 94.5083 210.141C95.7465 212.883 95.5869 213.354 95.7161 215.876C95.8224 217.934 100.175 212.526 98.39 200.736C98.6179 200.873 98.9597 200.752 98.9749 200.448C99.3547 193.565 92.4117 188.977 92.1382 189.243L92.1078 189.258Z' fill='%23C2C2AC'/%3E%3Cpath d='M92.8519 189.593C92.7532 189.524 92.1986 189.182 92.1151 189.258C92.1151 189.258 92.1151 189.258 92.1151 189.274C92.1151 189.274 91.9632 190.056 91.6897 190.808L91.6669 190.861C91.2567 191.986 90.4819 193.474 88.993 194.599C89.4716 194.416 89.9426 194.204 90.3907 193.976C91.553 193.383 92.7152 192.654 93.5356 191.666C93.5584 191.636 93.604 191.636 93.6192 191.674C93.7863 192.16 94.1357 192.548 94.4548 192.958C94.7662 193.36 95.0397 193.801 95.2751 194.242C95.7765 195.191 96.1259 196.201 96.3614 197.227C96.8552 199.422 96.8476 201.633 96.5361 203.859C96.5361 203.904 96.4526 203.927 96.445 203.874C96.369 203.517 96.2551 203.167 96.0803 202.848C95.465 206.494 94.1585 210.057 92.3886 213.354C92.3658 213.392 92.2974 213.377 92.2974 213.331C92.2974 212.602 92.4417 211.759 91.986 211.121C91.2415 212.655 90.3376 214.121 89.1981 215.435C89.0918 215.557 88.993 215.671 88.8867 215.785C89.388 216.886 89.7754 218.367 90.3831 220.593C90.4743 220.927 91.0212 220.935 91.1124 220.593C91.6593 218.481 91.5985 216.225 91.5302 214.06C91.7505 214.615 91.91 215.169 92.0315 215.656C92.3734 217.061 94.3256 213.529 94.4927 210.156C95.7309 212.898 95.5714 213.369 95.7005 215.891C95.8069 217.95 100.16 212.541 98.3744 200.752C98.6023 200.888 98.9442 200.767 98.9593 200.463C99.2708 194.849 94.7054 190.763 92.8671 189.593H92.8519Z' fill='%23BBB99D'/%3E%3Cpath d='M79.0116 131.154L81.1842 131.83C81.1842 131.83 80.1738 133.745 79.1559 133.509C78.1304 133.274 79.0192 131.154 79.0192 131.154H79.0116Z' fill='%2306B253'/%3E%3Cpath d='M38.3633 132.286L37.7024 132.598L37.7556 133.107C37.7556 133.107 38.1886 134.254 38.9558 133.882C39.7154 133.509 38.3633 132.286 38.3633 132.286Z' fill='%2306B253'/%3E%3Cpath d='M60.9018 180.675C61.7374 180.659 62.5578 180.5 63.3782 180.348C66.9485 179.702 70.5643 179.239 74.2029 178.973C78.6619 178.646 87.8155 178.16 91.568 175.98C91.7959 175.843 92.039 175.691 92.153 175.471C92.2897 175.205 92.2289 174.894 92.1681 174.598C91.7959 172.911 90.7097 166.979 90.2919 165.307C87.3521 165.399 80.6749 170.123 77.7352 170.215C61.9197 170.716 45.6712 170.359 29.8937 169.257C29.8405 170.959 29.2556 173.344 29.2025 175.046C29.2025 175.19 29.2025 175.35 29.2936 175.464C29.3848 175.578 30.4635 175.79 30.6154 175.828C32.1574 176.254 33.7147 176.679 35.3175 176.877C36.4341 177.021 37.566 177.051 38.6598 177.287C39.7537 177.53 40.7792 177.97 41.8275 178.335C45.3598 179.55 49.2111 179.847 52.9941 179.702C54.3386 179.649 55.7211 179.543 57.0201 179.869C57.6354 180.021 58.2203 180.272 58.8356 180.432C59.5041 180.614 60.2029 180.697 60.9018 180.682V180.675Z' fill='%2300C55E'/%3E%3Cpath opacity='0.5' d='M92.1682 174.605C91.796 172.919 90.7097 166.986 90.2919 165.307C87.3522 165.399 80.675 170.123 77.7353 170.215C61.9198 170.716 45.6713 170.359 29.8938 169.257C29.8482 170.617 29.4684 172.418 29.2937 173.96C29.59 173.853 29.8938 173.762 30.1901 173.663C30.9801 173.42 31.8081 173.268 32.6361 173.223C33.3273 173.185 34.0186 173.223 34.6871 173.42C36.1683 173.876 37.5205 174.886 38.4852 176.087C38.827 176.512 39.1309 176.968 39.3588 177.469C40.0273 177.667 40.6729 177.917 41.3262 178.153C41.7592 177.553 42.2606 176.998 42.8607 176.58C43.3772 176.223 43.9697 175.973 44.6002 175.927C45.2991 175.881 46.0131 176.079 46.6208 176.428C47.8666 177.142 48.1325 178.32 48.0869 179.596C49.7125 179.733 51.3609 179.756 52.9865 179.695C54.3083 179.642 55.6604 179.543 56.9366 179.839C57.1189 179.376 57.3772 178.928 57.757 178.601C58.1444 178.251 58.661 178.054 59.1775 178.191C59.7548 178.343 60.2182 178.783 60.4385 179.338C60.6132 179.771 60.6816 180.219 60.6968 180.675H60.8943C61.7299 180.659 62.5503 180.5 63.3707 180.348C66.8346 179.718 70.3441 179.269 73.8687 178.996C74.2713 178.213 75.0993 177.499 75.7526 177.165C76.2388 176.922 76.7325 176.793 77.2719 176.861C77.8796 176.945 78.4265 177.211 78.8519 177.651C79.095 177.902 79.3001 178.191 79.4748 178.495C85.4075 177.879 88.8106 177.568 91.5529 175.98C91.7808 175.843 92.0239 175.691 92.1378 175.471C92.2746 175.205 92.2138 174.894 92.153 174.598L92.1682 174.605Z' fill='%2306B253'/%3E%3Cpath opacity='0.4' d='M86.3418 177.583C86.6456 176.998 87.0406 176.466 87.4888 175.98C88.5143 174.879 85.1947 175.031 86.6001 174.56C87.4356 174.286 88.2864 174.058 89.1448 173.846C90.0564 173.618 90.9679 173.405 91.8947 173.253C91.4161 170.83 90.6337 166.66 90.2995 165.3C87.3597 165.391 80.6826 170.116 77.7428 170.207C61.9273 170.708 45.6788 170.351 29.9013 169.25C29.8558 170.678 29.362 173.086 29.1949 174.666C29.2633 174.62 31.5194 172.197 35.0592 174.362C36.3126 175.129 37.1786 175.676 37.4824 177.089C37.8774 177.135 38.2724 177.196 38.6599 177.279C38.9789 177.348 39.2903 177.439 39.6018 177.53C39.6398 177.507 39.6702 177.477 39.7005 177.454C44.98 173.359 50.229 176.307 51.2849 178.973C51.3836 179.216 51.4596 179.467 51.5356 179.718C52.0217 179.718 52.5079 179.702 52.9941 179.687C53.2523 179.68 53.5106 179.664 53.7689 179.657C55.478 176.983 60.7347 175.881 63.0591 180.401C63.1655 180.378 63.2719 180.363 63.3782 180.34C65.9533 179.877 68.5513 179.505 71.1644 179.231C72.5393 177.644 77.1047 174.4 83.8806 177.978C84.6858 177.872 85.4986 177.765 86.2962 177.644C86.3114 177.613 86.3266 177.591 86.3342 177.568L86.3418 177.583Z' fill='%2306B253'/%3E%3Cpath d='M91.0136 166.538C90.8161 165.9 90.7477 165.224 90.6642 164.563C90.3071 161.866 90.2388 159.147 89.8286 156.45C89.4184 153.776 88.6967 151.117 88.5676 148.413C88.5068 147.091 87.3218 145.473 87.2079 144.152C86.6913 138.409 79.209 133.129 77.948 126.954C78.0087 126.756 78.0239 126.551 78.0087 126.354C77.9935 126.194 77.9632 126.042 77.9252 125.89L40.0273 128.481C39.8905 128.8 39.7994 129.134 39.7082 129.468C39.5335 130.114 39.2828 130.691 38.941 131.284C38.2649 132.431 39.6778 134.436 38.9562 135.56C37.5889 137.687 35.2948 138.925 34.7479 141.326C34.1629 143.931 33.1071 146.818 32.7272 149.454C30.5319 164.517 29.3393 166.173 29.3241 171.665C29.3241 171.665 30.4408 171.916 31.489 172.44C33.3729 173.382 35.3556 173.709 37.5205 173.777C38.1738 173.8 38.7815 173.815 39.4196 173.975C40.0045 174.119 40.5666 174.332 41.1363 174.499C42.4581 174.879 43.909 174.932 45.2839 175.023C46.7956 175.129 48.2996 175.228 49.7885 175.479C51.2546 175.722 52.6979 176.056 54.1564 176.345C56.9518 176.907 59.8308 177.173 62.6718 177.461C64.024 177.598 65.3913 177.674 66.751 177.598C68.1791 177.522 69.5085 177.036 70.9442 177.021C74.8715 176.983 75.4184 177.211 77.0744 175.137C77.8416 174.18 79.2925 174.21 80.4775 174.225C83.4705 174.263 90.5122 172.326 92.1834 169.865C92.0467 169.235 91.8036 168.619 91.5605 168.027C91.363 167.533 91.1655 167.039 91.0136 166.53V166.538Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.1' d='M36.6086 168.133C36.6465 167.852 36.6769 167.579 36.7073 167.298C36.7985 166.416 36.8592 165.52 36.7985 164.631C36.7681 164.236 36.7225 163.826 36.5858 163.446C36.487 163.188 36.3199 162.899 36.0313 162.846C35.659 162.778 35.264 163.044 34.9981 163.272C34.4664 163.72 34.1398 164.358 33.9195 165.004C33.684 165.695 33.5397 166.416 33.4105 167.138C33.289 167.799 33.1902 168.483 32.9775 169.121C32.7117 169.941 32.3774 170.739 32.104 171.559C31.99 171.901 31.8913 172.243 31.8001 172.592C33.1674 173.223 34.5879 173.549 36.092 173.694C36.1756 172.759 36.2363 171.817 36.3047 170.883C36.3731 169.964 36.487 169.052 36.6086 168.141V168.133Z' fill='%2300C55E'/%3E%3Cpath opacity='0.1' d='M48.9151 174.203C48.467 172.706 48.4518 171.118 48.0644 169.607C47.8744 168.847 47.5858 168.095 47.0996 167.472C46.8489 167.161 46.4843 166.69 46.0286 166.72C45.6791 166.743 45.4436 167.077 45.2917 167.358C45.079 167.776 44.9499 168.232 44.8511 168.688C44.6688 169.554 44.5852 170.442 44.6384 171.324C44.7068 172.379 44.9119 173.413 45.117 174.446C45.155 174.636 45.1929 174.825 45.2233 175.008C45.2461 175.008 45.2689 175.008 45.2841 175.008C46.659 175.099 48.0264 175.198 49.3785 175.403C49.1886 175.008 49.0291 174.598 48.9075 174.18L48.9151 174.203Z' fill='%2300C55E'/%3E%3Cpath opacity='0.1' d='M69.2196 176.421C68.9538 175.95 68.7183 175.479 68.5208 174.977C68.3005 174.423 68.0954 173.868 67.8523 173.321C67.6092 172.767 67.3357 172.212 66.9787 171.726C66.6977 171.354 66.3102 170.921 65.8089 170.883C65.1252 170.83 64.9429 171.605 64.8897 172.144C64.791 173.094 64.9353 174.073 65.1404 175.008C65.3303 175.904 65.5962 176.793 65.9836 177.629C66.2419 177.629 66.5001 177.621 66.766 177.606C67.7687 177.553 68.7183 177.302 69.6982 177.142C69.5311 176.914 69.3792 176.671 69.2424 176.421H69.2196Z' fill='%2300C55E'/%3E%3Cpath opacity='0.1' d='M85.3774 172.288C85.1267 171.308 84.7697 170.351 84.3291 169.447C84.162 169.113 83.9873 168.779 83.8353 168.437C83.6986 168.126 83.5695 167.814 83.4327 167.503C83.1669 166.903 82.8858 166.211 82.3996 165.756C82.2249 165.588 81.8831 165.345 81.6248 165.444C81.3969 165.535 81.3665 165.862 81.3514 166.067C81.3362 166.356 81.3514 166.637 81.3514 166.925C81.3514 167.389 81.3514 167.852 81.3741 168.316C81.4197 169.288 81.5185 170.253 81.7615 171.195C81.9514 171.947 82.1945 172.676 82.4984 173.39C82.5895 173.603 82.6807 173.815 82.7794 174.02C83.6834 173.868 84.6861 173.641 85.6888 173.352C85.5825 173.002 85.4685 172.645 85.3774 172.296V172.288Z' fill='%2300C55E'/%3E%3Cpath opacity='0.4' d='M91.5682 168.034C91.3707 167.541 91.1731 167.047 91.0212 166.538C90.8237 165.9 90.7554 165.224 90.6718 164.563C90.3148 161.866 90.2464 159.147 89.8362 156.45C89.426 153.776 88.7043 151.117 88.5752 148.413C88.5144 147.091 87.3294 145.473 87.2155 144.152C86.6989 138.409 79.2166 133.129 77.9556 126.954C78.0164 126.756 78.0316 126.551 78.0164 126.354C78.0012 126.194 77.9708 126.042 77.9328 125.89L40.0349 128.481C39.8982 128.8 39.807 129.134 39.7158 129.468C39.5411 130.114 39.2905 130.691 38.9486 131.284C38.2726 132.431 39.6855 134.436 38.9638 135.56C37.5965 137.695 35.3024 138.925 34.7555 141.326C34.1706 143.931 33.1147 146.818 32.7349 149.454C30.5395 164.517 29.3469 166.173 29.3317 171.665C29.3317 171.665 30.4484 171.916 31.4967 172.44C31.5119 172.44 31.5195 172.455 31.5346 172.455C32.5753 168.847 33.1147 161.19 34.839 158.418C36.0393 156.48 38.4777 155.219 39.0246 158.562C39.5791 161.95 38.1282 170.435 37.4294 173.77C37.4598 173.77 37.4977 173.77 37.5357 173.77C38.189 173.792 38.7967 173.808 39.4348 173.967C40.0197 174.111 40.5818 174.324 41.1516 174.491C41.782 174.674 42.4505 174.78 43.119 174.856C42.762 170.313 41.7289 158.433 46.2259 159.147C50.0164 159.747 49.5986 166.66 56.1694 176.702C58.3268 177.036 60.5221 177.241 62.6871 177.461C62.801 177.477 62.9225 177.484 63.0441 177.492C62.7174 174.514 60.7576 161.973 63.1124 160.142C63.8797 159.549 64.852 159.481 65.7788 159.648C70.534 160.522 71.6127 173.633 74.6588 176.884C75.6235 176.702 76.1933 176.261 77.0896 175.137C77.5834 174.514 78.3734 174.309 79.1862 174.248C78.6697 168.429 74.9703 159.549 78.9507 157.833C82.9084 156.116 83.5161 162.816 88.4992 172.364C90.1628 171.658 91.5682 170.799 92.1987 169.873C92.0619 169.242 91.8188 168.627 91.5758 168.034H91.5682Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M91.568 168.034C91.3705 167.541 91.173 167.047 91.0211 166.538C90.8236 165.9 90.7552 165.224 90.6717 164.563C90.3146 161.866 90.2539 159.147 89.8361 156.45C89.4259 153.776 88.7042 151.117 88.5751 148.413C88.5143 147.091 87.3293 145.473 87.2154 144.152C86.6912 138.409 79.2165 133.129 77.9555 126.954C78.0163 126.756 78.0314 126.551 78.0162 126.354C78.001 126.194 77.9707 126.042 77.9327 125.89L40.0348 128.481C39.898 128.8 39.8069 129.134 39.7157 129.468C39.541 130.114 39.2903 130.691 38.9485 131.284C38.2724 132.431 39.6853 134.436 38.9637 135.56C37.8167 137.353 36.0087 138.508 35.1428 140.255C35.4162 140.376 35.6821 140.498 35.9556 140.619C38.1813 141.615 40.4222 142.572 42.6479 143.559C43.8557 144.091 45.0711 144.592 46.2865 145.109C46.8866 145.367 47.4791 145.625 48.0716 145.899C48.6034 146.142 49.1351 146.377 49.5605 146.795C49.5757 146.81 49.5757 146.826 49.5605 146.833C49.401 147.167 49.2795 147.517 49.1959 147.866C50.0087 147.995 50.8443 148.033 51.6647 148.041C53.427 148.071 55.1894 148.041 56.9517 148.041C56.9669 148.041 56.9821 148.056 56.9821 148.071C56.9593 148.33 56.9365 148.588 56.9137 148.846C57.8861 148.747 58.8964 148.801 59.8459 148.937C60.6587 149.051 61.4487 149.256 62.2084 149.56C63.0515 149.902 63.8568 150.343 64.6164 150.836C66.0521 151.771 67.3358 152.872 68.3765 154.24C69.3793 155.554 70.1693 157.02 70.8149 158.531C71.4758 160.074 72.0152 161.669 72.5469 163.256C73.1622 165.087 73.8155 166.91 74.408 168.748C75.1752 171.119 75.8741 173.557 76.2463 176.033C76.497 175.798 76.7628 175.494 77.0591 175.129C77.5529 174.506 78.3429 174.301 79.1557 174.241C78.6315 168.422 74.9397 159.542 78.9202 157.825C82.8779 156.108 83.4856 162.808 88.4687 172.357C90.1323 171.65 91.5377 170.792 92.1757 169.865C92.039 169.235 91.7883 168.619 91.5528 168.027L91.568 168.034Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M60.4086 173.625C59.0641 170.207 58.2209 166.576 57.6132 162.96C56.9144 158.805 56.5649 154.566 56.7624 150.343C56.7852 149.872 56.8156 149.401 56.8536 148.937C56.6941 148.952 56.5269 148.975 56.3674 149.006C55.8129 149.097 55.19 149.241 54.757 149.636C54.7266 149.666 54.681 149.621 54.7114 149.591C55.0533 149.279 55.5242 149.12 55.9648 149.021C56.2535 148.952 56.5573 148.907 56.8536 148.876C56.8536 148.846 56.8536 148.816 56.8536 148.785C56.8612 148.641 56.8764 148.497 56.8916 148.345C56.8916 148.284 56.9067 148.216 56.9067 148.155C56.9067 148.102 56.77 148.124 56.7472 148.124H52.7592C51.6881 148.124 50.6094 148.124 49.5384 147.988C49.4168 147.972 49.2953 147.957 49.1737 147.935C49.0142 148.618 48.9914 149.332 49.0978 150.039C49.2573 151.095 49.6295 152.097 50.0625 153.07C50.5259 154.095 51.05 155.09 51.4982 156.116C51.9995 157.255 52.4097 158.44 52.8579 159.595C53.8151 162.064 54.7798 164.525 55.6914 167.009C56.5345 169.303 57.3701 171.605 58.4108 173.823C58.9198 174.917 59.4819 175.98 60.1124 177.006C60.158 177.081 60.2036 177.157 60.2491 177.226C60.9024 177.294 61.5481 177.355 62.2014 177.423C62.1786 177.393 62.1634 177.355 62.1406 177.325C61.4645 176.14 60.8872 174.901 60.3934 173.64L60.4086 173.625Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M34.7476 141.326C34.5273 142.291 34.2462 143.293 33.9576 144.311C34.3906 145.101 34.7096 145.967 34.9679 146.826C35.2717 147.836 35.4996 148.839 35.492 149.902C35.492 151.467 35.2186 153.138 34.4665 154.528C34.3754 154.688 34.1323 154.931 34.3374 155.06C34.5045 155.166 34.6716 155.265 34.8464 155.356C35.2414 155.561 35.6439 155.736 36.0617 155.88C36.8973 156.184 37.7557 156.412 38.6141 156.648C39.5029 156.898 40.384 157.21 41.2728 157.453C42.2451 157.726 43.2326 157.962 44.2278 158.159C48.3449 158.98 52.5457 159.39 56.7389 159.428C58.881 159.451 61.0232 159.39 63.1653 159.291C65.3075 159.192 67.4496 159.101 69.569 158.759C71.6048 158.433 73.6178 157.985 75.6384 157.62C77.4767 157.286 79.3986 156.929 81.2825 157.005C82.5966 157.058 83.9184 157.354 85.0654 158.023C86.1669 158.668 87.0708 159.587 87.7621 160.658C88.704 162.109 89.2814 163.773 89.9043 165.376C90.5424 167.032 91.1577 168.703 91.7654 170.374C91.9325 170.207 92.0692 170.04 92.1832 169.873C92.0464 169.242 91.8033 168.627 91.5679 168.034C91.3704 167.541 91.1728 167.047 91.0209 166.538C90.8234 165.9 90.7551 165.224 90.6715 164.563C90.3145 161.866 90.2461 159.147 89.8359 156.45C89.4257 153.776 88.7041 151.117 88.5749 148.413C88.5141 147.091 87.3367 145.473 87.2152 144.152C86.6986 138.409 79.2163 133.129 77.9553 126.954C78.0161 126.756 78.0313 126.551 78.0161 126.354C78.0009 126.194 77.9705 126.042 77.9325 125.89L40.0346 128.481C39.8979 128.8 39.8067 129.134 39.7156 129.468C39.5408 130.114 39.2902 130.691 38.9483 131.284C38.2723 132.431 39.6852 134.436 38.9635 135.56C37.5962 137.695 35.3021 138.925 34.7552 141.326H34.7476Z' fill='%233B754B'/%3E%3Cpath d='M43.4609 89.6331C42.0556 89.7015 40.6199 90.0661 39.4121 90.7194C37.6269 91.6917 36.6242 93.5452 36.2064 95.3227C35.7431 97.2826 35.8874 99.4019 36.7306 101.271C37.1636 100.944 37.6118 100.633 38.0524 100.313C40.3236 98.6499 42.5797 96.918 44.5396 94.9581C45.4131 94.0845 46.3171 93.1274 46.8337 92.0335C47.0312 91.6233 47.1603 91.16 47.0919 90.7346C47.0919 90.7346 47.0919 90.7346 47.0767 90.7346C46.1956 89.8078 44.7447 89.5723 43.4533 89.6331H43.4609Z' fill='%23CCD1C0'/%3E%3Cpath d='M79.1563 128.951C79.1259 128.594 79.0043 128.253 78.8904 127.911C78.8904 127.812 78.8904 127.713 78.8904 127.622C78.8904 127.47 78.8144 127.379 78.7081 127.333C78.0396 124.834 79.3994 122.054 79.6424 119.562C79.8931 117.018 82.3467 115.035 82.3999 112.445C82.4227 111.396 83.8432 108.214 84.1622 107.515C85.765 104.005 86.6158 97.8143 86.7905 94.1377C86.2132 91.3802 86.5702 77.4562 86.555 77.3954C86.3575 76.2028 82.4606 78.9755 82.7113 77.7905C82.9468 76.6586 83.5013 80.282 84.109 79.2413C83.8736 78.816 83.5773 78.4134 83.1975 78.0867C82.4455 77.4334 81.4124 77.1144 80.4173 76.8257C77.5914 76.0205 74.3554 75.3217 70.9143 74.7899C70.9447 74.2658 70.9143 73.7416 70.8459 73.2251C70.6408 71.5235 70.1395 69.7536 69.1671 68.2647C69.0836 68.1356 68.9013 68.0672 68.7418 68.1128C55.1444 71.9793 49.1129 66.51 48.5964 65.0971C48.0494 63.593 48.6419 67.0341 42.5649 68.7053C42.3674 68.7585 42.2915 68.9104 42.2991 69.0547C42.2839 69.1003 42.2839 69.1535 42.2991 69.2066C42.8004 71.4324 42.0864 73.81 43.0663 75.9598C43.0891 76.0053 43.1118 76.0585 43.1346 76.1041C40.4152 77.0688 38.0147 78.3754 36.0929 80.0845C34.5508 81.4519 33.3126 83.0623 31.9453 84.5739C33.381 88.2809 33.3506 92.307 33.0924 96.2267C32.9328 98.6347 32.7353 101.217 34.133 103.276C34.5812 103.937 35.1889 104.522 35.5839 105.213C36.0701 106.049 36.1309 106.474 36.2752 107.408C36.298 107.56 36.2144 107.712 36.2372 107.864C36.4803 109.429 36.0625 110.812 36.2828 112.475C36.3891 113.25 37.2247 114.367 37.2551 115.073C37.3463 117.405 38.4933 119.464 39.2757 121.644C40.0202 123.718 40.3468 125.905 40.2557 128.07C40.005 128.518 39.8606 128.989 39.7315 129.476C39.6176 129.893 39.4732 130.281 39.2985 130.661C39.3061 130.653 39.3213 130.645 39.3289 130.638C39.3669 130.607 39.4277 130.645 39.4049 130.691C38.8959 131.633 38.5465 132.636 38.1743 133.631C37.9464 134.239 37.7185 134.846 37.445 135.439C37.1716 136.031 36.8525 136.609 36.5487 137.193C35.8954 138.432 35.2421 139.662 34.604 140.9C34.323 141.447 34.0495 141.994 33.7684 142.541C33.7001 142.906 33.6317 143.27 33.5709 143.635C33.5785 143.886 33.5937 144.144 33.6165 144.395C33.7532 145.891 33.9431 147.388 34.0799 148.884C34.2166 150.373 34.2926 151.869 34.2014 153.358C34.1862 153.571 34.171 153.791 34.1558 154.004C34.1558 154.05 34.0951 154.24 34.1938 154.262C34.2926 154.285 34.3913 154.3 34.4901 154.323C34.8775 154.407 35.2725 154.49 35.6599 154.566C36.4727 154.733 37.2779 154.893 38.0907 155.052C41.3343 155.675 44.6007 156.199 47.8975 156.518C51.2703 156.845 54.6658 156.944 58.0614 156.815C61.4797 156.678 64.8828 156.344 68.2784 155.926C69.9723 155.721 71.6587 155.485 73.3527 155.257C75.0315 155.03 76.7027 154.832 78.3815 154.635C79.2702 154.528 80.1514 154.414 81.0326 154.27C81.5035 154.194 84.8611 153.343 85.2637 153.092C85.8942 152.705 85.7271 151.907 85.7043 151.315C85.6891 150.646 85.7422 149.986 85.7726 149.317C85.8106 148.558 85.8486 147.798 85.9018 147.038C86.0233 145.344 86.2056 143.612 86.7298 141.979C86.7374 141.949 86.7526 141.918 86.7602 141.888C86.7298 141.812 86.707 141.744 86.6766 141.668C85.5675 138.865 79.3006 130.638 79.1639 128.959L79.1563 128.951Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M79.1563 128.951C79.1259 128.594 79.0043 128.253 78.8904 127.911C78.8904 127.812 78.8904 127.713 78.8904 127.622C78.8904 127.47 78.8144 127.379 78.7081 127.333C78.0396 124.834 79.3994 122.054 79.6424 119.562C79.8931 117.018 82.3467 115.035 82.3999 112.445C82.4227 111.396 83.8432 108.214 84.1622 107.515C85.765 104.005 86.6158 97.8143 86.7905 94.1377C86.2132 91.3802 86.5702 77.4562 86.555 77.3954C86.3575 76.2028 82.4606 78.9755 82.7113 77.7905C82.9468 76.6586 83.5013 80.282 84.109 79.2413C83.8736 78.816 83.5773 78.4134 83.1975 78.0867C82.4455 77.4334 81.4124 77.1144 80.4173 76.8257C77.5914 76.0205 74.3554 75.3217 70.9143 74.7899C70.9447 74.2658 70.9143 73.7416 70.8459 73.2251C70.6408 71.5235 70.1395 69.7536 69.1671 68.2647C69.0836 68.1356 68.9013 68.0672 68.7418 68.1128C55.1444 71.9793 49.1129 66.51 48.5964 65.0971C48.0494 63.593 48.6419 67.0341 42.5649 68.7053C42.3674 68.7585 42.2915 68.9104 42.2991 69.0547C42.2839 69.1003 42.2839 69.1535 42.2991 69.2066C42.8004 71.4324 42.0864 73.81 43.0663 75.9598C43.0891 76.0053 43.1118 76.0585 43.1346 76.1041C40.4152 77.0688 38.0147 78.3754 36.0929 80.0845C34.5508 81.4519 33.3126 83.0623 31.9453 84.5739C33.381 88.2809 33.3506 92.307 33.0924 96.2267C32.9328 98.6347 32.7353 101.217 34.133 103.276C34.5812 103.937 35.1889 104.522 35.5839 105.213C36.0701 106.049 36.1309 106.474 36.2752 107.408C36.298 107.56 36.2144 107.712 36.2372 107.864C36.4803 109.429 36.0625 110.812 36.2828 112.475C36.3891 113.25 37.2247 114.367 37.2551 115.073C37.3463 117.405 38.4933 119.464 39.2757 121.644C40.0202 123.718 40.3468 125.905 40.2557 128.07C40.005 128.518 39.8606 128.989 39.7315 129.476C39.6176 129.893 39.4732 130.281 39.2985 130.661C39.3061 130.653 39.3213 130.645 39.3289 130.638C39.3669 130.607 39.4277 130.645 39.4049 130.691C38.8959 131.633 38.5465 132.636 38.1743 133.631C37.9464 134.239 37.7185 134.846 37.445 135.439C37.1716 136.031 36.8525 136.609 36.5487 137.193C35.8954 138.432 35.2421 139.662 34.604 140.9C34.323 141.447 34.0495 141.994 33.7684 142.541C33.7001 142.906 33.6317 143.27 33.5709 143.635C33.5785 143.886 33.5937 144.144 33.6165 144.395C33.7532 145.891 33.9431 147.388 34.0799 148.884C34.2166 150.373 34.2926 151.869 34.2014 153.358C34.1862 153.571 34.171 153.791 34.1558 154.004C34.1558 154.05 34.0951 154.24 34.1938 154.262C34.2926 154.285 34.3913 154.3 34.4901 154.323C34.8775 154.407 35.2725 154.49 35.6599 154.566C36.4727 154.733 37.2779 154.893 38.0907 155.052C41.3343 155.675 44.6007 156.199 47.8975 156.518C51.2703 156.845 54.6658 156.944 58.0614 156.815C61.4797 156.678 64.8828 156.344 68.2784 155.926C69.9723 155.721 71.6587 155.485 73.3527 155.257C75.0315 155.03 76.7027 154.832 78.3815 154.635C79.2702 154.528 80.1514 154.414 81.0326 154.27C81.5035 154.194 84.8611 153.343 85.2637 153.092C85.8942 152.705 85.7271 151.907 85.7043 151.315C85.6891 150.646 85.7422 149.986 85.7726 149.317C85.8106 148.558 85.8486 147.798 85.9018 147.038C86.0233 145.344 86.2056 143.612 86.7298 141.979C86.7374 141.949 86.7526 141.918 86.7602 141.888C86.7298 141.812 86.707 141.744 86.6766 141.668C85.5675 138.865 79.3006 130.638 79.1639 128.959L79.1563 128.951Z' fill='%23C2C2AC'/%3E%3Cpath d='M42.298 69.2067C42.7993 71.4324 42.0853 73.81 43.0652 75.9598C43.088 76.0129 43.1108 76.0585 43.1336 76.1041C42.5411 76.3168 41.9637 76.5447 41.4016 76.7878C41.6903 77.0688 41.9941 77.3271 42.3132 77.555C43.2627 78.2539 44.311 78.7856 45.3897 79.2566C46.2784 79.644 47.2432 79.8111 48.2079 79.7731C49.1498 79.7275 50.069 79.53 50.9805 79.2945C51.8161 79.0743 52.6593 78.8692 53.4645 78.5577C54.1634 78.2918 54.8394 77.9576 55.4775 77.5626C56.7081 76.803 57.7944 75.8003 58.6072 74.6076C59.3137 73.5745 59.8074 72.4199 60.1037 71.2045C59.7315 71.4476 59.3593 71.6907 58.9794 71.9261C57.4222 72.8605 55.7054 73.6885 53.8747 73.886C52.2415 74.0607 50.4944 73.7417 49.1878 72.6934C48.0408 71.7818 47.1748 70.5208 46.5519 69.2067C46.2708 68.6066 46.0202 67.9761 45.8454 67.3304C45.0478 67.8317 43.992 68.3255 42.5563 68.7129C42.3588 68.7661 42.2828 68.918 42.2904 69.0623C42.2752 69.1079 42.2752 69.1611 42.2904 69.2143L42.298 69.2067Z' fill='%23C2C2AC'/%3E%3Cpath d='M45.1321 67.7178C44.4408 68.0748 43.5976 68.4167 42.5569 68.6977C42.3594 68.7509 42.2835 68.9028 42.2911 69.0472C42.2759 69.0927 42.2759 69.1459 42.2911 69.1991C42.7924 71.4248 42.0784 73.8024 43.0583 75.9522C43.0811 75.9978 43.1039 76.0509 43.1267 76.0965C42.5342 76.3092 41.9568 76.5371 41.3947 76.7802C41.6834 77.0612 41.9872 77.3195 42.3063 77.5474C43.2558 78.2463 44.3041 78.778 45.3828 79.249C46.2715 79.6364 47.2363 79.8035 48.201 79.7655C48.3681 79.7655 48.5352 79.7427 48.7023 79.7275C48.7707 75.7091 46.2183 69.3586 45.1321 67.7178Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.4' d='M79.1563 128.951C79.1259 128.594 79.0043 128.253 78.8904 127.911C78.8904 127.812 78.8904 127.713 78.8904 127.622C78.8904 127.47 78.8144 127.379 78.7081 127.333C78.0396 124.834 79.3994 122.054 79.6424 119.562C79.8931 117.018 82.3467 115.035 82.3999 112.445C82.4227 111.389 83.8432 108.214 84.1622 107.515C85.765 104.005 86.6158 97.8143 86.7905 94.1377C86.2132 91.3802 86.5702 77.4562 86.555 77.3954C86.4107 76.4991 84.1774 77.8436 83.1747 78.0639C83.1443 78.0411 83.1139 78.0107 83.0836 77.9879C83.0988 78.0183 83.1063 78.0411 83.1139 78.0791C82.8177 78.1323 82.6506 78.0791 82.7113 77.7904C82.7113 77.7676 82.7189 77.7525 82.7265 77.7373C82.0429 77.3119 81.2225 77.0536 80.4173 76.8257C77.5914 76.0205 74.3554 75.3216 70.9143 74.7899C70.9447 74.2658 70.9143 73.7416 70.8459 73.2251C70.6408 71.5235 70.1395 69.7536 69.1671 68.2647C69.0836 68.1356 68.9013 68.0672 68.7418 68.1128C66.4857 68.7509 64.4347 69.1383 62.5888 69.3206C62.3457 69.5637 62.0874 69.7991 61.8139 70.0194C61.3961 70.3537 60.9556 70.6575 60.5074 70.9462C60.401 71.0146 60.3023 71.0753 60.1959 71.1437C59.6794 73.339 58.4792 75.3216 56.7244 76.7573C55.6078 77.6689 54.3088 78.3602 52.9415 78.8083C52.0755 79.097 51.1791 79.3249 50.2904 79.5224C49.4168 79.7199 48.528 79.8718 47.6317 79.8262C47.1911 79.8035 46.7505 79.7503 46.3175 79.6363C45.8693 79.5148 45.4515 79.3401 45.0261 79.1578C44.3273 78.8539 43.6436 78.5045 42.9979 78.0943C42.4206 77.7297 41.8433 77.2967 41.3419 76.8105C39.3593 77.6765 37.5818 78.7552 36.0929 80.0845C34.5508 81.4519 33.3126 83.0623 31.9453 84.5739C33.381 88.2809 33.3506 92.307 33.0924 96.2266C32.9328 98.6271 32.7277 101.217 34.133 103.276C34.5812 103.937 35.1889 104.522 35.5839 105.213C36.0701 106.049 36.1309 106.474 36.2752 107.408C36.298 107.56 36.2144 107.712 36.2372 107.864C36.4879 109.429 36.0625 110.812 36.2828 112.475C36.3891 113.25 37.2247 114.367 37.2551 115.073C37.3463 117.398 38.4933 119.464 39.2757 121.644C40.0202 123.718 40.3468 125.898 40.2557 128.07C40.005 128.518 39.8606 128.989 39.7315 129.476C39.6176 129.893 39.4732 130.281 39.2985 130.661C39.3061 130.653 39.3213 130.645 39.3289 130.638C39.3669 130.607 39.4277 130.645 39.4049 130.691C38.8959 131.633 38.5465 132.636 38.1819 133.631C37.954 134.238 37.7261 134.846 37.4526 135.439C37.1792 136.031 36.8601 136.609 36.5563 137.193C35.903 138.432 35.2497 139.662 34.6116 140.9C34.3306 141.447 34.0571 141.994 33.776 142.541C33.7077 142.906 33.6393 143.27 33.5785 143.635C33.5937 143.886 33.6013 144.144 33.6241 144.395C33.7608 145.891 33.9507 147.388 34.0875 148.884C34.2242 150.373 34.3001 151.869 34.209 153.358C34.1938 153.571 34.1786 153.791 34.1634 154.004C34.1634 154.05 34.1027 154.24 34.2014 154.262C34.3002 154.285 34.3989 154.3 34.4977 154.323C34.8851 154.407 35.2801 154.49 35.6675 154.566C36.4803 154.733 37.2855 154.893 38.0983 155.052C41.3419 155.675 44.6083 156.199 47.9051 156.518C51.2779 156.845 54.6734 156.944 58.069 156.815C61.4873 156.678 64.8904 156.344 68.286 155.926C69.9799 155.721 71.6663 155.485 73.3603 155.257C75.0391 155.03 76.7103 154.832 78.389 154.635C79.2778 154.528 80.159 154.414 81.0402 154.27C81.5111 154.194 84.8687 153.343 85.2713 153.092C85.9018 152.705 85.7271 151.907 85.7119 151.315C85.6967 150.646 85.7498 149.986 85.7802 149.325C85.8182 148.565 85.8562 147.805 85.9094 147.046C86.0309 145.352 86.2132 143.62 86.745 141.987C86.7526 141.956 86.7677 141.926 86.7753 141.896C86.745 141.82 86.7222 141.751 86.6918 141.675C85.5827 138.872 79.3158 130.645 79.1791 128.967H79.1942L79.1563 128.951Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.4' d='M66.7209 68.6597C67.5793 68.5761 68.4377 68.5154 69.296 68.4698C69.2505 68.4014 69.2125 68.3255 69.1669 68.2571C69.0834 68.128 68.901 68.0596 68.7415 68.1052C67.9363 68.3331 67.1539 68.5306 66.4019 68.6977C66.5082 68.6825 66.6222 68.6749 66.7285 68.6597H66.7209Z' fill='%23C2C2AC'/%3E%3Cpath d='M70.8379 73.2251C70.648 71.6223 70.1923 69.9663 69.3263 68.5306C68.2324 68.5762 67.131 68.6522 66.0523 68.8041C65.4902 68.8877 64.8825 68.9712 64.3659 69.2143C63.8721 69.4422 63.6291 69.7992 63.743 70.3613C64.0013 71.5312 64.966 72.5415 65.7104 73.4378C66.6448 74.5545 67.4348 75.8003 68.2172 77.0309C69.144 78.4818 70.0252 79.9707 70.7848 81.5203C72.2433 84.4829 73.3143 87.6809 73.4663 91.0081C73.5954 93.8415 73.1016 96.7509 72.1065 99.402C70.5341 103.603 67.5791 107.105 63.7962 109.497C59.9373 111.943 55.4555 113.28 50.9433 113.797C46.3019 114.336 41.5466 114.063 37.0041 112.984C36.7838 112.931 36.5635 112.878 36.3508 112.825C36.5939 113.561 37.2092 114.465 37.2395 115.073C37.3307 117.405 38.4777 119.464 39.2602 121.644C39.6628 122.761 39.9362 123.908 40.0957 125.07C46.8488 126.035 53.6855 126.399 60.4994 126.513C63.9101 126.566 67.3209 126.612 70.7316 126.536C73.3295 126.483 75.9351 126.338 78.5178 126.004C78.4722 123.877 79.4294 121.629 79.6345 119.57C79.8851 117.025 82.3387 115.043 82.3919 112.452C82.4147 111.404 83.8352 108.221 84.1542 107.522C85.7571 104.013 86.6079 97.8219 86.7826 94.1453C86.2053 91.3879 86.5623 77.4639 86.5471 77.4031C86.4028 76.5067 84.1618 77.8513 83.1667 78.0716C83.1363 78.0488 83.106 78.026 83.0756 77.9956C83.0832 78.026 83.0984 78.0488 83.106 78.0868C82.8097 78.14 82.6426 78.0868 82.7034 77.7981C82.7034 77.7753 82.711 77.7601 82.7185 77.7449C82.0349 77.3195 81.2145 77.0613 80.4093 76.8334C77.5834 76.0282 74.3474 75.3293 70.9063 74.7976C70.9367 74.2734 70.9063 73.7493 70.8379 73.2327V73.2251Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.68' d='M86.7821 94.1377C86.7061 95.5507 86.5466 97.3358 86.2808 99.1969C86.2656 99.2576 86.258 99.3184 86.2504 99.3792C86.182 99.8198 86.1136 100.268 86.0377 100.709H86.0301C85.9845 100.982 85.9389 101.255 85.8781 101.529C85.4528 103.755 84.883 105.904 84.1538 107.507C83.8347 108.206 82.4142 111.381 82.3915 112.43C82.3915 112.673 82.3611 112.916 82.3079 113.151C81.8977 115.407 79.8619 117.253 79.634 119.555C79.5201 120.786 79.125 122.085 78.8364 123.383C78.3046 123.376 77.7653 123.361 77.226 123.33C75.1826 123.239 73.1468 123.026 71.1186 122.806C69.0448 122.578 66.9786 122.335 64.92 121.986C63.9097 121.811 62.907 121.614 61.9043 121.37C61.4333 121.264 60.9547 121.143 60.4913 121.006C60.1951 120.915 59.8988 120.808 59.595 120.732C59.876 120.603 60.1571 120.451 60.423 120.307C61.4713 119.737 62.4512 119.054 63.4159 118.355C68.1788 114.906 81.0773 106.937 78.5477 90.6586C78.4566 90.0661 78.3502 89.4736 78.2135 88.8583C78.2135 88.8583 78.2135 88.8583 78.2135 88.8507C77.7121 86.5339 76.8993 84.0575 75.7219 81.414C75.7143 81.3836 75.6991 81.3532 75.6839 81.3228C75.6611 81.2772 75.6459 81.2316 75.6308 81.1861C75.5472 80.981 75.4864 80.7683 75.4332 80.5556V80.5404C75.3269 80.1606 75.2509 79.7807 75.1142 79.4161C74.8711 78.7856 74.5977 78.1703 74.4153 77.5171C74.3774 77.3803 74.3546 77.2436 74.3242 77.1069C74.3014 76.9853 74.6356 76.8562 74.7116 76.8106C74.9699 76.6511 75.2433 76.5219 75.5168 76.3928C75.7903 76.2713 76.0637 76.1497 76.3372 76.0358C76.3448 76.0282 76.3524 76.0282 76.3676 76.0206C76.3676 76.0206 76.3752 76.0206 76.3828 76.0206C76.4891 75.975 76.6031 75.9294 76.717 75.8839C78.0084 76.1725 79.2466 76.4916 80.4088 76.8182C81.214 77.0461 82.0344 77.3044 82.7181 77.7297C82.7181 77.7449 82.7029 77.7601 82.7029 77.7829C82.6421 78.064 82.8092 78.1248 83.1055 78.0716C83.0979 78.0412 83.0827 78.0108 83.0751 77.9804C83.1055 78.0108 83.1359 78.0336 83.1663 78.0564C84.1614 77.8437 86.4023 76.4991 86.5466 77.3879C86.5542 77.4563 86.2048 91.3803 86.7821 94.1377Z' fill='%23BBB99D'/%3E%3Cpath d='M34.1171 103.268C34.1475 103.314 34.1855 103.367 34.2234 103.42C34.2386 103.436 34.2462 103.451 34.2538 103.466C34.2766 103.496 34.307 103.534 34.3298 103.565C34.345 103.58 34.3526 103.595 34.3678 103.618C34.3982 103.656 34.4209 103.686 34.4513 103.724C34.4741 103.755 34.4969 103.785 34.5273 103.815C34.5425 103.838 34.5653 103.861 34.5805 103.884C34.7552 104.104 34.9375 104.317 35.1046 104.537C36.1757 102.41 40.6879 101.719 39.161 101.863C37.1252 102.053 36.0997 93.887 36.1833 92.945L41.4551 92.3601C41.9489 91.8512 42.4654 91.2738 42.9971 90.6509C43.8707 91.3726 44.7823 92.0563 45.785 92.5956C46.0888 92.7551 46.3927 92.907 46.6586 93.1273C47.1903 93.5603 47.4866 94.2136 47.7676 94.8441C47.9651 95.2847 48.1626 95.7632 48.0715 96.2342C47.9271 96.9938 47.1675 97.7687 46.6662 98.3232C46.0205 99.0221 45.3292 99.6829 44.6228 100.321C43.5289 101.309 42.3895 102.243 41.3184 103.253C40.2473 104.271 39.2066 105.312 38.1203 106.315C37.4443 106.937 36.7986 107.651 36.2896 108.441C36.2896 108.525 36.2972 108.601 36.3048 108.685V108.7C36.3048 108.776 36.3048 108.859 36.3048 108.935V108.95C36.3048 109.459 36.2668 109.961 36.2365 110.477C36.2365 110.53 36.2364 110.576 36.2288 110.629C36.2288 110.652 36.2288 110.675 36.2288 110.705C36.2288 110.774 36.2289 110.834 36.2213 110.903V110.963C36.2213 111.032 36.2213 111.108 36.2213 111.176V111.214C36.2213 111.282 36.2213 111.358 36.2213 111.434V111.45C36.2213 111.526 36.2213 111.602 36.2213 111.677V111.715C36.2213 111.791 36.2213 111.867 36.2288 111.943C36.2288 111.959 36.2288 111.974 36.2288 111.989C36.2288 112.065 36.2441 112.141 36.2441 112.224C36.2441 112.232 36.2441 112.247 36.2441 112.262C36.2517 112.346 36.2592 112.43 36.2744 112.513C36.2744 112.543 36.282 112.574 36.2896 112.597C36.2896 112.597 36.2896 112.612 36.2896 112.619C36.2896 112.65 36.2972 112.673 36.3048 112.695C36.3276 112.771 36.3428 112.832 36.3656 112.9C36.6163 113.63 37.2164 114.511 37.2392 115.103C37.2847 116.243 37.581 117.322 37.9684 118.385C38.1963 119.008 38.447 119.616 38.6976 120.239L38.7129 120.284C38.7432 120.352 38.766 120.413 38.7964 120.482C38.842 120.588 38.8876 120.702 38.9255 120.816C38.9255 120.831 38.9407 120.846 38.9483 120.869C39.0015 120.998 39.0471 121.127 39.1002 121.256V121.272C39.161 121.408 39.2066 121.545 39.2598 121.682C40.0042 123.756 40.3308 125.943 40.2397 128.108C40.2093 128.161 40.1865 128.215 40.1561 128.268C40.1485 128.283 40.1409 128.306 40.1257 128.321C40.1106 128.359 40.0954 128.389 40.0802 128.427C40.0726 128.45 40.0574 128.473 40.0498 128.496C40.0346 128.526 40.0194 128.556 40.0118 128.594C40.0042 128.617 39.989 128.64 39.9814 128.663C39.9662 128.693 39.9586 128.724 39.951 128.754C39.9435 128.777 39.9359 128.807 39.9207 128.83C39.9131 128.86 39.8979 128.883 39.8903 128.913C39.8827 128.944 39.8751 128.967 39.8599 128.997C39.8599 129.012 39.8523 129.027 39.8447 129.043C39.8143 129.134 39.7915 129.217 39.7687 129.308H79.2239C79.2239 129.308 79.2087 129.255 79.2011 129.233V129.21C79.2011 129.21 79.1859 129.172 79.1783 129.149C79.1783 129.134 79.1783 129.126 79.1707 129.111C79.1707 129.096 79.1707 129.081 79.1631 129.065C79.1631 129.035 79.1555 129.012 79.1555 128.989C79.1251 128.632 79.0036 128.291 78.8896 127.949C78.8896 127.85 78.8896 127.751 78.8896 127.66C78.8896 127.508 78.8137 127.417 78.7073 127.371C78.0389 124.872 79.3986 122.092 79.6417 119.6C79.6417 119.524 79.6569 119.448 79.672 119.38C79.672 119.38 79.672 119.365 79.672 119.357C79.6872 119.289 79.6948 119.221 79.71 119.152C79.71 119.145 79.71 119.129 79.71 119.122C79.7252 119.053 79.7404 118.985 79.7556 118.917C79.7556 118.902 79.7556 118.894 79.7632 118.886C79.7784 118.818 79.8012 118.75 79.8164 118.681C79.8164 118.674 79.8164 118.666 79.824 118.651C79.8468 118.583 79.8696 118.514 79.8923 118.446V118.431C79.9455 118.286 79.9987 118.142 80.0595 118.005V117.99C80.0899 117.922 80.1202 117.853 80.1506 117.785V117.77C80.1886 117.701 80.219 117.633 80.257 117.565V117.549C80.5608 116.934 80.9254 116.334 81.2673 115.726C80.8115 114.845 80.3557 113.964 79.7708 113.159C79.429 112.68 79.0416 112.232 78.6086 111.837C78.13 111.396 77.5907 111.047 77.0589 110.667C76.0106 109.908 75.0839 109.004 74.1192 108.138C73.0861 107.211 72.015 106.39 70.754 105.79C69.4626 105.175 68.1333 104.659 66.8799 103.975C65.6797 103.322 64.4567 102.706 63.264 102.038C62.0942 101.385 60.932 100.693 59.8761 99.8728C58.6987 98.9613 57.5744 97.989 56.3818 97.1002C55.3411 96.3254 54.27 95.5961 53.199 94.8593C52.6748 94.5023 52.1963 94.1908 51.5886 94.0389C50.9733 93.8794 50.6998 93.4844 50.3124 92.9906C48.8007 91.1067 46.7877 89.709 44.7747 88.3645C46.8485 85.4931 48.702 82.1887 49.2185 79.7579C49.1501 79.7655 49.0894 79.7807 49.0286 79.7882H49.0134C48.9527 79.7958 48.8919 79.8034 48.8235 79.811H48.8083C48.6792 79.8262 48.5424 79.8414 48.4133 79.849H48.3905C48.3373 79.849 48.2842 79.849 48.2234 79.8566H48.1702C48.1246 79.8566 48.0791 79.8566 48.0335 79.8566H47.7828C47.7221 79.8566 47.6613 79.8566 47.5929 79.8566C47.1523 79.8338 46.7117 79.7806 46.2788 79.6667C45.8306 79.5452 45.4128 79.3705 44.9874 79.1881C44.2885 78.8843 43.6049 78.5349 42.9592 78.1247C42.3819 77.76 41.8045 77.327 41.3032 76.8409C39.3206 77.7069 37.543 78.7855 36.0541 80.1149C34.5121 81.4822 33.2739 83.0926 31.9066 84.6043C33.3423 88.3113 33.3119 92.3373 33.0536 96.257C32.8941 98.665 32.689 101.248 34.0943 103.306L34.1171 103.268ZM51.429 96.4849C51.429 96.4849 51.3987 96.4697 51.3835 96.4621C51.3455 96.4393 51.3835 96.3862 51.4139 96.4089C51.4366 96.4241 51.4518 96.4317 51.4746 96.4393C51.4822 96.4317 51.4974 96.4241 51.505 96.4089C51.5354 96.3786 51.581 96.4241 51.5506 96.4545L51.5354 96.4697C51.6038 96.5001 62.9678 103.686 66.8951 105.327C66.9407 105.236 66.9938 105.152 67.0546 105.061C67.0774 105.031 67.1382 105.061 67.1078 105.091C67.047 105.175 66.9938 105.259 66.9559 105.35C66.9862 105.365 67.0166 105.38 67.047 105.388C67.085 105.403 67.0698 105.464 67.0318 105.449C67.0014 105.433 66.9635 105.418 66.9331 105.403C66.3785 106.694 68.0193 108.73 70.6553 108.358C70.8528 108.328 71.0503 108.305 71.2478 108.297C71.3921 108.297 71.4529 108.335 71.5668 108.419C74.7117 110.599 74.4686 113.523 74.4686 113.523C74.5369 113.561 79.0492 115.103 77.6438 116.995C77.1577 117.648 76.2157 117.846 75.4561 117.975C75.0459 118.043 74.6357 118.089 74.2255 118.142C73.595 118.218 72.9721 118.309 72.3416 118.347C70.9515 118.431 69.5538 118.385 68.1637 118.324C66.7584 118.263 65.3682 118.218 63.9629 118.218C61.1371 118.21 58.3113 118.157 55.4931 118.013C54.0877 117.944 52.6824 117.808 51.2771 117.777C50.5858 117.762 49.9022 117.762 49.2109 117.732C48.5576 117.701 47.9347 117.603 47.2967 117.466C42.9668 116.547 42.6553 118.689 39.5484 113.326C37.224 109.307 42.9972 104.119 51.4366 96.4849H51.429Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M82.7191 77.7373C82.8406 77.8132 82.9621 77.8968 83.0761 77.988C82.9242 77.6157 82.8026 77.3955 82.7191 77.7373Z' fill='%239EA58E'/%3E%3Cpath d='M82.7191 77.7373C82.8406 77.8132 82.9621 77.8968 83.0761 77.988C82.9242 77.6157 82.8026 77.3955 82.7191 77.7373Z' fill='%23CCD1C0'/%3E%3Cpath d='M47.7452 65.5756C47.7148 65.6819 47.692 65.7958 47.6768 65.9098C47.5097 66.9353 47.6768 67.9988 48.125 68.9331C48.6795 70.1029 49.6291 71.0829 50.7989 71.645C51.399 71.9337 52.0371 72.1236 52.7055 72.1388C53.374 72.1615 54.0425 72.0476 54.6806 71.8501C56.0631 71.4247 57.3469 70.6271 58.3724 69.6016C58.4332 69.5408 58.4863 69.4876 58.5471 69.4269C52.6296 67.7785 49.6822 66.0845 48.596 65.0894C48.0338 64.5728 48.3301 64.7779 47.7528 65.568L47.7452 65.5756Z' fill='%23CCD1C0'/%3E%3Cpath d='M56.3969 103.39C55.9563 102.896 55.4777 102.433 55.0599 101.924C54.2851 100.974 53.4799 99.7741 52.2113 99.4703C50.9731 99.174 49.6362 99.5766 48.717 101.005C48.2309 101.757 47.889 102.592 47.4637 103.382C46.9167 104.408 46.0507 105.205 45.3215 106.102C44.5239 107.089 43.8478 108.305 43.9921 109.619C44.1365 110.979 45.2531 112.111 46.4761 112.604C47.1598 112.878 47.8891 112.954 48.6107 112.84C49.4159 112.718 50.1831 112.43 50.9807 112.293C51.8011 112.148 52.6139 112.232 53.4419 112.285C54.2168 112.331 54.9916 112.331 55.6905 111.966C56.8147 111.381 57.5667 110.204 57.9162 109.011C58.3036 107.705 58.1972 106.299 57.5819 105.076C57.2705 104.453 56.8451 103.899 56.3893 103.382L56.3969 103.39Z' fill='%23CCD1C0'/%3E%3Cpath d='M39.6324 93.3325C39.4273 93.3021 39.2146 93.2869 39.0095 93.2489C38.6296 93.1805 38.1891 93.0438 37.8168 93.2337C37.6421 93.3173 37.4826 93.4616 37.3839 93.6363C37.3991 93.6135 37.4218 93.5907 37.4446 93.5679C37.4522 93.5679 37.4674 93.5679 37.4598 93.5831C37.2547 93.7654 37.2547 94.0693 37.2851 94.32C37.3231 94.601 37.4066 94.8745 37.4674 95.1556C37.5434 95.5202 37.4902 95.8848 37.4978 96.2494C37.4978 96.652 37.589 97.085 37.8928 97.3737C38.2043 97.6775 38.7056 97.7231 39.1082 97.594C39.3285 97.5256 39.526 97.3889 39.6779 97.2142C39.8451 97.0243 39.9742 96.7964 40.1413 96.5989C40.3084 96.3938 40.5287 96.2494 40.7414 96.0975C40.9389 95.9532 41.1288 95.7937 41.22 95.5658C41.3719 95.1935 41.3187 94.753 41.1592 94.3959C40.9921 94.0009 40.6731 93.6819 40.2781 93.5072C40.073 93.416 39.8603 93.3704 39.64 93.34L39.6324 93.3325Z' fill='%23CCD1C0'/%3E%3Cpath d='M68.3989 154.528C68.0191 149.15 64.6767 144.106 59.6935 142.579C56.6018 141.63 53.3354 142.169 50.1678 142.04C43.3387 141.759 43.2248 137.991 38.0365 135.621C37.8466 135.53 37.6491 135.454 37.4516 135.378C37.4516 135.393 37.4364 135.408 37.4288 135.423C37.1553 136.016 36.8363 136.593 36.5324 137.178C35.8792 138.416 35.2259 139.647 34.5878 140.885C34.3067 141.432 34.0333 141.979 33.7522 142.526C33.6838 142.891 33.6155 143.255 33.5547 143.62C33.5623 143.871 33.5775 144.129 33.6003 144.379C33.737 145.876 33.9269 147.372 34.0636 148.869C34.2004 150.358 34.2763 151.854 34.1852 153.343C34.17 153.556 34.1548 153.776 34.1396 153.989C34.1396 154.034 34.0788 154.224 34.1776 154.247C34.2763 154.27 34.3751 154.285 34.4738 154.308C34.8612 154.391 35.2563 154.475 35.6437 154.551C36.4565 154.718 37.2617 154.878 38.0745 155.037C38.5531 155.128 39.0316 155.219 39.5102 155.303C39.5785 155.121 39.6697 154.946 39.7761 154.779C41.4472 152.097 50.5932 147.228 56.1081 156.572C56.1613 156.663 56.2144 156.754 56.2676 156.853C56.8601 156.845 57.4526 156.83 58.0451 156.807C61.4635 156.67 64.8666 156.336 68.2622 155.918C68.3153 155.918 68.3761 155.903 68.4293 155.895C68.4445 155.44 68.4293 154.976 68.3989 154.528Z' fill='%23CCD1C0'/%3E%3Cpath d='M69.4402 88.0835C68.3007 87.5594 66.9866 87.5594 65.756 87.5822C65.1103 87.5898 64.4722 87.6125 63.8265 87.5822C62.9985 87.5518 62.1705 87.4682 61.3425 87.3695C60.5145 87.2783 59.6866 87.172 58.8586 87.1036C58.3192 87.058 57.7723 87.0352 57.233 86.9972C56.7468 86.9593 56.253 86.9061 55.7972 86.7466C55.4402 86.625 55.0604 86.4199 54.9237 86.0477C54.711 85.911 54.4907 85.7818 54.2628 85.6603C53.8906 85.4628 52.9182 84.9766 52.7283 85.6603C52.4549 86.6554 53.4804 87.2555 54.2172 87.6277C54.673 87.8632 55.144 88.0607 55.5997 88.2962C56.0555 88.5317 56.4657 88.8279 56.8607 89.147C57.438 89.6104 57.9774 90.1117 58.5471 90.5827C59.1168 91.0613 59.7169 91.4639 60.3702 91.8133C61.7072 92.5349 63.1277 93.1199 64.3887 93.9858C64.9584 94.3732 65.4749 94.8214 66.075 95.1633C66.5992 95.4671 67.1841 95.7178 67.7918 95.771C68.3919 95.8241 68.9768 95.6798 69.4706 95.338C69.9795 94.9885 70.3897 94.5024 70.6784 93.9554C71.1873 92.9679 71.3924 91.7829 71.2405 90.689C71.1645 90.1573 71.005 89.6256 70.7088 89.1698C70.3973 88.6836 69.9567 88.319 69.4402 88.0835Z' fill='%23CCD1C0'/%3E%3Cpath d='M79.1558 128.951C79.1254 128.594 79.0039 128.253 78.8899 127.911C78.8899 127.812 78.8899 127.713 78.8899 127.622C78.8899 127.47 78.814 127.379 78.7076 127.333C78.5481 126.726 78.5025 126.103 78.5405 125.472C76.8238 125.837 75.0994 126.148 73.3674 126.407C66.3713 127.463 59.2383 127.706 52.1738 127.03C48.6947 126.695 45.2384 126.148 41.8656 125.305C41.2655 125.153 40.6654 124.994 40.0729 124.827C40.2324 125.898 40.2932 126.984 40.2476 128.07C39.9969 128.518 39.8526 128.989 39.7235 129.476C39.6095 129.893 39.4652 130.281 39.2905 130.661C39.2981 130.653 39.3133 130.645 39.3209 130.638C39.3588 130.607 39.4196 130.645 39.3968 130.691C38.9562 131.504 38.6372 132.362 38.3257 133.221C38.7815 133.19 39.2373 133.198 39.6855 133.266C40.749 133.433 41.4858 134.041 42.1847 134.732C42.8455 135.393 43.5368 136.062 44.5167 136.343C45.1472 136.525 45.8385 136.571 46.4994 136.586C47.183 136.601 47.8667 136.571 48.5503 136.502C49.9709 136.365 51.3686 136.107 52.7663 135.879C54.1184 135.667 55.4782 135.545 56.8379 135.393C59.8005 135.059 62.8162 134.641 65.8091 134.937C67.9741 135.158 70.1086 135.689 72.0989 136.472C75.4792 137.809 85.9469 146.453 85.9621 146.499C85.9621 146.408 85.9773 146.332 85.9849 146.248V146.187C86.1216 144.721 86.3191 143.278 86.7825 141.88C86.7521 141.804 86.7293 141.736 86.6989 141.66C85.5899 138.857 79.3229 130.63 79.1862 128.951H79.1558Z' fill='%23BBB99D'/%3E%3Cpath d='M42.709 77.9121C42.671 77.8893 42.6331 77.8665 42.5951 77.8361C42.5571 77.8133 42.5267 77.7905 42.4887 77.7602C42.4584 77.745 42.4356 77.7222 42.4052 77.707C42.3596 77.6766 42.3216 77.6462 42.2836 77.6158C42.2684 77.6082 42.2532 77.593 42.238 77.5778C42.0102 77.4107 41.7975 77.236 41.5848 77.0461C43.7801 85.2501 65.1485 88.2126 78.6547 84.9614C81.1615 84.3537 85.1419 82.9788 86.57 92.2311C86.2966 87.5214 86.5472 77.4563 86.5396 77.4031C85.6964 77.7374 84.1544 77.8513 83.1593 78.0716C83.1289 78.0488 83.0985 78.026 83.0681 77.9956C83.0833 78.026 83.0909 78.0488 83.0985 78.0868C82.8023 78.14 82.6351 78.0868 82.6959 77.7981C82.6959 77.7753 82.7035 77.7601 82.7111 77.745C82.0274 77.3196 81.207 77.0613 80.4018 76.8334C77.576 76.0282 74.34 75.3293 70.8989 74.7976C70.9293 74.2735 70.8989 73.7493 70.8305 73.2328C70.6254 71.5312 70.124 69.7613 69.1517 68.2724C69.0681 68.1432 68.8858 68.0749 68.7263 68.1205C66.4702 68.7585 64.4192 69.146 62.5733 69.3283C62.3303 69.5713 62.072 69.8068 61.7985 70.0271C61.3807 70.3614 60.9401 70.6652 60.4919 70.9539C60.3856 71.0222 60.2868 71.083 60.1805 71.1514C59.6639 73.3467 58.4637 75.3293 56.709 76.765C55.5923 77.6766 54.2934 78.3679 52.926 78.816C52.0601 79.1047 51.1637 79.3326 50.2749 79.5301C49.4014 79.7276 48.5126 79.8795 47.6162 79.8339C47.1757 79.8111 46.7351 79.758 46.3021 79.644C45.8539 79.5225 45.4361 79.3478 45.0107 79.1655C44.3118 78.8616 43.6282 78.5122 42.9825 78.102C42.9141 78.0564 42.8533 78.0184 42.785 77.9728L42.7014 77.9197L42.709 77.9121Z' fill='%23BBB99D'/%3E%3Cpath d='M81.8454 69.7687C80.6224 70.9158 79.1335 71.7514 77.9789 72.982C77.394 73.6049 76.9078 74.3265 76.6799 75.1621C76.4824 75.861 76.4368 76.7042 76.961 77.2815C77.4016 77.7676 78.0852 77.9576 78.7233 78.0031C79.5741 78.0563 80.3793 77.8588 81.1845 77.6461C83.4254 77.046 85.6131 76.2712 87.8616 75.7015C89.624 75.2533 91.4395 74.8886 93.255 74.8127C93.7791 74.7899 94.3185 74.7899 94.8578 74.8279C93.5285 73.8404 92.0776 72.9668 90.5963 72.2603C89.3505 71.6754 87.9224 71.5995 86.6614 71.0677C85.5296 70.5891 84.5725 69.7687 83.4862 69.199C83.2051 69.0547 82.9088 68.9256 82.6126 68.8116C82.4227 69.1762 82.134 69.5029 81.8378 69.7763L81.8454 69.7687Z' fill='%233B754B'/%3E%3Cpath d='M65.9916 71.5995C63.5532 72.6174 57.8864 75.7319 59.5499 78.231C63.5228 84.1941 76.6796 67.9912 76.7479 67.9305C76.1782 67.9077 75.6161 67.8849 75.054 67.8469C74.7273 67.8241 74.3931 67.7937 74.0664 67.7558C72.9042 67.619 71.7192 67.262 70.6557 66.8518C70.6709 69.2978 68.1565 70.6955 65.9916 71.5995Z' fill='%233B754B'/%3E%3Cpath d='M84.3512 69.708C84.5335 70.3461 84.4955 70.9842 84.5335 71.6375C84.5639 72.2148 84.6323 72.8073 84.8677 73.339C85.0804 73.8176 85.4299 74.2278 85.9008 74.4709C86.5541 74.8127 87.3062 74.8735 88.0278 74.8735C89.9952 74.8659 91.9095 74.3569 93.8542 74.1139C92.8135 73.415 91.7196 72.7921 90.6105 72.268C89.3647 71.683 87.9366 71.6071 86.6757 71.0753C85.8477 70.7259 85.1184 70.1942 84.3588 69.708V69.7232L84.3512 69.708Z' fill='%232B6B40'/%3E%3Cpath d='M49.0291 65.7731C48.7481 65.4617 48.6417 65.3629 48.4746 64.8312C48.2088 63.9728 47.9429 63.7297 48.5202 63.5094C47.9201 63.4031 47.5934 64.3526 47.4567 66.001C47.2896 68.128 48.1556 68.3103 48.2695 68.3407C48.3075 68.3483 48.3075 67.8469 48.2923 67.1632C48.0492 67.0721 49.2039 65.9706 49.0291 65.7731Z' fill='%23CCD1C0'/%3E%3Cpath d='M9.9547 84.1183C9.82556 84.2778 6.45282 87.2784 6.45282 87.2784C6.45282 87.2784 12.8945 94.9354 16.723 91.2133C20.5515 87.4911 9.9547 84.1183 9.9547 84.1183Z' fill='%239EA58E'/%3E%3Cpath d='M12.7351 84.103L6.62769 86.9288C6.62769 86.9288 12.1046 92.8616 15.014 90.727C17.9234 88.5924 12.7275 84.103 12.7275 84.103H12.7351Z' fill='%23676D54'/%3E%3Cpath d='M14.3741 74.0526C14.1235 74.1134 8.5174 74.554 8.5174 74.554C8.5174 74.554 9.14028 87.0043 15.7415 86.1915C22.3426 85.3787 14.3741 74.0526 14.3741 74.0526Z' fill='%239EA58E'/%3E%3Cpath d='M14.7079 73.9617C14.4572 74.0224 8.85114 74.463 8.85114 74.463C8.85114 74.463 9.47402 86.9133 16.0752 86.1005C22.6764 85.2877 14.7079 73.9617 14.7079 73.9617Z' fill='%23676D54'/%3E%3Cpath d='M19.4263 68.1281L13.0758 68.6902C13.0758 68.6902 11.9288 71.3337 11.6325 74.5545H17.3601V84.8095H17.0562C23.9689 87.2023 19.4187 68.1356 19.4187 68.1356L19.4263 68.1281Z' fill='%239EA58E'/%3E%3Cpath d='M19.8134 68.1278L13.4629 68.6899C13.4629 68.6899 8.47977 80.1755 16.5926 84.4294C24.7055 88.6833 19.8058 68.1278 19.8058 68.1278H19.8134Z' fill='%23676D54'/%3E%3Cpath d='M81.2751 131.078C81.1156 129.909 80.8193 128.837 80.1509 127.804C79.8318 127.303 79.4748 126.817 79.2393 126.277C78.9583 125.639 79.0266 124.979 79.2089 124.325C79.3684 123.748 79.5507 123.216 79.5811 122.624C79.6191 121.963 79.5659 121.325 79.8698 120.709C80.2496 119.95 80.8801 119.312 81.1688 118.514C81.9056 116.516 79.0418 117.944 76.7401 118.468C76.0944 118.613 75.5247 118.605 74.8714 118.484C74.2486 118.362 73.6484 118.241 73.0027 118.294C72.3798 118.347 71.7645 118.506 71.1568 118.613C70.4276 118.742 69.7135 118.772 68.9691 118.742C67.4878 118.689 66.0142 118.681 64.5633 118.962C63.9024 119.091 63.2263 119.296 62.5427 119.304C61.8514 119.312 61.1601 119.061 60.5069 118.901C59.1395 118.56 57.643 118.613 56.2301 118.62C54.4526 118.62 52.6827 118.658 50.9051 118.605C49.986 118.575 49.082 118.59 48.1705 118.674C47.2741 118.757 46.4005 118.848 45.5345 118.598C44.7901 118.385 44.0685 117.99 43.4228 117.603C42.8682 117.276 42.3593 116.98 41.6832 116.919C40.992 116.858 40.3539 117.238 39.7386 117.451C38.9714 117.716 38.2573 117.489 37.6496 117.04C37.1938 116.699 35.9328 117.458 37.1862 120.041C37.4673 120.618 37.642 121.089 37.6724 121.735C37.6876 122.153 37.68 122.578 37.7559 122.996C37.8395 123.459 38.0218 123.885 38.2421 124.31C38.6827 125.153 39.2372 125.958 39.374 126.908C39.5183 127.873 38.827 128.693 38.5839 129.597C38.4776 130 38.5384 130.41 38.47 130.812C38.3105 131.754 36.4874 132.073 37.7408 133.091C37.7408 133.091 39.4195 132.028 40.9084 133.198C41.8503 133.935 42.0023 134.269 43.681 134.307C46.0663 134.36 48.8465 134.96 52.2421 134.755C53.6094 134.671 54.9312 134.375 56.3137 134.383C57.6354 134.383 58.904 134.816 60.2258 134.785C61.5703 134.755 62.8617 134.254 64.1759 134.048C71.4683 132.894 67.7841 134.451 73.0863 133.251C74.3701 132.962 75.5247 132.324 76.892 132.4C77.5225 132.438 78.0923 132.552 78.7076 132.37C78.981 132.286 79.2241 132.165 79.5128 132.134C80.0673 132.081 81.4574 132.544 81.2599 131.063L81.2751 131.078Z' fill='%233E8E5B'/%3E%3Cpath d='M80.158 127.812C79.839 127.311 79.482 126.824 79.2465 126.285C78.9654 125.647 79.0338 124.986 79.2161 124.333C79.3756 123.756 79.5579 123.224 79.5883 122.631C79.6263 121.97 79.5731 121.332 79.877 120.717C80.2568 119.957 80.8873 119.319 81.1759 118.522C81.9128 116.524 79.049 117.952 76.7473 118.476C76.6713 118.491 76.5878 118.507 76.5118 118.522C76.3979 118.894 76.2308 119.251 76.0029 119.57C75.5547 120.208 74.7799 120.793 73.8835 120.702C73.177 120.633 72.7517 120.041 72.5997 119.471C72.5086 119.114 72.4782 118.734 72.5314 118.362C72.068 118.431 71.6122 118.544 71.1564 118.628C70.5411 118.734 69.941 118.772 69.3181 118.765C69.3181 118.902 69.3029 119.038 69.2802 119.183C69.0751 120.368 68.2471 121.408 67.2899 122.213C66.4391 122.928 65.4364 123.55 64.335 123.93C63.0512 124.371 61.6839 124.546 60.3165 124.591C58.9188 124.637 57.5211 124.576 56.1234 124.622C55.3789 124.644 54.6269 124.599 53.8825 124.584C53.1153 124.568 52.3632 124.599 51.6112 124.72C50.1679 124.948 50.4034 126.24 45.3442 125.191C36.0919 123.277 38.6595 124.485 38.6595 124.485C38.5228 124.454 38.386 124.416 38.2569 124.371C38.6975 125.206 39.2368 126.004 39.3736 126.938C39.5179 127.903 38.8266 128.724 38.5835 129.627C38.4772 130.03 38.538 130.44 38.4696 130.843C38.3936 131.283 37.953 131.587 37.6416 131.891C39.3356 131.511 41.1663 131.663 42.8754 131.846C43.6503 131.929 44.4327 132.036 45.2075 132.111C46.4761 132.241 47.7371 132.377 48.9905 132.605C51.239 133.008 53.4267 133.623 55.5157 134.451C55.7815 134.436 56.0474 134.421 56.3209 134.421C56.6779 134.421 57.0273 134.451 57.3844 134.497C57.635 134.056 57.9845 133.654 58.3947 133.342C59.0404 132.841 59.9291 132.453 60.8027 132.674C61.6459 132.894 62.3903 133.486 62.8917 134.109C62.9448 134.178 62.998 134.246 63.0512 134.314C63.431 134.223 63.8108 134.14 64.1906 134.079C71.4831 132.924 67.7989 134.482 73.1011 133.281C74.3849 132.993 75.5395 132.355 76.9068 132.431C77.5373 132.468 78.107 132.582 78.7223 132.4C78.9958 132.317 79.2389 132.195 79.5275 132.165C80.0821 132.111 81.4722 132.575 81.2747 131.094C81.1152 129.924 80.8189 128.853 80.1504 127.827L80.158 127.812Z' fill='%233B754B'/%3E%3Cpath d='M15.9472 89.9673L10.0829 92.2462L8.96625 94.1756C8.96625 94.1756 12.9999 101.757 15.8789 99.1968C18.7579 96.6368 15.9472 89.9597 15.9472 89.9597V89.9673Z' fill='%239EA58E'/%3E%3Cpath d='M16.1373 89.7698L10.273 92.0487L9.15631 93.9857C9.15631 93.9857 13.1975 101.567 16.0689 99.0069C18.9479 96.4469 16.1373 89.7698 16.1373 89.7698Z' fill='%23676D54'/%3E%3Cpath d='M37.02 91.1599C37.02 91.1599 36.9896 91.2358 36.9668 91.2738C36.9668 91.2738 36.9618 91.2738 36.9516 91.2738C36.8833 91.4106 36.8225 91.5549 36.7541 91.6916C36.6098 92.0107 36.4731 92.3297 36.3515 92.6639L36.23 92.9602C36.0856 93.3248 35.9489 93.697 35.8122 94.0769C35.7286 94.3199 35.6375 94.5782 35.5539 94.8289L35.5311 94.8897L35.1665 95.8848C35.0601 96.1962 34.9386 96.5153 34.8171 96.8191C34.7335 97.0318 34.6423 97.2445 34.5436 97.4496C34.6044 97.3053 34.6651 97.161 34.7259 97.0242C33.8903 98.8549 32.8648 100.587 31.8925 102.349C31.1253 103.724 30.3884 105.137 29.8035 106.596C29.8339 106.611 29.8643 106.634 29.8871 106.664C29.6972 107.15 29.53 107.636 29.3705 108.13C29.3553 108.183 29.3325 108.236 29.3098 108.29C29.1578 108.753 29.0287 109.216 28.8768 109.672C28.8236 109.839 28.7628 110.006 28.7096 110.173C28.6261 110.401 28.5425 110.644 28.4362 110.865C28.4362 110.895 28.421 110.933 28.3982 110.956C28.3298 111.115 28.2691 111.26 28.1855 111.412C28.1399 111.518 28.0868 111.624 28.026 111.723C27.9804 111.807 27.9424 111.883 27.8893 111.959L27.6766 112.293C27.5854 112.429 27.4866 112.551 27.3879 112.688C27.0992 113.075 26.7802 113.447 26.4688 113.82C26.408 113.888 26.3472 113.964 26.294 114.04C25.9902 114.405 25.7015 114.777 25.4508 115.179C25.3749 115.301 25.2989 115.43 25.2381 115.559C25.2153 115.574 25.2078 115.605 25.2002 115.635C25.1926 115.65 25.185 115.658 25.1774 115.666C25.1774 115.666 25.1622 115.696 25.1622 115.711C24.676 116.569 24.1899 117.443 23.6809 118.294C23.6733 118.309 23.6657 118.317 23.6581 118.324C23.6353 118.37 23.5973 118.431 23.567 118.476C23.567 118.476 23.5644 118.481 23.5594 118.491C23.2783 118.924 22.9896 119.388 22.6782 119.851C22.549 120.064 22.4047 120.269 22.2604 120.466C21.6831 121.287 21.0526 122.077 20.3537 122.806C20.2322 122.935 20.1106 123.057 19.9739 123.171C19.2371 123.854 18.4167 123.915 17.5659 123.763C16.5252 123.588 15.4465 123.072 14.4438 122.988L14.3375 122.966C14.3375 122.966 14.3223 122.966 14.3071 122.966C14.3071 122.966 14.2843 122.966 14.2691 122.95C12.2105 122.472 10.1671 121.894 8.3288 120.915C7.78947 120.633 7.27291 120.307 6.77915 119.95C6.63482 119.783 6.51328 119.631 6.39173 119.433C6.36135 119.388 6.33857 119.335 6.30819 119.289C6.22463 119.137 6.14865 118.978 6.08028 118.826C6.00432 118.666 5.92836 118.514 5.86759 118.347C4.24198 114.8 4.53066 111.465 5.60174 108.191C6.53608 105.319 8.07813 102.478 9.46825 99.5538C9.87845 98.6802 10.2886 97.799 10.6608 96.9027V96.8875C10.7064 96.7963 10.7444 96.7052 10.7824 96.6064C10.79 96.5912 10.7976 96.5836 10.7976 96.5684C11.6636 94.4415 12.4308 92.2158 13.1828 89.9673L13.8285 88.0074C14.1855 86.9211 14.5426 85.8349 14.9148 84.7486L15.5756 82.8267C15.5756 82.8267 15.5832 82.8267 15.5756 82.8267C15.644 82.614 15.72 82.4089 15.8112 82.2038C15.8871 81.9987 15.9783 81.8012 16.0618 81.5885C16.4113 80.7909 16.8367 80.0237 17.3304 79.2945C17.338 79.2793 17.3532 79.2793 17.3532 79.2641C17.5963 78.8995 17.8622 78.5348 18.1356 78.1854C18.2116 78.1018 18.2723 78.0183 18.3407 77.9347C18.4015 77.8588 18.4698 77.7676 18.5458 77.6916C18.6825 77.5321 18.8193 77.3802 18.956 77.2283C19.4118 76.7269 19.898 76.2559 20.4069 75.8154C20.5133 75.7166 20.6272 75.6179 20.7563 75.5191C20.9083 75.3824 21.083 75.2532 21.2425 75.1317C21.3261 75.0557 21.4248 74.995 21.516 74.9266C21.7059 74.7823 21.8958 74.6455 22.1009 74.5088C22.1389 74.4632 22.1996 74.4252 22.2604 74.3949C22.4883 74.2353 22.7238 74.091 22.9592 73.9543C23.2555 73.772 23.5518 73.5972 23.8632 73.4377C23.886 73.4301 23.9164 73.4073 23.9392 73.3997C23.9468 73.3845 23.9544 73.3845 23.9696 73.377C23.9696 73.377 24.0227 73.3542 24.0455 73.339C24.243 73.2326 24.4405 73.1339 24.638 73.0427C24.714 73.0047 24.79 72.9668 24.8659 72.9364C25.1318 72.8072 25.4129 72.6933 25.6939 72.5793C25.7623 72.5566 25.8307 72.5262 25.899 72.5034C26.1649 72.397 26.4308 72.3135 26.7042 72.2147C26.7802 72.1919 26.8485 72.1691 26.9245 72.1464C27.0157 72.0628 27.1448 72.002 27.3043 71.9489C28.6489 72.397 29.9782 72.9744 31.2316 73.6884C31.7937 73.9923 32.3331 74.3341 32.8648 74.6911C33.389 75.0481 33.8979 75.4507 34.3613 75.8685C34.4752 75.9597 34.5816 76.066 34.6879 76.1648C34.7031 76.1724 34.7107 76.1876 34.7259 76.2028C35.2273 76.6586 35.6982 77.1371 36.1008 77.6613C36.1312 77.6992 36.154 77.7296 36.1844 77.7752C36.2072 77.7904 36.2148 77.8056 36.23 77.8284C38.0151 80.2212 38.7899 83.2293 38.5316 86.1919C38.5316 86.2147 38.5316 86.2299 38.5316 86.2451C38.3797 87.9466 37.886 89.6254 37.0504 91.1599H37.02Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M38.4707 86.397C38.4859 86.3286 38.4935 86.2603 38.5011 86.1919C38.5163 86.1083 38.5315 86.0172 38.5315 85.9336C38.5846 85.531 38.6074 85.136 38.615 84.7258C38.615 84.665 38.615 84.6043 38.615 84.5359C38.615 84.3536 38.615 84.1789 38.5922 83.9966V83.8371C38.577 83.6699 38.5619 83.4952 38.5467 83.3281C38.5087 83.0318 38.4631 82.7356 38.4023 82.4393C38.3795 82.3026 38.3492 82.1583 38.3036 82.0139C38.296 81.9532 38.2808 81.8924 38.2656 81.8316V81.824C38.2428 81.7253 38.2124 81.6341 38.1896 81.543C38.1592 81.4442 38.1213 81.3531 38.0985 81.2543C38.0985 81.2543 38.0909 81.2239 38.0833 81.2087C38.0073 80.9884 37.9238 80.7757 37.8326 80.5706C37.4224 79.5831 36.8679 78.6564 36.1994 77.8208C36.1918 77.798 36.1766 77.7752 36.1538 77.7676C36.1234 77.722 36.1006 77.6917 36.0703 77.6537C35.7816 77.3042 35.4777 76.9624 35.1587 76.6358C34.9992 76.4762 34.8321 76.3091 34.6649 76.1572C34.4978 76.0053 34.3307 75.8533 34.156 75.709C34.08 75.6406 33.9965 75.5723 33.9205 75.5115C33.29 74.995 32.6216 74.5316 31.9227 74.1062C31.7328 73.9847 31.5277 73.8707 31.3378 73.7568C31.1403 73.6428 30.9352 73.5365 30.7301 73.4301C30.449 73.2858 30.168 73.1415 29.8869 73.0123C29.3248 72.7389 28.7474 72.4958 28.1625 72.2679C27.8663 72.154 27.5776 72.0552 27.2813 71.9489C27.1218 72.002 26.9927 72.0628 26.9015 72.1464C26.8256 72.1691 26.7572 72.1919 26.6813 72.2147C26.4078 72.3059 26.1419 72.397 25.876 72.5034C25.8077 72.5262 25.7393 72.5566 25.6709 72.5793C25.4203 72.6781 25.1848 72.7844 24.9417 72.8832C24.9037 72.8984 24.8809 72.9136 24.8429 72.9288C24.767 72.9592 24.6986 72.9971 24.6151 73.0351C24.4935 73.0883 24.372 73.1415 24.258 73.2022C24.1821 73.2402 24.0985 73.2858 24.0226 73.3314C23.9998 73.339 23.9694 73.3542 23.9466 73.3694C23.9314 73.3694 23.9238 73.377 23.9086 73.3921C23.8858 73.3997 23.8554 73.4225 23.8326 73.4301C23.5288 73.5896 23.2325 73.7644 22.9287 73.9467C22.6932 74.091 22.4577 74.2353 22.2298 74.3873C22.169 74.4176 22.1159 74.4556 22.0703 74.5012C21.9184 74.5924 21.7816 74.6911 21.6449 74.7975C21.5917 74.843 21.5309 74.8734 21.4854 74.919C21.3942 74.9874 21.3031 75.0481 21.2119 75.1241C21.0524 75.2532 20.8853 75.3748 20.7257 75.5115C20.6042 75.6103 20.4903 75.709 20.3763 75.8078C19.8674 76.2484 19.3812 76.7193 18.9254 77.2207C18.7811 77.365 18.6444 77.5245 18.5152 77.6841C18.4469 77.76 18.3785 77.8512 18.3101 77.9271C18.2418 78.0107 18.181 78.0943 18.105 78.1778C17.8316 78.5272 17.5657 78.8919 17.3226 79.2565C17.3226 79.2717 17.3074 79.2793 17.2998 79.2869C16.8213 80.0237 16.3883 80.7833 16.0312 81.581C15.9477 81.7861 15.8565 81.9836 15.7806 82.1962C15.697 82.4014 15.6211 82.614 15.5451 82.8191L14.8842 84.741C14.5196 85.8273 14.1625 86.9135 13.7979 87.9998L13.1523 89.9597C13.0535 90.3775 12.9471 90.7953 12.8256 91.2131C12.3015 93.1349 11.5191 95.0036 10.6303 96.8723V96.8875C10.3796 97.4116 10.1213 97.9282 9.86305 98.4523C9.74911 98.6878 9.63517 98.9309 9.51363 99.1588C8.02476 102.129 6.47511 105.099 5.57115 108.176C4.88749 110.492 4.57603 112.87 4.91786 115.369H4.94065C5.13055 116.258 5.39643 117.124 5.70788 117.982C5.74586 118.096 5.79144 118.218 5.82942 118.332C5.89779 118.499 5.96616 118.658 6.04212 118.818C6.11808 118.978 6.19404 119.129 6.2776 119.281C6.30799 119.327 6.33079 119.38 6.36117 119.426C6.94609 120.018 7.59936 120.504 8.29822 120.907C8.85275 121.234 9.43765 121.515 10.0454 121.75C11.4127 122.289 12.8484 122.639 14.2765 122.966C14.2917 122.966 14.2993 122.981 14.3069 122.966C15.4767 123.079 16.6769 123.649 17.8012 123.763C18.5456 123.847 19.2673 123.725 19.9357 123.163C20.0269 123.087 20.1256 123.011 20.2168 122.92C20.2548 122.897 20.27 122.874 20.3004 122.852C20.3307 122.821 20.3687 122.791 20.3915 122.753C20.5207 122.639 20.6346 122.517 20.7561 122.388C20.9384 122.191 21.1207 121.978 21.2955 121.75C21.6221 121.332 21.926 120.892 22.2222 120.444C22.7008 119.714 23.149 118.97 23.6199 118.301C23.6275 118.286 23.6351 118.279 23.6427 118.271C23.6731 118.598 23.7339 118.924 23.8099 119.236C23.8858 119.555 23.977 119.874 24.0757 120.185C24.1593 119.373 24.258 118.545 24.4403 117.747C24.4783 117.572 24.5239 117.39 24.5771 117.208C24.6226 117.033 24.6682 116.858 24.7366 116.683C24.7898 116.509 24.8505 116.334 24.9189 116.167C24.9873 116.007 25.048 115.855 25.124 115.696C25.124 115.681 25.1392 115.673 25.1392 115.658C25.1392 115.658 25.1544 115.628 25.162 115.62C25.162 115.59 25.1848 115.559 25.2 115.544C25.2607 115.407 25.3291 115.286 25.4127 115.164C25.5114 114.974 25.6254 114.792 25.7545 114.617C25.99 114.298 26.2559 113.987 26.5141 113.683C26.7952 113.349 27.0914 113.014 27.3573 112.673C27.4561 112.536 27.5548 112.414 27.646 112.278L27.8587 111.943C27.9118 111.867 27.9574 111.791 27.9954 111.708C28.0562 111.602 28.1094 111.503 28.1549 111.396C28.2385 111.244 28.2993 111.093 28.3676 110.941C28.3676 110.941 28.3701 110.936 28.3752 110.925C28.3752 110.925 28.3904 110.872 28.398 110.842C28.5043 110.614 28.5879 110.379 28.6715 110.151C28.7247 110.006 28.7778 109.862 28.8234 109.725L28.8386 109.649C28.8538 109.535 28.8842 109.421 28.907 109.315C28.9449 109.14 28.9905 108.95 29.0437 108.776C29.0437 108.776 29.0513 108.776 29.0437 108.76C29.2336 108.016 29.4767 107.294 29.7653 106.58C30.3427 105.122 31.0871 103.717 31.8543 102.334C32.8267 100.572 33.8521 98.8397 34.6877 97.009C34.7029 96.9786 34.7105 96.9407 34.7257 96.9179C34.7485 96.8875 34.7637 96.8419 34.7789 96.8039C34.8017 96.7431 34.8093 96.69 34.8321 96.6292C35.1055 95.7632 35.4246 94.9124 35.7664 94.0693C35.7968 93.9933 35.8348 93.9021 35.8652 93.8262L35.888 93.7578C36.2526 92.8918 36.6324 92.0259 36.9818 91.1523C37.0958 90.894 37.1869 90.6357 37.2933 90.3775C37.3085 90.3395 37.3237 90.3167 37.3312 90.2787C37.7035 89.2912 38.0377 88.2885 38.2656 87.2478C38.3264 86.9667 38.3871 86.6781 38.4327 86.3818L38.4707 86.397ZM15.5375 100.298C23.149 92.8235 26.2786 101.141 22.64 107.302C22.245 107.978 21.7664 108.631 21.1891 109.231C19.2597 111.305 16.3047 112.787 12.2331 112.703C8.81476 107.819 12.3394 103.398 15.5375 100.298Z' fill='%23C2C2AC'/%3E%3Cpath d='M37.3697 90.2937C37.3697 90.2937 37.3469 90.3621 37.3317 90.3925C37.2102 90.6887 37.0734 90.9926 36.9443 91.2812C36.8759 91.418 36.8152 91.5623 36.7468 91.699C36.6025 92.0181 36.4733 92.3371 36.3442 92.6713L36.2227 92.9676C36.1239 93.2335 36.0251 93.5069 35.9264 93.7728L35.9036 93.8412C35.7745 94.1678 35.6529 94.502 35.539 94.8363L35.5162 94.8971L35.1516 95.8922C35.0604 96.1428 34.9617 96.4011 34.8553 96.6518C34.8173 96.743 34.7793 96.8417 34.7414 96.9405C34.7262 96.9708 34.7186 97.0088 34.7034 97.0316C33.8678 98.8623 32.8423 100.594 31.87 102.357C31.1027 103.732 30.3659 105.144 29.781 106.603C29.8114 106.618 29.8418 106.641 29.8646 106.671C29.6747 107.157 29.5075 107.644 29.348 108.137C29.3328 108.191 29.31 108.244 29.2872 108.297C29.0517 109.398 28.7479 110.242 28.3985 110.956C28.3985 110.956 28.3959 110.961 28.3909 110.971C27.8743 112.012 27.2362 112.802 26.5374 113.721C26.5146 113.759 26.4842 113.797 26.4538 113.842C26.393 113.911 26.3323 113.987 26.2791 114.062C25.9221 114.533 25.5575 115.058 25.1852 115.665C25.1776 115.681 25.17 115.688 25.1625 115.696C25.1625 115.696 25.1472 115.726 25.1472 115.741C25.0713 115.893 25.0105 116.053 24.9422 116.212C24.8738 116.387 24.813 116.554 24.7599 116.729C24.6991 116.904 24.6535 117.078 24.6003 117.253C24.5471 117.435 24.5016 117.61 24.4636 117.792C24.2889 118.59 24.1825 119.418 24.099 120.231C24.0078 119.919 23.9091 119.608 23.8331 119.281C23.7647 118.97 23.704 118.643 23.666 118.324C23.6204 118.385 23.5824 118.438 23.552 118.499C23.552 118.499 23.5495 118.504 23.5444 118.514C23.2634 118.947 22.9747 119.41 22.6633 119.874C22.2455 120.527 21.8049 121.195 21.3187 121.796C21.144 122.023 20.9617 122.229 20.7794 122.434C20.6654 122.563 20.5439 122.684 20.4148 122.798C20.354 122.851 20.2932 122.912 20.24 122.958C20.1489 123.049 20.0577 123.125 19.959 123.201C19.2601 123.626 18.5461 123.786 17.8244 123.801C17.7333 123.801 17.6421 123.801 17.551 123.801C16.4799 123.748 15.4012 123.383 14.3301 123.003C14.3225 123.003 14.3149 123.003 14.2997 123.003C14.2997 123.003 14.277 123.003 14.2618 122.988C13.3578 122.677 12.4539 122.365 11.5575 122.236C12.5906 120.094 13.7376 116.63 15.6595 115.24C16.1077 115.042 15.6291 114.458 16.0849 114.602C19.0702 115.43 21.6681 119.198 22.5569 115.901C22.9139 113.219 25.565 111.822 26.431 109.444C26.6589 108.456 26.8184 107.233 26.8716 105.919C27.1451 98.8851 24.1293 89.2074 9.4533 99.5916C9.40013 99.6295 9.35457 99.6599 9.30139 99.6979C9.38495 99.5384 9.46091 99.3713 9.53687 99.2117C9.65842 98.9839 9.77235 98.7408 9.8863 98.5053C10.1826 97.8976 10.4788 97.2747 10.7675 96.6442C10.7751 96.629 10.7827 96.6214 10.7827 96.6062C11.5803 94.8591 12.3171 93.0739 12.8413 91.2584C12.9552 90.8406 13.0616 90.4304 13.1679 90.005L13.8136 88.0452C14.1706 86.9589 14.5276 85.8727 14.8999 84.7864L15.5607 82.8645C15.5607 82.8645 15.5683 82.8645 15.5607 82.8645C15.6291 82.6518 15.7051 82.4467 15.7962 82.2416V82.2264C16.7609 79.7045 18.4701 77.4484 20.6123 75.6632C20.6578 75.6253 20.6882 75.5949 20.7338 75.5569C20.8857 75.4202 21.0605 75.291 21.22 75.1695C21.3567 75.0479 21.4934 74.9492 21.6529 74.8428C21.7821 74.7365 21.9264 74.6377 22.0784 74.5466C22.1163 74.501 22.1771 74.463 22.2379 74.4326C22.4658 74.2731 22.7012 74.1288 22.9367 73.9921C23.233 73.8097 23.5292 73.635 23.8407 73.4755C23.8787 73.4527 23.9091 73.4375 23.947 73.4147L24.2661 73.2552C24.38 73.1945 24.5016 73.1337 24.6231 73.0881C24.6991 73.0501 24.775 73.0121 24.851 72.9818C24.889 72.9666 24.9118 72.9514 24.9498 72.9362C25.1928 72.8374 25.4283 72.7311 25.679 72.6323C25.7474 72.6095 25.8157 72.5791 25.8841 72.5564C26.15 72.45 26.4158 72.3665 26.6893 72.2677C26.7653 72.2449 26.8336 72.2221 26.9096 72.1993C27.0007 72.1158 27.1299 72.055 27.2894 72.0018C27.5857 72.1082 27.8743 72.2069 28.1706 72.3209C28.7555 72.5488 29.3328 72.7918 29.8949 73.0653C30.176 73.1945 30.4571 73.3388 30.7381 73.4831C30.8976 73.5667 31.0572 73.6578 31.2167 73.7414L31.3382 73.8173C31.5281 73.9313 31.7332 74.0452 31.9231 74.1668C32.622 74.5846 33.2905 75.0555 33.921 75.5721C33.9969 75.6329 34.0805 75.7012 34.1565 75.7696C34.2248 75.8152 34.2856 75.8683 34.3388 75.9215C34.4527 76.0127 34.559 76.119 34.6654 76.2178C34.8325 76.3697 34.9996 76.5368 35.1592 76.6963C35.4782 77.023 35.7821 77.3648 36.0707 77.7142C36.1011 77.7522 36.1239 77.7826 36.1543 77.8282C36.1771 77.8434 36.1847 77.8586 36.1999 77.8814C36.8683 78.7245 37.4229 79.6513 37.8331 80.6312C37.9166 80.8363 38.0078 81.049 38.0837 81.2693C38.0837 81.2769 38.0913 81.2921 38.0989 81.3073C38.1217 81.406 38.1597 81.4972 38.1901 81.6035C38.2129 81.6947 38.2508 81.7935 38.2736 81.8846C38.2888 81.953 38.304 82.0061 38.3116 82.0745C38.3572 82.2188 38.3876 82.3632 38.4104 82.4999C38.4712 82.7962 38.5167 83.0924 38.5547 83.3887C38.5775 83.609 38.5927 83.8369 38.6003 84.0496C38.6155 84.2319 38.6231 84.4142 38.6231 84.5889V84.7788C38.6231 85.189 38.5927 85.584 38.5395 85.9866C38.5395 86.0702 38.5243 86.1613 38.5091 86.2449C38.5091 86.2677 38.5091 86.2829 38.5091 86.2981C38.5091 86.3512 38.5091 86.3968 38.4863 86.45C38.2964 87.7945 37.9014 89.0935 37.3773 90.3469L37.3697 90.2937Z' fill='%23C2C2AC'/%3E%3Cpath d='M29.8872 106.649C29.6973 107.135 29.5302 107.621 29.3707 108.115C29.3555 108.168 29.3327 108.221 29.3099 108.274C29.2416 108.419 29.1656 108.593 29.082 108.768C29.082 108.776 29.082 108.768 29.082 108.783C28.8389 109.345 28.5807 110.037 28.3908 110.492C27.9198 110.561 27.7603 109.368 27.1981 109.383C26.9627 109.391 26.712 109.398 26.4461 109.414C24.8205 109.444 22.7543 109.345 21.2047 109.231C20.7565 109.201 20.3539 109.171 20.0121 109.14C20.0121 109.14 16.7304 112.855 15.8417 111.966C14.9605 111.077 18.8194 107.963 21.6453 107.613C21.8731 107.591 22.2378 107.461 22.648 107.309C23.795 106.854 25.3371 106.079 25.5573 106.033C25.9448 105.957 26.4005 105.904 26.8867 105.897C27.9806 105.859 29.158 106.033 29.8037 106.603C29.8341 106.618 29.8645 106.641 29.8872 106.671V106.649Z' fill='%23BBB99D'/%3E%3Cpath d='M80.1889 127.812C80.394 127.615 80.9181 127.432 79.809 126.855C79.7255 126.817 79.8774 126.635 79.885 126.589C79.923 126.407 79.9078 126.247 79.8698 126.065C79.8394 125.928 79.7711 125.822 79.6799 125.738C79.6267 125.579 79.4596 125.45 79.2241 125.48C65.2241 127.447 43.6127 126.338 40.4147 124.546C39.7766 124.189 38.9486 123.847 38.2117 124.151C37.4597 124.462 37.8395 125.298 38.3029 125.685C38.3561 126.012 38.3637 126.361 38.3257 126.756C38.0294 129.787 73.694 131.314 80.2876 128.412C80.6218 128.26 80.4699 127.888 80.1889 127.812Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M38.3029 125.685C38.3485 125.966 38.3561 126.27 38.3333 126.612C38.3637 126.582 38.3941 126.544 38.4321 126.513C38.6372 126.331 38.8802 126.247 39.1233 126.141C39.3436 126.035 39.6247 125.867 39.3816 125.609C38.979 125.191 38.2649 125.191 37.9535 124.667C37.9155 124.606 37.8775 124.531 37.8471 124.455C37.642 124.842 37.9459 125.396 38.2953 125.685H38.3029Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M80.189 127.812C80.3941 127.614 80.9183 127.432 79.8092 126.855C79.7256 126.817 79.8775 126.635 79.8851 126.589C79.9231 126.407 79.9079 126.247 79.87 126.065C79.8396 125.928 79.7712 125.822 79.68 125.738C79.6269 125.579 79.4597 125.45 79.2243 125.48C70.3594 126.726 58.4408 126.733 50.0849 126.126C49.0366 126.475 47.9655 126.733 46.8793 126.938C45.0258 127.295 43.1419 127.417 41.258 127.318C40.3009 127.265 39.3437 127.181 38.4018 127.03C39.8679 129.331 62.2238 130.653 74.074 129.582C74.4082 129.05 74.9248 128.617 75.5021 128.329C76.3301 127.911 77.3328 127.706 78.2443 127.934C78.7609 128.055 79.1863 128.329 79.4901 128.701C79.7864 128.61 80.0598 128.518 80.2877 128.412C80.622 128.268 80.4777 127.888 80.189 127.812Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M80.3867 128.351C80.5766 128.177 80.4323 127.88 80.1892 127.812C80.3943 127.614 80.9185 127.432 79.8094 126.855C79.7258 126.817 79.8777 126.635 79.8853 126.589C79.9233 126.407 79.9081 126.247 79.8702 126.065C79.8398 125.928 79.7714 125.822 79.6802 125.738C79.6271 125.579 79.4599 125.45 79.2245 125.48C72.9575 126.361 65.1561 126.627 58.1751 126.483C56.8078 126.969 55.3949 127.333 53.9896 127.683C51.2701 128.359 48.4595 128.913 45.6489 128.944C53.2224 129.893 65.0346 130.258 72.9727 129.665C74.3932 127.888 78.5104 126.589 80.4019 128.336L80.3867 128.351Z' fill='%23A05A07'/%3E%3Cpath d='M79.2162 125.48C76.2612 125.898 72.9569 126.171 69.5689 126.338C69.4778 126.422 69.3942 126.506 69.3031 126.582C68.7333 127.06 68.1028 127.478 67.4572 127.865C66.7431 128.291 65.9987 128.663 65.2162 128.99C64.8516 129.141 64.4718 129.293 64.0844 129.407C63.9401 129.453 63.8033 129.491 63.659 129.529C63.6286 129.673 63.6134 129.825 63.6058 129.969C66.181 129.969 68.6802 129.924 70.9515 129.81C71.9314 129.453 72.8961 129.043 73.838 128.617C74.9319 128.124 76.0334 127.645 77.0893 127.09C77.6362 126.802 78.1983 126.506 78.6921 126.149C78.9656 125.951 79.2238 125.738 79.4897 125.541C79.4137 125.503 79.3226 125.48 79.2238 125.495L79.2162 125.48Z' fill='%23A05A07'/%3E%3Cpath d='M39.2756 127.372C38.9717 127.303 38.6527 127.463 38.4628 127.683C38.1665 128.04 38.1438 128.807 38.0298 129.24C37.9083 129.704 38.2349 130.182 38.6831 130.44C39.1313 130.699 39.6706 130.782 40.1947 130.858C54.2783 132.841 71.3775 129.559 78.7839 125.586C79.498 125.207 80.2956 124.561 80.0373 123.854C79.9917 123.725 79.9082 123.604 79.9082 123.467C79.9082 123.125 80.4171 122.882 80.3715 122.54C80.3412 122.297 80.0221 122.16 79.7562 122.191C79.4904 122.221 79.2625 122.373 79.0422 122.51C73.9375 125.723 52.7362 130.387 39.2832 127.372H39.2756Z' fill='%23D58500'/%3E%3Cpath d='M79.9079 123.475C79.9079 123.125 80.4168 122.89 80.3712 122.548C80.3409 122.305 80.0218 122.168 79.7559 122.198C79.4901 122.229 79.2622 122.381 79.0419 122.517C77.0061 123.801 72.4103 125.313 66.7663 126.475C66.5004 126.893 66.2269 127.311 65.9307 127.706C65.4065 128.405 64.8064 129.02 64.1152 129.567C63.8037 129.81 63.4923 130.045 63.1656 130.281C69.6377 129.195 75.2893 127.478 78.7836 125.602C79.4977 125.222 80.2953 124.576 80.037 123.87C79.9914 123.74 79.9079 123.619 79.9079 123.482V123.475Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M79.9079 123.475C79.9079 123.125 80.4169 122.89 80.3713 122.548C80.3409 122.305 80.0295 122.168 79.756 122.198C79.4901 122.229 79.2622 122.381 79.0419 122.517C78.2443 123.019 77.0517 123.558 75.5628 124.097C75.5476 124.097 75.5173 124.401 75.5097 124.439C75.4793 124.553 75.4413 124.66 75.4033 124.766C75.3122 124.979 75.183 125.169 75.0235 125.336C74.8716 125.495 74.6513 125.685 74.431 125.738C74.2259 125.784 73.9828 125.791 73.8764 126.019C73.8461 126.088 73.8385 126.164 73.8309 126.247C73.8081 126.414 73.7625 126.589 73.641 126.703C73.5878 126.756 73.5194 126.794 73.4435 126.787C73.3827 126.787 73.3295 126.756 73.2764 126.726C73.0865 126.604 73.0029 126.369 72.9649 126.148C72.9269 125.928 72.9117 125.7 72.8358 125.488C72.775 125.336 72.6155 125.085 72.4256 125.085C72.3496 125.085 72.266 125.146 72.1977 125.169C72.1065 125.199 72.0078 125.222 71.909 125.252C70.4429 125.655 68.9541 126.019 67.4652 126.338C65.8092 126.695 64.1532 126.999 62.482 127.265C56.9823 130.866 43.4913 132.583 39.5108 127.599C39.4653 127.539 39.4121 127.478 39.3589 127.409C39.3361 127.409 39.3133 127.402 39.283 127.394C39.169 127.364 39.0475 127.379 38.9335 127.409L38.8727 127.432C38.8727 127.432 38.8348 127.447 38.812 127.463C38.812 127.463 38.8044 127.463 38.7968 127.463C38.7816 127.463 38.7664 127.478 38.7512 127.485C38.7512 127.485 38.736 127.485 38.736 127.493C38.7208 127.501 38.7056 127.508 38.6904 127.523C38.6828 127.523 38.6753 127.531 38.6677 127.539L38.6449 127.554L38.6145 127.577C38.6145 127.577 38.6069 127.584 38.5993 127.592C38.5537 127.63 38.5157 127.668 38.4777 127.713C38.1815 128.07 38.1587 128.838 38.0448 129.271C37.9764 129.544 38.0599 129.825 38.2347 130.061C38.2499 130.083 38.2651 130.106 38.2878 130.129C38.2878 130.129 38.3182 130.175 38.341 130.19L38.3562 130.205C38.3562 130.205 38.3866 130.235 38.4018 130.25C38.4018 130.25 38.417 130.258 38.417 130.266C38.4322 130.281 38.4473 130.296 38.4625 130.311C38.4701 130.311 38.4777 130.326 38.4929 130.334C38.5081 130.342 38.5233 130.357 38.5385 130.364C38.5537 130.372 38.5689 130.387 38.5765 130.395C38.5841 130.395 38.5993 130.41 38.6069 130.418C38.6297 130.433 38.66 130.448 38.6828 130.463C40.6047 131.572 59.6258 132.567 73.3827 127.911C73.246 127.691 73.3143 127.288 73.5954 127.242C73.8613 127.204 73.9752 127.44 74.036 127.683C75.7148 127.083 77.31 126.392 78.7761 125.609C79.4901 125.229 80.2877 124.584 80.0295 123.877C79.9839 123.748 79.9003 123.627 79.9003 123.49L79.9079 123.475Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M72.8053 127.432C72.6458 127.28 72.4862 127.03 72.4483 126.809C72.4331 126.711 72.4331 126.627 72.4862 126.544C72.5546 126.43 72.5014 126.224 72.4407 126.103C72.2659 125.905 72.2128 125.647 72.2811 125.381C72.3039 125.298 72.3343 125.199 72.3799 125.1C72.1292 125.169 71.8709 125.245 71.6127 125.313C71.5291 125.434 71.4531 125.571 71.4076 125.708C71.248 126.209 71.4076 126.756 71.6431 127.204C71.8709 127.63 72.1824 127.934 72.6458 128.101C72.6609 128.101 72.6761 128.108 72.6913 128.116C73.1167 127.979 73.5269 127.842 73.9447 127.691C73.5345 127.713 73.1015 127.698 72.8129 127.417L72.8053 127.432Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M79.9072 123.475C79.9072 123.125 80.4162 122.89 80.3706 122.548C80.3402 122.305 80.0212 122.168 79.7553 122.198C79.4895 122.229 79.2616 122.381 79.0413 122.517C78.3576 122.943 77.3853 123.399 76.1851 123.862C76.3142 124.029 76.413 124.211 76.4585 124.424C76.5041 124.652 76.4813 124.872 76.4281 125.1C76.3598 125.396 76.3218 125.655 76.375 125.951C76.4205 126.194 76.4661 126.437 76.4281 126.688C76.4281 126.703 76.4281 126.711 76.4281 126.718C77.2409 126.369 78.031 125.989 78.783 125.586C79.4971 125.207 80.2947 124.561 80.0364 123.854C79.9908 123.725 79.9072 123.604 79.9072 123.467V123.475Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M38.1437 129.886C38.1437 129.407 38.5159 129.24 38.8729 129.012C39.1464 128.837 39.3743 128.549 39.2603 128.199C39.1692 127.941 38.9565 127.744 38.8729 127.485C38.8653 127.455 38.8577 127.432 38.8501 127.409C38.8349 127.409 38.8197 127.425 38.8045 127.432C38.8045 127.432 38.7969 127.432 38.7893 127.432C38.7742 127.432 38.7589 127.447 38.7437 127.455C38.7437 127.455 38.7362 127.455 38.7286 127.463C38.7134 127.47 38.6982 127.478 38.683 127.493C38.6754 127.493 38.6678 127.508 38.6602 127.508C38.6526 127.508 38.645 127.516 38.6374 127.523L38.607 127.546C38.607 127.546 38.5994 127.554 38.5918 127.561C38.5463 127.599 38.5083 127.637 38.4703 127.683C38.174 128.04 38.1512 128.807 38.0373 129.24C37.9765 129.468 38.0373 129.711 38.1512 129.924V129.878L38.1437 129.886Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M72.7291 126.08C72.5468 125.883 72.2201 125.867 71.9846 125.974C71.7947 126.057 71.696 126.232 71.6884 126.407C71.6352 126.612 71.734 126.847 71.9011 126.999C72.1366 127.212 72.5392 127.28 72.7974 127.052C73.0861 126.787 72.9721 126.338 72.7367 126.08H72.7291Z' fill='%23A05A07'/%3E%3Cpath d='M72.6452 126.171C72.5009 126.019 72.2426 126.004 72.0527 126.088C71.9008 126.156 71.8173 126.293 71.8173 126.437C71.7717 126.604 71.8552 126.787 71.9844 126.908C72.1743 127.075 72.4933 127.128 72.6984 126.946C72.9339 126.733 72.8428 126.376 72.6529 126.171H72.6452Z' fill='%23A05A07'/%3E%3Cpath d='M73.3755 127.827C73.3755 127.827 73.3907 127.873 73.3983 127.888C72.1145 128.389 70.5953 126.004 72.3044 125.062C72.312 125.085 72.3196 125.1 72.3348 125.123C72.5551 125.062 72.7754 125.001 72.9881 124.933C72.859 124.584 72.6615 124.28 72.4184 124.363C69.2355 125.472 71.7119 129.673 73.9225 128.306C74.1655 128.154 74.1352 127.964 74.0136 127.614C73.8085 127.683 73.5958 127.759 73.3831 127.827H73.3755Z' fill='%23CCD1C0'/%3E%3Cpath d='M72.4107 124.363C72.0689 124.485 71.7878 124.637 71.5751 124.819C71.7802 124.887 71.9625 125.039 72.0537 125.229C72.1297 125.168 72.2132 125.115 72.3044 125.062C72.312 125.085 72.3196 125.1 72.3348 125.123C72.5551 125.062 72.7754 125.001 72.9881 124.933C72.8589 124.584 72.6614 124.28 72.4183 124.363H72.4107Z' fill='%23C2C2AC'/%3E%3Cpath d='M71.6734 127.987C71.7797 127.789 71.9468 127.615 72.1292 127.539C71.7645 127.189 71.5214 126.673 71.5518 126.171C71.4683 126.186 71.3923 126.186 71.3239 126.171C71.172 126.149 71.0277 126.088 70.9213 125.989C70.8302 126.703 71.1568 127.47 71.681 127.972L71.6734 127.987Z' fill='%23C2C2AC'/%3E%3Cpath d='M24.9185 89.975C24.7666 90.5372 24.5539 91.0917 24.3488 91.6158C24.1513 92.1248 23.9234 92.6261 23.6803 93.1123L22.8827 92.8768L22.6397 93.7048L21.8192 93.4617L21.7205 93.8112L20.7102 97.2751L20.5962 97.3207C16.9348 95.5127 10.554 92.7097 9.11066 94.3581C9.11825 94.2517 9.12583 94.1378 9.14103 94.0163C9.29295 92.3451 9.8171 88.79 10.6603 85.8427C10.6831 85.7591 10.7059 85.6831 10.7287 85.5996C11.4047 83.2979 12.2935 81.414 13.357 81.1785L24.9185 89.975Z' fill='%239EA58E'/%3E%3Cpath d='M24.9338 89.9219C24.9338 89.9219 24.9262 89.9599 24.9186 89.9751C24.7667 90.5372 24.554 91.0917 24.3489 91.6159C24.1514 92.1248 23.9235 92.6262 23.6804 93.1123C23.6653 93.1427 23.6501 93.1731 23.6349 93.2111C23.369 93.7276 23.0803 94.229 22.7689 94.7152C22.7157 94.7987 22.655 94.8899 22.5942 94.9734C22.07 95.7786 21.4699 96.5307 20.7863 97.2067C20.7635 97.2295 20.7331 97.2523 20.7103 97.2751C19.8063 96.8269 18.7049 96.3028 17.5427 95.7938C14.2383 94.3429 10.4401 93.044 9.14113 94.0163C9.08036 94.0619 9.0196 94.115 8.96643 94.1758C9.07278 92.7249 9.58931 88.942 10.4705 85.7971C10.4933 85.7135 10.5161 85.63 10.5464 85.554C10.6528 85.1742 10.7668 84.8096 10.8883 84.4602C10.9263 84.331 10.9718 84.2095 11.0174 84.0879C11.025 84.0727 11.0326 84.0576 11.0326 84.0424C11.0554 83.9816 11.0782 83.9284 11.101 83.8752C11.1086 83.8449 11.1238 83.8145 11.1314 83.7841C11.1694 83.6929 11.1997 83.6094 11.2301 83.5258C11.2453 83.5106 11.2529 83.4878 11.2605 83.465C11.3061 83.3511 11.3517 83.2447 11.4048 83.1384L11.496 82.9333C11.6251 82.6674 11.7543 82.4244 11.8834 82.2041C11.9366 82.1281 11.9822 82.0521 12.0353 81.9762C12.0809 81.9154 12.1265 81.847 12.1721 81.7863C12.1949 81.7559 12.2176 81.7179 12.248 81.6875C12.2632 81.6647 12.2784 81.6495 12.2936 81.6343C12.324 81.5964 12.362 81.5508 12.4076 81.5128C12.4455 81.4672 12.4911 81.4216 12.5367 81.3837C12.5367 81.3837 12.5418 81.3786 12.5519 81.3685C12.6127 81.3153 12.6658 81.2697 12.7266 81.2241C12.7342 81.2165 12.7418 81.2165 12.7418 81.2165H12.7494C12.8177 81.1634 12.8861 81.1254 12.9545 81.095C13.038 81.0494 13.1216 81.019 13.2052 81.0038L24.9338 89.9219Z' fill='%239EA58E'/%3E%3Cpath d='M14.0406 88.0912C11.8149 86.8226 10.1589 88.8432 10.7818 90.089C11.1464 90.8182 12.0883 91.0841 12.848 91.0461C15.5143 90.9094 15.3548 88.8356 14.0482 88.0912H14.0406Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M24.934 89.9296C24.934 89.9296 24.9265 89.9599 24.9189 89.9751C24.7669 90.5373 24.5542 91.0918 24.3491 91.6159C24.1516 92.1249 23.9237 92.6262 23.6807 93.1124C23.6655 93.1428 23.6503 93.1732 23.6351 93.2111C23.3692 93.7277 23.0805 94.2291 22.7691 94.7152C22.7159 94.7988 22.6552 94.8899 22.5944 94.9735C22.0703 95.7787 21.4701 96.5307 20.7865 97.2068C20.7637 97.2296 20.7333 97.2524 20.7105 97.2752C19.8066 96.827 18.7051 96.3028 17.5429 95.7939C18.462 91.2741 15.2108 86.9518 10.6606 85.8427C10.5998 85.8276 10.5315 85.8124 10.4707 85.7972C10.4935 85.7136 10.5163 85.63 10.5467 85.5541C10.653 85.1743 10.767 84.8097 10.8885 84.4602C10.9265 84.3311 10.9721 84.2095 11.0176 84.088C11.0252 84.0728 11.0328 84.0576 11.0328 84.0424C11.0632 83.9589 11.1012 83.8677 11.1316 83.7842C11.1696 83.693 11.1999 83.6094 11.2303 83.5259C11.2455 83.5107 11.2531 83.4879 11.2607 83.4651C11.3063 83.3512 11.3519 83.2448 11.4051 83.1385L11.4962 82.9334C11.6253 82.6675 11.7545 82.4244 11.8836 82.2041C11.9368 82.1282 11.9824 82.0522 12.0356 81.9762C12.0811 81.9155 12.1267 81.8471 12.1723 81.7863C12.1951 81.7559 12.2179 81.718 12.2483 81.6876C12.2634 81.6648 12.2786 81.6496 12.2938 81.6344C12.3242 81.5964 12.3622 81.5508 12.4078 81.5129C12.4458 81.4673 12.4913 81.4217 12.5369 81.3837C12.5369 81.3837 12.542 81.3787 12.5521 81.3685C12.6129 81.3078 12.6736 81.2622 12.7268 81.2242C12.7344 81.2166 12.742 81.2166 12.742 81.2166H12.7496C12.7496 81.2166 12.78 81.1862 12.7952 81.1786C12.8484 81.1406 12.9015 81.1103 12.9547 81.0951C13.0383 81.0495 13.1218 81.0191 13.2054 81.0039L24.934 89.9296Z' fill='%23949984'/%3E%3Cpath d='M24.9333 89.9296C24.9333 89.9296 24.9258 89.9599 24.9182 89.9751C24.7662 90.5373 24.5535 91.0918 24.3484 91.6159C24.1509 92.1249 23.923 92.6262 23.68 93.1124C23.6648 93.1428 23.6496 93.1732 23.6344 93.2111C23.3685 93.7277 23.0798 94.229 22.776 94.7228C22.7152 94.8064 22.662 94.8975 22.6013 94.9811C22.6013 94.9811 22.6013 94.9735 22.5937 94.9735C22.3278 94.6013 22.0316 94.2139 21.7201 93.8113C19.1374 90.5752 15.0582 86.6859 10.7283 85.5997L10.546 85.5541C10.6523 85.1743 10.7663 84.8097 10.8878 84.4602C10.9562 84.2551 11.0245 84.0652 11.1005 83.8753C11.1081 83.8449 11.1233 83.8145 11.1309 83.7842C11.1689 83.7006 11.1992 83.6094 11.2296 83.5259C11.2448 83.5107 11.2524 83.4879 11.26 83.4651C11.3056 83.3512 11.3512 83.2448 11.4043 83.1385L11.4955 82.9334C11.6246 82.6675 11.7538 82.4244 11.8829 82.2041C11.9361 82.1282 11.9817 82.0522 12.0348 81.9762C12.0804 81.9155 12.126 81.8471 12.1716 81.7863C12.1944 81.7559 12.2172 81.718 12.2475 81.6876C12.2627 81.6648 12.2779 81.6496 12.2931 81.6344C12.3235 81.5964 12.3615 81.5508 12.4071 81.5129C12.445 81.4673 12.4906 81.4217 12.5362 81.3837C12.5362 81.3837 12.5413 81.3787 12.5514 81.3685C12.6122 81.3078 12.6729 81.2622 12.7261 81.2242C12.7337 81.2166 12.7413 81.2166 12.7413 81.2166C12.7641 81.1938 12.7793 81.1862 12.7945 81.1786C12.8477 81.1406 12.9008 81.1103 12.954 81.0951C13.0376 81.0495 13.1211 81.0191 13.2047 81.0039L24.9333 89.9296Z' fill='%23949984'/%3E%3Cpath d='M74.0054 127.615C73.8003 127.683 73.5876 127.759 73.3749 127.827C73.3825 127.85 73.3901 127.873 73.3977 127.888C73.2154 127.956 73.0255 127.972 72.8431 127.934C72.8735 128.04 72.8887 128.146 72.8887 128.237C72.8887 128.329 72.8887 128.458 72.8431 128.564C73.1926 128.602 73.5572 128.526 73.9142 128.298C74.1573 128.146 74.1269 127.956 74.0054 127.607V127.615Z' fill='%23C2C2AC'/%3E%3Cpath d='M72.3792 125.108C72.5843 125.047 72.7818 124.994 72.9793 124.933C72.8502 124.584 72.6527 124.28 72.4096 124.363C72.2956 124.401 72.1893 124.447 72.0829 124.5C72.2501 124.652 72.364 124.88 72.3792 125.108Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M72.4103 124.363C72.3267 124.394 72.2507 124.424 72.1748 124.454C72.1064 124.515 72.0456 124.584 71.9773 124.644C71.7418 124.872 71.4911 125.108 71.362 125.412C71.0885 126.057 71.2632 126.862 71.6127 127.447C71.9317 127.987 72.4331 128.344 73.0787 128.283C73.4054 128.253 73.6333 128.116 73.8688 127.896C73.9219 127.85 73.9827 127.797 74.0359 127.744C74.0207 127.706 74.0055 127.66 73.9903 127.614C73.7852 127.683 73.5725 127.759 73.3598 127.827C73.3674 127.85 73.375 127.873 73.3826 127.888C72.0988 128.389 70.5796 126.004 72.2887 125.062C72.2963 125.085 72.3039 125.1 72.3191 125.123C72.5394 125.062 72.7597 124.994 72.9724 124.933C72.8433 124.584 72.6458 124.28 72.4027 124.363H72.4103Z' fill='%23C2C2AC'/%3E%3Cpath d='M71.8634 127.242C71.7646 127.098 71.681 126.938 71.6279 126.771C71.4228 126.817 71.2177 126.878 71.0126 126.946C71.0809 127.151 71.1721 127.349 71.2936 127.531C71.4152 127.371 71.6431 127.273 71.871 127.242H71.8634Z' fill='%23BBB99D'/%3E%3Cpath d='M73.9982 127.615C73.7931 127.683 73.5804 127.759 73.3677 127.827C73.3753 127.85 73.3829 127.873 73.3905 127.888C73.4816 128.025 73.5196 128.207 73.5424 128.351C73.5424 128.389 73.55 128.435 73.55 128.473C73.6639 128.427 73.7855 128.374 73.8994 128.306C74.1425 128.154 74.1121 127.964 73.983 127.615H73.9982Z' fill='%23BBB99D'/%3E%3Cpath d='M72.8276 126.635C72.8276 126.468 72.7516 126.293 72.6453 126.171C72.6149 126.141 72.5845 126.118 72.5465 126.095C72.0072 126.278 71.0197 126.46 70.5639 126.726C70.2904 126.885 70.4728 127.197 70.731 127.235C70.8222 127.25 71.9616 126.946 72.82 126.635H72.8276Z' fill='%23CCD1C0'/%3E%3Cpath d='M72.6453 126.171C72.6453 126.171 72.5846 126.118 72.5466 126.095C72.3795 126.149 72.1744 126.209 71.9541 126.262C71.8781 126.506 71.6502 126.726 71.4527 126.832C71.1565 126.999 70.7918 127.098 70.45 127.022C70.4956 127.121 70.6019 127.204 70.7311 127.22C70.8222 127.235 71.9617 126.939 72.8201 126.619H72.8277C72.8277 126.452 72.7517 126.278 72.6377 126.156L72.6453 126.171Z' fill='%23C2C2AC'/%3E%3Cpath d='M72.6457 126.171C72.6457 126.171 72.5849 126.118 72.5469 126.095C72.471 126.118 72.3874 126.149 72.3039 126.171C72.3418 126.392 72.1975 126.619 72.0608 126.787C72.0152 126.84 71.9696 126.885 71.9164 126.931C72.2203 126.84 72.5393 126.733 72.828 126.627H72.8356C72.8356 126.46 72.7596 126.285 72.6533 126.164L72.6457 126.171Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M75.3878 124.956C75.0687 124.865 74.7117 125.184 74.6965 125.495C74.6813 125.776 74.9092 126.057 75.1979 126.148C75.3802 126.209 75.5701 126.156 75.7068 126.057C76.1246 125.784 75.8815 125.1 75.3878 124.963V124.956Z' fill='%23A05A07'/%3E%3Cpath d='M75.3651 125.115C75.1296 125.047 74.8638 125.283 74.8638 125.51C74.8638 125.716 75.0157 125.921 75.2284 125.989C75.3651 126.035 75.5019 125.997 75.6006 125.921C75.9045 125.723 75.7222 125.222 75.3651 125.115Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M78.5938 123.93C78.5026 123.748 78.3279 123.611 78.0772 123.619C77.3404 123.634 77.272 124.591 77.8038 124.842C77.8493 124.872 77.9025 124.887 77.9557 124.903C78.4798 125.024 78.89 124.432 78.5938 123.93Z' fill='%23A05A07'/%3E%3Cpath d='M78.4494 124.021C78.381 123.892 78.2595 123.794 78.0771 123.794C77.5378 123.809 77.4922 124.5 77.8797 124.682C77.91 124.698 77.948 124.713 77.986 124.728C78.3658 124.819 78.6621 124.386 78.4494 124.021Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M68.9765 126.984C68.7714 126.855 68.5055 126.863 68.2777 126.946C68.0118 127.052 67.9206 127.349 67.989 127.584C68.1561 128.2 69.0069 128.268 69.2424 127.668C69.3487 127.402 69.212 127.144 68.9765 126.984Z' fill='%23A05A07'/%3E%3Cpath d='M68.8931 127.106C68.7336 127.007 68.5285 127.014 68.3614 127.075C68.1563 127.159 68.0879 127.379 68.1335 127.561C68.2626 128.032 68.9083 128.086 69.0982 127.622C69.1742 127.425 69.0754 127.22 68.8931 127.098V127.106Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M64.7989 127.759C64.7989 127.759 64.7838 127.759 64.7762 127.759C64.5103 127.698 64.2216 127.729 64.0545 127.964C64.0013 128.04 63.9785 128.124 63.971 128.207C63.895 128.511 64.0317 128.815 64.3128 128.997C64.4799 129.103 64.6774 129.119 64.8749 129.096C65.1028 129.065 65.2623 128.86 65.3383 128.686C65.5434 128.222 65.1712 127.812 64.7989 127.766V127.759Z' fill='%23A05A07'/%3E%3Cpath d='M64.7683 127.934H64.7531C64.5556 127.888 64.3505 127.911 64.2213 128.078C64.1834 128.131 64.1606 128.192 64.1606 128.26C64.1074 128.488 64.2061 128.708 64.4112 128.838C64.5328 128.914 64.6771 128.929 64.8214 128.906C64.9886 128.883 65.1025 128.731 65.1633 128.602C65.3152 128.26 65.0341 127.964 64.7683 127.926V127.934Z' fill='%23A05A07'/%3E%3Cpath d='M53.4802 92.9071C53.1991 92.6792 52.9636 92.4893 52.7509 92.3146V92.4817H49.4921V89.071C49.3934 89.033 49.2946 89.0406 49.211 89.0862C49.0743 88.9723 48.8844 88.9495 48.7249 89.1166C45.1394 93.0059 41.6603 97.0471 37.5128 100.374C36.6468 101.073 35.7656 101.749 35.006 102.562C33.8817 103.77 33.2057 105.342 33.2513 106.998C33.2664 107.56 33.4108 108.13 33.7526 108.571C34.0261 108.92 34.4211 109.178 34.649 109.566C34.8769 109.953 34.9148 110.424 34.9908 110.865C35.1123 111.51 35.5225 112.369 36.2594 112.468C35.6061 108.472 38.4623 109.672 51.4975 95.5127C52.1736 94.7834 52.9332 94.1605 53.5333 93.3553C53.6245 93.2338 53.5941 92.9907 53.4726 92.8995L53.4802 92.9071Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M53.4806 92.9071C53.1996 92.6792 52.9641 92.4893 52.7514 92.3146V92.4817H49.4926V89.071C49.3938 89.033 49.2951 89.0406 49.2115 89.0862C49.0748 88.9723 48.8849 88.9495 48.7254 89.1166C47.6923 90.2332 46.6744 91.3651 45.6413 92.4817C46.0591 92.8464 46.3249 93.4541 46.4085 93.9554C46.5072 94.5631 46.3401 95.186 46.0743 95.733C45.778 96.3483 45.383 96.9104 44.9424 97.4269C44.3575 98.1182 43.6966 98.7411 43.0433 99.364C42.3597 100.017 41.714 100.693 41.0607 101.369C40.377 102.076 39.663 102.752 38.9261 103.405C38.3488 103.914 37.7715 104.453 37.0878 104.818C36.4801 105.145 35.7281 105.357 35.0748 105.016C34.5127 104.727 34.2468 104.127 34.2468 103.512C33.5783 104.545 33.2061 105.745 33.2441 106.991C33.2593 107.553 33.4036 108.123 33.7455 108.563C34.0189 108.913 34.4139 109.171 34.6418 109.558C34.8697 109.946 34.9077 110.417 34.9913 110.857C35.1128 111.503 35.523 112.361 36.2598 112.46C35.6066 108.464 38.4628 109.665 51.498 95.5051C52.1741 94.7758 52.9337 94.1529 53.5338 93.3553C53.625 93.2338 53.5946 92.9907 53.473 92.8995L53.4806 92.9071Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M53.4803 92.9071C53.1992 92.6792 52.9637 92.4893 52.751 92.3146V92.4817H49.4922V89.071C49.3935 89.033 49.2947 89.0406 49.2112 89.0862C49.0744 88.9723 48.8845 88.9495 48.725 89.1166C47.7983 90.1193 46.8867 91.1296 45.96 92.1323C46.279 92.383 46.5069 92.7476 46.6664 93.1198C46.9171 93.6971 47.1222 94.4112 46.9855 95.0417C46.8107 95.8241 46.1955 96.4622 45.6941 97.0547C45.056 97.7915 44.3951 98.5056 43.7039 99.1893C43.005 99.8805 42.2682 100.534 41.5617 101.217C40.8856 101.871 40.2475 102.577 39.5563 103.223C38.9562 103.777 38.2877 104.271 37.6344 104.765C37.0343 105.213 36.3658 105.707 35.5986 105.821C35.158 105.882 34.6187 105.806 34.3072 105.449C34.0262 105.13 33.9578 104.681 33.9806 104.271C33.9806 104.157 33.9958 104.043 34.011 103.937C33.4945 104.871 33.221 105.92 33.2514 107.006C33.2666 107.568 33.4109 108.138 33.7527 108.578C34.0262 108.928 34.4212 109.186 34.6491 109.573C34.877 109.961 34.915 110.432 34.9909 110.872C35.1125 111.518 35.5227 112.376 36.2595 112.475C36.024 111.039 36.2443 110.28 37.2166 109.239C37.0951 109.042 37.0039 108.829 36.9508 108.601C36.5482 106.983 37.7863 105.555 38.9562 104.621C39.3132 104.34 39.6778 104.066 40.0273 103.77C40.4147 103.436 40.7869 103.086 41.1591 102.737C41.8808 102.045 42.6176 101.362 43.3544 100.686C44.7521 99.3944 45.9372 97.8675 47.5248 96.7812C48.2541 96.2799 49.082 95.8773 49.9632 95.7633C50.3886 95.7102 50.814 95.733 51.2242 95.8165C51.3154 95.7178 51.4065 95.619 51.4977 95.5203C52.1737 94.791 52.9334 94.1681 53.5335 93.3629C53.6246 93.2414 53.5942 92.9983 53.4727 92.9071H53.4803Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M53.4797 92.9071C53.1987 92.6792 52.9632 92.4893 52.7505 92.3146V92.4817H49.4917V89.071C49.3929 89.033 49.2942 89.0406 49.2106 89.0862C49.0739 88.9723 48.884 88.9495 48.732 89.1166C47.9648 89.9446 47.2052 90.7802 46.4456 91.6158C46.5443 91.7069 46.6355 91.7981 46.719 91.9044C47.1444 92.4286 47.3799 93.0667 47.7369 93.6288C47.9268 93.9326 48.1547 94.2213 48.451 94.434C48.8004 94.6847 49.2182 94.8062 49.6284 94.9126C50.2437 95.0645 50.9122 95.224 51.3604 95.6798C51.4135 95.6266 51.4591 95.5658 51.5123 95.5127C52.1884 94.7834 52.948 94.1605 53.5481 93.3629C53.6393 93.2414 53.6089 92.9983 53.4873 92.9071H53.4797Z' fill='%23A05A07'/%3E%3Cpath opacity='0.58' d='M36.6545 109.938C36.5937 109.87 36.5405 109.801 36.495 109.725C36.2291 109.308 36.1531 108.837 36.1759 108.35C36.1987 107.75 36.343 107.089 36.1303 106.512C36.0696 106.353 35.1352 106.862 35.0289 106.922C34.7174 107.089 34.3908 107.279 34.0414 107.363C33.7831 107.431 33.5172 107.431 33.2817 107.317C33.3349 107.765 33.4792 108.214 33.7603 108.563C34.0338 108.913 34.4288 109.171 34.6567 109.558C34.8846 109.946 34.9225 110.417 34.9985 110.857C35.12 111.503 35.5302 112.361 36.2671 112.46C36.0924 111.366 36.1759 110.667 36.6469 109.938H36.6545Z' fill='%23A05A07'/%3E%3Cpath d='M71.1118 100.116L70.7092 99.7361C70.7092 99.7361 70.3902 99.5918 70.1319 99.7893C69.8736 99.9868 66.5769 104.552 66.5313 104.97C66.4857 105.388 66.8503 105.836 66.8503 105.836L68.1797 105.646L71.2106 103.337L71.1042 100.124L71.1118 100.116Z' fill='%23A05A07'/%3E%3Cpath d='M79.0115 113.379H82.8249C82.5362 112.346 82.1868 111.336 81.6246 110.416C77.196 103.154 51.475 87.3845 48.5656 84.9993C48.1098 84.627 43.271 81.5809 42.6633 81.5809C42.5265 81.5809 42.4278 81.6417 42.367 81.7253C42.2075 81.7177 42.0404 81.786 41.972 81.9835C41.6681 82.9027 41.1516 83.8294 40.6047 84.627C40.2476 85.1512 39.7615 85.6525 39.5716 86.2602C39.1994 86.283 39.0854 86.8831 39.5032 86.9971C40.7946 87.3541 46.1424 90.9775 47.1527 91.7979C55.7441 98.8321 75.0539 108.229 79.0115 114.807V113.371V113.379ZM52.4549 90.9244C52.2346 91.76 50.5102 92.0334 50.7381 90.6357C50.7913 90.3015 51.0344 89.952 51.3838 89.8609C51.8092 89.7545 52.3182 89.9672 52.4625 90.4002C52.5233 90.5749 52.5081 90.7572 52.4549 90.9244ZM58.5319 96.7203C58.4028 96.5608 58.304 96.3709 58.2661 96.1734C57.9014 94.6162 60.1044 94.8744 60.1044 96.0671C60.1044 96.7963 59.0333 97.3584 58.5319 96.7203ZM65.794 101.954C65.3686 101.422 65.718 100.511 66.4321 100.42C66.8195 100.367 67.4196 100.556 67.5867 100.951C68.0729 102.076 66.4549 102.79 65.794 101.954Z' fill='%23D58500'/%3E%3Cpath d='M44.4028 89.4355C44.6991 88.5619 45.0713 87.7187 45.4815 86.8983C45.9449 85.9868 46.4386 85.0752 47.0463 84.2548C47.0919 84.1941 47.1375 84.1333 47.1831 84.0725C45.5651 83.047 43.0887 81.5733 42.6633 81.5733C42.5265 81.5733 42.4278 81.6341 42.367 81.7253C42.2075 81.7101 42.0404 81.786 41.972 81.9835C41.6681 82.9027 41.1516 83.8294 40.6047 84.6346C40.2476 85.1588 39.7615 85.6601 39.5716 86.2678C39.1994 86.2906 39.0854 86.8907 39.5032 87.0047C40.2628 87.2098 42.4278 88.5543 44.2813 89.7849C44.3193 89.671 44.3572 89.5494 44.3952 89.4355H44.4028Z' fill='%23C77500'/%3E%3Cpath d='M81.6246 110.409C80.394 108.388 77.5075 105.707 73.922 102.835C73.7625 103.063 73.6182 103.299 73.4662 103.534C73.0181 104.256 72.5471 104.955 72.0837 105.669C71.6887 106.277 71.3317 106.915 71.0506 107.591C74.826 110.234 77.8417 112.756 79.0951 114.959C79.8243 116.235 80.2725 117.671 80.4928 119.122C80.7131 120.588 79.9838 121.454 79.604 122.1H80.1586C80.2573 121.963 80.3561 121.826 80.432 121.674C80.5612 121.424 80.6144 121.165 80.6371 120.884C80.6523 120.679 80.6675 120.474 80.7359 120.277C80.8802 119.844 81.1309 119.464 81.3056 119.046C81.5107 118.56 81.7006 118.066 81.8677 117.565C82.0197 117.117 82.1792 116.676 82.3691 116.235C82.559 115.795 82.7565 115.339 82.8628 114.868C82.9312 114.549 82.9616 114.23 82.9692 113.903C82.6577 112.68 82.2855 111.488 81.6246 110.401V110.409Z' fill='%23D58500'/%3E%3Cpath d='M82.3915 115.491C81.4496 115.802 80.7811 115.088 80.4392 114.275C79.9531 113.106 79.9531 111.769 80.1202 110.538C80.1658 110.211 80.2265 109.892 80.2645 109.566C80.2873 109.353 80.3101 109.14 80.3633 108.935C80.3785 108.882 80.3861 108.829 80.4013 108.776C78.7985 106.915 76.2917 104.704 73.3671 102.395C73.2152 103.724 72.8657 105.038 72.3492 106.277C72.1137 106.846 71.8402 107.401 71.5516 107.94C75.099 110.462 77.9021 112.855 79.1023 114.959C79.8315 116.235 79.4593 117.253 79.6872 118.704C79.9303 120.322 79.634 121.522 79.4745 122.274C79.6037 122.214 79.9151 122.191 80.0822 122.244C80.2114 122.077 80.3481 121.872 80.4392 121.682C80.5684 121.431 80.6215 121.173 80.6443 120.892C80.6595 120.687 80.6747 120.482 80.7431 120.284C80.8874 119.851 81.1381 119.471 81.3128 119.053C81.5179 118.567 81.7078 118.074 81.8749 117.572C82.0269 117.124 82.1864 116.683 82.3763 116.243C82.5054 115.939 82.6422 115.643 82.7409 115.331C82.6346 115.4 82.5206 115.453 82.3991 115.491H82.3915Z' fill='%23C77500'/%3E%3Cpath d='M79.5805 109.224C79.5577 108.707 77.0433 104.461 72.5387 101.681L69.1584 106.337C71.6804 107.56 73.5035 109.885 74.1112 112.619C75.4405 112.513 76.7015 112.977 77.7574 113.789C79.3906 111.222 79.5881 109.421 79.5805 109.224ZM74.5062 108.236C74.5062 108.236 74.4682 108.236 74.4454 108.236C73.4199 108.32 73.2756 107.105 73.7314 106.565C74.02 106.223 74.5518 106.185 74.9088 106.451C75.8811 107.173 75.2126 108.214 74.5062 108.236Z' fill='%23D58500'/%3E%3Cpath d='M71.5588 106.421C72.1133 105.069 72.9717 103.732 74.1112 102.767C73.6174 102.387 73.0933 102.023 72.5387 101.681L69.1584 106.337C69.8952 106.694 70.5637 107.143 71.1638 107.667C71.2702 107.241 71.3993 106.824 71.5588 106.421Z' fill='%23C77500'/%3E%3Cpath d='M73.3982 101.567C73.3375 101.476 71.7118 99.9185 71.1573 99.7058C70.8231 99.5766 70.4129 99.5842 70.1318 99.7969C70.2609 99.721 70.4736 99.7893 70.5572 99.9261C71.1877 100.967 66.9338 105.509 66.759 105.449C66.5843 105.388 66.5464 105.16 66.5388 104.97C66.3944 105.433 66.6755 105.92 67.0021 106.277C67.7314 107.082 68.6809 107.484 68.8936 107.492C69.9647 107.522 73.2159 103.276 73.4514 102.045C73.4818 101.878 73.4894 101.696 73.3982 101.559V101.567Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M73.3975 101.567C73.3367 101.476 71.7111 99.9185 71.1565 99.7058C70.8223 99.5766 70.4121 99.5842 70.131 99.7969C70.2602 99.721 70.4729 99.7893 70.5564 99.9261C70.6628 100.108 70.6248 100.397 70.4881 100.746C70.9742 100.769 71.2933 101.157 71.3541 101.62C71.4528 102.357 71.0958 103.071 70.6552 103.641C70.2906 104.112 69.7132 104.757 69.0372 104.56C68.6877 104.461 68.3991 104.241 68.2472 103.937C67.4875 104.81 66.8191 105.464 66.7507 105.441C66.576 105.38 66.538 105.152 66.5304 104.962C66.3861 105.426 66.6671 105.912 66.9938 106.269C67.723 107.074 68.6726 107.477 68.8853 107.484C69.9563 107.515 73.2076 103.268 73.443 102.038C73.4734 101.871 73.481 101.688 73.3899 101.552L73.3975 101.567Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M73.3975 101.567C73.3367 101.476 71.7111 99.9185 71.1565 99.7058C70.8223 99.5766 70.4121 99.5842 70.131 99.7969C70.2602 99.721 70.4729 99.7893 70.5564 99.9261C70.5944 99.9868 70.6172 100.07 70.6172 100.154C71.0654 100.177 71.5819 100.306 71.8782 100.663C72.1669 101.012 72.3188 101.506 72.372 101.947C72.4251 102.448 72.3416 102.942 72.1289 103.398C71.9542 103.785 71.7187 104.134 71.4528 104.469C71.2021 104.78 70.9287 105.092 70.6248 105.365C70.3513 105.608 70.0323 105.851 69.6677 105.942C69.4854 105.988 69.3258 105.965 69.1511 105.92C68.9232 105.859 68.7409 105.889 68.5206 105.973C68.1788 106.109 67.8294 106.087 67.5331 105.859C67.3204 105.692 67.1381 105.464 67.0697 105.205C66.895 105.373 66.7811 105.464 66.7507 105.456C66.576 105.395 66.538 105.168 66.5304 104.978C66.3861 105.441 66.6671 105.927 66.9938 106.284C67.723 107.089 68.6726 107.492 68.8853 107.5C69.9563 107.53 73.2076 103.284 73.443 102.053C73.4734 101.886 73.481 101.704 73.3899 101.567H73.3975Z' fill='%23C77500'/%3E%3Cpath d='M25.5182 87.9012L11.7309 82.7053C10.7585 83.2447 10.4623 85.364 10.4775 87.8252C15.5442 87.5138 21.363 90.8258 24.7281 93.4161C24.7585 93.3173 24.7889 93.2186 24.8193 93.1122C25.1307 91.9956 25.3434 90.8485 25.4422 89.6863C25.4878 89.1014 25.5409 88.5013 25.5257 87.9012H25.5182Z' fill='%23949984'/%3E%3Cpath opacity='0.5' d='M40.3461 66.6771C40.2777 66.5176 40.3005 66.3504 40.3157 66.1833C40.2625 66.2517 40.2018 66.3277 40.141 66.3884L39.0699 67.5886C39.0091 67.7558 39.1003 67.9533 39.2674 68.014C39.7688 68.1887 40.2929 67.6418 40.6727 67.0569C40.536 66.9581 40.4069 66.8442 40.3385 66.6847L40.3461 66.6771Z' fill='%2334381B'/%3E%3Cpath d='M111.492 115.392C111.492 115.392 111.499 115.453 111.492 115.483C111.492 118.058 110.261 120.565 108.742 123.247L108.719 123.292H108.742C105.931 127.888 98.7756 124.644 96.5955 120.831C96.5803 120.816 96.5727 120.801 96.5727 120.785C96.5651 120.785 96.5651 120.778 96.5575 120.77C96.5119 120.702 96.4739 120.626 96.436 120.558L96.3676 120.444C96.3676 120.444 96.36 120.428 96.36 120.421H96.3524C96.3296 120.368 96.2992 120.322 96.2764 120.269C96.2309 120.193 96.1929 120.109 96.1625 120.033C96.1549 120.026 96.1473 120.018 96.1473 120.011C96.1397 119.995 96.1321 119.98 96.1245 119.957C96.1093 119.935 96.1017 119.912 96.0941 119.889C96.0865 119.882 96.0789 119.866 96.0789 119.851C96.0789 119.851 96.0637 119.851 96.0713 119.836C96.0637 119.828 96.0561 119.821 96.0561 119.813C96.0258 119.76 96.003 119.699 95.9802 119.646C95.9574 119.585 95.927 119.532 95.9118 119.471C95.8738 119.388 95.8434 119.312 95.8131 119.228C95.7371 119 95.6535 118.78 95.5776 118.552C95.5624 118.537 95.5624 118.522 95.5548 118.507C95.5168 118.37 95.4712 118.226 95.4332 118.089C95.4256 118.058 95.4105 118.02 95.4029 117.99C95.3877 117.929 95.3649 117.861 95.3497 117.8C95.3117 117.663 95.2737 117.534 95.2433 117.398C95.1294 116.949 95.0155 116.501 94.9015 116.045C94.8483 115.848 94.8027 115.643 94.7496 115.438C94.7192 115.339 94.6964 115.24 94.6736 115.141C94.6204 114.944 94.5673 114.746 94.5065 114.549C94.4989 114.511 94.4913 114.473 94.4761 114.435C94.4685 114.397 94.4609 114.351 94.4381 114.313C94.4305 114.283 94.4229 114.26 94.4153 114.23C94.385 114.139 94.3622 114.048 94.3318 113.964C93.8684 112.521 93.2455 111.176 92.1744 110.143H92.1668C91.9314 109.9 91.6807 109.695 91.3996 109.497H91.392C91.2629 109.376 91.1338 109.247 91.0122 109.118C90.9059 109.004 90.7919 108.882 90.6856 108.761C90.6476 108.715 90.602 108.662 90.564 108.616C90.4805 108.517 90.3969 108.419 90.3209 108.32C90.207 108.183 90.1006 108.039 90.0019 107.895C89.9867 107.887 89.9791 107.879 89.9791 107.872C89.8804 107.735 89.7892 107.606 89.698 107.469C88.627 105.866 87.8446 104.043 87.0166 102.304C86.8874 102.076 86.7583 101.848 86.614 101.62C86.4772 101.392 86.3329 101.172 86.1886 100.944C85.8999 100.503 85.5884 100.07 85.277 99.6526C84.6769 98.8398 84.0464 98.0498 83.4235 97.2522C83.0513 96.7736 82.6791 96.295 82.3296 95.8013C82.0866 95.4594 81.8435 95.11 81.6156 94.7606C81.5244 94.6162 81.4409 94.4719 81.3497 94.3276C80.2862 92.5424 79.1848 90.7269 78.2352 88.9114C78.0757 88.6076 77.9238 88.2885 77.7719 87.9771C77.3844 87.1871 77.0274 86.3895 76.7236 85.5994C75.6297 82.728 75.1588 79.8718 76.0095 77.0688C76.0475 76.9321 76.0855 76.7953 76.1387 76.6586C76.754 74.8811 77.9162 73.1263 79.7925 71.4172C79.8532 71.3564 79.9064 71.3032 79.9672 71.25C80.0128 71.2121 80.0659 71.1665 80.1191 71.1209H80.1267L80.1343 71.1057H80.1419C80.1419 71.1057 80.2027 71.0525 80.2407 71.0449C80.2407 71.0297 80.2635 71.0221 80.2786 71.0221C80.3242 70.9994 80.3698 70.969 80.4154 70.9462C81.6004 70.2321 82.7778 69.8295 83.9325 69.6852C84.7681 69.5713 85.596 69.594 86.4088 69.7308H86.4164C86.971 69.8219 87.5255 69.9587 88.0572 70.1486C88.1636 70.179 88.2699 70.2245 88.3763 70.2701C89.4474 70.6803 90.4729 71.2728 91.4452 71.9869C91.5211 72.0325 91.5895 72.0932 91.6579 72.1464C91.6807 72.1692 91.7111 72.1844 91.7338 72.2148C92.3415 72.6705 92.9265 73.1795 93.481 73.7188C93.4962 73.7416 93.519 73.7644 93.5418 73.7796C93.6785 73.9087 93.8076 74.0379 93.9368 74.1822C93.9444 74.1898 93.952 74.1974 93.9596 74.1974L94.1647 74.3569L94.2026 74.3949C95.4864 75.4052 96.8006 76.4383 98.0084 77.5777H98.016L98.0312 77.6005C98.1071 77.6689 98.1831 77.7373 98.2515 77.8056C98.2515 77.8132 98.2591 77.8132 98.2591 77.8132C98.2743 77.8208 98.2895 77.836 98.2971 77.8512C99.1478 78.6792 99.9378 79.568 100.614 80.5403C100.629 80.5631 100.637 80.5783 100.652 80.6011C100.682 80.6391 100.713 80.6846 100.735 80.7226C100.789 80.791 100.834 80.8669 100.872 80.9353C100.948 81.0417 101.009 81.148 101.077 81.2544C101.1 81.3075 101.115 81.3531 101.13 81.4063C101.13 81.4139 101.13 81.4215 101.146 81.4291C101.199 81.5658 101.252 81.7025 101.29 81.8469C101.32 81.9 101.343 81.9532 101.351 82.014L101.533 82.5153C101.601 82.6901 101.655 82.8572 101.708 83.0395C101.723 83.0851 101.738 83.1306 101.753 83.1838C101.837 83.4117 101.905 83.6396 101.974 83.8751C102.209 84.6803 102.422 85.4855 102.604 86.2907C102.627 86.3667 102.642 86.4502 102.657 86.5262C102.68 86.6097 102.695 86.6933 102.71 86.7769C102.999 88.0378 103.235 89.3064 103.47 90.5826C103.979 93.4084 104.45 96.257 105.248 99.0221C105.529 100.336 105.954 101.612 106.463 102.858C107.443 105.297 108.704 107.636 109.745 110.022C110.519 111.769 111.165 113.539 111.492 115.392Z' fill='%23C5CAB9'/%3E%3Cpath opacity='0.4' d='M111.492 115.392C111.644 117.329 110.223 122.077 107.587 124.591C105.194 126.012 101.465 124.112 98.9654 123.155H98.9503C98.8667 123.102 98.7832 123.057 98.6996 123.003C97.826 122.494 97.1196 121.674 96.5954 120.831C96.5802 120.816 96.5802 120.793 96.5574 120.77C96.5498 120.77 96.5498 120.763 96.5498 120.755C96.4131 120.535 96.284 120.307 96.1852 120.071C96.17 120.064 96.1624 120.048 96.1624 120.033C96.1472 120.018 96.1396 119.995 96.1244 119.973V119.957C96.1244 119.957 96.0865 119.889 96.0789 119.851C96.0561 119.828 96.0561 119.805 96.0409 119.783C95.8054 119.236 95.5927 118.666 95.4332 118.089H95.4256C94.6508 115.43 94.3469 112.414 92.3795 110.302C92.3719 110.302 92.3719 110.295 92.3643 110.295C92.0225 110.052 91.7034 109.778 91.3995 109.497H91.392C89.3182 107.53 88.2243 104.833 87.0165 102.304C85.5352 99.5841 83.3019 97.3432 81.6155 94.7604C77.0046 87.3464 71.596 78.1094 80.1266 71.1284H80.1343C80.1343 71.1284 80.2026 71.0676 80.2406 71.0448C80.2406 71.0296 80.2634 71.022 80.2786 71.022C88.2623 66.4794 92.6605 73.8174 98.259 77.8131C98.3046 77.8511 98.3502 77.8891 98.3881 77.927C98.3957 77.927 98.4033 77.9346 98.4033 77.9422C99.3832 78.7854 100.059 79.5451 100.614 80.5402C101.776 82.4392 102.103 84.6574 102.726 86.7767H102.718C88.4826 93.5906 91.6274 109.923 108.127 106.732C109.623 110.059 111.233 112.194 111.492 115.392Z' fill='%23C2C2AC'/%3E%3Cpath d='M109.396 120.041L109.381 120.049C109.1 120.246 108.818 120.436 108.53 120.618C108.241 120.808 107.945 120.983 107.649 121.158C107.352 121.325 107.056 121.492 106.752 121.651C106.486 121.788 106.221 121.917 105.947 122.046C105.894 122.077 105.841 122.1 105.788 122.122C104.998 122.487 104.2 122.814 103.38 123.087C103.357 123.102 103.326 123.11 103.304 123.117C103.19 123.163 103.076 123.201 102.969 123.239C102.643 123.345 102.316 123.444 101.989 123.535C101.951 123.55 101.921 123.558 101.891 123.558C101.853 123.566 101.822 123.573 101.792 123.581C101.769 123.588 101.754 123.588 101.739 123.588C101.617 123.619 101.496 123.634 101.374 123.649H101.366C101.23 123.664 101.093 123.672 100.956 123.672C100.873 123.672 100.789 123.664 100.698 123.657C100.409 123.642 100.121 123.581 99.8397 123.505C99.8245 123.505 99.8169 123.505 99.8093 123.505C99.513 123.376 99.2319 123.269 98.9661 123.163C98.8749 123.11 98.7838 123.064 98.7002 123.011C98.6015 122.958 98.5103 122.897 98.4192 122.836C98.3356 122.768 98.252 122.707 98.1685 122.646C98.1229 122.616 98.0849 122.586 98.0469 122.548C98.0317 122.54 98.0241 122.533 98.0089 122.517C97.933 122.457 97.857 122.388 97.7886 122.32C97.7583 122.297 97.7279 122.267 97.6975 122.236C97.6367 122.175 97.5759 122.115 97.5228 122.054C97.4772 122.001 97.424 121.948 97.3784 121.894C97.3405 121.856 97.3101 121.818 97.2721 121.78C97.2341 121.735 97.1961 121.682 97.1582 121.636C97.1126 121.591 97.0822 121.545 97.0518 121.499C97.0366 121.492 97.029 121.484 97.0366 121.477C97.0366 121.477 97.0341 121.472 97.029 121.461C97.029 121.461 96.991 121.408 96.9607 121.378C96.8239 121.203 96.7024 121.021 96.596 120.839C96.5808 120.823 96.5732 120.808 96.5732 120.793C96.5732 120.793 96.5581 120.785 96.5581 120.778C96.5125 120.709 96.4745 120.633 96.4365 120.565L96.3681 120.451C96.3681 120.451 96.3605 120.436 96.3605 120.428H96.353C96.353 120.428 96.3302 120.375 96.3226 120.345H96.315C96.2694 120.254 96.2238 120.162 96.1858 120.079C96.1706 120.071 96.1631 120.056 96.1631 120.041C96.1479 119.995 96.1251 119.95 96.1023 119.904H96.0947C96.0871 119.897 96.0795 119.881 96.0795 119.866C96.0795 119.866 96.0643 119.866 96.0719 119.851C96.0643 119.843 96.0567 119.836 96.0567 119.828C96.0111 119.714 95.9655 119.6 95.9124 119.486C95.8744 119.403 95.844 119.327 95.8136 119.243C95.7376 119.015 95.6541 118.795 95.5781 118.567C95.525 118.415 95.4794 118.263 95.4338 118.104C95.4262 118.073 95.411 118.036 95.4034 118.005C95.3882 117.944 95.3654 117.876 95.3502 117.815C95.3123 117.678 95.2743 117.549 95.2439 117.413C95.2135 117.306 95.1831 117.192 95.1527 117.086C95.0692 116.744 94.9856 116.402 94.9021 116.06C94.8489 115.863 94.8033 115.658 94.7501 115.453C94.7197 115.354 94.697 115.255 94.6742 115.157C94.621 114.959 94.5678 114.762 94.507 114.564C94.4994 114.526 94.4919 114.488 94.4767 114.45C94.4691 114.412 94.4615 114.367 94.4387 114.329C94.4311 114.298 94.4235 114.275 94.4159 114.245C94.3931 114.161 94.3703 114.078 94.3475 114.002C94.3399 113.994 94.3399 113.987 94.3323 113.979C94.3247 113.934 94.3171 113.903 94.302 113.865C94.264 113.744 94.226 113.622 94.1804 113.501C94.1804 113.485 94.1728 113.463 94.1652 113.447C94.1196 113.295 94.0665 113.151 94.0057 113.007C93.9449 112.84 93.8766 112.68 93.8082 112.521C93.7398 112.361 93.6639 112.202 93.5803 112.05C93.5043 111.898 93.4208 111.746 93.3296 111.594C93.1701 111.32 92.9878 111.047 92.7903 110.796C92.7523 110.743 92.7143 110.697 92.6763 110.652C92.5852 110.538 92.4864 110.424 92.3877 110.318C92.3801 110.318 92.3801 110.31 92.3725 110.31C92.3117 110.264 92.2434 110.211 92.1826 110.158H92.175C92.0762 110.082 91.9775 110.006 91.8787 109.923C91.7116 109.794 91.5597 109.664 91.4078 109.512H91.4002C91.271 109.391 91.1419 109.262 91.0203 109.133C90.914 109.019 90.8001 108.897 90.6937 108.776C90.6557 108.73 90.6102 108.677 90.5722 108.631H90.5646C90.481 108.533 90.405 108.434 90.3291 108.335C90.2151 108.198 90.1088 108.054 90.0101 107.91C89.9949 107.902 89.9873 107.894 89.9873 107.887C89.296 106.983 88.6655 106.003 88.0502 105C87.3285 103.846 86.6297 102.661 85.8853 101.552C85.4523 100.891 85.0041 100.26 84.5255 99.6677C84.4724 99.5993 84.4268 99.5309 84.3736 99.4626C82.4669 96.8418 80.2868 93.8337 78.5548 90.6813C77.5293 88.805 76.6634 86.8755 76.1088 84.9461C75.691 83.4876 75.4404 82.0215 75.4404 80.5782V80.563C75.4404 79.0285 75.7138 77.5245 76.3443 76.0584C76.4355 75.8305 76.5342 75.6026 76.6558 75.3823C76.7317 75.2304 76.8153 75.0785 76.8912 74.9265C76.9748 74.7822 77.0584 74.6379 77.1495 74.4936C77.6357 73.7187 78.2282 72.9591 78.9499 72.2223C79.0714 72.1083 79.1853 71.9868 79.3145 71.8728C79.3904 71.7969 79.4664 71.7209 79.5424 71.6525C79.6791 71.5234 79.8234 71.3943 79.9753 71.2651C80.0209 71.2272 80.0741 71.1816 80.1273 71.136H80.1349L80.1425 71.1208H80.1501C80.1501 71.1208 80.1729 71.1056 80.1881 71.098C80.2032 71.0828 80.226 71.0676 80.2488 71.06C80.2488 71.0448 80.2716 71.0372 80.2868 71.0372C80.3476 71.0069 80.4083 70.9841 80.4615 70.9613C82.8316 69.8978 84.761 69.5712 86.417 69.7459H86.4246C86.5993 69.7611 86.7664 69.7839 86.9335 69.8142C86.9639 69.8142 86.9867 69.8142 87.0095 69.8294C88.6807 70.1257 90.0936 70.9385 91.4533 72.002C91.5293 72.0476 91.5977 72.1083 91.666 72.1615C91.6888 72.1843 91.7192 72.1995 91.742 72.2299C92.3269 72.6932 92.8966 73.2022 93.4891 73.7339C93.5043 73.7567 93.5271 73.7795 93.5499 73.7947C93.755 73.9846 93.9677 74.1745 94.1728 74.372L94.2108 74.41C94.6286 74.7898 95.054 75.1772 95.4946 75.5722C95.5174 75.5798 95.5325 75.6026 95.5477 75.6178C96.315 76.2863 97.1278 76.9624 98.0089 77.6004H98.0241L98.0393 77.6156C98.1685 77.7144 98.2824 77.8283 98.3963 77.9423C98.4039 77.9423 98.4116 77.9499 98.4116 77.9575C99.042 78.5424 99.6194 79.1653 100.121 79.8262C100.121 79.8262 100.123 79.8287 100.128 79.8338C100.257 80.0009 100.379 80.1756 100.501 80.3503C100.508 80.3579 100.516 80.3655 100.523 80.3807C100.599 80.4946 100.675 80.6162 100.744 80.7377C100.797 80.8061 100.842 80.882 100.88 80.9504C100.972 81.1023 101.063 81.2619 101.139 81.4214C101.139 81.429 101.139 81.4366 101.154 81.4442C101.253 81.6417 101.351 81.8468 101.435 82.0519C101.693 82.6444 101.883 83.2597 101.982 83.8902C101.982 83.8902 101.989 83.9433 101.989 83.9737V83.9889C102.02 84.1484 102.035 84.308 102.05 84.4751C101.792 84.5586 101.541 84.6498 101.291 84.7562C91.2634 88.6834 85.4523 102.524 95.1299 109.839C97.576 109.406 102.483 106.687 104.565 111.389C105.263 112.422 105.939 113.47 106.578 114.534C106.593 114.556 106.608 114.587 106.623 114.61C107.223 115.605 107.785 116.623 108.31 117.671C108.454 117.975 108.598 118.271 108.743 118.575C108.978 119.061 109.198 119.555 109.403 120.056L109.396 120.041Z' fill='%23BBBBA5'/%3E%3Cpath d='M95.3503 117.8C95.5706 116.911 95.8213 116.023 96.1859 115.179C96.5505 114.321 97.0519 113.531 97.6216 112.794C98.047 112.24 98.5104 111.708 98.9737 111.184C99.5966 110.606 100.204 109.976 100.964 109.596C101.382 109.391 101.86 109.269 102.324 109.399C102.931 109.573 103.342 109.999 103.699 110.492C104.101 111.047 104.542 111.579 104.944 112.133C105.355 112.695 105.757 113.273 106.145 113.858C107.406 115.802 108.484 117.899 109.373 120.041C107.877 121.112 106.236 121.993 104.496 122.654C102.688 123.338 101.139 124.166 99.2244 123.292C97.6748 122.586 96.6189 121.165 95.9656 119.646C95.7833 119.228 95.6314 118.803 95.4946 118.362C95.4339 118.172 95.3807 117.99 95.3275 117.8H95.3503Z' fill='%23BBB99D'/%3E%3Cpath d='M106.464 102.858C91.8941 94.5781 101.048 91.2586 103.471 90.5825C103.98 93.4083 104.451 96.2569 105.248 99.022C105.529 100.336 105.955 101.612 106.464 102.858Z' fill='%23CCD1C0'/%3E%3Cpath d='M86.362 73.4124C86.362 73.6511 86.3045 73.8146 86.1808 73.8986C85.5133 74.3495 84.5409 74.208 83.7851 74.3097C83.1221 74.4025 82.4636 74.4997 81.8006 74.5926H81.7918C81.3807 74.6544 80.974 74.7163 80.563 74.7738C80.1387 74.8312 79.7099 74.8931 79.2856 74.9462C79.2724 74.9462 79.2591 74.9506 79.2459 74.9506C78.6226 75.0301 78.0083 75.1009 77.3851 75.1672H77.3718C77.3718 75.1672 77.363 75.1716 77.3585 75.1716C77.0712 75.2069 76.7795 75.2334 76.4922 75.2644H76.4878C76.3508 75.2821 76.2138 75.2998 76.0768 75.3086C75.8513 75.3351 75.6259 75.3528 75.4049 75.3705C75.4005 75.3749 75.4005 75.3705 75.4005 75.3705C75.3828 75.3749 75.3651 75.3749 75.3519 75.3749C75.1132 75.4014 74.8657 75.4235 74.627 75.4456C74.1762 75.4854 73.7253 75.5207 73.2745 75.5517H73.2701C73.1065 75.5649 72.9474 75.5826 72.7839 75.5915H72.7751C72.7751 75.5915 72.7353 75.5959 72.7176 75.5959C72.6822 75.6003 72.6557 75.6003 72.6204 75.6047C72.4436 75.6136 72.2712 75.6224 72.0944 75.6357C72.0502 75.6445 72.0016 75.6445 71.9574 75.6445C71.9574 75.6445 71.9574 75.6489 71.9529 75.6489C71.9529 75.6533 71.9485 75.6489 71.9485 75.6489H71.9441C71.8071 75.6578 71.6745 75.6666 71.5375 75.6754C71.2546 75.6931 70.9673 75.7108 70.6844 75.7241C69.8977 75.7683 69.1021 75.8036 68.3109 75.8213C68.2932 75.8257 68.2711 75.8257 68.2535 75.8257C67.5728 75.8434 66.8921 75.8611 66.2114 75.8699H66.0435C64.8899 75.8832 63.7319 75.8743 62.5782 75.8434H62.5517C62.26 75.839 61.9683 75.8301 61.681 75.8169C61.3981 75.808 61.1108 75.7992 60.8279 75.7859C60.8103 75.7859 60.7926 75.7815 60.7705 75.7815H60.7661C60.7263 75.7815 60.6865 75.7815 60.6467 75.7771C60.6025 75.7771 60.5583 75.7727 60.5141 75.7727H60.5053C60.2357 75.7594 59.966 75.7462 59.6964 75.7285C59.6655 75.7285 59.639 75.7241 59.608 75.7241C58.976 75.6887 58.3528 75.6445 57.7296 75.5915C57.6323 75.587 57.5395 75.5826 57.4423 75.5738H57.4378C57.4069 75.5694 57.3848 75.5694 57.3539 75.5649H57.3273C57.1992 75.5561 57.071 75.5473 56.9517 75.5296C56.7086 75.5119 56.4654 75.4854 56.2268 75.4677C56.0721 75.4544 55.913 75.4368 55.7583 75.4191C55.4312 75.3881 55.1085 75.3484 54.7726 75.3174H54.7682C54.7682 75.3174 54.7328 75.313 54.7152 75.313H54.7063C54.3704 75.2732 54.0301 75.2335 53.6942 75.1848H53.6897C53.6897 75.1848 53.6544 75.1848 53.6411 75.1804C53.6279 75.1804 53.6102 75.176 53.5969 75.176C53.1284 75.1185 52.6555 75.0655 52.1869 74.9948C50.914 74.818 49.6366 74.6147 48.3858 74.3229C48.3549 74.3185 48.3283 74.3097 48.2974 74.3053C47.8819 74.2124 47.462 74.1064 47.0421 73.9914H47.0333C46.8211 73.934 46.6178 73.8721 46.4057 73.8102H46.4012C45.8399 73.6379 45.2741 73.4478 44.7217 73.2312C44.0852 72.9881 43.4708 72.692 42.8741 72.3737C42.8388 72.3561 42.8122 72.3384 42.7769 72.3207C42.7769 72.3207 42.7725 72.3207 42.7725 72.3163C42.4144 72.1262 42.0741 71.9185 41.7338 71.6975L41.4818 71.534C41.2918 71.4058 41.084 71.2732 40.8807 71.1273C40.2575 70.6809 39.6387 70.1284 39.4884 69.4035C39.4752 69.3284 39.4619 69.2621 39.4575 69.187V69.1604C39.4398 68.4886 39.8686 67.8521 40.3238 67.3306C40.4608 67.167 40.5978 67.0168 40.7304 66.8798C40.7791 66.8267 40.8321 66.7737 40.8763 66.7118C40.9382 66.6411 41.0001 66.5704 41.0575 66.4952C41.0929 66.4554 41.1194 66.4112 41.1459 66.3715C41.1945 66.3184 41.2387 66.261 41.2741 66.1991C41.4686 65.9295 41.6454 65.6422 41.8133 65.3372C41.8752 65.2179 41.9371 65.1118 41.9901 64.9924C42.22 64.5372 42.4277 64.0421 42.6089 63.5294C42.6664 63.3836 42.715 63.2289 42.7636 63.0786C42.768 63.0786 42.768 63.0742 42.768 63.0698C43.0377 62.2609 43.2631 61.399 43.4487 60.5327C43.7095 59.3482 43.8995 58.1459 44.0587 57.0321V57.0233C44.2222 55.8741 44.346 54.8045 44.4653 53.9337C44.5183 53.558 44.567 53.1602 44.6156 52.7492V52.7359C44.6288 52.6033 44.6465 52.4707 44.6598 52.3337C44.7217 51.7591 44.7835 51.1624 44.8322 50.5525C44.8454 50.4066 44.8587 50.2696 44.8719 50.1237C44.8985 49.7878 44.9206 49.4563 44.9427 49.1204C44.9427 49.1204 44.9427 49.0806 44.9471 49.0674C44.9515 49.0099 44.9515 48.9613 44.9559 48.9038V48.8906C44.9603 48.8508 44.9603 48.8154 44.9648 48.7801C45.0045 48.011 45.0399 47.2375 45.0532 46.4596C45.0576 46.0928 45.062 45.7303 45.062 45.3679C45.062 45.2618 45.062 45.1601 45.0576 45.0585C45.0576 44.8861 45.0576 44.7093 45.0532 44.5325C45.0487 44.1612 45.0355 43.7811 45.0178 43.4098C45.0134 43.2596 45.009 43.1093 45.0001 42.9634C45.0001 42.9016 44.9957 42.8308 44.9913 42.769C44.9824 42.5612 44.9736 42.3623 44.9603 42.1767V42.106V42.1015C44.9294 41.5446 44.9206 41.0673 44.9161 40.6385C44.9161 40.4706 44.9161 40.3159 44.9206 40.1656C44.925 39.7059 44.9515 39.3126 44.9913 38.9236C45.009 38.7689 45.0311 38.6142 45.0487 38.4639V38.4551C45.0532 38.4109 45.062 38.3667 45.0664 38.3225V38.3136C45.0753 38.2518 45.0841 38.181 45.1018 38.1192C45.1637 37.6993 45.2476 37.2705 45.3537 36.7711C45.5747 35.7147 45.9283 34.7114 46.4145 33.7699C46.8698 32.8904 47.4399 32.0594 48.1073 31.3125C48.1825 31.2329 48.2488 31.1578 48.3239 31.0826C48.3681 31.034 48.4212 30.9854 48.4698 30.9368L48.5228 30.8837C49.6411 29.7876 51.0554 28.9787 52.7792 28.5588C52.819 28.5456 52.8588 28.5323 52.8986 28.5279C53.2787 28.4395 53.6765 28.3643 54.0875 28.3157C54.1759 28.3069 54.3527 28.2892 54.6002 28.276H54.6047C54.6047 28.276 54.6489 28.276 54.6798 28.2715C54.9052 28.2583 55.1748 28.2406 55.4621 28.2273C55.8511 28.2008 56.2666 28.1831 56.6467 28.1655C56.8544 28.1522 57.0533 28.1478 57.2301 28.1345H57.2389C57.4997 28.1213 57.7119 28.108 57.8445 28.1036H58.008C58.1936 28.0947 58.397 28.0992 58.6003 28.108C58.6799 28.108 58.7638 28.1124 58.8434 28.1168C58.945 28.1257 59.0511 28.1345 59.1572 28.1478L59.2765 28.161C59.3252 28.1655 59.3738 28.1699 59.4224 28.1787C59.502 28.1831 59.5683 28.1964 59.6478 28.2097H59.6522C59.6832 28.2141 59.7141 28.2185 59.7495 28.2229C59.8202 28.2362 59.8865 28.2494 59.9572 28.2627H59.9661C59.9926 28.2671 60.0191 28.2715 60.0456 28.276C60.05 28.276 60.0589 28.276 60.0633 28.2804C60.0766 28.2848 60.0898 28.2848 60.0986 28.2848C60.1605 28.2981 60.2224 28.3157 60.2843 28.3246C60.2976 28.329 60.3152 28.329 60.3285 28.3334C60.355 28.3378 60.3727 28.3422 60.3992 28.3467C60.4964 28.3732 60.5981 28.3953 60.6998 28.4262C60.7882 28.4439 60.8721 28.4704 60.965 28.4969H60.9694C61.0047 28.5058 61.0401 28.5146 61.0666 28.5279C61.1462 28.5544 61.2346 28.5765 61.3097 28.6074C61.323 28.6119 61.3407 28.6163 61.3583 28.6207C61.4025 28.634 61.4467 28.6516 61.4954 28.6693C61.6059 28.7091 61.7208 28.7489 61.8268 28.7887C61.902 28.8196 61.9683 28.8461 62.039 28.8726C62.1142 28.908 62.1849 28.9345 62.26 28.9655C62.2998 28.9831 62.344 29.0008 62.3882 29.0229C62.4368 29.0406 62.4943 29.0671 62.5429 29.0936C62.6534 29.1467 62.7683 29.2041 62.8876 29.266C62.9672 29.3058 63.0423 29.3456 63.1219 29.3942H63.1263C63.1882 29.4296 63.2501 29.4649 63.3119 29.5003C63.3871 29.5401 63.4534 29.5843 63.5329 29.624C63.6037 29.6682 63.6744 29.7124 63.7451 29.7611C63.7584 29.7655 63.7716 29.7743 63.7849 29.7876C63.7893 29.792 63.7981 29.7964 63.8114 29.8008C63.8954 29.8539 63.9749 29.9069 64.0633 29.9688C64.0678 29.9776 64.081 29.9821 64.0943 29.9865C64.165 30.0395 64.2357 30.0837 64.3064 30.1412C64.3153 30.1456 64.333 30.1544 64.3418 30.1677C64.4523 30.2472 64.5584 30.3312 64.6645 30.4196C64.7131 30.455 64.7573 30.4948 64.8059 30.539C64.8678 30.5876 64.9296 30.6362 64.9871 30.6892C65.0578 30.7467 65.1197 30.8086 65.1948 30.8749H65.1993C65.3319 30.9942 65.46 31.1136 65.5882 31.2417C65.6899 31.3478 65.796 31.4583 65.8976 31.5688C66.0833 31.7677 66.2601 31.9843 66.428 32.2141C66.4899 32.2981 66.5518 32.3821 66.6092 32.4705C66.6225 32.4882 66.6446 32.5235 66.6623 32.5545C66.9893 33.0407 67.2811 33.5666 67.5286 34.128C67.533 34.1324 67.5374 34.1412 67.5374 34.1412C67.8999 34.9412 68.1872 35.7854 68.3993 36.6208C68.5098 37.0407 68.5938 37.4562 68.6689 37.8628C68.7087 38.0838 68.7485 38.3092 68.7927 38.5346C68.828 38.7203 68.8634 38.9015 68.8988 39.0871C68.8988 39.1137 68.9076 39.1358 68.912 39.1579C68.9916 39.5822 69.0844 40.0021 69.1772 40.4131C69.2037 40.5236 69.2258 40.6341 69.2524 40.7358C69.3496 41.1645 69.4513 41.5844 69.5618 41.9955C69.5883 42.0883 69.6059 42.1723 69.6236 42.2607C69.6767 42.4507 69.7253 42.6319 69.7783 42.8132C69.8314 43.0209 69.8888 43.2198 69.9463 43.4143C69.9728 43.4761 69.9861 43.5469 70.0037 43.6087C70.0082 43.6087 70.0082 43.6132 70.0082 43.6176C70.0435 43.7413 70.0789 43.8563 70.1142 43.9756C70.1142 43.98 70.1187 43.98 70.1187 43.9844C70.1806 44.2187 70.2601 44.453 70.3308 44.674C70.3485 44.7181 70.2557 44.78 70.1363 44.8552C70.0082 44.9259 69.8535 45.001 69.7253 45.0762H69.7209C69.5927 45.1513 69.4999 45.2132 69.5131 45.253C69.6855 45.7524 69.8402 46.2209 69.9993 46.6718C70.0303 46.7513 70.0524 46.822 70.0833 46.9016C70.0789 46.906 70.0833 46.906 70.0833 46.906C70.154 47.1049 70.2203 47.3038 70.2955 47.4983C70.4236 47.874 70.5562 48.2408 70.6888 48.59C70.7861 48.8508 70.8833 49.1027 70.9806 49.3547C71.2723 50.1149 71.5817 50.8398 71.9264 51.5735C75.0955 58.3758 76.4303 62.6101 79.1309 66.6322C79.1486 66.6588 79.1663 66.6853 79.184 66.7118C79.3608 66.9814 79.5508 67.251 79.7542 67.5206C80.0238 67.8963 80.4613 68.2146 80.9696 68.5019H80.9741C81.1509 68.6035 81.3409 68.6964 81.531 68.7848C81.5398 68.7936 81.5486 68.798 81.5619 68.798C81.6238 68.8334 81.6857 68.8599 81.7475 68.8864C82.7067 69.324 83.7763 69.6908 84.5365 70.0754L84.6691 70.1505C84.9564 70.3052 85.1951 70.4688 85.3454 70.6411H85.3498C85.4117 70.7163 85.4691 70.7826 85.5001 70.8577C85.5885 71.0301 85.668 71.2025 85.7388 71.3572H85.7432C85.8669 71.6312 85.9686 71.8831 86.057 72.113C86.0968 72.2058 86.1277 72.2942 86.1542 72.3782C86.1896 72.4798 86.2161 72.5771 86.2471 72.6699C86.278 72.7804 86.3001 72.8909 86.3266 72.9925C86.3399 73.0721 86.3576 73.1428 86.362 73.2135C86.3708 73.2931 86.3752 73.3594 86.3752 73.4257L86.362 73.4124Z' fill='%23CE8000'/%3E%3Cpath d='M86.1808 73.8987C85.5134 74.3451 84.541 74.2037 83.7852 74.3097C82.2736 74.5175 80.762 74.7606 79.2503 74.9506C74.9055 75.4987 70.5342 75.8214 66.1585 75.87C65.3054 75.8567 64.4479 75.8346 63.5949 75.7948C60.6998 75.6755 57.8136 75.397 54.9451 74.9992C52.3859 74.6456 49.8268 74.1595 47.4135 73.2092C46.2996 72.7716 45.2521 72.2147 44.2576 71.5517C43.493 71.0434 42.4499 70.3848 42.2554 69.4124C42.0609 68.4445 42.8919 67.5295 43.4974 66.8842C46.5427 63.6444 48.7174 55.5294 48.4566 52.263C48.3107 50.4111 48.4168 47.8696 48.156 46.6674L51.3737 47.8917V41.4872C51.5726 41.5756 51.776 41.6552 51.9837 41.7303C52.5716 41.9469 53.0666 42.2607 53.566 42.6364C54.0478 42.9988 54.5163 43.3878 55.0246 43.7149C55.5506 44.0552 56.1075 44.3116 56.7042 44.5016C58.0434 44.9304 59.4711 45.1955 60.8855 45.1027C61.491 45.0629 62.0302 44.8508 62.5827 44.6033C62.9982 44.4176 63.4225 44.2011 63.8734 44.0906C63.7584 44.2055 63.6524 44.3337 63.5551 44.4751C63.5198 44.5281 63.5993 44.5723 63.6347 44.5193C63.7584 44.3381 63.8999 44.1834 64.0501 44.0508C64.1606 44.0331 64.2711 44.0198 64.3816 44.0198C64.4435 44.0198 64.4435 43.9226 64.3816 43.9226C64.3198 43.9226 64.2535 43.927 64.196 43.9359C64.6778 43.5823 65.2789 43.4497 65.9154 43.5823C66.7861 43.7591 67.5861 44.2674 68.2314 44.8685C68.8635 45.4563 69.4513 46.0044 69.4955 46.884C69.5441 47.9403 69.7475 48.9437 69.8845 49.9735C70.0436 51.1846 69.9419 52.2277 70.4635 53.3901C70.9895 54.5614 71.8425 55.5515 72.5983 56.5902C73.3541 57.6289 74.0481 58.778 74.1718 60.0554C73.7873 59.7018 73.3188 59.4366 72.8105 59.2996C72.7486 59.2819 73.2923 61.8499 73.3939 62.093C73.7475 62.9416 74.2249 63.7151 74.9497 64.2765C75.7542 64.8997 76.4525 65.6864 77.2437 66.3406C78.0967 67.0433 78.9807 67.7108 79.8735 68.3649C80.7089 68.9793 81.5575 69.5892 82.499 70.0356C83.2062 70.3716 83.9576 70.6102 84.7267 70.7605C84.9742 70.8091 85.2305 70.8312 85.4869 70.8445C86.3311 72.5196 86.5698 73.6379 86.1808 73.8987Z' fill='%23C07500'/%3E%3Cpath opacity='0.6' d='M55.7979 67.7506C56.0144 70.5484 57.1592 73.5628 57.9239 76.2457C62.8477 76.3916 74.397 75.9319 79.2943 75.4148C79.312 75.0833 79.281 74.7429 79.2412 74.4335C79.144 73.6645 78.9319 72.9131 78.7109 72.1705C78.4987 71.4545 78.3086 70.734 78.0346 70.0357C77.7473 69.3064 77.3495 68.6257 76.8235 68.0423C75.6523 66.7384 76.2578 65.9561 74.7859 65.0191C70.5826 62.345 71.3295 59.0123 71.3384 58.4333C71.3649 56.4444 69.8931 55.7195 68.8146 51.4808C68.5848 50.5791 68.408 49.6642 68.3151 48.736C68.2046 47.6443 68.2312 46.5437 68.4433 45.4829C68.2975 45.3326 68.1428 45.1912 67.9836 45.0409C67.3383 44.4398 66.5427 43.9359 65.6676 43.7547C65.4289 43.7061 65.1991 43.6928 64.9737 43.7149C64.6996 44.4663 64.5007 45.2442 64.3239 46.0221C64.1295 46.8884 63.9748 47.7592 63.7935 48.6299C63.5504 49.81 63.2941 50.9813 63.1261 52.1791C62.388 57.346 55.8023 67.7462 55.8023 67.7462L55.7979 67.7506Z' fill='%23A05A07'/%3E%3Cpath d='M44.1782 56.4398C44.1782 56.4398 43.1351 62.3361 41.5219 63.6002C41.5219 63.6002 44.9429 62.5217 45.1108 60.4664C45.2788 58.4111 44.1782 56.4398 44.1782 56.4398Z' fill='%23CE8000'/%3E%3Cpath d='M47.184 54.1195C47.1353 55.0388 47.0425 55.8874 46.9099 56.6653H46.9055C46.4105 59.6488 45.3762 61.6599 44.2712 63.0168C43.8204 63.5693 43.3563 64.0157 42.9099 64.3693C42.5872 64.6301 42.2778 64.8378 41.9905 65.0058C41.8182 65.1074 41.659 65.1958 41.5043 65.271H41.4999C41.2657 65.3947 41.0535 65.4831 40.8767 65.5406C40.7972 65.5715 40.7309 65.5936 40.669 65.6157C40.6601 65.6202 40.6513 65.6246 40.638 65.6246C40.6248 65.629 40.6071 65.6334 40.5983 65.6334H40.5938C40.5408 65.6511 40.4966 65.6688 40.4612 65.6776H40.448C40.364 65.7041 40.3154 65.713 40.3154 65.713C40.3154 65.713 40.3419 65.6334 40.3905 65.4831C40.3994 65.4522 40.417 65.4213 40.4303 65.3815C40.4436 65.3329 40.4612 65.2754 40.4833 65.2091C40.4922 65.1782 40.501 65.1472 40.5187 65.1119V65.103C40.5187 65.103 40.5187 65.0986 40.5231 65.0942C40.5806 64.9041 40.6557 64.6787 40.7397 64.4223C40.8016 64.2367 40.8679 64.0334 40.9386 63.8212C40.9916 63.6489 41.0491 63.4676 41.1154 63.282C42.1585 60.0864 43.9441 54.6498 44.6116 52.7625H44.616V52.7493C44.6513 52.6653 44.6734 52.5857 44.7044 52.5194C44.7486 52.3868 44.7884 52.2808 44.8149 52.21C44.8193 52.1968 44.8237 52.1835 44.8281 52.1747C45.0094 51.7459 45.3983 51.9316 45.8094 52.3294H45.8138C46.0348 52.546 46.2646 52.8244 46.4768 53.094C46.5873 53.2443 46.6934 53.3857 46.7818 53.5183C47.0204 53.8631 47.184 54.1195 47.184 54.1195Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M51.3608 48.7498L47.4487 56.8855C47.4487 56.8855 47.1828 56.4221 46.8486 56.0423C46.6207 55.784 46.3624 55.5713 46.1345 55.5713C45.5724 55.5713 44.395 58.4503 44.395 58.4503C44.7216 57.5843 44 56.4449 44 56.4449L43.4302 57.2729L43.5138 55.9435C43.5138 55.9435 43.2479 56.2094 42.9517 56.4297C43.0656 55.7536 43.2327 55.1687 43.3923 54.675C43.5974 54.2344 43.7341 53.7634 43.7797 53.2772C43.7797 53.2772 43.7797 53.262 43.7797 53.2544C43.8252 52.7835 43.8708 52.2973 43.9088 51.8036C43.924 51.5833 43.9468 51.3706 43.962 51.1503C43.9772 50.9604 43.9848 50.7629 44 50.573C44.0151 50.3831 44.0227 50.1855 44.0379 49.988C44.0835 49.2132 44.1139 48.4308 44.1291 47.6408C44.1291 47.4965 44.1291 47.3521 44.1291 47.2154C44.1291 46.9495 44.1291 46.6837 44.1291 46.4178C46.294 44.6251 49.5377 47.1166 50.8138 48.2409C51.1481 48.5372 51.3456 48.7422 51.3456 48.7422L51.3608 48.7498Z' fill='%23C77500'/%3E%3Cpath d='M36.2675 72.5664C30.9653 70.5686 29.2409 67.9099 29.2409 67.9099C29.2409 67.9099 30.6158 66.6337 33.0694 65.3196C35.6066 63.9598 39.306 62.5545 43.8182 62.4785C44.8817 62.4558 45.9907 62.5165 47.1378 62.6685C57.9017 64.0586 41.5697 74.5643 36.2675 72.5664Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.4' d='M36.2675 72.5664C30.9653 70.5686 29.2409 67.9099 29.2409 67.9099C29.2409 67.9099 30.6158 66.6337 33.0694 65.3196C35.6066 63.9598 39.306 62.5545 43.8182 62.4785C44.8817 62.4558 45.9907 62.5165 47.1378 62.6685C57.9017 64.0586 41.5697 74.5643 36.2675 72.5664Z' fill='%233B754B'/%3E%3Cpath d='M43.8181 62.4787C42.428 62.7977 40.4453 63.7397 37.7487 65.3653C34.976 67.0364 33.4871 65.7831 33.0693 65.3197C35.6065 63.9599 39.3059 62.5546 43.8181 62.4787Z' fill='%23459562'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.4'%3E%3Cpath d='M84.7343 272.808L84.6963 272.892C83.2378 272.71 81.6426 272.466 81.0728 272.36C76.743 271.555 77.966 263.913 79.189 261.277C79.3409 260.943 79.4472 260.616 79.508 260.282C79.2801 260.282 79.0522 260.13 79.1358 259.872C79.4093 258.975 80.3512 257.031 80.1917 256.127C80.1385 255.846 80.1233 255.299 80.1157 254.592C79.6903 254.418 79.4548 253.962 79.5612 253.544C79.6372 253.255 79.8423 253.012 80.1081 252.838C80.1157 250.893 80.1157 248.546 79.9334 246.943L79.865 246.897C79.7967 246.844 79.7435 246.776 79.7055 246.7C79.5612 246.48 79.4169 246.259 79.3713 246.001C79.3333 245.75 79.4017 245.462 79.622 245.317C79.6295 245.325 79.6447 245.325 79.6523 245.332C79.6068 245.143 79.5536 244.953 79.4928 244.763C78.9535 243.069 79.4852 241.504 78.8395 239.802C78.7332 239.536 78.6117 239.263 78.5661 238.974C78.4749 238.367 78.7484 237.767 78.7864 237.151C78.8091 236.771 78.7408 236.384 78.6496 236.012C78.3154 234.644 77.6773 233.383 77.4114 231.993C77.3734 231.788 77.3507 231.583 77.3355 231.378C77.2443 231.317 77.1684 231.257 77.1076 231.181C76.705 230.71 76.6366 230.003 76.8189 229.418C76.7505 229.289 76.6898 229.16 76.6214 229.038C76.5455 228.894 76.4695 228.735 76.4011 228.567C74.4261 228.636 72.8916 228.773 71.6686 228.932L69.7088 213.033L66.7462 189.621L58.7701 126.625L58.8309 93.87L64.7484 91.4164C64.7484 91.4164 69.6632 90.9454 69.5645 93.5509C69.4657 96.1489 65.6448 95.8146 65.6448 95.8146L65.66 96.3844V97.6681C65.66 97.6681 67.7717 114.585 65.6676 116.659C64.794 117.525 67.3767 119.135 67.9465 121.976C68.7061 125.774 68.7061 131.092 68.7061 131.092C68.7061 131.092 75.9529 131.905 78.5813 133.371C81.2096 134.829 82.2579 135.536 82.3186 138.255C82.3794 140.967 79.5004 142.912 77.5254 142.699L77.2139 154.967C77.2139 154.967 77.8672 156.957 78.2242 159.221C78.5813 161.477 80.0094 173.517 81.954 174.33C81.954 174.33 83.0175 176.502 82.3186 178.485L80.7918 178.667L80.1917 195.569C80.1917 195.569 82.2883 199.633 83.2682 204.092C83.686 205.991 83.8987 207.959 83.6632 209.713C83.6024 210.177 83.5113 210.625 83.3821 211.05C83.329 211.225 83.2834 211.4 83.2378 211.582C82.0376 216.558 83.8075 224.496 84.4304 227.018C84.4684 227.193 84.5064 227.337 84.5368 227.451C84.5975 227.686 84.6355 227.815 84.6355 227.815C84.6355 227.815 84.2633 228.864 84.4152 229.859C84.4836 230.299 84.6583 230.732 85.0153 231.059C85.0153 231.059 84.9849 231.234 84.9621 231.507C84.8938 232.183 84.8558 233.452 85.4103 233.847L85.4331 234.113L86.413 245.279V245.34C86.413 245.34 85.2204 246.571 85.98 247.292C86.0028 247.323 86.0256 247.338 86.0484 247.361L86.4206 253.893C86.4206 253.893 86.4055 253.939 86.3751 254.023C86.2459 254.418 85.9041 255.595 86.3751 255.975C86.3751 255.975 86.3827 256.058 86.3979 256.21C86.5802 258.018 87.5981 269.701 84.7343 272.808Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M71.0883 118.127C70.8452 118.043 66.0747 116.288 63.6059 115.195C63.0058 114.921 62.55 114.701 62.3145 114.549L62.2158 114.473C61.8056 114.161 61.6005 113.782 61.4865 113.356C61.4865 113.356 61.4865 113.333 61.479 113.326C61.3118 112.726 61.2815 112.019 61.0308 111.222C60.9928 111.1 60.9472 110.986 60.9016 110.865C60.3319 109.421 62.2538 109.361 62.6412 109.368C62.6868 109.368 62.7095 109.368 62.7095 109.368C62.7095 109.368 62.7399 109.421 62.7855 109.52C63.0058 109.946 63.6591 111.146 64.5099 112.148C65.4518 113.258 66.9787 113.941 67.594 114.617C68.5207 115.612 70.9363 117.982 71.0807 118.134L71.0883 118.127Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M71.0883 118.127C70.8452 118.043 66.0747 116.288 63.6059 115.195C63.0058 114.921 62.55 114.701 62.3145 114.549L62.2158 114.473C61.8056 114.161 61.6005 113.782 61.4865 113.356C61.4865 113.356 61.4865 113.333 61.479 113.326C61.3118 112.726 61.2815 112.019 61.0308 111.222C60.9928 111.1 60.9472 110.986 60.9016 110.865C60.3319 109.421 62.2538 109.361 62.6412 109.368C62.6868 109.368 62.7095 109.368 62.7095 109.368C62.7095 109.368 62.7399 109.421 62.7855 109.52C63.0058 109.946 63.6591 111.146 64.5099 112.148C65.4518 113.258 66.9787 113.941 67.594 114.617C68.5207 115.612 70.9363 117.982 71.0807 118.134L71.0883 118.127Z' fill='%23CEB79B'/%3E%3Cpath d='M63.6059 115.195C63.0058 114.921 62.55 114.701 62.3145 114.549L62.2158 114.473C61.9499 114.245 61.7144 113.842 61.4865 113.356C61.4865 113.356 61.4865 113.333 61.479 113.326C61.3118 112.726 61.2815 112.019 61.0308 111.222C60.9928 111.1 60.9472 110.986 60.9016 110.865C60.3319 109.421 62.2538 109.361 62.6412 109.368C62.6944 109.414 62.7475 109.459 62.7931 109.52C63.0134 109.946 63.6667 111.146 64.5175 112.148C64.4035 112.293 63.3628 113.675 65.3151 114.64C65.7253 114.845 64.7985 115.103 63.6059 115.21V115.195Z' fill='%23CEB79B'/%3E%3Cpath d='M67.2296 92.7096C67.2296 93.6212 63.4315 94.3884 58.7294 94.4264C55.6529 94.4492 52.9182 94.1529 51.4217 93.6895C50.6317 93.4465 50.1835 93.1578 50.2063 92.8388C50.2291 92.5425 50.4722 92.2918 50.9963 92.0715C51.4521 91.8816 52.1282 91.7145 53.0701 91.5778C53.0853 91.5778 53.1081 91.5778 53.1233 91.5702C53.4196 91.5246 53.7462 91.4866 54.0956 91.4486C55.2958 91.3119 56.8151 91.2055 58.7066 91.122C63.4011 90.9093 67.222 91.7069 67.2296 92.7096Z' fill='%239EA58E'/%3E%3Cpath d='M67.2296 92.7096C67.2296 93.6212 63.4315 94.3884 58.7294 94.4264C55.6529 94.4492 52.9182 94.1529 51.4217 93.6895C50.6317 93.4465 50.1835 93.1578 50.2063 92.8388C50.2291 92.5425 50.4722 92.2918 50.9963 92.0715C51.4521 91.8816 52.1282 91.7145 53.0701 91.5778C53.0853 91.5778 53.1081 91.5778 53.1233 91.5702C53.4196 91.5246 53.7462 91.4866 54.0956 91.4486C55.2958 91.3119 56.8151 91.2055 58.7066 91.122C63.4011 90.9093 67.222 91.7069 67.2296 92.7096Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M67.2296 92.7096C67.2296 92.9906 66.865 93.2641 66.2269 93.4996C65.6496 93.7123 64.8444 93.9022 63.8721 94.0541C62.444 94.2744 60.6664 94.4187 58.7294 94.4263C55.6529 94.4491 52.9182 94.1529 51.4217 93.6895C50.6317 93.4464 50.1835 93.1578 50.2063 92.8387C50.2291 92.5425 50.4722 92.2918 50.9963 92.0715C51.4521 91.8816 52.1282 91.7145 53.0701 91.5777C53.0853 91.5777 53.1081 91.5777 53.1233 91.5701C53.4196 91.5246 53.7462 91.4866 54.0956 91.4486C55.2958 91.3119 56.8151 91.2055 58.7066 91.122C60.2714 91.0536 61.7375 91.0916 62.9909 91.2207C65.1406 91.4334 66.6979 91.8816 67.1157 92.4209C67.184 92.5197 67.222 92.6184 67.222 92.7096H67.2296Z' fill='%23474C2F'/%3E%3Cpath d='M45.1091 138.865L47.0234 138.849H48.2691L48.8009 138.834L50.9431 138.819L52.4927 138.804H53.1839L59.0939 138.751L65.0038 138.705H65.6874L66.8877 138.69H68.0043L69.2881 138.675H70.8605L73.0482 138.644L73.0634 141.128L73.0862 143.764L73.147 152.151L73.2609 166.584L73.4433 190.405L73.4736 194.523L73.4964 197.873L73.6104 212.306L73.7471 229.754L73.8155 238.315L73.8914 247.803C72.4406 249.224 70.7618 250.401 70.2072 250.766C70.1541 250.804 70.1465 250.864 70.1693 250.91V250.933H70.1844C70.1844 250.933 70.192 250.948 70.1996 250.948C70.23 250.963 70.268 250.978 70.2984 250.994C71.6125 251.472 72.8659 251.495 73.9142 251.343V251.654L73.937 253.911L74.0054 262.472L74.0282 265.434C74.0282 265.859 73.9066 266.285 73.6635 266.687L67.3966 276.988L61.5475 286.597C61.4031 286.833 61.1525 287 60.8486 287.099C60.6511 287.159 60.4308 287.197 60.2181 287.197C59.6712 287.197 59.1242 287.008 58.8812 286.62L56.9213 283.513L51.8622 275.484L47.7678 268.982L46.4612 266.908C46.2105 266.513 46.0814 266.087 46.0814 265.662L45.9979 254.625L45.9295 245.782L45.8687 237.442V237.221C46.4916 236.675 47.2133 236.112 47.9653 235.657C48.4515 235.368 48.5578 235.11 48.3679 234.973C48.064 234.768 46.8866 234.289 45.8459 234.168L45.8003 228.615L45.6864 213.901L45.6636 210.832L45.6256 206.434L45.4433 182.893L45.3294 168.179L45.2686 160.073L45.1167 140.802V140.665L45.1015 138.88L45.1091 138.865Z' fill='%23CCD1C0'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.32'%3E%3Cpath d='M59.0711 138.758L64.981 138.713H65.6647L66.8649 138.698H67.9816L69.2729 138.682H70.8454L73.0331 138.652L73.0483 141.136L73.0711 143.772L73.1319 152.158L73.2458 166.591L73.4281 190.413L73.4585 194.53L73.4813 197.88L73.5952 212.313L73.732 229.762L73.8003 238.323L73.8763 247.811C72.4254 249.231 70.7466 250.409 70.1921 250.773C70.1389 250.811 70.1313 250.872 70.1541 250.918V250.94H70.1693C70.1693 250.94 70.1769 250.956 70.1845 250.956C70.2149 250.971 70.2529 250.986 70.2832 251.001C71.5974 251.48 72.8508 251.502 73.8991 251.351V251.662L73.9219 253.918L73.9902 262.479L74.013 265.442C74.013 265.867 73.8915 266.292 73.6484 266.695L67.3815 276.996L61.5323 286.605C61.388 286.84 61.1373 287.008 60.8335 287.106L60.2029 287.205L60.1346 278.538L60.1194 276.358V275.271L59.0711 139.45V138.766V138.758Z' fill='%23C5CAB9'/%3E%3C/g%3E%3Cpath d='M45.3295 168.164L51.1331 164.829L51.2394 179.482L45.4435 182.878L45.3295 168.164Z' fill='%23C5CAB9'/%3E%3Cpath d='M73.1473 152.151L73.2612 166.583L67.4577 169.979L67.3438 155.493L73.1473 152.151Z' fill='%23C5CAB9'/%3E%3Cpath d='M73.443 190.406L73.4734 194.523L67.6699 197.918L67.6395 193.748L73.443 190.406Z' fill='%23C5CAB9'/%3E%3Cpath d='M45.1174 140.65L50.921 137.307L51.0653 156.663L45.2694 160.058L45.1174 140.65Z' fill='%23C5CAB9'/%3E%3Cpath d='M73.0181 135.796L73.0788 143.764L67.2829 147.16L67.2221 139.131L73.0181 135.796Z' fill='%23C5CAB9'/%3E%3Cpath opacity='0.78' d='M67.2074 137.186L68.1949 265.7C68.1949 265.951 68.1265 266.201 67.9822 266.437L61.0544 277.953L60.9252 278.165C60.6442 278.629 59.6567 278.636 59.368 278.181L59.1249 277.793L52.1287 266.558C51.9844 266.323 51.9084 266.072 51.9084 265.821L50.9209 137.307L67.2074 137.186Z' fill='%239EA58E'/%3E%3Cpath opacity='0.14' d='M65.6726 138.538L66.6525 265.958C66.6525 266.163 66.5917 266.368 66.4778 266.558L60.8641 275.887L60.7578 276.061C60.5299 276.434 59.7323 276.441 59.4968 276.069L59.2993 275.758L53.6324 266.657C53.5109 266.467 53.4501 266.262 53.4501 266.065L52.4702 138.644H53.1539L54.1338 266.049C54.1338 266.232 54.1946 266.414 54.2933 266.581L59.3677 274.74L59.5424 275.021C59.7475 275.355 60.4691 275.347 60.6666 275.013L60.7578 274.854L65.7865 266.49C65.8929 266.315 65.946 266.141 65.9385 265.951L64.9585 138.546H65.6422L65.6726 138.538Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M64.9746 137.533L53.1552 137.624L53.1629 138.634L64.9824 138.543L64.9746 137.533Z' fill='%23474C2F'/%3E%3Cpath d='M55.1287 95.0721L62.3451 95.0189L62.3603 96.7965L62.4211 104.742L62.6566 135.37L55.4401 135.424L55.2502 110.242L55.1439 97.0623L55.1287 95.0721Z' fill='%23474C2F'/%3E%3Cpath d='M56.785 88.9266C57.3015 88.6911 57.8788 88.5544 58.4865 88.5392H58.7372C60.7502 88.4936 62.4822 89.8306 63.0139 91.6765C63.0291 91.7373 63.0519 91.8056 63.0671 91.8664C63.1355 92.1627 63.181 92.4665 63.181 92.7855L54.2326 92.9755C54.2174 92.3753 54.3314 91.8056 54.5365 91.2891C54.5896 91.1599 54.6428 91.0308 54.7112 90.9017C55.1594 90.0281 55.8962 89.3216 56.7926 88.919L56.785 88.9266Z' fill='%239EA58E'/%3E%3Cpath d='M56.7854 88.9267C57.3019 88.6913 57.8792 88.5545 58.4869 88.5393H58.7376C61.138 88.4862 63.1283 90.3928 63.1814 92.7932H62.794C62.7864 92.459 62.7029 92.1096 62.5585 91.7829C61.9053 90.3472 60.1353 89.7471 58.5933 90.446C57.5298 90.9246 56.8537 91.9045 56.755 92.93L54.2406 92.9832C54.2026 91.1828 55.2585 89.618 56.8006 88.9267H56.7854Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M56.7846 88.9266C57.3011 88.6911 57.8785 88.5544 58.4862 88.5392H58.7369C59.4889 88.5164 60.1954 88.6911 60.8183 89.0102C60.2181 89.0254 59.5876 89.1621 58.9648 89.4432C57.3316 90.18 56.3592 91.6461 56.5415 92.9299L54.2323 92.9755C54.1943 91.1751 55.2502 89.6103 56.7922 88.919L56.7846 88.9266Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M54.7039 90.9094C54.7039 90.9094 58.7223 92.8996 63.0142 91.6766C63.113 92.0336 63.1737 92.4058 63.1813 92.7856L54.2329 92.9756C54.2177 92.2311 54.3924 91.5247 54.7115 90.9018L54.7039 90.9094Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M54.5288 91.2967C55.5239 91.6841 59.1854 92.9299 63.0595 91.874C63.1278 92.1702 63.1734 92.4741 63.1734 92.7931L54.225 92.983C54.2098 92.3829 54.3237 91.8132 54.5288 91.2967Z' fill='%23474C2F'/%3E%3Cpath d='M67.5795 93.5528C67.5795 94.0769 67.3592 94.5631 66.9642 94.8821C62.9458 96.9331 56.9447 96.8647 52.7212 95.8696C51.9463 95.6721 51.3462 95.4518 50.8905 95.2619C49.5991 94.7226 49.6371 93.1502 50.4423 92.3981C50.4499 92.3905 50.465 92.3753 50.4726 92.3677L50.4954 92.3525C50.8601 92.0411 51.369 91.8816 51.9691 92.0411C52.0147 92.0563 52.0603 92.0639 52.1059 92.0791C52.7212 92.2386 53.3896 92.3677 54.0961 92.4665C54.2328 92.4893 54.3695 92.5045 54.5139 92.5273C55.4254 92.6412 56.3902 92.7172 57.3701 92.7476C57.5068 92.7476 57.6436 92.7476 57.7803 92.7551C57.8866 92.7551 57.993 92.7551 58.0993 92.7551C59.8617 92.7703 61.6316 92.6564 63.1889 92.4209C64.4802 92.3601 65.9767 91.3498 67.0402 92.3525H67.0478C67.0478 92.3525 67.0933 92.4057 67.1161 92.4285C67.4048 92.7324 67.5643 93.1426 67.5719 93.5604L67.5795 93.5528Z' fill='%239EA58E'/%3E%3Cpath d='M67.579 93.5528C67.5866 94.0769 67.3511 94.5631 66.9637 94.8822C66.356 95.3151 65.604 95.4823 64.8823 95.7253C65.3077 94.0997 64.6924 92.4589 63.1959 92.421C63.1959 92.421 63.1504 92.421 63.12 92.421C64.4266 92.421 66.0294 91.2739 67.1232 92.421C67.4119 92.7248 67.5714 93.135 67.579 93.5528Z' fill='%23949984'/%3E%3Cpath d='M52.7212 95.8696C52.1287 95.7177 51.6349 95.5506 51.2323 95.3986C51.2095 95.391 51.1867 95.3835 51.1639 95.3759C51.1336 95.3607 51.1032 95.3531 51.0728 95.3379C51.012 95.3151 50.9512 95.2923 50.8981 95.2619C50.2752 95.0036 49.8726 94.3959 49.865 93.7199V93.6895C49.865 92.7779 50.5563 92.0639 51.407 91.9879C51.5893 91.9727 51.7869 91.9879 51.9768 92.0335C52.2198 92.0943 52.4781 92.155 52.7592 92.2158C53.0023 92.269 53.9594 92.4285 54.2329 92.4817C52.311 93.1653 52.4021 95.2391 52.7288 95.8696H52.7212Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M67.0854 92.3905C66.6676 92.5045 66.1966 92.6108 65.6649 92.7172C64.0165 93.0438 61.8212 93.3097 59.003 93.3325C55.2656 93.3629 52.5841 92.9147 50.8294 92.4589C50.7002 92.4209 50.5711 92.4057 50.442 92.3981C50.442 92.3981 50.4647 92.3753 50.4799 92.3677L50.5027 92.3525C50.8977 92.0411 51.4295 91.8968 51.9764 92.0411C52.022 92.0563 52.0675 92.0639 52.1131 92.0791C52.6677 92.2158 53.3285 92.3525 54.1034 92.4665C54.2401 92.4893 54.3768 92.5045 54.5212 92.5273C55.3492 92.6336 56.2987 92.7172 57.3773 92.7476C57.5141 92.7476 57.6508 92.7551 57.7876 92.7551C57.8939 92.7551 58.0003 92.7551 58.1066 92.7551C59.8689 92.7703 61.6389 92.6564 63.1961 92.4209C64.4875 92.3601 65.984 91.3498 67.0474 92.3525H67.055L67.093 92.3981L67.0854 92.3905Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M54.1037 91.4487C53.6859 91.5854 52.1287 91.8285 51.3842 93.2566C51.1488 93.7124 51.0272 94.5783 51.1032 94.9506V94.9885C51.1412 95.1253 51.1791 95.262 51.2323 95.3911C51.2095 95.3835 51.1867 95.376 51.1639 95.3684C51.1336 95.3532 51.1032 95.3456 51.0728 95.3304C51.012 95.3076 50.9512 95.2848 50.8981 95.2544C50.2752 94.9961 49.8726 94.3884 49.865 93.7124V93.682C49.865 92.9224 50.3512 92.2995 51.0044 92.0716C51.4602 91.8817 52.1363 91.7145 53.0782 91.5778C53.0934 91.5778 53.1162 91.5778 53.1314 91.5702C53.4276 91.5246 53.7543 91.4867 54.1037 91.4487Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M67.5797 93.5604C67.5873 94.3048 67.1011 94.9505 66.4099 95.1936C66.6226 92.3601 64.9438 92.2082 62.9991 91.2207C65.1489 91.4334 66.7061 91.8816 67.1239 92.4209C67.405 92.7172 67.5797 93.1426 67.5797 93.568V93.5604Z' fill='%23474C2F'/%3E%3Cpath d='M58.107 93.8719C60.5378 93.7199 62.5736 94.6163 62.6572 95.8773C62.6572 95.9912 62.6572 96.1052 62.6344 96.2191C61.5329 96.3938 60.2416 96.5154 58.7527 96.5306C56.7776 96.5457 55.1596 96.371 53.8759 96.1279C54.0961 94.9961 55.8813 94.0162 58.1146 93.8719H58.107Z' fill='%23B1B7A5'/%3E%3Cpath d='M42.4582 134.087C45.8386 132.765 49.576 131.975 53.4273 131.618C56.2455 131.36 59.1245 131.337 61.9731 131.519C64.8749 131.701 67.7463 132.104 70.4809 132.674C73.4055 133.509 75.2362 133.699 77.0593 135.591C79.2395 137.968 76.7479 141.949 73.6866 141.288C72.9421 141.09 72.2205 140.916 71.5141 140.756C70.1619 140.452 68.8477 140.209 67.4956 140.012C65.0268 139.662 62.4137 139.48 59.1093 139.427C55.5315 139.389 51.7865 139.586 48.3378 140.141C47.8668 140.217 47.3958 140.3 46.9324 140.392C46.1804 140.536 45.4436 140.695 44.7371 140.878C40.4908 141.972 38.4246 135.758 42.4582 134.087Z' fill='%239EA58E'/%3E%3Cpath d='M42.4583 134.087C45.8386 132.765 49.576 131.975 53.4273 131.618C48.6037 134.117 46.8185 136.966 46.9401 140.392C46.188 140.536 45.4512 140.695 44.7448 140.878C40.4984 141.972 38.4322 135.758 42.4659 134.087H42.4583Z' fill='%23949984'/%3E%3Cpath d='M61.9652 131.527C64.867 131.709 67.7384 132.112 70.4731 132.681C73.3977 133.517 75.2284 133.707 77.0515 135.598C79.2316 137.976 76.74 141.956 73.6787 141.296C72.9343 141.098 72.2126 140.923 71.5062 140.764C70.6554 136.692 67.822 133.616 61.9576 131.527H61.9652Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M42.4659 134.079H42.4735C43.6129 133.608 45.1929 133.061 47.2515 132.583C47.7681 132.484 48.3074 132.37 48.8619 132.241C49.0974 132.195 49.3405 132.15 49.5836 132.112C48.1327 132.491 46.9401 132.909 45.9905 133.297H45.9754C44.2358 134.026 43.2179 136.016 43.3926 138.371C43.461 139.298 43.7041 140.179 44.0687 140.984C42.0329 141.121 40.2174 139.495 40.2401 137.361C40.2553 135.917 41.1289 134.634 42.4583 134.079H42.4659Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M42.4583 134.087H42.4811C42.5267 134.056 42.5647 134.041 42.6178 134.026C42.6634 134.011 42.7014 133.988 42.747 133.973C42.7926 133.95 42.8381 133.935 42.8913 133.919C42.9825 133.882 43.0736 133.851 43.1648 133.813C43.2483 133.783 43.3319 133.752 43.4155 133.722C43.5446 133.676 43.6737 133.623 43.8105 133.578H43.8181C43.8712 133.555 43.9244 133.54 43.9776 133.517C44.1371 133.464 44.3042 133.403 44.4789 133.35C44.9727 133.19 45.5044 133.031 46.0893 132.879C46.1425 132.864 46.1881 132.848 46.2413 132.833C46.5679 132.75 46.9098 132.666 47.2592 132.583C48.4746 132.301 49.8495 132.043 51.3916 131.846C53.6173 131.557 56.1924 131.375 59.1322 131.405C61.1376 131.428 62.9683 131.534 64.6243 131.709C69.5391 132.218 72.9726 133.259 75.1148 134.132C76.0947 134.649 76.8619 135.249 77.3329 135.948C73.8994 134.634 68.0426 133.091 59.3145 133.008C50.1382 132.917 44.008 134.55 40.6124 135.849C40.9846 135.067 41.6379 134.436 42.4659 134.087H42.4583Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M70.4811 132.681C73.4057 133.517 75.2364 133.707 77.0595 135.598C79.2397 137.976 76.7405 141.956 73.6868 141.296C74.53 137.946 73.1322 134.55 70.4811 132.689V132.681Z' fill='%23474C2F'/%3E%3Cpath d='M52.4929 137.163C53.2525 137.482 53.3741 138.333 57.6356 135.689C61.8971 133.046 67.3512 138.219 67.4956 140.019C65.0268 139.67 62.4137 139.495 59.1093 139.434C55.5314 139.396 51.7864 139.594 48.3377 140.148C48.6947 138.242 50.3735 136.282 52.4929 137.163Z' fill='%23B1B7A5'/%3E%3Cpath d='M63.1661 131.511C63.1661 132.142 61.3126 132.674 59.0185 132.689C58.2209 132.689 57.4765 132.636 56.8384 132.537C55.6534 132.347 54.8558 131.99 54.8558 131.572C54.8558 131.094 55.8965 130.683 57.3853 130.494C57.8791 130.433 58.426 130.395 59.0033 130.395C59.725 130.395 60.4087 130.433 61.0012 130.524C61.6772 130.623 62.2394 130.767 62.6192 130.949C62.961 131.116 63.1585 131.306 63.1661 131.511Z' fill='%23474C2F'/%3E%3Cpath opacity='0.41' d='M63.1661 131.511C63.1661 131.929 62.3685 132.294 61.1759 132.507C60.5454 132.62 59.8085 132.681 59.0261 132.689C58.2437 132.696 57.4841 132.636 56.846 132.537C55.661 132.347 54.8633 131.99 54.8633 131.572C54.8633 131.01 55.0609 130.494 55.4027 130.091C55.4027 130.091 56.2535 130.334 57.3929 130.494C58.4336 130.638 59.7554 130.721 61.0088 130.516C61.5709 130.425 62.1178 130.273 62.6192 130.038C62.961 130.433 63.1661 130.942 63.1737 131.504L63.1661 131.511Z' fill='%23676D54'/%3E%3Cpath d='M63.1661 131.511L54.8633 131.572C54.8633 131.01 55.0609 130.494 55.4027 130.091C55.4407 130.045 55.4787 130.007 55.5166 129.969C55.9268 129.559 56.489 129.301 57.1119 129.293L60.8872 129.263C61.5785 129.263 62.2014 129.559 62.6192 130.045C62.961 130.44 63.1661 130.949 63.1737 131.511H63.1661Z' fill='%23474C2F'/%3E%3Cpath opacity='0.41' d='M62.9458 131.884C62.6268 132.142 61.9963 132.362 61.1759 132.507C60.5454 132.621 59.8085 132.681 59.0261 132.689C58.2437 132.697 57.4841 132.636 56.846 132.537C55.661 132.347 54.8633 131.99 54.8633 131.572C54.8633 131.01 55.0609 130.494 55.4027 130.091C55.4027 130.091 56.2535 130.334 57.3929 130.494C58.3576 130.63 59.5654 130.714 60.7277 130.554L62.9458 131.876V131.884Z' fill='%23676D54'/%3E%3Cpath d='M61.1759 132.507C60.5454 132.621 59.8085 132.681 59.0261 132.689C58.2437 132.697 57.4841 132.636 56.846 132.537C55.661 132.347 54.8633 131.99 54.8633 131.572C54.8633 131.01 55.0609 130.494 55.4027 130.091C55.4027 130.091 56.3218 132.431 61.1759 132.507Z' fill='%23676D54'/%3E%3Cpath opacity='0.67' d='M55.1439 97.0623C56.7619 97.8143 58.3419 99.6222 59.2838 102.023C60.7423 105.76 60.0738 109.513 57.795 110.401C57.0049 110.713 56.1162 110.629 55.2426 110.242L55.1439 97.0623Z' fill='%23676D54'/%3E%3Cpath opacity='0.67' d='M62.0951 96.88C62.1862 96.842 62.2698 96.8192 62.3609 96.7964L62.4217 104.742C61.9127 104.165 61.4646 103.436 61.1303 102.6C60.1124 100.063 60.5454 97.5029 62.0951 96.88Z' fill='%23676D54'/%3E%3Cpath d='M46.0131 104.074C46.0359 104.157 46.0511 104.248 46.0663 104.339C46.0815 104.431 46.0967 104.522 46.1119 104.613C46.1498 104.909 46.1802 105.221 46.1954 105.547C46.1954 105.654 46.203 105.768 46.2106 105.874C46.2106 105.942 46.2106 106.011 46.2106 106.079C46.2106 106.216 46.2106 106.36 46.2106 106.504C46.2106 106.603 46.2106 106.702 46.2106 106.801C46.2106 106.816 46.2106 106.831 46.2106 106.839C46.2106 106.899 46.2106 106.96 46.2106 107.021C46.2106 107.165 46.203 107.302 46.1954 107.446C46.1878 107.606 46.1802 107.765 46.165 107.925C46.1574 108.084 46.1422 108.236 46.1347 108.388C46.1347 108.403 46.1347 108.411 46.1347 108.419C46.1271 108.517 46.1195 108.616 46.1119 108.715C46.0967 108.852 46.0891 108.996 46.0739 109.14C46.0587 109.3 46.0435 109.467 46.0207 109.626L45.9903 109.87C45.9599 110.113 45.9296 110.348 45.8992 110.584C45.884 110.66 45.8764 110.743 45.8688 110.819C45.8308 111.131 45.7776 111.434 45.732 111.723C45.7093 111.875 45.6865 112.012 45.6637 112.156C45.6257 112.369 45.5953 112.574 45.5573 112.764C45.5345 112.893 45.5117 113.022 45.489 113.144C45.4662 113.265 45.4434 113.387 45.4282 113.501C45.4054 113.615 45.3826 113.728 45.3598 113.835C45.3446 113.941 45.3219 114.04 45.3067 114.131C45.3067 114.146 45.2991 114.169 45.2915 114.192C45.2915 114.222 45.2763 114.253 45.2763 114.275C45.2611 114.367 45.2383 114.45 45.2231 114.526C45.2079 114.587 45.2003 114.64 45.1851 114.693C45.1092 114.845 45.0408 114.944 45.0408 114.944L44.8357 115.012L44.7065 114.913L42.534 113.174C42.534 113.174 41.4477 103.101 44.2052 102.402H44.2128L44.2812 102.38C44.2812 102.38 44.3343 102.372 44.3571 102.364C44.4027 102.364 44.4483 102.357 44.4938 102.357C44.5394 102.357 44.585 102.357 44.6382 102.357C44.7901 102.372 44.9268 102.402 45.0484 102.463C45.1395 102.509 45.2307 102.57 45.3067 102.638C45.3826 102.706 45.4586 102.79 45.5345 102.881C45.7472 103.177 45.9068 103.58 46.0207 104.058L46.0131 104.074Z' fill='%23474C2F'/%3E%3Cpath d='M46.0211 104.074C46.0439 104.165 46.0591 104.248 46.0743 104.347C46.0895 104.438 46.1047 104.53 46.1199 104.621C46.1579 104.917 46.1882 105.228 46.2034 105.555C46.2034 105.661 46.211 105.775 46.2186 105.882C46.2186 105.95 46.2186 106.018 46.2186 106.094C46.2186 106.231 46.2186 106.375 46.2186 106.52C46.2186 106.619 46.2186 106.717 46.2186 106.816C46.2186 106.831 46.2186 106.846 46.2186 106.862C46.2186 106.922 46.2186 106.983 46.2186 107.044C46.2186 107.188 46.211 107.325 46.2034 107.469C46.1958 107.629 46.1882 107.788 46.173 107.948C46.1654 108.107 46.1503 108.259 46.1427 108.411C46.1427 108.426 46.1427 108.434 46.1427 108.442C46.1351 108.54 46.1275 108.639 46.1123 108.738C46.0971 108.875 46.0895 109.019 46.0743 109.156C46.0591 109.323 46.0439 109.482 46.0211 109.642L45.9907 109.885C45.9604 110.128 45.93 110.363 45.8996 110.599C45.892 110.675 45.8768 110.758 45.8692 110.834C45.8312 111.146 45.7781 111.45 45.7401 111.738C45.7173 111.89 45.6945 112.027 45.6717 112.171C45.6337 112.384 45.6033 112.582 45.5654 112.779C45.5426 112.908 45.5198 113.037 45.497 113.159C45.4742 113.28 45.4514 113.402 45.4362 113.516C45.4134 113.63 45.3906 113.744 45.3678 113.85C45.3526 113.957 45.3299 114.055 45.3147 114.146C45.3147 114.169 45.3147 114.184 45.2995 114.2C45.2995 114.23 45.2919 114.253 45.2843 114.283C45.2691 114.374 45.2463 114.45 45.2311 114.534C45.2159 114.595 45.2083 114.648 45.2007 114.701C45.1248 114.853 45.0564 114.952 45.0564 114.952L44.8513 115.02L44.7298 114.921C44.7601 114.792 44.7905 114.617 44.8361 114.42C45.3982 111.662 46.8491 103.01 44.2512 102.494C44.2436 102.494 43.9322 102.448 43.917 102.448L43.5827 102.403C43.5827 102.403 43.5295 102.387 43.5143 102.38L43.765 102.342V102.327C44.1145 102.327 44.6386 102.365 44.669 102.365C44.8209 102.38 44.9501 102.418 45.0792 102.479C45.1704 102.524 45.2615 102.577 45.3375 102.653C45.421 102.722 45.497 102.805 45.5654 102.896C45.7856 103.193 45.9376 103.588 46.0515 104.074H46.0211Z' fill='%23676D54'/%3E%3Cpath d='M67.0169 100.01C67.0169 100.01 67.0169 100.063 67.0093 100.086C66.9941 100.359 66.9713 100.64 66.9561 100.921C66.9561 101.218 66.9181 101.438 66.8422 101.605C66.8422 101.628 66.827 101.635 66.8194 101.658C66.751 101.818 66.6371 101.917 66.5003 101.954C66.2573 102.03 65.9306 101.939 65.5508 101.727C64.5101 101.149 63.1048 99.6908 62.0793 98.6425C61.6083 98.1487 61.2133 97.7386 60.9854 97.5562C60.9854 97.9968 60.9854 98.445 60.993 98.9008C60.993 99.1363 61.0006 99.3794 61.0082 99.6224V99.8199C61.0158 100.162 61.0234 100.511 61.031 100.861C61.0386 101.081 61.0386 101.309 61.0386 101.537C61.0462 102.015 61.0462 102.494 61.0386 102.965C61.031 103.147 61.031 103.329 61.0234 103.512V103.55C61.0234 103.55 61.0158 103.633 61.0158 103.679C61.0006 104.059 60.9702 104.438 60.9398 104.818C60.9398 104.833 60.9398 104.849 60.9398 104.871C60.8791 105.434 60.8031 105.996 60.6816 106.535C60.5676 107.067 60.4233 107.583 60.241 108.085C60.1574 108.305 60.0739 108.51 59.9827 108.715C59.9371 108.776 59.884 108.814 59.8308 108.852C58.7825 109.718 57.3848 109.285 56.7467 109.619C56.4504 109.801 56.1466 109.984 55.8276 110.158C55.5161 110.341 55.197 110.516 54.8628 110.69C54.6121 110.827 54.3539 110.956 54.0956 111.085C54.0272 111.116 53.9589 111.154 53.8905 111.184L53.4575 111.389C53.2676 111.473 53.0777 111.556 52.8802 111.632C52.7738 111.678 52.6599 111.723 52.5536 111.769C52.5308 111.777 52.5156 111.784 52.4928 111.792C52.2269 111.89 51.9686 111.982 51.7028 112.073C51.5432 112.134 51.3837 112.187 51.2318 112.232C51.1558 112.255 51.0875 112.278 51.0115 112.293C50.9052 112.323 50.7912 112.354 50.6848 112.384C50.5329 112.43 50.3734 112.468 50.2215 112.498C49.6518 112.635 49.082 112.726 48.5199 112.764C48.4971 112.764 48.4819 112.764 48.4667 112.779C48.4136 112.794 48.3452 112.817 48.2616 112.84C47.2969 113.106 43.6811 113.987 41.7364 113.987C38.8726 113.987 35.3252 114.64 34.6491 114.397C34.6035 114.382 34.5731 114.359 34.5579 114.344C34.5503 114.329 34.5427 114.321 34.5427 114.321C34.5579 114.245 34.5731 114.162 34.5959 114.071C34.6111 113.995 34.6339 113.911 34.6491 113.82C35.2416 111.237 35.8721 106.771 36.419 104.112C37.1786 103.352 42.496 104.112 45.5346 103.352C45.7473 103.299 46.1878 103.003 46.6284 102.684C47.1298 102.312 47.6311 101.924 47.8134 101.833C49.7049 100.883 59.7624 92.9377 61.0082 93.6821C61.0614 93.7201 61.145 93.7733 61.2437 93.8417C61.3653 93.9252 61.4868 94.0164 61.6159 94.0999C61.6463 94.1151 61.6691 94.1303 61.6995 94.1607C61.8362 94.2519 61.9653 94.343 62.1021 94.4342C62.1401 94.457 62.178 94.4873 62.2236 94.5177C62.2236 94.5177 62.2388 94.5253 62.2692 94.5481C62.3983 94.6393 62.5275 94.7304 62.6642 94.8292C63.0744 95.1102 63.515 95.4293 63.9632 95.7483H63.9708C63.9708 95.7483 63.9784 95.7635 63.986 95.7635C64.0315 95.8015 64.0847 95.8395 64.1379 95.8775C64.2518 95.9534 64.3658 96.037 64.4721 96.1205C64.662 96.2573 64.8519 96.394 65.0343 96.5459C65.3381 96.7738 65.6192 96.9941 65.8699 97.1992C65.961 97.2752 66.0522 97.3435 66.1357 97.4195C66.3788 97.6246 66.6067 97.8297 66.827 98.0272C66.8498 98.0424 66.8649 98.0576 66.8725 98.0728C66.9257 98.1563 66.9637 98.2703 66.9941 98.3918C67.0017 98.407 67.0017 98.4222 67.0017 98.4374C67.0853 98.8324 67.0625 99.3945 67.0321 100.002L67.0169 100.01Z' fill='%23E8D4BA'/%3E%3Cpath d='M66.9565 100.921C66.9261 101.164 66.8881 101.392 66.8425 101.59C66.7894 101.795 66.7286 101.962 66.6526 102.084C65.3764 101.104 59.8387 96.3864 59.8387 96.3864C59.8387 96.3864 60.5756 95.057 61.8442 96.1053C63.0064 97.0701 66.4171 100.39 66.9565 100.921Z' fill='%23CEB79B'/%3E%3Cpath d='M67.1457 102.152C67.1077 102.433 66.8951 103.231 66.576 103.998C66.5152 104.142 66.4469 104.287 66.3785 104.423C66.3405 104.499 66.3025 104.575 66.257 104.651C66.1886 104.773 66.1126 104.894 66.0443 105.001C65.9531 105.137 65.8544 105.251 65.7556 105.358C65.391 105.722 63.5147 104.279 61.7979 102.418C61.5397 102.137 61.2814 101.841 61.0307 101.544C60.6129 101.043 60.2179 100.526 59.8913 100.017C58.9645 98.6045 58.4784 97.2676 59.0557 96.5307C59.0557 96.5307 60.4762 95.1634 61.5473 95.8774C61.6308 95.9306 61.7296 96.0066 61.8511 96.1129C62.8766 96.9941 65.1859 99.4933 66.3937 100.997C66.576 101.225 66.7279 101.423 66.8495 101.597C67.0546 101.879 67.1685 102.084 67.1609 102.16L67.1457 102.152Z' fill='%23E8D4BA'/%3E%3Cpath d='M66.5761 103.998C66.4165 104.362 66.2418 104.712 66.0443 105C64.3807 103.679 60.0356 100.033 60.0356 100.033C60.0356 100.033 61.2663 99.3716 62.5348 100.42C63.6363 101.331 65.8392 103.269 66.5761 103.998Z' fill='%23CEB79B'/%3E%3Cpath d='M65.437 107.553C65.361 107.667 65.2775 107.766 65.1939 107.857L65.1787 107.872C65.0116 108.047 64.8293 108.161 64.6318 108.206C64.4039 108.259 63.7734 107.857 63.029 107.188C62.5656 106.77 62.0567 106.254 61.5705 105.684C61.5477 105.654 61.5173 105.623 61.4945 105.593C61.3806 105.456 61.2666 105.312 61.1527 105.168C61.0615 105.054 60.9704 104.94 60.8868 104.818C60.6665 104.514 60.4538 104.203 60.2639 103.884C60.1424 103.671 60.0208 103.466 59.9221 103.253C59.3372 102.068 59.1397 100.906 59.7702 100.078C59.7702 100.078 59.8158 100.048 59.8917 100.01C60.1196 99.8958 60.6134 99.6679 61.0388 99.6299C61.2363 99.6147 61.411 99.6299 61.5477 99.7211C61.6161 99.7667 61.7376 99.873 61.8971 100.025C62.3301 100.428 63.0518 101.157 63.7886 101.932C64.5406 102.714 65.3079 103.542 65.8092 104.119C66.0067 104.34 66.1587 104.522 66.2574 104.651C66.3334 104.75 66.3713 104.818 66.3789 104.841C66.4245 105.061 66.0903 106.626 65.437 107.553Z' fill='%23E8D4BA'/%3E%3Cpath d='M65.4371 107.553C65.3611 107.667 65.2776 107.766 65.194 107.857C65.0193 108.032 64.8294 108.161 64.6243 108.206C64.5939 108.214 64.5559 108.206 64.5179 108.206C63.9026 107.568 61.092 105.35 60.226 103.884C59.9374 103.383 60.226 103.694 61.1908 103.694C62.9379 103.694 65.4447 107.561 65.4447 107.561L65.4371 107.553Z' fill='%23CEB79B'/%3E%3Cpath d='M65.4523 108.502C65.2169 108.859 64.0318 111.412 63.614 111.647C63.2266 111.852 62.5658 111.548 62.3379 111.442L62.543 109.399C62.467 109.3 61.1225 108.7 60.6135 108.723C60.3932 108.685 60.1729 108.73 59.9602 108.738C59.7703 108.738 59.5804 108.715 59.4057 108.571C59.1246 108.358 57.7117 104.476 57.7117 104.476C56.9141 102.63 58.1979 102.858 59.8995 103.269C60.2413 103.352 60.5907 103.443 60.9553 103.519C61.0921 103.55 61.2288 103.58 61.3579 103.61C62.1935 103.785 64.3433 106.429 65.1561 107.887C65.2928 108.138 65.3916 108.35 65.4448 108.51L65.4523 108.502Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M66.2577 104.651C66.3337 104.75 66.3717 104.818 66.3793 104.841C66.4249 105.061 66.0906 106.626 65.4374 107.553C65.3614 107.667 65.2778 107.766 65.1943 107.857C65.1867 107.864 65.1791 107.872 65.1715 107.88C65.3082 108.13 65.407 108.343 65.4601 108.502C65.2247 108.86 64.0396 111.412 63.6218 111.647C63.2344 111.852 62.5735 111.549 62.3457 111.442L62.5508 109.399C62.4748 109.3 61.1303 108.7 60.6213 108.723C60.401 108.685 60.1807 108.73 59.968 108.738C60.0212 108.662 60.0744 108.586 60.1276 108.51C60.9404 107.325 61.3202 106.353 61.4873 105.601C61.7759 104.271 61.3733 103.61 61.3733 103.61C61.5784 103.185 61.7152 102.79 61.7987 102.433C62.2089 100.739 61.5481 99.744 61.5481 99.744C61.7987 99.3869 61.9659 99.0375 62.0722 98.7033C62.5052 97.3131 61.8823 96.1737 61.8519 96.1205C62.1102 94.738 61.0771 93.7733 61.0087 93.7049C61.2214 93.8416 61.8671 94.2822 62.6647 94.8443C63.28 95.2773 63.9713 95.7787 64.6322 96.2648C65.1791 96.6675 65.6956 97.0625 66.1058 97.3967C66.6224 97.8145 66.9642 98.1335 66.987 98.2627C67.0478 98.6121 67.0933 99.9035 66.9718 100.929C66.9414 101.172 66.9034 101.4 66.8579 101.597C67.063 101.878 67.1769 102.084 67.1693 102.16C67.1313 102.441 66.9186 103.238 66.5996 104.005C66.5008 104.233 66.3945 104.454 66.2805 104.659L66.2577 104.651Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M65.452 108.502C65.452 108.502 65.4065 108.563 65.3989 108.594C65.2621 108.776 65.1406 109.042 65.0039 109.338C64.9887 109.361 64.9811 109.391 64.9659 109.414C64.7152 109.953 64.4265 110.576 64.0847 111.047C64.0771 111.047 64.0771 111.055 64.0771 111.055C64.0695 111.062 64.0695 111.07 64.0619 111.078C64.0619 111.093 64.0467 111.108 64.0315 111.123C63.7884 111.435 63.515 111.663 63.2035 111.708H63.1883C63.1883 111.708 63.1656 111.716 63.158 111.708C62.9149 111.754 62.6338 111.67 62.3376 111.435C62.3452 111.374 62.3528 111.305 62.3604 111.23C62.3755 111.078 62.3983 110.895 62.4135 110.705C62.4287 110.607 62.4363 110.508 62.4439 110.409C62.4591 110.212 62.4819 110.022 62.4971 109.847C62.5123 109.741 62.5199 109.642 62.5275 109.558L62.5427 109.391C62.5427 109.391 62.5275 109.376 62.4971 109.361C62.4971 109.361 62.4743 109.346 62.4515 109.33C62.4363 109.315 62.4135 109.308 62.3831 109.292C62.3755 109.292 62.3755 109.285 62.3679 109.285H62.3604C62.3604 109.285 62.3224 109.27 62.3072 109.254C62.178 109.194 62.0489 109.125 61.9122 109.072C61.783 109.011 61.6463 108.958 61.502 108.905C61.4108 108.875 61.3197 108.844 61.2209 108.821C61.2057 108.821 61.1905 108.814 61.1677 108.806C61.1222 108.799 61.0766 108.784 61.031 108.776C61.0006 108.768 60.9702 108.761 60.9322 108.753C60.8411 108.738 60.7423 108.723 60.6512 108.715H60.6208C60.5752 108.708 60.522 108.708 60.4689 108.708C60.4689 108.708 60.4689 108.7 60.4613 108.7H60.4537C60.4537 108.7 60.4537 108.7 60.4385 108.708C60.4385 108.708 60.4334 108.705 60.4233 108.7H60.3701C60.2865 108.7 60.2106 108.7 60.127 108.715C60.0815 108.715 60.0283 108.723 59.9827 108.73H59.9675C59.9219 108.784 59.8688 108.822 59.8156 108.859C58.7673 109.725 57.3696 109.292 56.7315 109.627C56.4352 109.809 56.1314 109.991 55.8123 110.166C55.5009 110.348 55.1818 110.523 54.8476 110.698C54.5969 110.835 54.3387 110.964 54.0804 111.093C54.012 111.123 53.9437 111.161 53.8753 111.192L53.4423 111.397C53.2524 111.48 53.0625 111.564 52.865 111.64L52.4776 111.799C52.2117 111.898 51.9534 111.989 51.6875 112.08C51.528 112.141 51.3685 112.194 51.2166 112.24C51.0343 112.293 50.852 112.346 50.6696 112.392C50.5177 112.437 50.3582 112.475 50.2063 112.506C49.6366 112.642 49.0668 112.734 48.5047 112.772C48.4819 112.772 48.4667 112.772 48.4515 112.787C48.3983 112.802 48.33 112.825 48.2464 112.848C47.9122 112.939 47.2589 113.106 46.4613 113.288C44.9648 113.622 42.9898 113.995 41.7212 113.995C38.8574 113.995 35.31 114.648 34.6339 114.405C34.5883 114.39 34.5579 114.367 34.5427 114.352C34.5351 114.336 34.5275 114.329 34.5275 114.329C34.5427 114.253 34.5579 114.169 34.5807 114.078C34.5959 114.002 34.6187 113.919 34.6339 113.827C35.2264 111.245 35.8569 106.778 36.4038 104.119C37.1634 103.36 42.4808 104.119 45.5194 103.36C45.7321 103.307 46.1726 103.01 46.6132 102.691C45.4282 107.31 47.9502 109.065 52.5308 108.389C54.5818 108.13 56.929 108.107 58.8661 107.447C59.5193 107.234 60.1346 106.938 60.6664 106.543C60.9398 106.338 61.1905 106.11 61.4184 105.851C61.464 105.791 61.5172 105.737 61.5627 105.677C61.6387 105.677 61.7147 105.692 61.7982 105.73C62.6186 106.064 63.5302 108.001 64.4189 106.801L64.4341 106.786C64.5329 106.922 64.662 107.097 64.8064 107.279C64.8292 107.325 64.8595 107.363 64.8899 107.409C65.0039 107.553 65.1102 107.705 65.1938 107.849C65.3533 108.1 65.4596 108.328 65.452 108.502Z' fill='%23CEB79B'/%3E%3Cpath d='M62.3379 108.503C62.148 108.89 61.5023 108.905 61.5023 108.905C61.2365 108.814 60.9326 108.738 60.6212 108.708C60.4085 108.685 60.1958 108.685 59.9831 108.723H59.9679C59.9223 108.776 59.8691 108.822 59.8235 108.852C59.8235 108.852 60.3173 107.576 60.7503 107.842C61.1909 108.108 60.3173 108.32 60.7503 108.404C61.1909 108.495 62.5354 108.108 62.3455 108.495L62.3379 108.503Z' fill='%23CEB79B'/%3E%3Cpath d='M62.5275 109.558L62.5427 109.391C62.5427 109.391 62.4743 109.346 62.3604 109.285V109.27C62.3604 109.27 62.5047 108.7 63.0896 109.27C63.6745 109.839 62.5199 109.551 62.5199 109.551L62.5275 109.558Z' fill='%23CEB79B'/%3E%3Cpath d='M64.434 97.1537C64.3125 97.7917 64.0694 98.3387 64.0694 98.3387L62.8388 96.9865C62.854 96.8954 62.8616 96.8042 62.8692 96.7207C62.9148 96.3105 62.8996 95.9762 62.854 95.6952C62.778 95.2774 62.6261 94.9887 62.4894 94.8064C62.3374 94.6013 62.2083 94.5253 62.2083 94.5253C62.2691 94.2215 62.9983 94.5937 63.8719 95.2698C63.9403 95.3154 64.001 95.3685 64.0694 95.4217C64.1834 95.5205 64.2745 95.6344 64.3353 95.7635H64.3429C64.5404 96.1585 64.5176 96.6827 64.434 97.1537Z' fill='%23949984'/%3E%3Cpath d='M62.854 95.7027C62.6945 94.8215 62.2083 94.5253 62.2083 94.5253C62.2691 94.229 62.9983 94.5936 63.8719 95.2697C64.4416 96.2724 62.854 95.7027 62.854 95.7027Z' fill='%239EA58E'/%3E%3Cpath d='M64.4345 97.1536C64.313 97.7917 64.0699 98.331 64.0699 98.331L62.8393 96.9789C62.8545 96.8877 62.8697 96.7965 62.8773 96.713C62.8773 96.713 63.6445 97.9208 64.4345 97.146V97.1536Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M59.451 99.6528C59.451 99.6528 61.654 98.4222 61.5704 98.8856C61.4869 99.349 61.259 99.6148 61.0311 99.6376C60.8032 99.6604 59.451 99.6604 59.451 99.6604V99.6528Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M59.451 96.5763C59.451 96.5763 61.5552 94.8823 61.4641 95.3457C61.3729 95.8091 61.221 96.1737 60.9931 96.1965C60.7652 96.2193 59.451 96.5839 59.451 96.5839V96.5763Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M59.261 103.694C59.261 103.694 60.9094 102.6 61.0841 103.041C61.1904 103.314 61.0309 103.671 60.803 103.694C60.5751 103.717 59.261 103.694 59.261 103.694Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M65.4372 107.553C65.3612 107.667 65.2777 107.766 65.1941 107.857L65.1789 107.872L62.7785 104.446C62.7785 104.446 66.3943 105.707 65.8094 104.127C66.0069 104.347 66.1588 104.53 66.2576 104.659C66.3336 104.757 66.3715 104.826 66.3791 104.849C66.4247 105.069 66.0905 106.634 65.4372 107.56V107.553Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M67.1465 102.152C67.1086 102.433 66.8959 103.231 66.5768 103.998C66.5161 104.142 66.4477 104.286 66.3793 104.423L63.9789 101.651C63.9789 101.651 66.9642 102.129 66.3869 100.99C66.5692 101.218 66.7212 101.415 66.8427 101.59C67.0478 101.871 67.1617 102.076 67.1542 102.152H67.1465Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M66.9564 100.921C66.926 101.164 66.888 101.392 66.8424 101.59L64.6775 98.6957C64.6775 98.6957 67.321 98.764 66.098 97.3891C66.6145 97.8069 66.9564 98.1259 66.9792 98.2551C67.0399 98.6045 67.0855 99.8959 66.964 100.921H66.9564Z' fill='%23CEB79B'/%3E%3Cpath d='M52.5385 111.776C52.5385 111.776 52.5005 111.792 52.4777 111.799C52.2118 111.898 51.9535 111.989 51.6877 112.08C51.5281 112.141 51.3686 112.194 51.2167 112.24C51.1407 112.263 51.0724 112.285 50.9964 112.3C50.7837 110.295 50.8445 107.621 51.9004 105.98C51.7712 107.667 51.832 110.113 52.5385 111.776Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M46.4613 113.288C45.1547 113.584 43.476 113.904 42.2302 113.979C42.0479 113.987 41.8807 113.995 41.7212 113.995C38.8574 113.995 35.31 114.648 34.6339 114.405C34.5883 114.39 34.5579 114.367 34.5427 114.352C34.5351 114.337 34.5275 114.329 34.5275 114.329C34.5427 114.253 34.5579 114.169 34.5807 114.078C34.5959 114.002 34.6187 113.919 34.6339 113.828C35.2264 111.245 35.8569 106.778 36.4038 104.119C37.0723 103.451 41.2654 103.96 44.3343 103.573C44.7521 103.519 45.1547 103.451 45.5194 103.36C45.5194 103.36 41.6908 109.642 46.4613 113.288Z' fill='%23CEB79B'/%3E%3Cpath d='M42.2302 113.979C42.0479 113.987 41.8807 113.995 41.7212 113.995C38.8574 113.995 35.31 114.648 34.6339 114.405C34.5883 114.39 34.5579 114.367 34.5427 114.352C34.5351 114.336 34.5275 114.329 34.5275 114.329C34.5427 114.253 34.5579 114.169 34.5807 114.078C34.5959 114.002 34.6187 113.919 34.6339 113.828C35.2264 111.245 35.8569 106.778 36.4038 104.119C37.0723 103.451 41.2654 103.96 44.3343 103.573L44.3951 103.603C44.3951 103.603 41.4022 108.29 42.2302 113.979Z' fill='%23CEB79B'/%3E%3Cpath d='M64.3353 95.7635C63.4237 95.0267 62.4894 94.8064 62.4894 94.8064C62.3374 94.6013 62.2083 94.5253 62.2083 94.5253C62.2691 94.2215 62.9983 94.5937 63.8719 95.2698C63.9403 95.3154 64.001 95.3685 64.0694 95.4217C64.1834 95.5205 64.2745 95.6344 64.3353 95.7635Z' fill='%23676D54'/%3E%3Cpath d='M44.3419 102.418C44.3419 102.418 43.7037 103.04 43.2784 104.013C42.6934 105.433 42.7618 107.272 43.1416 109.156C43.5062 110.971 44.1595 112.832 44.8052 114.412C44.8584 114.541 44.9116 114.67 44.9647 114.8C44.9875 114.845 45.0027 114.898 45.0255 114.951L44.7976 115.035L44.1216 115.255C43.6354 115.331 43.172 115.43 42.7011 115.552L42.5567 115.088L42.4959 114.898L41.0147 109.976V109.953L39.6853 105.578L39.5334 105.084L39.5182 105.031L39.4726 104.871L39.3511 104.461L39.3359 104.415L38.9181 103.018C39.2675 102.98 39.6245 102.934 40.0044 102.889C40.9615 102.767 42.0174 102.615 43.1872 102.433H43.2556C43.2556 102.433 43.3315 102.41 43.3695 102.402C43.4607 102.387 43.5518 102.372 43.6506 102.357C43.6658 102.357 43.681 102.357 43.7037 102.364C43.7037 102.364 43.7114 102.364 43.719 102.364C43.8481 102.38 44.0456 102.395 44.2051 102.41C44.2279 102.41 44.2507 102.41 44.2735 102.41H44.3191C44.3191 102.41 44.3418 102.41 44.3494 102.418H44.3419Z' fill='%23676D54'/%3E%3Cpath d='M43.7266 102.349C43.7266 102.349 43.7266 102.357 43.719 102.364C43.719 102.38 43.6962 102.387 43.6886 102.402C43.681 102.402 43.6734 102.425 43.6658 102.425C43.6354 102.456 43.5823 102.501 43.5671 102.554C43.5367 102.585 43.5063 102.63 43.4835 102.668C43.4379 102.721 43.4 102.797 43.3468 102.858C43.2556 102.987 43.1872 103.109 43.1113 103.246C43.1113 103.246 43.1113 103.253 43.1113 103.261C43.1113 103.261 43.0885 103.314 43.0733 103.337C43.0733 103.337 43.0733 103.337 43.0733 103.344C43.0353 103.405 43.0201 103.451 42.9973 103.511C42.9973 103.511 42.9973 103.517 42.9973 103.527C42.9973 103.527 42.9974 103.534 42.9822 103.549C42.9822 103.557 42.9822 103.565 42.9822 103.565C42.9442 103.663 42.891 103.77 42.853 103.876C42.853 103.876 42.853 103.876 42.853 103.891V103.906C42.853 103.929 42.8378 103.944 42.8302 103.967V103.99C42.8302 103.99 42.7999 104.043 42.7999 104.066C42.7771 104.172 42.7391 104.263 42.7163 104.37C42.5416 104.955 42.496 105.578 42.4656 106.185C42.4656 106.239 42.4656 106.284 42.4656 106.337C42.4656 106.383 42.4656 106.413 42.4656 106.444C42.4656 106.793 42.4884 107.15 42.5188 107.499C42.5492 107.872 42.6099 108.259 42.6707 108.631C43.0049 110.447 43.6126 112.224 44.3267 113.918C44.4103 114.108 44.4862 114.298 44.5774 114.488C44.5774 114.496 44.5774 114.496 44.5774 114.496C44.6382 114.663 44.7217 114.815 44.7901 114.982C44.7901 114.982 44.8053 115.027 44.8204 115.05C44.3115 115.21 43.7722 115.407 43.2708 115.59C42.42 115.901 41.592 116.273 40.7716 116.645C33.5552 119.737 27.8123 125.905 20.1553 127.941V127.956C15.9545 129.103 10.1206 126.771 6.61871 123.634C6.27688 123.3 5.76792 123.042 5.52484 122.616C5.50205 122.525 5.49446 122.434 5.50206 122.335V122.32C5.56283 121.826 5.85147 121.218 6.13254 120.702C6.75543 119.555 7.51507 118.423 8.2747 117.352C10.8726 113.774 13.6377 110.014 17.132 107.218C21.4467 103.428 27.387 103.451 32.75 103.405C34.9909 103.39 37.2242 103.261 39.4575 102.98C40.878 102.828 42.3137 102.607 43.7342 102.372L43.7266 102.349Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M43.7344 102.342C43.7344 102.342 43.6964 102.387 43.6812 102.402C43.6432 102.448 43.5901 102.494 43.5597 102.547C43.5369 102.585 43.4989 102.623 43.4761 102.661C43.4685 102.661 43.4609 102.691 43.4457 102.691C43.4229 102.744 43.3774 102.79 43.3394 102.851C43.1951 103.056 43.0735 103.276 42.9748 103.496C42.9748 103.496 42.9748 103.496 42.9748 103.511C42.9672 103.511 42.9672 103.542 42.952 103.549C42.8988 103.679 42.838 103.808 42.8001 103.944C42.1468 105.874 42.443 107.986 42.9292 109.923C36.6091 110.53 31.1777 107.256 30.3193 103.398C34.4441 103.458 39.1842 103.154 43.7344 102.349V102.342Z' fill='%23474C2F'/%3E%3Cpath d='M41.0454 116.479C33.6922 119.57 27.9266 125.83 20.1404 127.911V127.926C16.3347 129.012 10.2348 127.159 5.6087 122.768C5.6087 121.34 6.86209 119.076 8.57125 116.684C10.2728 114.314 12.4226 111.822 14.2761 109.893C15.3851 108.73 16.3878 107.781 17.1171 107.181C19.4947 111.906 29.9092 120.573 41.0454 116.479Z' fill='%23979E87'/%3E%3Cpath d='M41.1146 116.456C41.1146 116.456 41.0688 116.471 41.0459 116.479C41.0688 116.471 41.084 116.463 41.1069 116.456H41.1146Z' fill='%23979E87'/%3E%3Cpath d='M41.045 104.651C40.9083 105.882 39.6929 105.593 39.5258 105.046C39.2751 104.256 41.1514 103.618 41.045 104.651Z' fill='%23676D54'/%3E%3Cpath d='M41.0455 104.651C41.0151 104.955 40.9164 105.16 40.7797 105.297C40.8253 105.19 40.8632 105.054 40.8784 104.902C40.962 104.142 39.9669 104.294 39.5339 104.734C39.7618 104.119 41.1367 103.762 41.0455 104.651Z' fill='%23474C2F'/%3E%3Cpath d='M34.6344 105.836C34.8015 106.353 33.776 106.755 33.4114 106.71C33.2215 106.687 33.0695 106.596 32.9936 106.444C32.3707 105.692 34.2546 104.651 34.6344 105.836Z' fill='%23676D54'/%3E%3Cpath d='M32.9482 105.836C33.2596 105.297 34.3535 104.962 34.6346 105.836C34.7029 106.041 34.5738 106.231 34.3763 106.383C34.4218 106.292 34.4294 106.2 34.3991 106.102C34.1712 105.388 33.3888 105.479 32.9482 105.836Z' fill='%23474C2F'/%3E%3Cpath d='M26.9391 106.322C27.3189 105.57 28.3292 105.585 28.709 106.041C28.8761 106.246 28.8153 106.535 28.6406 106.702C28.1848 107.135 27.3113 107.196 26.9998 106.823C26.8935 106.702 26.8631 106.482 26.9391 106.322Z' fill='%23676D54'/%3E%3Cpath d='M28.7086 106.041C28.8833 106.246 28.8149 106.535 28.6402 106.702C28.6174 106.717 28.6023 106.74 28.5795 106.755C28.6326 106.611 28.6174 106.444 28.5035 106.315C28.1769 105.927 27.402 105.866 26.9387 106.315C27.3261 105.578 28.3288 105.585 28.701 106.041H28.7086Z' fill='%23474C2F'/%3E%3Cpath d='M26.9166 124.948C25.2302 125.989 23.4755 126.954 21.5688 127.546C21.0978 127.691 20.6193 127.827 20.1331 127.919V127.934C16.145 128.807 12.0582 127.478 8.74626 125.214C8.4728 125.017 8.19934 124.834 7.92587 124.645C7.47769 124.325 7.0295 123.968 6.6041 123.619C6.26227 123.308 5.82928 123.042 5.53302 122.662C5.51783 122.639 5.51025 122.616 5.50266 122.594C5.47227 122.51 5.47227 122.404 5.47987 122.312V122.297C5.55583 121.705 5.81409 121.241 6.10275 120.672C6.3914 120.132 6.71046 119.608 7.0371 119.099C7.38653 118.545 7.76634 117.998 8.14615 117.458C8.17654 117.413 8.20694 117.367 8.23733 117.322C8.10059 118.393 13.5167 123.596 17.0414 124.075C19.6849 124.941 23.6958 125.229 26.8938 124.956H26.9014L26.9166 124.948Z' fill='%23949984'/%3E%3Cpath d='M21.515 106.77C21.6517 106.634 21.8036 106.527 21.9708 106.459C22.3202 106.254 22.7076 106.299 22.9583 106.626C22.9811 106.664 23.0039 106.702 23.0114 106.748C23.0798 106.93 23.0646 107.165 22.9279 107.348C22.7456 107.606 22.1758 107.849 21.8416 107.781C21.4618 107.758 21.1504 107.135 21.515 106.77Z' fill='%23676D54'/%3E%3Cpath d='M21.5152 106.77C21.6519 106.634 21.8039 106.527 21.971 106.459C22.3204 106.254 22.7078 106.299 22.9585 106.626C22.9813 106.664 23.0041 106.702 23.0117 106.748C23.08 106.93 23.0648 107.165 22.9281 107.348C22.9205 107.363 22.9053 107.37 22.8977 107.386C22.9281 107.257 22.9205 107.12 22.8825 107.006C22.8749 106.96 22.8521 106.915 22.8294 106.884C22.5863 106.558 22.1913 106.512 21.8418 106.717C21.6823 106.786 21.5228 106.899 21.3861 107.036C21.3861 107.036 21.3709 107.051 21.3633 107.059C21.3861 106.96 21.4316 106.862 21.5152 106.77Z' fill='%23474C2F'/%3E%3Cpath d='M15.3852 108.768C15.9701 108.1 16.7374 108.054 17.102 108.297C17.6261 108.647 17.0868 110.029 15.6663 109.604C15.2561 109.482 15.0282 109.186 15.3928 108.768H15.3852Z' fill='%23676D54'/%3E%3Cpath d='M15.3848 108.768C15.9622 108.1 16.737 108.054 17.1016 108.297C17.3523 108.464 17.3599 108.859 17.1472 109.194C17.2156 108.943 17.1624 108.7 16.9801 108.571C16.6154 108.328 15.8482 108.373 15.2633 109.042C15.2405 109.064 15.2253 109.087 15.2101 109.11C15.2253 109.011 15.2785 108.89 15.3848 108.768Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M20.133 127.926C16.4413 128.678 12.1114 127.987 6.93829 123.877C7.31051 123.832 10.782 126.019 12.1949 126.543C14.9144 127.554 17.9529 127.82 18.3403 127.759C19.3506 127.599 21.7587 127.106 22.7538 126.68C23.126 126.521 23.4982 126.346 23.8704 126.156C24.5693 125.807 25.2606 125.412 25.9442 125.009C26.9925 124.386 28.018 123.725 29.0435 123.072C30.0158 122.457 30.9958 121.864 31.9681 121.241C33.8444 120.026 35.6827 118.75 37.5742 117.565C37.6957 117.489 37.8096 117.413 37.9312 117.344C39.4201 116.425 40.9545 115.574 42.5117 114.898C43.0359 114.67 43.5676 114.465 44.0994 114.283C44.2057 114.245 44.3121 114.207 44.426 114.177C44.4412 114.215 44.4564 114.253 44.4716 114.291C44.502 114.359 44.5248 114.42 44.5551 114.481C44.5703 114.511 44.5779 114.534 44.5931 114.564C44.6311 114.655 44.6691 114.739 44.7071 114.822C44.7223 114.86 44.7374 114.891 44.7526 114.921C44.7678 114.952 44.783 114.99 44.7982 115.028C44.745 115.05 44.6843 115.065 44.6311 115.081C44.5627 115.103 44.4868 115.126 44.4108 115.149C44.388 115.157 44.3652 115.164 44.3349 115.172L43.7727 115.369C43.7727 115.369 43.7271 115.385 43.7043 115.392C43.5904 115.43 43.4765 115.468 43.3625 115.514L43.1574 115.582C43.0283 115.635 42.8991 115.681 42.7624 115.734C42.6181 115.795 42.4814 115.848 42.3446 115.909C42.2079 115.962 42.0712 116.023 41.942 116.076C41.9268 116.083 41.9116 116.091 41.904 116.091C41.7825 116.144 41.661 116.197 41.5394 116.251C41.4027 116.311 41.2736 116.372 41.1368 116.433C41.0077 116.486 40.8861 116.547 40.7646 116.6C40.757 116.6 40.7418 116.608 40.7342 116.615C40.5975 116.676 40.4683 116.744 40.3316 116.805C40.0657 116.934 39.7999 117.063 39.534 117.2C39.4808 117.23 39.4276 117.253 39.3745 117.284C39.3441 117.291 39.3213 117.314 39.2985 117.322C39.2453 117.352 39.1922 117.375 39.139 117.405C39.0099 117.474 38.8807 117.542 38.744 117.61C38.6148 117.679 38.4781 117.755 38.349 117.823C37.4678 118.302 36.5942 118.803 35.7207 119.327C35.5383 119.441 35.356 119.547 35.1661 119.661C34.9838 119.775 34.8015 119.882 34.6116 119.995C34.4293 120.109 34.2394 120.223 34.0571 120.337C33.6924 120.565 33.3278 120.801 32.9632 121.029C32.7809 121.143 32.591 121.264 32.4087 121.386C32.0592 121.613 31.7098 121.841 31.3528 122.069C31.1705 122.191 30.9882 122.312 30.7983 122.426C30.6159 122.548 30.4336 122.669 30.2437 122.783C29.1347 123.505 28.0256 124.219 26.9166 124.91C26.8482 124.956 26.7722 125.001 26.7039 125.047C25.2985 125.921 23.9388 126.711 22.5259 127.242C21.8118 127.516 21.075 127.721 20.323 127.842H20.3078C20.2546 127.85 20.2014 127.865 20.1255 127.888V127.903H20.133V127.926Z' fill='%23474C2F'/%3E%3Cpath d='M16.441 113.972C16.1144 116.281 13.5772 117.838 10.7666 117.443C9.95376 117.329 9.20932 117.063 8.57123 116.691C10.2728 114.321 12.4226 111.829 14.2761 109.9C15.7725 110.834 16.6689 112.376 16.441 113.972Z' fill='%23AAB09E'/%3E%3Cpath d='M77.5219 127.47L75.5848 129.65C75.5848 129.65 71.0575 118.871 73.9593 118.149C76.861 117.428 77.5219 127.47 77.5219 127.47Z' fill='%23474C2F'/%3E%3Cpath d='M75.8593 129.339L75.5783 129.65C75.5783 129.65 71.0509 118.871 73.9527 118.149C74.0894 118.119 74.2185 118.104 74.3477 118.119C71.7194 118.772 75.1757 127.645 75.8593 129.339Z' fill='%23676D54'/%3E%3Cpath d='M83.5003 128.427C83.318 128.443 83.1129 128.465 82.9002 128.481C82.7255 128.496 82.5356 128.511 82.3381 128.519C82.1406 128.534 81.9279 128.549 81.7152 128.557C81.5025 128.572 81.2822 128.579 81.0619 128.595H81.0467C80.8188 128.602 80.591 128.61 80.3555 128.617C78.935 128.671 77.3018 128.686 75.6306 128.655C75.0989 128.648 74.5671 128.64 74.0354 128.617C73.8607 128.61 73.6859 128.602 73.5112 128.602C73.3137 128.595 73.1162 128.587 72.9187 128.572C71.6881 128.519 70.4955 128.427 69.4168 128.298C69.2497 128.283 69.075 128.26 68.9155 128.238C68.7483 128.215 68.5888 128.192 68.4293 128.169C68.2698 128.146 68.1178 128.124 67.9659 128.093C67.5101 128.017 67.1 127.934 66.7277 127.835C66.6518 127.82 66.5834 127.797 66.5074 127.774C66.3555 127.729 66.196 127.675 66.0365 127.615C65.8694 127.561 65.7098 127.501 65.5427 127.44C65.4212 127.402 65.3072 127.356 65.1857 127.303C65.1477 127.303 65.1097 127.28 65.0642 127.258C64.9958 127.227 64.9274 127.204 64.859 127.174C64.6919 127.106 64.5248 127.037 64.3653 126.961C64.1298 126.855 63.8943 126.749 63.6664 126.635C63.6588 126.635 63.6512 126.627 63.6436 126.627C63.5601 126.582 63.4689 126.544 63.3854 126.498C63.2106 126.407 63.0435 126.323 62.8764 126.232C62.5422 126.057 62.2231 125.883 61.9117 125.7C61.8205 125.655 61.7294 125.602 61.6458 125.548C61.4255 125.427 61.2052 125.29 60.9925 125.161C60.8254 125.07 60.5975 125.04 60.3468 125.024C60.005 125.002 59.6556 124.986 59.3138 124.941C59.2682 124.941 59.2226 124.933 59.177 124.926C59.1087 124.918 59.0479 124.903 58.9795 124.888C58.9795 124.888 58.9795 124.88 58.9643 124.888C58.9112 124.872 58.858 124.865 58.8048 124.85C58.744 124.827 58.6833 124.812 58.6225 124.789C58.5921 124.789 58.5541 124.774 58.5237 124.758L58.4782 124.736C58.3794 124.698 58.2731 124.645 58.1743 124.591C58.0832 124.538 57.9996 124.477 57.916 124.409C57.8629 124.363 57.8097 124.318 57.7565 124.265C57.6653 124.06 57.5818 123.847 57.4982 123.634C57.3159 123.125 57.1716 122.601 57.0577 122.077C57.0425 122.009 57.0273 121.948 57.0197 121.879C56.9209 121.393 56.8526 120.907 56.7994 120.413V120.353C56.7614 119.973 56.731 119.601 56.7158 119.221C56.7158 119.175 56.7082 119.13 56.7082 119.084V119.054C56.7006 118.871 56.693 118.689 56.693 118.514C56.6854 118.036 56.6854 117.557 56.693 117.079C56.693 116.851 56.693 116.63 56.693 116.41C56.7006 116.061 56.7082 115.711 56.7158 115.369V115.164C56.7234 114.921 56.731 114.678 56.7386 114.443C56.7386 113.995 56.7386 113.546 56.7386 113.098C56.4044 113.318 56.0321 113.698 55.6295 114.131C54.5737 115.271 53.3355 116.843 52.1732 117.276C51.8998 117.375 51.6339 117.413 51.3756 117.367C51.2161 117.344 51.0566 117.291 50.9047 117.2C50.9047 117.193 50.9047 117.185 50.9047 117.177L50.8819 117.132C50.7983 116.934 50.7679 116.668 50.7603 116.403C50.7603 116.395 50.7603 116.387 50.7527 116.38C50.7527 116.319 50.7451 116.258 50.7451 116.197C50.7451 116.197 50.7375 116.197 50.7451 116.182C50.7375 115.97 50.7375 115.764 50.7147 115.582C50.7071 115.567 50.7071 115.559 50.7071 115.544C50.5932 115.05 50.6084 114.633 50.7147 114.268C50.8363 113.805 51.0946 113.432 51.4288 113.098L51.4516 113.075L51.5276 112.999C51.5276 112.999 51.5503 112.992 51.5579 112.977C51.8922 112.658 52.2948 112.369 52.705 112.088C52.8341 111.989 52.9708 111.89 53.1076 111.792C53.2671 111.67 53.4342 111.549 53.6013 111.427C53.6545 111.389 53.7077 111.343 53.7533 111.305C53.7533 111.305 53.7533 111.305 53.7684 111.29H53.776C53.8824 111.214 53.9963 111.131 54.1027 111.062C54.4369 110.819 54.7712 110.591 55.075 110.371C55.8726 109.809 56.5183 109.368 56.731 109.224C57.4831 109.087 59.4429 110.196 61.699 111.693C63.4157 112.825 65.3072 114.184 66.9708 115.369C68.7939 116.676 70.3436 117.793 71.1108 118.226C71.164 118.264 71.2247 118.309 71.2855 118.347C71.3235 118.37 71.3387 118.393 71.3463 118.393C71.521 118.507 71.7109 118.605 71.916 118.689C72.0451 118.742 72.1819 118.795 72.3186 118.841C72.63 118.947 72.9643 119.038 73.3137 119.099C73.4808 119.13 73.6555 119.16 73.8303 119.175C73.8606 119.175 73.8834 119.175 73.9138 119.175C73.9138 119.175 73.9214 119.175 73.9214 119.183C74.0961 119.206 74.2784 119.228 74.4608 119.236C74.4987 119.236 74.5367 119.244 74.5747 119.244C74.6507 119.251 74.719 119.259 74.795 119.266C74.8786 119.266 74.9621 119.282 75.0533 119.282H75.152C75.3647 119.297 75.5774 119.304 75.7901 119.304C76.732 119.327 77.6816 119.289 78.5172 119.274C78.5628 119.274 78.6007 119.274 78.6463 119.274C79.8617 119.251 80.8416 119.282 81.2366 119.578C81.267 119.601 81.2974 119.623 81.3202 119.646C81.9051 122.54 82.8471 125.617 83.5003 128.42V128.427Z' fill='%23E8D4BA'/%3E%3Cpath d='M50.7679 116.456C50.7983 116.699 50.8363 116.927 50.8819 117.124C50.9351 117.329 50.9958 117.496 51.0718 117.618C52.348 116.638 57.8857 111.921 57.8857 111.921C57.8857 111.921 57.1488 110.591 55.8803 111.64C54.718 112.604 51.3073 115.924 50.7679 116.456Z' fill='%23CEB79B'/%3E%3Cpath d='M50.5775 117.694C50.6155 117.975 50.8282 118.773 51.1472 119.54C51.208 119.684 51.2764 119.828 51.3447 119.965C51.3827 120.041 51.4207 120.117 51.4662 120.193C51.5346 120.315 51.6106 120.436 51.6789 120.542C51.7701 120.679 51.8689 120.793 51.9676 120.9C52.3322 121.264 54.2085 119.821 55.9253 117.96C56.1836 117.679 56.4418 117.382 56.6925 117.086C57.1103 116.585 57.5053 116.068 57.8319 115.559C58.7587 114.146 59.2449 112.809 58.6675 112.073C58.6675 112.073 57.247 110.705 56.176 111.419C56.0924 111.473 55.9937 111.548 55.8721 111.655C54.8466 112.536 52.5373 115.035 51.3295 116.539C51.1472 116.767 50.9953 116.965 50.8737 117.139C50.6686 117.42 50.5547 117.626 50.5623 117.701L50.5775 117.694Z' fill='%23E8D4BA'/%3E%3Cpath d='M51.1473 119.532C51.3069 119.897 51.4816 120.246 51.6791 120.535C53.3427 119.213 57.6877 115.567 57.6877 115.567C57.6877 115.567 56.4572 114.906 55.1886 115.954C54.0871 116.866 51.8842 118.803 51.1473 119.532Z' fill='%23CEB79B'/%3E%3Cpath d='M52.2864 123.095C52.3624 123.209 52.446 123.308 52.5295 123.399L52.5447 123.414C52.7118 123.589 52.8941 123.703 53.0916 123.748C53.3195 123.801 53.95 123.399 54.6945 122.73C55.1578 122.313 55.6668 121.796 56.153 121.226C56.1757 121.196 56.2061 121.165 56.2289 121.135C56.3429 120.998 56.4568 120.854 56.5707 120.71C56.6619 120.596 56.7531 120.482 56.8366 120.36C57.0569 120.056 57.2696 119.745 57.4595 119.426C57.5811 119.213 57.7026 119.008 57.8014 118.795C58.3863 117.61 58.5838 116.448 57.9533 115.62C57.9533 115.62 57.9077 115.59 57.8317 115.552C57.6038 115.438 57.1101 115.21 56.6847 115.172C56.4872 115.157 56.3125 115.172 56.1757 115.263C56.1074 115.309 55.9858 115.415 55.8263 115.567C55.3933 115.97 54.6717 116.699 53.9348 117.474C53.1828 118.256 52.4156 119.084 51.9142 119.661C51.7167 119.882 51.5648 120.064 51.466 120.193C51.3901 120.292 51.3521 120.36 51.3445 120.383C51.2989 120.603 51.6332 122.168 52.2864 123.095Z' fill='%23E8D4BA'/%3E%3Cpath d='M52.2861 123.095C52.3621 123.209 52.4456 123.308 52.5292 123.399C52.7039 123.573 52.8938 123.703 53.0989 123.748C53.1293 123.756 53.1673 123.748 53.2053 123.748C53.8206 123.11 56.6312 120.892 57.4972 119.426C57.7858 118.925 57.4972 119.236 56.5324 119.236C54.7853 119.236 52.2785 123.103 52.2785 123.103L52.2861 123.095Z' fill='%23CEB79B'/%3E%3Cpath d='M52.2717 124.037C52.5072 124.394 53.6922 126.946 54.11 127.182C54.4974 127.387 55.1582 127.083 55.3861 126.977L55.181 124.933C55.257 124.834 56.6016 124.234 57.1105 124.257C57.3308 124.219 57.5511 124.265 57.7638 124.272C57.9537 124.272 58.1436 124.25 58.3183 124.105C58.5994 123.893 60.0123 120.011 60.0123 120.011C60.8099 118.165 59.5261 118.393 57.8246 118.803C57.4827 118.887 57.1333 118.978 56.7687 119.054C56.6319 119.084 56.4952 119.114 56.3661 119.145C55.5305 119.32 53.3807 121.963 52.5679 123.422C52.4312 123.672 52.3324 123.885 52.2792 124.044L52.2717 124.037Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M57.7566 124.265C57.5439 124.265 57.3236 124.212 57.1033 124.25C56.602 124.227 55.2574 124.827 55.1815 124.926L55.3866 126.977C55.1587 127.083 54.4978 127.387 54.1104 127.182C53.6926 126.946 52.5076 124.394 52.2721 124.037C52.3177 123.877 52.4164 123.665 52.5607 123.414L52.538 123.391C52.4468 123.308 52.3633 123.201 52.2873 123.095C51.634 122.168 51.2998 120.603 51.3454 120.383C51.353 120.353 51.3985 120.292 51.4669 120.193C51.3529 119.988 51.2466 119.76 51.1478 119.532C50.8212 118.773 50.6085 117.975 50.5781 117.694C50.5781 117.61 50.6845 117.421 50.882 117.132H50.8896C50.8364 116.927 50.7984 116.699 50.768 116.456C50.768 116.441 50.768 116.418 50.768 116.403C50.768 116.395 50.768 116.387 50.7604 116.38C50.7604 116.319 50.7528 116.258 50.7528 116.198C50.7528 116.198 50.7453 116.198 50.7528 116.182C50.7453 115.97 50.7452 115.765 50.7225 115.582C50.7149 115.567 50.7149 115.559 50.7149 115.544C50.6009 115.05 50.6161 114.633 50.7225 114.268C50.844 113.805 51.1023 113.432 51.4365 113.098L51.4593 113.075L51.5353 112.999C51.5353 112.999 51.558 112.992 51.5656 112.977C51.5884 112.961 51.6188 112.946 51.6416 112.924C51.953 112.673 52.3177 112.384 52.7127 112.088C52.8418 111.989 52.9786 111.89 53.1153 111.792C53.2748 111.67 53.4419 111.549 53.609 111.427C53.7762 111.306 53.9433 111.184 54.1104 111.062C54.4446 110.819 54.7789 110.591 55.0827 110.371C55.8803 109.809 56.526 109.368 56.7387 109.224C56.6703 109.285 55.85 110.052 55.85 111.199C55.85 111.336 55.8499 111.488 55.8879 111.64C55.8575 111.693 55.265 112.779 55.6448 114.131L55.6676 114.222C55.774 114.557 55.9411 114.906 56.1918 115.263C56.1918 115.263 55.5309 116.258 55.9411 117.952C56.0247 118.317 56.1614 118.712 56.3665 119.13C56.3665 119.13 55.9639 119.798 56.2526 121.128C56.4121 121.88 56.7995 122.844 57.6047 124.037C57.6579 124.113 57.711 124.181 57.7642 124.265H57.7566Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M83.5 128.428C83.3177 128.443 83.1126 128.466 82.8999 128.481C82.7252 128.496 82.5353 128.511 82.3378 128.519C82.1403 128.534 81.9276 128.549 81.7149 128.557C81.5022 128.572 81.2895 128.579 81.0616 128.595H81.0464C80.8261 128.602 80.5906 128.61 80.3552 128.617C78.9346 128.671 77.3015 128.686 75.6303 128.655C75.0985 128.648 74.5668 128.64 74.0351 128.617C73.8603 128.61 73.6856 128.602 73.5109 128.602C73.3134 128.595 73.1159 128.587 72.9184 128.572C71.6878 128.519 70.4952 128.428 69.4165 128.298C69.2494 128.283 69.0747 128.26 68.9151 128.238C68.748 128.215 68.5885 128.192 68.429 128.169C68.2695 128.146 68.1175 128.124 67.9656 128.093C67.5098 128.017 67.0996 127.934 66.7274 127.835C66.6515 127.82 66.5831 127.797 66.5071 127.774C66.3552 127.729 66.1957 127.675 66.0362 127.615C65.869 127.562 65.7095 127.501 65.5424 127.44C65.4208 127.402 65.3069 127.356 65.1854 127.303C65.1474 127.303 65.1094 127.28 65.0638 127.258C64.9955 127.227 64.9271 127.205 64.8587 127.174C64.6916 127.106 64.5245 127.037 64.365 126.961C64.1295 126.855 63.894 126.749 63.6661 126.635C63.6585 126.635 63.6509 126.627 63.6433 126.627C63.5597 126.582 63.4686 126.544 63.385 126.498C63.2103 126.407 63.0432 126.323 62.8761 126.232C62.5419 126.057 62.2228 125.883 61.9114 125.7C61.8202 125.655 61.7291 125.602 61.6455 125.549C61.4252 125.427 61.2049 125.29 60.9922 125.161C60.8251 125.07 60.5972 125.04 60.3465 125.024C60.0047 125.002 59.6553 124.986 59.3134 124.941C59.1995 124.926 59.0855 124.91 58.9792 124.888C58.9792 124.888 58.9792 124.88 58.964 124.888C58.9108 124.872 58.8576 124.865 58.8045 124.85C58.7437 124.827 58.6829 124.812 58.6222 124.789C58.5766 124.774 58.531 124.759 58.4778 124.736C58.3791 124.698 58.2727 124.645 58.174 124.591C58.0828 124.538 57.9993 124.477 57.9157 124.409C57.8625 124.364 57.8094 124.318 57.7562 124.265C57.5891 124.265 57.4296 124.212 57.27 124.242H57.2624C56.594 124.25 55.9635 124.531 55.371 124.812H55.3634C55.3634 124.812 55.3026 124.85 55.2874 124.865C55.2494 124.888 55.2266 124.903 55.1962 124.926C55.257 125.579 55.3254 126.316 55.4013 126.969C55.3862 126.977 55.3785 126.992 55.3634 126.992C55.0823 127.212 54.8164 127.288 54.5809 127.243C54.2543 127.227 53.9732 126.984 53.715 126.673C53.6998 126.642 53.677 126.62 53.6618 126.589C53.6618 126.589 53.6618 126.589 53.6542 126.589C53.1073 125.86 52.773 124.789 52.2869 124.044C52.3248 123.482 52.9933 122.799 53.3048 122.328C54.2999 123.657 55.1735 121.31 56.1762 121.219C56.4116 121.454 56.7003 121.674 57.0345 121.887C61.3644 124.667 68.9835 122.89 66.9857 115.377C68.8088 116.684 70.3584 117.8 71.1257 118.233C71.1788 118.271 71.2396 118.317 71.3004 118.355C71.3384 118.378 71.3535 118.4 71.3611 118.4C71.5359 118.514 71.7258 118.613 71.9309 118.697C72.06 118.75 72.1891 118.803 72.3335 118.849C72.6449 118.955 72.9792 119.046 73.3286 119.107C73.4957 119.137 73.6704 119.168 73.8451 119.183C73.8755 119.183 73.8983 119.183 73.9287 119.183C73.9287 119.183 73.9363 119.183 73.9363 119.19C74.111 119.213 74.2933 119.236 74.4756 119.244C74.5136 119.244 74.5516 119.251 74.5896 119.251C74.6655 119.259 74.7339 119.266 74.8099 119.274C74.8934 119.274 74.977 119.289 75.0681 119.289H75.1669C75.3796 119.304 75.5923 119.312 75.805 119.312C76.7469 119.335 77.6965 119.297 78.532 119.282C78.5776 119.282 78.6156 119.282 78.6612 119.282C79.8766 119.259 80.8565 119.289 81.2515 119.585C81.2819 119.608 81.3123 119.631 81.3351 119.654C81.92 122.548 82.8619 125.624 83.5152 128.428H83.5Z' fill='%23CEB79B'/%3E%3Cpath d='M55.3862 124.037C55.5762 124.424 56.2218 124.439 56.2218 124.439C56.4877 124.348 56.7916 124.272 57.103 124.242C57.3157 124.219 57.5284 124.219 57.7411 124.257H57.7563C57.8019 124.31 57.855 124.356 57.9006 124.386C57.9006 124.386 57.4069 123.11 56.9739 123.376C56.5333 123.642 57.4069 123.855 56.9739 123.938C56.5333 124.029 55.1888 123.642 55.3787 124.029L55.3862 124.037Z' fill='%23CEB79B'/%3E%3Cpath d='M55.1962 125.093L55.181 124.926C55.181 124.926 55.2494 124.88 55.3633 124.819V124.804C55.3633 124.804 55.219 124.234 54.6341 124.804C54.0491 125.374 55.2038 125.085 55.2038 125.085L55.1962 125.093Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M58.2727 115.187C58.2727 115.187 56.0698 113.956 56.1533 114.42C56.2369 114.883 56.4648 115.149 56.6926 115.172C56.9205 115.195 58.2727 115.195 58.2727 115.195V115.187Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M58.2726 112.111C58.2726 112.111 56.1684 110.417 56.2596 110.88C56.3507 111.343 56.5027 111.708 56.7306 111.731C56.9584 111.754 58.2726 112.118 58.2726 112.118V112.111Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M58.4625 119.228C58.4625 119.228 56.8141 118.134 56.6393 118.575C56.533 118.848 56.6925 119.205 56.9204 119.228C57.1483 119.251 58.4625 119.228 58.4625 119.228Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M52.2864 123.095C52.3624 123.209 52.446 123.308 52.5295 123.399L52.5447 123.414L54.9451 119.988C54.9451 119.988 51.3293 121.249 51.9142 119.669C51.7167 119.889 51.5648 120.072 51.466 120.201C51.3901 120.299 51.3521 120.368 51.3445 120.391C51.2989 120.611 51.6332 122.176 52.2864 123.103V123.095Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M50.5775 117.694C50.6155 117.975 50.8282 118.773 51.1473 119.54C51.208 119.684 51.2764 119.829 51.3448 119.965L53.7452 117.193C53.7452 117.193 50.7599 117.671 51.3372 116.532C51.1549 116.76 51.0029 116.957 50.8814 117.132C50.6763 117.413 50.5623 117.618 50.5699 117.694H50.5775Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M53.0536 114.23L50.8887 117.124C50.8355 116.927 50.7975 116.699 50.7672 116.456C50.7672 116.441 50.7672 116.418 50.7672 116.403C50.7672 116.395 50.7671 116.387 50.7596 116.38C50.7596 116.319 50.752 116.258 50.752 116.198C50.752 116.198 50.7444 116.198 50.752 116.182C50.7444 115.97 50.7444 115.765 50.7216 115.582C50.714 115.567 50.714 115.559 50.714 115.544C50.6 115.051 50.6152 114.633 50.7216 114.268C50.8431 113.805 51.1014 113.433 51.4356 113.098L51.4584 113.075L51.5344 113C51.5344 113 51.5572 112.992 51.5648 112.977C51.5875 112.962 51.6179 112.946 51.6407 112.924C50.4177 114.298 53.0612 114.23 53.0612 114.23H53.0536Z' fill='%23CEB79B'/%3E%3Cpath d='M65.1854 127.311C65.1854 127.311 65.2233 127.326 65.2461 127.334C65.512 127.432 65.7703 127.524 66.0361 127.615C66.1957 127.676 66.3552 127.729 66.5071 127.774C66.5831 127.797 66.6514 127.82 66.7274 127.835C66.9401 125.83 66.8793 123.156 65.8234 121.515C65.9526 123.201 65.8918 125.647 65.1854 127.311Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M83.4995 128.427C83.3172 128.443 83.1121 128.465 82.8994 128.481C81.0915 128.625 78.2505 128.708 75.3487 128.655C73.6851 128.625 71.9988 128.549 70.4795 128.412C75.683 126.111 72.2039 118.894 72.2039 118.894L72.3178 118.841C72.5305 118.917 72.7508 118.978 72.9863 119.023C73.0926 119.061 73.199 119.076 73.3129 119.099C73.5104 119.137 73.7079 119.168 73.913 119.183C74.6423 119.281 75.4095 119.312 76.1767 119.319C76.9895 119.319 77.7947 119.297 78.5164 119.281C78.562 119.281 78.5999 119.281 78.6455 119.281C79.8609 119.259 80.8408 119.289 81.2358 119.585C81.2662 119.608 81.2966 119.631 81.3194 119.654C81.9043 122.548 82.8463 125.624 83.4995 128.427Z' fill='%23CEB79B'/%3E%3Cpath d='M83.4998 128.427C83.3175 128.443 83.1124 128.465 82.8997 128.481C80.8259 128.648 77.3696 128.739 74.0349 128.617C76.5113 124.888 75.0908 120.049 73.9209 119.19C73.9209 119.183 73.9133 119.183 73.9133 119.183C74.0956 119.206 74.2704 119.228 74.4603 119.244C74.4982 119.244 74.5362 119.251 74.5742 119.251C74.7641 119.266 74.954 119.282 75.1515 119.289C75.3642 119.304 75.5769 119.312 75.7896 119.312C76.7316 119.335 77.6811 119.297 78.5167 119.282C78.5623 119.282 78.6002 119.282 78.6458 119.282C79.8612 119.259 80.8411 119.289 81.2361 119.585C81.2665 119.608 81.2969 119.631 81.3197 119.654C81.9046 122.548 82.8466 125.624 83.4998 128.427Z' fill='%23CEB79B'/%3E%3Cpath d='M76.1771 119.32L76.0859 119.502C73.9894 123.482 72.9791 119.031 72.9791 119.031C73.0854 119.061 73.1918 119.076 73.3057 119.099C73.5032 119.137 73.7007 119.168 73.9058 119.183C74.6351 119.282 75.4023 119.312 76.1695 119.32H76.1771Z' fill='%23CEB79B'/%3E%3Cpath d='M77.5075 129.005C76.8087 128.967 76.1022 128.982 75.3882 129.096C76.0946 125.51 76.7327 119.836 73.6334 118.286C75.5477 117.709 77.1429 117.155 78.5406 116.615L77.5151 129.012L77.5075 129.005Z' fill='%23676D54'/%3E%3Cpath d='M99.9085 130.57C91.8032 132.127 83.7208 128.101 75.5472 129.643C75.5851 129.445 75.6231 129.248 75.6535 129.05C76.0333 126.916 76.2916 124.736 76.1169 122.563C75.9649 120.915 75.5168 118.97 73.9291 118.15C81.4875 116.311 86.8656 112.012 94.4163 110.797C99.9616 110.424 106.692 115.043 110.475 118.066C112.42 119.631 111.645 120.163 110.756 121.538C107.019 127.28 103.334 129.688 99.9237 130.577H99.9161L99.9085 130.57Z' fill='%23979E87'/%3E%3Cpath opacity='0.5' d='M99.901 130.57C99.8478 130.585 99.7871 130.6 99.7339 130.615H99.7187C99.0275 130.828 98.3362 130.949 97.6525 131.018C97.5918 131.003 97.5234 130.995 97.4626 130.98C97.0372 130.889 96.6346 130.76 96.2548 130.6C92.7225 129.149 91.4464 125.184 95.9434 121.226C99.0578 118.484 105.104 116.828 110.46 118.074C111.425 118.924 111.926 119.623 111.683 120.026C111.371 120.558 111.052 121.059 110.741 121.545C107.004 127.288 103.319 129.696 99.9086 130.585L99.901 130.57Z' fill='%23AAB09E'/%3E%3Cpath d='M87.8379 120.52C85.3312 123.102 83.227 126.095 81.7989 129.4C79.7099 129.286 77.6133 129.331 75.5395 129.643C76.0637 126.384 77.2867 120.163 73.9139 118.157C79.1326 116.737 83.6524 114.245 88.6963 112.339C92.8743 110.667 97.3637 110.105 101.83 112.528C96.4066 113.44 91.6133 116.63 87.8379 120.527V120.52Z' fill='%238D9280'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M83.8347 114.466C83.2118 115.271 82.6041 116.099 82.004 116.927C80.8038 118.59 79.6492 120.307 78.7376 122.153C77.7957 124.029 76.9981 125.974 76.2916 127.949C76.0941 128.503 75.8966 129.066 75.7143 129.628C75.6611 129.635 75.6079 129.643 75.5548 129.651C76.2612 126.065 77.0284 119.707 73.9291 118.157C78.6312 116.744 81.4419 115.461 83.9714 114.306C83.9335 114.359 83.8803 114.412 83.8423 114.473L83.8347 114.466Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M99.2168 111.488C98.9813 111.488 98.761 111.533 98.5559 111.64C98.3888 111.731 98.2521 111.852 98.0926 111.959C97.8343 112.126 97.5152 112.126 97.2266 112.194C96.8772 112.278 96.5277 112.361 96.1783 112.452C95.7833 112.551 95.3427 112.703 94.9325 112.642C94.7578 112.612 94.5831 112.551 94.416 112.513C94.0665 112.43 93.6791 112.414 93.3904 112.62C93.1929 112.764 93.0638 112.984 92.8967 113.166C92.5093 113.584 91.9016 113.653 91.3774 113.805C90.9748 113.926 90.5494 114.017 90.1696 114.177C89.8354 114.313 89.4936 114.23 89.1365 114.207C88.8251 114.184 88.4909 114.207 88.2326 114.397C88.1186 114.473 88.0275 114.587 87.9287 114.678C87.6097 114.99 87.2603 115.111 86.8577 115.24C86.3867 115.385 85.9157 115.552 85.4447 115.711C84.951 115.878 84.3965 116.137 83.8647 116.137C83.6672 116.137 83.4621 116.114 83.2722 116.167C82.9835 116.251 82.7784 116.494 82.5429 116.661C82.391 116.767 82.2087 116.843 82.0264 116.904C81.8821 116.957 81.7301 116.995 81.5934 117.048C81.0237 117.253 80.454 117.451 79.8842 117.656C79.626 117.747 79.3677 117.846 79.1018 117.937C78.8587 118.028 78.6461 118.127 78.403 118.142C78.3194 118.142 78.2283 118.142 78.1295 118.127C77.894 118.089 77.6661 118.005 77.4307 118.013C77.1344 118.02 76.8533 118.172 76.671 118.4C76.5951 118.507 76.5343 118.628 76.4507 118.727C76.2684 118.955 75.9798 119.069 75.7215 119.175C75.6911 119.183 75.2277 119.38 75.2125 119.365C75.1973 119.335 75.1821 119.312 75.1593 119.289C75.1517 119.274 75.1442 119.259 75.129 119.243V119.228C75.129 119.228 75.1062 119.206 75.0986 119.198L75.0834 119.183C75.0834 119.183 75.0834 119.183 75.0834 119.175C75.0682 119.152 75.0606 119.137 75.0454 119.122C75.0454 119.122 75.0454 119.122 75.0454 119.114C75.0226 119.092 75.0074 119.069 74.9922 119.046C74.9618 119 74.9239 118.962 74.8935 118.924C74.8859 118.917 74.8783 118.902 74.8707 118.894C74.8631 118.886 74.8555 118.871 74.8403 118.864C74.8251 118.841 74.8023 118.826 74.7871 118.803L74.734 118.742C74.734 118.742 74.696 118.704 74.6808 118.689H74.6732C74.6276 118.636 74.582 118.598 74.544 118.56C74.5213 118.537 74.4909 118.514 74.4681 118.499L74.3997 118.446C74.3997 118.446 74.3314 118.393 74.301 118.37L74.2554 118.332H74.2402C74.2402 118.332 74.2022 118.302 74.187 118.294C74.1794 118.286 74.1642 118.279 74.1567 118.271C74.1339 118.256 74.1111 118.241 74.0883 118.233C74.0579 118.218 74.0351 118.203 74.0047 118.188C74.0047 118.188 73.9667 118.165 73.9515 118.157C74.0959 118.112 74.2478 118.066 74.3845 118.028C74.4073 118.02 74.4301 118.013 74.4529 118.005C74.5516 117.975 74.6504 117.945 74.7567 117.914C74.8479 117.884 74.9315 117.861 75.0226 117.831C75.5088 117.679 75.9646 117.527 76.4128 117.375C76.4735 117.352 76.5419 117.337 76.6027 117.314C77.3547 117.056 78.0459 116.805 78.6992 116.562C78.7904 116.532 78.8815 116.494 78.9651 116.463C79.0942 116.418 79.2158 116.364 79.3373 116.319C79.4437 116.281 79.5424 116.235 79.6412 116.197C79.8083 116.129 79.9678 116.068 80.1197 116C80.2109 115.962 80.2945 115.931 80.378 115.894C80.4996 115.84 80.6135 115.795 80.735 115.749C81.0845 115.605 81.4263 115.453 81.7605 115.316C81.9352 115.24 82.1024 115.164 82.2695 115.088C82.5657 114.959 82.8468 114.83 83.1279 114.708C83.219 114.663 83.3178 114.625 83.4089 114.579C83.6064 114.488 83.8039 114.397 83.9938 114.313C85.5435 113.607 86.9868 112.954 88.7035 112.354C88.7187 112.354 88.7263 112.346 88.7339 112.338C88.7795 112.323 88.8327 112.3 88.8782 112.285C89.9341 111.898 91.1495 111.503 92.6536 111.093C93.2233 110.933 93.8234 110.842 94.4387 110.804C95.958 110.713 97.5912 110.971 99.2548 111.495H99.2472L99.2168 111.488Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath opacity='0.14' d='M99.9082 130.57C99.8398 130.585 99.7866 130.6 99.741 130.615H99.7258C99.0346 130.828 98.3433 130.949 97.6597 131.018C96.3075 131.139 94.9478 131.018 93.5273 130.843C93.4589 130.836 93.383 130.828 93.3146 130.813C92.1979 130.676 91.0737 130.516 89.9494 130.349C89.7595 130.319 89.5772 130.296 89.3873 130.266C89.1974 130.235 89.0151 130.213 88.8252 130.182C88.4682 130.129 88.1111 130.084 87.7617 130.03C87.5794 130 87.3895 129.977 87.1996 129.954C86.8273 129.901 86.4627 129.856 86.0905 129.81C85.9082 129.787 85.7183 129.764 85.536 129.742C85.3537 129.719 85.1638 129.696 84.9815 129.681C84.7991 129.658 84.6092 129.643 84.4269 129.62C83.5533 129.529 82.6722 129.453 81.8062 129.407C81.6771 129.407 81.5479 129.392 81.4112 129.385C81.2821 129.385 81.1529 129.377 81.0238 129.369C80.9706 129.369 80.9174 129.369 80.8643 129.369C80.8415 129.369 80.8111 129.369 80.7883 129.369C80.7351 129.369 80.6819 129.369 80.6288 129.369C80.3705 129.362 80.1046 129.362 79.8464 129.354C79.7172 129.354 79.5881 129.354 79.4589 129.354C79.4513 129.354 79.4438 129.354 79.4286 129.354C79.307 129.354 79.1855 129.354 79.0639 129.354C78.9348 129.354 78.8057 129.354 78.6689 129.362C78.5474 129.362 78.4335 129.369 78.3119 129.377C78.2967 129.377 78.2891 129.377 78.2739 129.377C78.1448 129.377 78.0156 129.392 77.8865 129.4C77.7498 129.4 77.6206 129.415 77.4839 129.43C77.3624 129.438 77.2332 129.453 77.1041 129.461C77.0889 129.461 77.0737 129.461 77.0585 129.461C77.0433 129.461 77.0281 129.461 77.0129 129.461C77.0053 129.461 76.9978 129.461 76.9826 129.461C76.9598 129.461 76.9294 129.461 76.9066 129.468C76.8002 129.476 76.6939 129.491 76.58 129.499C76.5572 129.499 76.5344 129.499 76.5116 129.499C76.4888 129.499 76.4584 129.499 76.4356 129.506C76.3369 129.514 76.2457 129.529 76.147 129.544C76.0938 129.552 76.033 129.559 75.9798 129.567C75.9571 129.567 75.9343 129.567 75.9039 129.575C75.8355 129.582 75.7672 129.597 75.6988 129.605C75.6456 129.613 75.5924 129.62 75.5392 129.628C75.5392 129.59 75.5544 129.552 75.562 129.514C75.562 129.476 75.5772 129.438 75.5848 129.407C75.6 129.316 75.6228 129.225 75.638 129.134C75.638 129.104 75.6456 129.073 75.6532 129.05C75.6532 129.05 75.6532 129.05 75.6532 129.043C75.6684 128.974 75.676 128.906 75.6912 128.838C75.6912 128.8 75.7064 128.762 75.714 128.724C75.8203 128.709 75.9191 128.693 76.0254 128.686C76.5268 128.625 77.0357 128.579 77.5523 128.557C79.0639 128.488 80.5832 128.595 82.0873 128.769C82.2088 128.785 82.3227 128.8 82.4443 128.815C84.3433 129.058 86.2348 129.4 88.1339 129.673C89.1138 129.818 90.1014 129.916 91.0813 130.053C92.122 130.19 93.1551 130.342 94.2033 130.448C94.887 130.517 95.5783 130.57 96.2619 130.585C96.6266 130.592 96.9912 130.585 97.3482 130.57C98.3129 130.524 100.539 129.954 101.465 129.666C101.815 129.559 104.451 128.048 106.646 126.035C107.786 124.986 110.414 121.636 110.748 121.522C107.011 127.265 103.326 129.673 99.9157 130.562L99.9082 130.57Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M78.1756 119.244C77.9857 119.494 77.5831 119.745 77.2565 119.586C76.9298 119.434 76.5348 118.94 76.9298 118.75C77.0666 118.682 77.3249 118.659 77.4768 118.613C77.6439 118.56 77.8262 118.347 78.0009 118.385C78.282 118.53 78.3959 118.955 78.1756 119.244Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M78.1833 118.757C78.1453 119.304 77.1274 120.056 76.7628 119.046C76.459 118.195 78.2441 117.967 78.1833 118.757Z' fill='%23676D54'/%3E%3Cpath d='M78.1152 118.491C77.6442 118.286 76.7403 118.567 76.9606 119.198C77.0061 119.327 77.0669 119.426 77.1277 119.502C76.9833 119.441 76.8542 119.297 76.763 119.046C76.4972 118.309 77.7885 118.043 78.1076 118.491H78.1152Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M84.1846 116.714C84.4049 116.957 84.5112 117.512 84.1618 117.747C83.8124 117.975 83.0527 118.089 82.7565 117.694C82.5058 117.36 83.1135 117.048 83.3718 116.896C83.4933 116.828 83.9263 116.562 84.0783 116.699C84.0783 116.699 84.1846 116.714 84.1922 116.714H84.1846Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M84.2376 117.238C84.1996 117.398 84.0857 117.542 83.9186 117.641C83.5995 117.831 82.6196 117.907 82.6652 117.39C82.7639 116.197 84.6402 116.319 84.2376 117.238Z' fill='%23676D54'/%3E%3Cpath d='M84.1533 116.691C83.6899 116.57 82.9834 116.813 82.9303 117.527C82.9227 117.625 82.9531 117.701 83.0062 117.762C82.8011 117.717 82.6492 117.603 82.672 117.398C82.7404 116.524 83.7735 116.357 84.1609 116.691H84.1533Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M89.283 114.45C89.4425 114.466 89.6932 114.716 89.7539 114.891C90.0654 115.772 88.3486 116.182 88.0524 115.742C87.984 115.651 87.8245 115.453 87.946 115.286C88.0676 115.111 88.3866 115.126 88.5689 115.035C88.7057 114.967 88.85 114.906 88.9715 114.815C89.0551 114.754 89.1842 114.648 89.2982 114.64C89.2982 114.655 89.2526 114.45 89.2754 114.45H89.283Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M89.5556 114.61C89.6619 114.709 89.6695 114.921 89.6011 115.073C89.396 115.521 88.6136 115.84 88.1275 115.65C87.9376 115.575 87.8236 115.354 87.9376 115.104C88.1806 114.549 89.0694 114.124 89.5556 114.61Z' fill='%23676D54'/%3E%3Cpath d='M89.548 114.602C89.0466 114.397 88.3706 114.777 88.1655 115.255C88.0971 115.415 88.1199 115.567 88.1882 115.666C88.1655 115.666 88.1427 115.65 88.1275 115.643C87.9376 115.567 87.8236 115.347 87.9376 115.096C88.1806 114.541 89.0618 114.116 89.5556 114.602H89.548Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M98.6014 112.741C98.5102 112.46 98.6545 112.263 98.8824 112.042C99.0267 111.905 99.1255 112.042 99.3078 111.997C99.6724 111.913 100.28 111.738 100.462 112.126C100.994 113.227 99.0343 114.086 98.5938 112.749L98.6014 112.741Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M93.1165 113.554C93.1013 113.387 93.3444 113.501 93.4432 113.372C93.709 113.03 94.1572 112.916 94.5598 112.833C95.5777 113.585 93.2153 114.937 93.1165 113.562V113.554Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M94.4311 112.734C94.8262 112.901 94.6742 113.569 94.3476 113.751C94.0665 113.957 93.5196 113.972 93.2993 113.827C93.1474 113.721 93.0866 113.524 93.1094 113.334C93.1094 113.296 93.117 113.25 93.1322 113.205C93.2841 112.817 93.6183 112.612 93.9678 112.642C94.1273 112.642 94.2868 112.665 94.4311 112.726V112.734Z' fill='%23676D54'/%3E%3Cpath d='M94.4311 112.734C94.5223 112.772 94.5831 112.84 94.6211 112.916C94.6211 112.916 94.6058 112.908 94.5982 112.908C94.4539 112.847 94.2944 112.817 94.1349 112.825C93.7855 112.787 93.4512 112.992 93.2993 113.379C93.2841 113.417 93.2765 113.463 93.2765 113.508C93.2613 113.622 93.2765 113.744 93.3373 113.843C93.3297 113.835 93.3145 113.827 93.2993 113.82C93.1474 113.713 93.0866 113.516 93.1094 113.334C93.1094 113.296 93.117 113.25 93.1322 113.205C93.2841 112.817 93.6183 112.612 93.9678 112.642C94.1273 112.642 94.2868 112.665 94.4311 112.726V112.734Z' fill='%23474C2F'/%3E%3Cpath d='M100.25 111.913C100.652 112.126 100.508 112.475 100.174 112.756C99.0037 113.729 98.2517 112.741 98.6391 112.225C98.9126 111.86 99.5962 111.579 100.25 111.921V111.913Z' fill='%23676D54'/%3E%3Cpath d='M100.25 111.913C100.371 111.974 100.44 112.05 100.478 112.133C100.462 112.118 100.44 112.111 100.417 112.095C99.7711 111.761 99.0874 112.042 98.8064 112.399C98.6696 112.582 98.6696 112.817 98.7836 113.007C98.5329 112.81 98.4569 112.46 98.6392 112.209C98.9127 111.845 99.5964 111.564 100.25 111.906V111.913Z' fill='%23474C2F'/%3E%3Cpath d='M63.9713 113.242L67.5491 115.514C67.5491 115.514 68.3087 115.514 66.7895 114.754C65.2702 113.994 63.7586 112.566 64.5182 112.141C64.5182 112.141 63.4395 112.49 63.9788 113.242H63.9713Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M88.0587 104.879C88.0587 104.879 88.0511 104.947 88.0435 104.985C87.3218 103.831 86.623 102.646 85.8785 101.537C85.4531 103.762 84.8834 105.912 84.1542 107.515C83.8351 108.214 82.4146 111.389 82.3918 112.437C82.3918 112.68 82.3614 112.923 82.3083 113.159C82.1563 113.508 82.0424 113.789 81.9816 113.994C82.5058 110.257 83.6452 103.603 84.3669 99.4476C84.42 99.1665 84.4656 98.9006 84.5112 98.6424C84.815 96.8952 85.0201 95.7634 85.0201 95.7634C85.2556 96.2343 85.757 97.6245 86.2811 99.1969C86.8585 100.914 87.4813 102.843 87.8156 104.005C87.8156 104.013 87.8232 104.021 87.8232 104.028C87.9371 104.408 88.0207 104.704 88.0587 104.879Z' fill='%238D9280'/%3E%3Cpath opacity='0.3' d='M70.6038 43.8769C70.6884 43.7655 70.7463 43.7076 70.7463 43.7076C70.7374 43.7522 70.733 43.7967 70.7285 43.8412L70.6083 43.8724L70.6038 43.8769Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M70.9057 45.5795C70.8969 45.6594 70.8969 45.7259 70.888 45.8057C70.888 45.8102 70.888 45.8146 70.8836 45.819C70.8747 45.9743 70.8525 46.1207 70.8348 46.2493C70.8303 46.2848 70.8303 46.3247 70.8215 46.3558C70.8126 46.4267 70.8037 46.4888 70.7948 46.5509L70.7815 46.6397V46.653L70.7771 46.6574C70.7771 46.6663 70.7771 46.6707 70.7727 46.684C70.7682 46.7195 70.7594 46.7639 70.7461 46.8171C70.7106 46.9413 70.6706 47.0877 70.6219 47.2385C70.5642 47.4204 70.4977 47.6067 70.44 47.7797C70.5686 48.1567 70.7017 48.5249 70.8348 48.8753C70.7815 48.9507 70.7283 49.0217 70.6795 49.0971C70.6352 49.168 70.5952 49.2346 70.5597 49.3056C70.4976 49.4164 70.4489 49.5362 70.4134 49.6515C70.4089 49.6649 70.4045 49.6782 70.4001 49.6915C70.338 49.8999 70.2138 50.1173 70.0496 50.3258C69.9742 50.4234 69.8988 50.521 69.8101 50.6097C69.5218 50.9024 69.1847 51.1198 68.8919 51.173C68.8653 51.1774 68.8431 51.1774 68.8209 51.1774C68.6923 51.1908 68.5814 51.1686 68.4883 51.0932C68.4883 51.0932 68.4853 51.0917 68.4794 51.0887H68.4749C68.4749 51.0887 68.4705 51.0799 68.4661 51.0754C68.4084 51.0133 68.3419 50.8669 68.2798 50.6673C68.2532 50.6052 68.2354 50.5387 68.2177 50.4677C68.1777 50.3213 68.1378 50.1572 68.0979 49.9709C68.0535 49.7491 68.0047 49.514 67.9648 49.2523C67.9116 48.9196 67.8584 48.5603 67.8184 48.1744V48.1567C67.8051 48.068 67.7874 47.9704 67.783 47.8728C67.7785 47.8684 67.783 47.8684 67.783 47.8684C67.783 47.8684 67.7815 47.8654 67.7785 47.8595C67.7519 47.6599 67.7386 47.4514 67.7253 47.2518C67.6943 46.9014 67.6765 46.5598 67.6676 46.2227V46.1828C67.6588 45.8057 67.6588 45.4509 67.6765 45.1182V45.0428C67.6809 45.0073 67.6854 44.9807 67.6854 44.9452C67.6898 44.8742 67.6943 44.8121 67.6987 44.75C67.6987 44.75 67.7016 44.7456 67.7076 44.7367C67.7076 44.6879 67.712 44.648 67.7164 44.6081C67.7164 44.5948 67.7164 44.577 67.7209 44.5637C67.7297 44.4351 67.7519 44.3109 67.7741 44.2044V44.1956C67.783 44.1379 67.7918 44.0847 67.8051 44.027C67.814 43.9871 67.8184 43.956 67.8318 43.9294V43.9205C67.8406 43.8806 67.8495 43.8451 67.8717 43.8185V43.8096C67.9072 43.6854 67.9426 43.579 67.9914 43.4858C67.9959 43.4725 68.0003 43.4504 68.0092 43.437C68.0181 43.4237 68.0225 43.406 68.0402 43.3927C68.1689 43.1753 68.333 43.0556 68.5459 43.0689C68.7012 43.0777 68.8608 43.1088 69.0205 43.1532H69.025C69.1669 43.1886 69.3044 43.2374 69.4464 43.304C69.646 43.3927 69.8367 43.4947 70.023 43.6322C70.0496 43.6455 70.0762 43.6633 70.0984 43.6854C70.1073 43.6854 70.1117 43.6943 70.125 43.6988C70.1428 43.7076 70.165 43.7254 70.1783 43.7387C70.1916 43.752 70.2138 43.7653 70.2271 43.7786C70.2404 43.7875 70.2626 43.8052 70.2759 43.8141C70.3557 43.8895 70.4311 43.9516 70.5065 44.027C70.5775 44.098 70.644 44.1689 70.715 44.2399C70.715 44.4262 70.7239 44.6125 70.7505 44.8121C70.786 45.0694 70.8436 45.3267 70.919 45.5884L70.9057 45.5795Z' fill='%23A05A07'/%3E%3Cpath d='M66.5095 68.0068C66.4961 68.1222 67.7204 67.3415 67.5474 65.2034C67.5474 62.8126 66.0304 63.3182 66.0304 63.3182C66.0304 63.3182 67.0151 64.4627 66.5095 68.0068Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M44.9739 49.208C44.4993 51.2085 44.1711 54.4999 46.6773 53.8833C49.1835 53.2712 46.8414 48.9818 46.8414 48.9818L44.9739 49.208Z' fill='%23A05A07'/%3E%3Cpath d='M49.9511 62.8568C49.9511 62.8568 48.0082 62.6838 47.8352 64.8307C47.6667 66.9732 49.9511 67.5764 50.0664 67.6031C50.1773 67.6297 49.9511 62.8568 49.9511 62.8568Z' fill='%23B4B296'/%3E%3Cpath d='M66.0127 76.7497C64.7529 76.6122 63.369 76.3815 61.9185 76.0843C61.6257 76.0222 61.333 75.9601 61.0402 75.8936C59.6607 75.5875 58.2368 75.2282 56.7996 74.8246C56.427 74.7225 56.0633 74.6161 55.6907 74.5052C55.6818 74.5052 55.6729 74.5052 55.6641 74.4963C52.1687 73.4672 48.6955 72.2119 45.8566 70.9788C45.6481 70.8856 45.413 70.7614 45.3642 70.5396C45.3287 70.3666 46.3223 68.6943 46.4776 68.6145C48.8596 67.2882 49.76 60.4837 50.0972 54.9967C50.2746 52.0469 50.2923 49.483 50.2923 48.3564V47.7442C51.8626 46.174 56.1254 48.7645 57.7843 49.4431C58.5739 49.7625 65.2941 52.282 66.0393 53.1115C66.0881 53.1647 66.1147 53.2135 66.1103 53.249C65.9107 55.1741 65.7998 56.8198 65.782 58.257C65.7643 59.3216 65.7998 60.2708 65.8796 61.1269C65.9816 62.227 66.1591 63.1807 66.4163 64.0412C66.6603 64.8929 66.9797 65.6514 67.3656 66.3789C67.4676 66.574 67.5741 66.7648 67.6894 66.9555C68.0664 67.6031 68.51 68.2286 69.0024 68.8851C69.0024 68.8939 69.0157 68.9028 69.0246 68.9161C69.5569 69.6214 70.1513 70.3577 70.8033 71.1739C70.8787 71.2671 70.9541 71.3602 71.0295 71.4578C71.9699 72.6422 72.48 73.6003 72.622 74.3677C73.0567 76.6698 70.2045 77.2154 66.0082 76.7586L66.0127 76.7497Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M71.034 71.4489C66.8599 66.2103 64.9614 64.3517 66.1147 53.249C66.1812 52.6058 58.6316 49.7802 57.7888 49.4386C56.1298 48.76 51.867 46.165 50.2968 47.7397C50.2879 47.7486 50.3677 52.7344 49.8754 57.8577C50.0972 58.2037 50.3101 58.5541 50.492 58.9223C50.869 59.6897 51.1529 60.5236 51.4013 61.3442C51.5477 61.8277 51.6763 62.3112 51.7695 62.8036C51.8271 63.0964 51.867 63.4069 51.836 63.7041C51.7828 64.1787 51.5077 64.5291 50.9976 64.4936C50.3278 64.4493 49.7201 64.05 49.2455 63.602C49.179 63.5399 49.1124 63.4734 49.0459 63.4024C48.4825 65.9352 47.6619 67.9491 46.4731 68.6011C46.3223 68.6854 45.3287 70.3577 45.3642 70.5263C45.413 70.748 45.6437 70.8722 45.8566 70.9654C57.2121 75.898 78.7699 81.141 71.034 71.44V71.4489Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M71.0333 71.4489C66.8593 66.2103 64.9608 64.3517 66.1141 53.249C66.1806 52.6058 58.6309 49.7802 57.7881 49.4386C56.1292 48.76 51.8664 46.165 50.2961 47.7397C50.2873 47.7486 50.3449 51.3549 50.061 55.5822C50.1409 55.6886 50.2163 55.7995 50.2917 55.9104C50.6288 56.4294 50.8861 56.9927 51.1123 57.5694C51.3341 58.1239 51.5115 58.6916 51.72 59.2505C51.8575 59.6187 52.0039 59.9825 52.1458 60.3551C52.5362 61.3886 52.9221 62.4665 53.0419 63.571C53.1306 64.3561 53.0641 65.3852 52.1015 65.5316C51.3607 65.6425 50.6332 65.3497 50.03 64.9372C49.6219 64.6577 49.2493 64.3295 48.9166 63.9613C48.3577 66.2324 47.5726 68.0067 46.4769 68.61C46.3261 68.6943 45.3325 70.3666 45.368 70.5351C45.4168 70.7569 45.6475 70.8811 45.8604 70.9743C57.2159 75.9068 78.7737 81.1499 71.0378 71.4489H71.0333Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M72.6265 74.3587C72.1785 76.2883 68.3903 76.3947 63.5243 75.543C63.4844 73.507 57.3364 73.6224 56.7953 71.6484C55.1984 65.8065 52.9628 61.4861 50.0928 54.9966L50.0485 54.8946C50.2303 52.242 50.2791 49.8201 50.2924 48.3518V48.3208C50.2924 48.1034 50.2924 47.9082 50.2924 47.7397C50.2924 47.203 50.2924 46.8925 50.2924 46.8925C51.8582 45.3178 56.1255 47.9127 57.7844 48.5914C58.6228 48.9329 66.1769 51.7585 66.1104 52.4017C66.0882 52.6456 66.0616 52.8807 66.0394 53.1158C65.8486 55.1164 65.7644 56.802 65.7821 58.2613C65.6845 65.1057 67.5786 67.1284 71.0296 71.4577C71.97 72.6376 72.4801 73.6002 72.6221 74.3631L72.6265 74.3587Z' fill='%23CEB79B'/%3E%3Cpath d='M48.8636 63.0654C48.8636 63.0654 48.0252 62.8879 47.8522 65.0215C47.6837 67.1552 48.9035 67.9358 48.8902 67.8249C48.3845 64.2852 48.8636 63.0698 48.8636 63.0698V63.0654Z' fill='%23BBB99D'/%3E%3Cpath d='M42.6185 68.7741C43.1198 71.0098 42.4056 73.3873 43.3859 75.5476C43.4081 75.5964 43.4347 75.6451 43.4569 75.6939C42.8625 75.9069 42.2814 76.1331 41.7181 76.377C42.002 76.6565 42.3125 76.9138 42.6318 77.1489C43.5811 77.8542 44.6324 78.3864 45.7191 78.8566C46.6107 79.2425 47.5733 79.4155 48.5492 79.3712C49.494 79.3268 50.4166 79.1272 51.3304 78.8877C52.1687 78.6703 53.016 78.4619 53.8233 78.1469C54.5241 77.8763 55.2028 77.5481 55.846 77.1489C57.0791 76.3859 58.1659 75.3834 58.9865 74.1813C59.6962 73.1434 60.193 71.9856 60.4858 70.7658C60.1132 71.0098 59.7406 71.2582 59.3591 71.4888C57.7933 72.4292 56.0766 73.2543 54.2402 73.4539C52.599 73.6313 50.8469 73.3075 49.5339 72.2607C48.385 71.3469 47.5156 70.0783 46.8946 68.7608C46.6107 68.162 46.3623 67.5277 46.1849 66.8756C45.3865 67.3813 44.3219 67.8737 42.8847 68.2685C42.6851 68.3217 42.6097 68.477 42.623 68.6233C42.6097 68.6677 42.6097 68.7209 42.623 68.7786H42.6185V68.7741Z' fill='%23C2C2AC'/%3E%3Cpath d='M44.8807 68.0423C45.8788 70.1049 45.7235 72.5845 47.1696 74.4608C47.2006 74.5052 47.2405 74.5451 47.2716 74.585C46.7393 74.9266 46.2292 75.2814 45.7368 75.6452C46.0784 75.8537 46.4377 76.0355 46.8014 76.1908C47.8882 76.661 49.0326 76.9404 50.1947 77.1533C51.1529 77.3263 52.1287 77.2731 53.0647 77.0114C53.974 76.7541 54.8301 76.346 55.6596 75.9113C56.427 75.5077 57.2033 75.1129 57.9219 74.6249C58.5429 74.2036 59.1284 73.7245 59.6651 73.1922C60.6898 72.1675 61.5237 70.9477 62.0471 69.5904C62.4996 68.4193 62.7213 67.1773 62.7302 65.9264C62.4197 66.2502 62.1181 66.574 61.7987 66.8845C60.4902 68.1576 59.0042 69.3508 57.2609 69.963C55.704 70.5086 53.9208 70.5884 52.4082 69.8698C51.0819 69.2399 49.9463 68.202 49.0414 67.062C48.6289 66.543 48.243 65.9796 47.9236 65.3853C47.2627 66.0595 46.3356 66.7781 45.0271 67.4878C44.8452 67.5854 44.8053 67.7539 44.8541 67.8915C44.8541 67.9358 44.863 67.989 44.8896 68.0423H44.8807Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M44.8807 68.0423C45.8788 70.1049 45.7235 72.5845 47.1696 74.4608C47.2006 74.5052 47.2405 74.5451 47.2716 74.585C46.7393 74.9266 46.2292 75.2814 45.7368 75.6452C46.0784 75.8537 46.4377 76.0355 46.8014 76.1908C47.8882 76.661 49.0326 76.9404 50.1947 77.1533C51.1529 77.3263 52.1287 77.2731 53.0647 77.0114C53.974 76.7541 54.8301 76.346 55.6596 75.9113C56.427 75.5077 57.2033 75.1129 57.9219 74.6249C58.5429 74.2036 59.1284 73.7245 59.6651 73.1922C60.6898 72.1675 61.5237 70.9477 62.0471 69.5904C62.4996 68.4193 62.7213 67.1773 62.7302 65.9264C62.4197 66.2502 62.1181 66.574 61.7987 66.8845C60.4902 68.1576 59.0042 69.3508 57.2609 69.963C55.704 70.5086 53.9208 70.5884 52.4082 69.8698C51.0819 69.2399 49.9463 68.202 49.0414 67.062C48.6289 66.543 48.243 65.9796 47.9236 65.3853C47.2627 66.0595 46.3356 66.7781 45.0271 67.4878C44.8452 67.5854 44.8053 67.7539 44.8541 67.8915C44.8541 67.9358 44.863 67.989 44.8896 68.0423H44.8807Z' fill='%23C2C2AC'/%3E%3Cpath d='M45.4663 67.2837C44.7743 67.643 43.9271 67.9801 42.8802 68.2685C42.6806 68.3217 42.6052 68.4769 42.6185 68.6233C42.6052 68.6677 42.6052 68.7209 42.6185 68.7786C43.1198 71.0142 42.4056 73.3918 43.3859 75.552C43.4081 75.6008 43.4347 75.6496 43.4569 75.6984C42.8625 75.9113 42.2814 76.1375 41.7181 76.3815C42.002 76.6609 42.3125 76.9182 42.6318 77.1533C43.5811 77.8586 44.6324 78.3909 45.7191 78.8611C46.6107 79.247 47.5733 79.42 48.5491 79.3756C48.7177 79.3667 48.8863 79.3534 49.0504 79.3357C49.1169 75.3036 46.5619 68.9338 45.4663 67.2882H45.4619L45.4663 67.2837Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M83.1701 77.3352C83.2943 77.415 83.4141 77.4993 83.5294 77.588C83.3786 77.211 83.2544 76.9981 83.1701 77.3352Z' fill='%239EA58E'/%3E%3Cpath d='M67.676 67.0176C67.6317 67.1906 67.574 67.3636 67.5119 67.5277C67.055 68.7431 66.1812 69.7988 65.0589 70.4553C64.4823 70.788 63.8568 71.032 63.1959 71.1029C62.5483 71.1739 61.8962 71.1251 61.2575 70.9876C61.2353 70.9876 61.2176 70.9787 61.1954 70.9743C60.5078 70.8235 59.838 70.5839 59.2082 70.269C58.5339 69.9363 57.8952 69.5149 57.323 69.027C57.2609 68.9738 57.2032 68.9205 57.1367 68.8629C59.7715 67.8914 61.7898 66.9688 63.3024 66.1437C64.8593 65.2921 65.8796 64.5557 66.4784 63.988C66.4828 63.9835 66.4917 63.9791 66.4961 63.9747C66.6381 63.8416 66.7223 63.6641 66.7756 63.4823C66.8643 63.194 67.0861 63.5222 67.6228 64.1432C67.6228 64.1432 67.6272 64.1654 67.6317 64.1743C67.6627 64.2719 67.6938 64.3739 67.716 64.4759C67.92 65.3098 67.9023 66.1925 67.676 67.022V67.0176Z' fill='%23CCD1C0'/%3E%3Cpath d='M48.0836 65.1369C48.0569 65.2478 48.0303 65.3587 48.0126 65.474C47.8485 66.4987 48.0126 67.5677 48.4606 68.5037C49.015 69.6791 49.9643 70.655 51.1398 71.2228C51.7386 71.5111 52.3818 71.7018 53.0516 71.7196C53.7214 71.7418 54.3912 71.6309 55.0344 71.4313C56.4228 71.0054 57.7092 70.207 58.7382 69.1779C58.7959 69.1202 58.8536 69.0626 58.9112 69.0005C52.9762 67.3459 50.0175 65.647 48.9308 64.649C48.3719 64.1344 48.6646 64.334 48.0836 65.1325V65.1369Z' fill='%23CCD1C0'/%3E%3Cpath d='M49.3739 65.3366C49.0945 65.0216 48.9836 64.924 48.8194 64.3917C48.5533 63.5312 48.2872 63.2872 48.8638 63.0654C48.265 62.9634 47.9323 63.9082 47.7992 65.5672C47.6307 67.7008 48.5045 67.8827 48.6198 67.9137C48.6598 67.9226 48.6598 67.4169 48.642 66.7338C48.4025 66.6407 49.5513 65.5362 49.3784 65.3366H49.3739Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.7' d='M61.7808 69.1866C61.7808 69.1866 61.7808 69.2044 61.7719 69.2133C61.7009 69.4883 61.5634 69.7101 61.3416 69.8076C61.2041 69.8076 61.0755 69.8076 60.9468 69.8076C61.1908 69.6258 61.4303 69.4483 61.661 69.2709C61.6965 69.2443 61.732 69.2177 61.7719 69.1911L61.7808 69.1866Z' fill='%232B6B40'/%3E%3Cpath d='M65.3871 40.2299C63.9277 39.946 61.3905 40.4472 59.8735 40.8863L59.8912 41.5295L59.4698 41.015C58.7823 41.2678 58.7734 41.5207 59.1194 42.0884C59.7803 43.1841 59.6827 43.082 60.0243 43.0333C62.1135 42.1461 64.4866 41.6981 65.7464 41.7513C65.8706 41.5828 65.9638 40.3363 65.3915 40.2299H65.3871Z' fill='%23CE8000'/%3E%3Cpath opacity='0.6' d='M65.3868 40.2301C65.0053 40.1547 64.5484 40.1369 64.0561 40.1547C64.0694 40.2833 64.0782 40.4075 64.0694 40.5184C64.0516 41.0285 63.8564 41.5164 63.5681 41.9689C64.4287 41.8048 65.1916 41.7338 65.7416 41.756C65.8659 41.5874 65.959 40.341 65.3912 40.2345L65.3868 40.2301Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M65.3787 40.2256C64.8642 40.128 64.2121 40.1236 63.5246 40.1812C63.3383 40.5361 63.0544 40.8643 62.735 41.126C62.6152 41.2236 62.3225 41.5164 62.1273 41.4055C61.9853 41.3257 61.9587 41.166 61.9498 41.0107C61.6881 41.5208 61.1071 41.8801 60.6147 42.235C60.3175 42.4523 60.0247 42.7628 59.7009 43.0112C59.7896 43.0911 59.8517 43.0556 60.007 43.0334C62.0962 42.1463 64.4694 41.6983 65.7291 41.7515C65.8533 41.5829 65.9465 40.3365 65.3743 40.23L65.3787 40.2256Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M62.3041 42.1817C62.2597 42.2127 62.2153 42.2482 62.1754 42.2837C62.8763 42.0885 63.5549 41.951 64.1671 41.8579C64.1981 41.6095 64.1759 41.3478 64.1227 41.126C63.892 41.3123 63.6215 41.5385 63.2977 41.5607C63.2755 41.5607 63.2577 41.5474 63.2533 41.5296L63.2311 41.3478C63.036 41.6982 62.6456 41.9333 62.3085 42.1817H62.3041Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M64.5929 41.0329C64.5974 41.0861 64.5752 41.2414 64.6328 41.2281C64.6905 41.2192 64.7482 41.2015 64.8014 41.1793C64.9345 41.1172 65.0542 41.0329 65.1607 40.9353C65.3248 40.7801 65.4889 40.5805 65.6131 40.3675C65.551 40.2966 65.4756 40.2433 65.378 40.2256C65.1075 40.1724 64.797 40.1458 64.4598 40.1413C64.5042 40.4385 64.5663 40.7313 64.5929 41.0285V41.0329Z' fill='%23C77500'/%3E%3Cpath d='M55.2727 40.9442L54.9134 41.3434L54.9933 40.8377C53.6315 40.4119 50.7748 39.9417 49.5284 40.3321C49.4485 40.3542 49.2135 41.7959 49.6437 41.7604C49.6703 41.7604 49.697 41.7604 49.728 41.7604C49.7945 41.7071 49.8744 41.6539 49.9675 41.6184C50.5752 41.3833 51.143 41.4587 51.143 41.4587C51.143 41.4587 50.9567 41.6317 50.7349 41.8801C52.2475 42.1507 54.6384 42.8028 55.3171 43.0423C55.7163 43.1843 56.0978 42.5544 56.2441 41.9689C56.4304 41.2103 56.3328 41.2902 55.2683 40.9486L55.2727 40.9442Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M55.2727 40.9488L54.9134 41.348L54.9933 40.8423C54.8957 40.8113 54.878 40.8068 54.7626 40.7758C54.6118 40.8734 54.4876 40.9577 54.3545 41.0242C53.8577 41.2726 53.3299 41.4633 52.7843 41.5742C52.1544 41.7029 51.5068 41.765 50.8636 41.7428C50.8237 41.7827 50.7837 41.8315 50.7394 41.8803C52.252 42.1509 54.6473 42.8029 55.326 43.0425C55.7252 43.1844 56.1066 42.5545 56.253 41.969C56.4393 41.2105 56.3462 41.2903 55.2772 40.9488H55.2727Z' fill='%23C77500'/%3E%3Cpath opacity='0.6' d='M55.7477 41.0995C55.5836 41.5919 55.2864 42.0178 54.8561 42.3549C54.6831 42.4879 54.5057 42.621 54.3238 42.7408C54.7629 42.865 55.1178 42.9714 55.3218 43.0424C55.7211 43.1844 56.1025 42.5545 56.2489 41.969C56.4042 41.3435 56.3643 41.2903 55.7477 41.0995Z' fill='%23A05A07'/%3E%3Cpath d='M100.881 81.0922V81.1011H100.824C100.824 81.1011 100.815 81.0967 100.81 81.0967C100.118 81.0656 99.4309 81.0789 98.7478 81.1277C98.2732 81.1588 97.7941 81.2076 97.3195 81.2741C96.9602 81.3229 96.6009 81.3806 96.2416 81.4515C95.9311 81.5048 95.6294 81.5713 95.3189 81.6334C94.9818 81.7132 94.6447 81.7887 94.312 81.8774C94.139 81.9217 93.9749 81.9661 93.8063 82.0104C93.7531 82.0237 93.6955 82.0459 93.6289 82.0637C93.2829 82.1524 92.9414 82.2544 92.5998 82.3697C92.5909 82.3697 92.5732 82.3742 92.5643 82.3786C92.205 82.4895 91.8546 82.596 91.4997 82.7157C91.1005 82.8532 90.7057 82.9907 90.3021 83.1327C90.2844 83.1371 90.2622 83.146 90.2444 83.1593C90.1601 83.1859 90.0803 83.2125 90.0049 83.248C89.8807 83.2879 89.7609 83.3323 89.6412 83.3855C89.6367 83.3811 89.6367 83.3855 89.6367 83.3855C89.3085 83.5053 88.9802 83.6251 88.652 83.7581C88.4125 83.8468 88.1641 83.94 87.9245 84.0376H87.9201C87.5697 84.1707 87.2281 84.3082 86.8821 84.4412C86.8821 84.4457 86.8777 84.4457 86.8777 84.4457C86.8289 84.4634 86.7845 84.4812 86.7357 84.4989C86.0171 84.7828 85.3074 85.0711 84.5933 85.3373C84.3138 85.4437 84.0388 85.5502 83.7638 85.6522C83.7593 85.6522 83.7505 85.6611 83.746 85.6611C83.3867 85.7986 83.0363 85.9361 82.6815 86.0647C81.9673 86.322 81.2576 86.5394 80.5257 86.7212C80.1619 86.8188 79.7982 86.9031 79.4345 86.9874C79.3014 87.0273 79.1595 87.0495 79.0264 87.0849C79.0219 87.0805 79.0175 87.0849 79.0175 87.0849C78.982 87.0894 78.9554 87.0983 78.9244 87.1027L78.8135 87.1204C78.8135 87.1204 78.7869 87.1293 78.7824 87.1293C78.6405 87.1604 78.503 87.1825 78.3655 87.2047L78.0993 87.2491C77.8642 87.2979 77.6336 87.3334 77.4029 87.36C77.3851 87.36 77.3585 87.3644 77.3319 87.3688C77.1811 87.3955 77.0214 87.4176 76.8662 87.4398C76.7952 87.4487 76.7287 87.4576 76.6577 87.4709C76.4182 87.4975 76.1742 87.5241 75.9391 87.5551C75.7705 87.5684 75.6064 87.5906 75.4423 87.5995C75.429 87.5995 75.4068 87.6039 75.3891 87.6039C75.256 87.6172 75.1229 87.6305 74.9943 87.6394C74.9499 87.6394 74.8967 87.6483 74.8523 87.6483C74.4265 87.6793 73.9962 87.7015 73.5793 87.7193H73.5527C72.3373 87.7592 71.1219 87.737 69.902 87.666C68.3584 87.5729 66.8103 87.3999 65.2711 87.1604C64.446 87.0273 63.621 86.8809 62.8004 86.7168C62.7738 86.7168 62.756 86.7079 62.725 86.7035C62.6052 86.6769 62.4899 86.6547 62.3701 86.6236H62.3657C62.3257 86.6192 62.2814 86.6103 62.237 86.6059C62.1882 86.597 62.1527 86.5793 62.104 86.5704C61.8822 86.526 61.6737 86.4817 61.4519 86.4373C61.4341 86.4285 61.4164 86.4196 61.4031 86.4196C61.3765 86.4196 61.3587 86.4151 61.3321 86.4107C61.3144 86.4063 61.2922 86.4018 61.27 86.4018C61.1281 86.3664 60.9906 86.3309 60.8531 86.3043C60.7156 86.2688 60.578 86.2333 60.4361 86.2067C60.3563 86.1934 60.2808 86.1712 60.201 86.1534C60.1966 86.149 60.1966 86.1534 60.1966 86.1534C60.1788 86.149 60.1611 86.1446 60.1434 86.1401C60.0103 86.1091 59.8728 86.0825 59.7397 86.0425C59.5667 86.0026 59.3893 85.9627 59.2251 85.9183C59.2251 85.9183 59.2207 85.9139 59.2163 85.9139C59.1409 85.9006 59.0699 85.8784 58.9989 85.8607C58.9723 85.8607 58.959 85.8518 58.9368 85.8518H58.9235C58.7416 85.7986 58.5642 85.7542 58.3824 85.7099C58.1872 85.6611 57.9876 85.6123 57.7835 85.559C57.7525 85.5502 57.7259 85.5457 57.6859 85.5236C57.5041 85.4792 57.3266 85.426 57.1492 85.3816H57.1448C56.7278 85.2619 56.3153 85.1465 55.8983 85.0268C55.0777 84.7917 54.2615 84.5521 53.4498 84.3037C53.4409 84.2993 53.432 84.2949 53.4232 84.2949C53.3167 84.2638 53.2014 84.2328 53.0905 84.1973C53.0018 84.1707 52.9131 84.144 52.8243 84.113C52.6336 84.0553 52.434 83.9932 52.2388 83.9311C52.2255 83.9311 52.2122 83.9267 52.1989 83.9223C52.1856 83.9223 52.1723 83.9222 52.1678 83.9178C52.1678 83.9178 52.1634 83.9149 52.1545 83.9089C52.1191 83.8956 52.0791 83.8779 52.0436 83.869C52.0436 83.869 52.0392 83.8646 52.0348 83.8646C51.4936 83.665 50.9347 83.4875 50.3758 83.3101C50.2693 83.2746 50.1629 83.248 50.0564 83.2125C50.0298 83.2037 50.0076 83.1992 49.981 83.1859C49.5862 83.0661 49.1914 82.9508 48.7967 82.8266C48.6636 82.7867 48.5349 82.7423 48.4063 82.7024C48.2422 82.6536 48.0825 82.6004 47.9228 82.5472C47.7365 82.4895 47.5546 82.423 47.3683 82.3564C47.2841 82.3254 47.2042 82.2988 47.1244 82.2677C46.9336 82.1967 46.7429 82.1258 46.5522 82.0459C46.5477 82.0459 46.5389 82.0415 46.5344 82.0415C46.5344 82.0415 46.5315 82.04 46.5256 82.0371H46.5211C46.4723 82.0104 46.4191 81.9927 46.3703 81.9661L46.2683 81.9217L46.2239 81.9084C46.2239 81.9084 46.2151 81.904 46.2106 81.904H46.2062C46.2062 81.904 46.1929 81.8995 46.1796 81.8995C46.1663 81.8907 46.1441 81.8862 46.1263 81.8729H46.1219C46.1219 81.8729 46.0953 81.8596 46.082 81.8463C45.9844 81.802 45.8868 81.7576 45.7892 81.7044C45.7094 81.6733 45.634 81.6334 45.5541 81.5979H45.5497C45.5053 81.5713 45.4565 81.5491 45.4077 81.5181C45.2569 81.4427 45.1017 81.3628 44.9553 81.2785H44.9509C44.9509 81.2785 44.9376 81.2697 44.9331 81.2652C44.9287 81.2564 44.9198 81.2475 44.9198 81.2342C44.9109 81.2297 44.9065 81.2209 44.9021 81.2076C44.9021 81.2031 44.8976 81.1987 44.8976 81.1898C44.8888 81.1721 44.871 81.1455 44.8666 81.1188C44.8621 81.1055 44.8533 81.0834 44.84 81.0656C44.8355 81.0523 44.8311 81.0346 44.8222 81.0213C44.8222 81.0213 44.8207 81.0198 44.8178 81.0168C44.8178 81.0168 44.8133 81.0124 44.8133 81.008C44.8133 81.008 44.8089 81.0035 44.8089 80.9991H44.8133C44.8 80.9459 44.7823 80.9015 44.769 80.8438V80.835C44.769 80.835 44.7646 80.7817 44.7557 80.7507L44.7424 80.662C44.7158 80.5599 44.7025 80.4535 44.6936 80.3515C44.6847 80.2627 44.6758 80.174 44.667 80.0853C44.6625 80.072 44.6625 80.0498 44.6625 80.0321L44.6492 79.8103C44.6448 79.7526 44.6403 79.6861 44.6359 79.6284C44.6182 79.4599 44.6004 79.2957 44.5871 79.1228C44.5738 78.9852 44.5516 78.8477 44.5383 78.7058C44.5339 78.688 44.5339 78.6614 44.5339 78.6437C44.5206 78.5239 44.5073 78.4086 44.494 78.2888V78.2755C44.4895 78.2489 44.4895 78.2223 44.4851 78.1957C44.4585 77.9961 44.4407 77.8009 44.423 77.6013C44.423 77.6013 44.423 77.5983 44.423 77.5924C44.4141 77.5303 44.4053 77.4638 44.3964 77.4017C44.3964 77.3884 44.392 77.3706 44.392 77.3573C44.392 77.3484 44.3875 77.3396 44.3875 77.3263H44.392V77.3351C44.6049 78.138 45.2303 78.4707 46.153 78.4707H46.1574C46.2195 78.4707 46.2905 78.4707 46.357 78.4618C46.632 78.453 46.9336 78.413 47.253 78.3421C47.2663 78.3421 47.2796 78.3376 47.2929 78.3376C47.4438 78.3021 47.599 78.2667 47.7498 78.2312C47.7809 78.2267 47.8119 78.2179 47.8474 78.2045C47.8785 78.1957 47.9095 78.1868 47.945 78.1735C47.9849 78.1646 48.0248 78.1558 48.0692 78.138C48.149 78.1114 48.22 78.0892 48.2954 78.067C48.5305 78.0049 48.7612 77.9207 49.0051 77.8364H49.0096C49.0096 77.8364 49.0495 77.8231 49.0628 77.8186C49.0672 77.8186 49.0761 77.8142 49.0806 77.8098C49.5507 77.6368 50.0431 77.4327 50.5577 77.2109C51.0545 76.9892 51.5646 76.7452 52.088 76.4835C52.0924 76.4835 52.0969 76.4835 52.0969 76.479C52.6602 76.1951 53.2369 75.8935 53.8135 75.5786H53.8179C53.9954 75.481 54.1728 75.3878 54.3458 75.2903C54.4744 75.2148 54.6031 75.1483 54.7273 75.0729C54.8071 75.0285 54.8781 74.9886 54.9579 74.9443C55.2152 74.8023 55.4681 74.6515 55.7209 74.5051H55.7253V74.4963C55.8495 74.4253 55.9693 74.3587 56.0935 74.2833C56.2177 74.2124 56.3375 74.1414 56.4617 74.066C56.5726 74.0039 56.6879 73.9329 56.7943 73.8708C56.8653 73.8265 56.9363 73.7821 57.0073 73.7422C57.0472 73.7156 57.0915 73.6934 57.1315 73.6668C57.1403 73.6623 57.1492 73.6579 57.1625 73.649C57.1625 73.649 57.1758 73.6357 57.1803 73.6313H57.1936C57.3266 73.5514 57.4553 73.476 57.5883 73.3962C57.6638 73.3518 57.7347 73.3075 57.8101 73.2587C57.8944 73.2099 57.9831 73.1566 58.0674 73.1034C58.1118 73.0768 58.1561 73.0546 58.196 73.0236C58.2227 73.0058 58.2493 72.9837 58.2759 72.9704C58.3025 72.9526 58.3291 72.9349 58.3557 72.9171H58.3646C58.3957 72.9038 58.4223 72.8816 58.4578 72.8683L58.6352 72.7663C58.6618 72.753 58.684 72.7353 58.7106 72.7175C58.7683 72.682 58.8304 72.6421 58.8925 72.6066L59.0388 72.5135C59.0743 72.4869 59.1098 72.4691 59.1409 72.4425C59.5135 72.2118 59.8816 71.9767 60.2454 71.7416C60.2631 71.7283 60.2853 71.715 60.2986 71.7062C60.3252 71.6928 60.3429 71.6751 60.3696 71.6618C60.3696 71.6574 60.374 71.6618 60.374 71.6618C60.5559 71.542 60.7333 71.4267 60.9107 71.3158C60.9817 71.267 61.0527 71.2271 61.1236 71.1827H61.1281C61.1281 71.1827 61.1414 71.1694 61.1547 71.165C61.2035 71.1384 61.2478 71.1118 61.2878 71.0852C61.3011 71.0763 61.3144 71.0718 61.3233 71.0585C61.3499 71.0452 61.3765 71.0275 61.4031 71.0142H61.4164L61.4208 70.9964C61.8334 70.7392 62.166 70.5307 62.4189 70.3754C62.4233 70.3754 62.4233 70.371 62.4278 70.371C62.5032 70.3266 62.5697 70.2778 62.6451 70.2379H62.6496L62.6584 70.2246C62.6895 70.2113 62.7117 70.1891 62.7427 70.1758C62.7826 70.1492 62.8181 70.127 62.8536 70.1004H62.858C62.858 70.1004 62.9024 70.0694 62.9201 70.0561H62.9246C62.9246 70.0561 62.9689 70.025 62.9955 70.0117C63.0887 69.9496 63.1818 69.8831 63.275 69.8298C63.4702 69.7012 63.6875 69.5592 63.9049 69.4129C64.0557 69.3108 64.2109 69.2044 64.3662 69.0979L64.3795 69.0846C64.3795 69.0846 64.3972 69.0713 64.4106 69.0669C64.4194 69.0624 64.4238 69.058 64.4283 69.058C64.4327 69.058 64.4327 69.0536 64.4372 69.0536L64.4505 69.0403C64.4505 69.0403 64.4638 69.027 64.4771 69.0225C64.5525 68.9737 64.6235 68.9249 64.6989 68.8673C64.6989 68.8673 64.7033 68.8717 64.7033 68.8673C64.7388 68.8407 64.7787 68.814 64.8098 68.7874C64.8098 68.7874 64.8142 68.7919 64.8142 68.7874C64.8719 68.7386 64.9384 68.6943 64.9961 68.6499C64.9961 68.6499 65.0049 68.6455 65.0049 68.641C65.4929 68.2817 65.9719 67.9003 66.3845 67.5188C66.3933 67.5099 66.4022 67.5055 66.4111 67.4922C66.4377 67.4744 66.4643 67.4478 66.4909 67.4212C66.5353 67.3857 66.5841 67.3369 66.6284 67.2926H66.6329C66.6683 67.2527 66.6994 67.2216 66.7349 67.1861C66.7659 67.1506 66.797 67.1196 66.828 67.0885C66.8635 67.0486 66.899 67.0087 66.9345 66.9688C66.97 66.9333 66.9966 66.8934 67.0321 66.8623C67.0853 66.8091 67.1341 66.7514 67.1829 66.6893C67.2273 66.6316 67.276 66.5695 67.316 66.5119C67.3293 66.4941 67.347 66.472 67.3559 66.4542L67.4003 66.3965H67.4047V66.3877C67.4313 66.3478 67.4535 66.3034 67.4801 66.2635C67.4801 66.259 67.4845 66.2546 67.489 66.2457C67.4934 66.2413 67.4978 66.2324 67.5023 66.228C67.5156 66.1969 67.5333 66.1703 67.5466 66.1437H67.5511C67.5511 66.1437 67.5644 66.1393 67.5644 66.1304V66.1215C67.5644 66.1215 67.5688 66.1082 67.5688 66.1038C67.6398 65.9707 67.693 65.8421 67.7196 65.7223V65.7134C67.7595 65.5804 67.764 65.4606 67.7374 65.3497C67.7329 65.3364 67.7329 65.3187 67.7285 65.3009C67.7285 65.2876 67.7241 65.2654 67.7196 65.2521C67.7152 65.2432 67.7152 65.2344 67.7152 65.2211C67.7152 65.1856 67.7329 65.159 67.7595 65.119C67.764 65.1102 67.7729 65.1057 67.7862 65.1013C67.795 65.0924 67.8039 65.0836 67.8172 65.0747C67.8261 65.0703 67.8261 65.0658 67.8305 65.0614C67.835 65.0569 67.8394 65.0525 67.8438 65.0525C67.8837 65.0215 67.937 64.9993 67.9946 64.9727C68.0656 64.9461 68.141 64.9239 68.2253 64.8973C68.2963 64.8839 68.3628 64.8618 68.4427 64.8529C68.5314 64.8396 68.6245 64.8174 68.7177 64.8085C68.7753 64.7997 68.8286 64.7908 68.8907 64.7819C68.8951 64.7775 68.904 64.7775 68.9173 64.7819C68.9616 64.7775 69.0104 64.7731 69.0592 64.7686C69.1524 64.7642 69.2455 64.7553 69.3431 64.7509C69.5516 64.742 69.7645 64.742 69.9774 64.7464C70.0484 64.7509 70.1149 64.7553 70.177 64.7597C70.248 64.7642 70.3101 64.7642 70.3766 64.7731C70.5008 64.7864 70.6162 64.8041 70.7359 64.8174C70.7404 64.8174 70.7493 64.8174 70.7537 64.8218C70.9267 64.8485 71.0864 64.8795 71.2283 64.9239C71.2328 64.9239 71.2416 64.9283 71.2461 64.9283C71.2727 64.9327 71.2949 64.9416 71.3259 64.9594C71.3303 64.9594 71.3348 64.9594 71.3392 64.9638C71.3836 64.9727 71.4191 64.9904 71.459 65.0082C71.4856 65.017 71.5078 65.0259 71.5299 65.0392C71.5433 65.0436 71.561 65.0525 71.5743 65.0658C71.592 65.0791 71.6098 65.0924 71.6231 65.0969C71.6364 65.1057 71.6497 65.1102 71.6586 65.1235C71.663 65.1235 71.6675 65.1235 71.6719 65.1279H71.6808C71.6808 65.1279 71.7074 65.1412 71.7163 65.1545C71.7251 65.1678 71.7429 65.1723 71.7517 65.1812C71.7872 65.1989 71.8271 65.2255 71.8582 65.2521C72.0046 65.3497 72.1598 65.4429 72.3151 65.5271C72.3417 65.5449 72.3683 65.5626 72.3949 65.5759H72.4038C73.6236 66.259 74.9455 66.7204 76.1476 66.8712C76.2673 66.8889 76.3827 66.9022 76.5024 66.9111H76.5379C76.8839 66.9377 77.2255 66.951 77.5759 66.9643C77.5892 66.9688 77.6069 66.9688 77.6203 66.9643C77.6291 66.9688 77.638 66.9688 77.6513 66.9688H77.7533C77.8731 66.9732 77.9929 66.9776 78.1126 66.9821C78.29 66.9909 78.4764 66.9954 78.6582 66.9998H78.8844C79.0308 67.0042 79.1772 67.0042 79.3325 67.0087C79.6651 67.0176 80.0067 67.022 80.3438 67.0353C80.6277 67.0442 80.916 67.053 81.1999 67.0664C81.4749 67.0797 81.7588 67.093 82.0383 67.1063C82.2955 67.1196 82.5439 67.1418 82.7968 67.1595C83.8436 67.2482 84.886 67.3946 85.8974 67.6341C87.095 67.9225 88.2483 68.3483 89.3041 68.9915L89.4815 69.0935C90.0093 69.4217 90.5017 69.7633 90.9941 70.1315H91.0029C91.9788 70.8501 92.9103 71.6308 93.8152 72.4292C94.2544 72.8107 94.6802 73.1966 95.106 73.5825C95.1903 73.6579 95.2701 73.7289 95.3456 73.8043C95.4698 73.9063 95.5984 74.0172 95.7093 74.1236C96.3791 74.7313 97.0312 75.3524 97.6655 75.9911C97.6743 76 97.6832 76.0088 97.6965 76.0177C97.7364 76.0532 97.7719 76.0931 97.8074 76.1242C97.8562 76.1685 97.9006 76.2085 97.9405 76.2484L97.9981 76.306C97.9981 76.306 98.0425 76.3415 98.0558 76.3593L98.0913 76.3948C98.0913 76.3948 98.109 76.4125 98.1223 76.4258C98.1223 76.4258 98.1253 76.4288 98.1312 76.4347H98.1357C98.1889 76.4835 98.2377 76.5323 98.282 76.5766C98.3885 76.6875 98.5038 76.8029 98.6103 76.9137H98.6147V76.9226C98.9296 77.242 99.2135 77.5614 99.5063 77.8852C99.5152 77.894 99.5196 77.8985 99.5196 77.9118V77.9207C99.5196 77.9207 99.524 77.9251 99.5285 77.934L99.5418 77.9517L99.5861 78.0582C99.5861 78.0582 99.5906 78.0715 99.595 78.0759C99.5994 78.0937 99.6083 78.1158 99.6216 78.1336C99.6571 78.209 99.697 78.2977 99.7414 78.3997C99.8789 78.728 100.074 79.176 100.26 79.6151C100.287 79.6684 100.309 79.7216 100.331 79.7792C100.349 79.828 100.371 79.8724 100.389 79.9168C100.398 79.9345 100.402 79.9522 100.407 79.9655C100.442 80.0454 100.478 80.1164 100.504 80.1873C100.509 80.1962 100.513 80.214 100.518 80.2273L100.575 80.3603L100.629 80.489C100.66 80.5599 100.682 80.622 100.708 80.6753C100.722 80.7063 100.735 80.7285 100.744 80.7507L100.771 80.8083C100.779 80.8394 100.797 80.866 100.806 80.8926L100.819 80.9281L100.837 80.9725C100.837 80.9725 100.85 81.0079 100.864 81.0257C100.864 81.0257 100.877 81.0612 100.881 81.0701C100.881 81.0701 100.883 81.073 100.886 81.0789V81.0967H100.895V81.1055H100.899L100.881 81.0922Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.4' d='M100.881 81.0921V81.101C100.881 81.101 100.841 81.1054 100.824 81.1054H100.81C100.136 81.1631 99.4883 81.2341 98.8585 81.3139C98.3439 81.376 97.8427 81.447 97.3503 81.5268C96.6761 81.6288 96.0284 81.7442 95.3986 81.8728C94.4271 82.0591 93.5045 82.272 92.6306 82.4982C92.2137 82.6047 91.8012 82.72 91.4019 82.8309C91.3043 82.8575 91.2068 82.8842 91.1092 82.9152C90.7321 83.0261 90.364 83.1414 90.0002 83.2523C89.876 83.2922 89.7563 83.3322 89.6321 83.3632C89.2949 83.4697 88.9578 83.585 88.6296 83.6915C88.3856 83.7757 88.1372 83.86 87.8933 83.9443C87.5561 84.0685 87.2146 84.1838 86.8819 84.3036C86.8819 84.3036 86.8775 84.3036 86.8775 84.308C86.048 84.6008 85.2407 84.898 84.4422 85.1863C83.9011 85.3815 83.3688 85.5767 82.8365 85.7585C82.7034 85.8029 82.5659 85.8517 82.4328 85.9005C81.2662 86.2953 80.0996 86.6501 78.8842 86.9562H78.8798C78.6935 87.0005 78.5116 87.0449 78.3253 87.0893C78.0104 87.1647 77.6866 87.2312 77.3627 87.2977H77.3583C77.1853 87.3332 77.0123 87.3687 76.8393 87.3953C76.3869 87.4796 75.9211 87.5461 75.4421 87.6127C75.4288 87.6127 75.4066 87.6171 75.3888 87.6171C74.7989 87.6925 74.1956 87.7502 73.5657 87.7901C72.5012 87.8655 71.3789 87.8744 70.1812 87.8212C69.9373 87.8167 69.68 87.8034 69.4227 87.7857C69.3917 87.7812 69.3651 87.7812 69.3296 87.7768C67.8436 87.6792 66.2423 87.484 64.499 87.1691C62.7824 86.8586 60.9282 86.4416 58.9011 85.8872C58.7237 85.8384 58.5462 85.7896 58.3644 85.7408C58.2091 85.6964 58.0494 85.6521 57.8942 85.6077C57.8764 85.5988 57.8543 85.5944 57.8321 85.59C57.6059 85.5279 57.3796 85.4569 57.149 85.3904H57.1445C56.7276 85.2706 56.3151 85.1553 55.8981 85.0355C55.0775 84.8004 54.2613 84.5609 53.4495 84.3125C53.4407 84.308 53.4318 84.3036 53.4229 84.3036C53.2233 84.2459 53.0193 84.1794 52.8241 84.1217C52.6334 84.0641 52.4338 84.002 52.2386 83.9399C52.2253 83.9399 52.212 83.9354 52.1987 83.931L52.1543 83.9177C52.1188 83.9044 52.0789 83.8866 52.0434 83.8778C52.0434 83.8778 52.039 83.8733 52.0345 83.8733C51.4934 83.6737 50.9345 83.4963 50.3756 83.3189C50.2735 83.2878 50.1626 83.2568 50.0562 83.2213C49.6392 83.0926 49.2178 82.9684 48.7964 82.8398C48.6634 82.7999 48.5347 82.7555 48.4061 82.7156C48.242 82.6668 48.0823 82.6136 47.9226 82.5603C47.7363 82.5027 47.5544 82.4361 47.3681 82.3696C47.2838 82.3386 47.204 82.3119 47.1242 82.2809C46.9334 82.2099 46.7427 82.1389 46.5519 82.0591C46.5475 82.0591 46.5386 82.0547 46.5342 82.0547C46.5342 82.0547 46.5312 82.0532 46.5253 82.0502L46.5209 82.0458C46.4721 82.0281 46.4189 82.0059 46.3701 81.9837L46.2237 81.926C46.2237 81.926 46.2148 81.9216 46.2104 81.9216C46.0684 81.8595 45.9265 81.793 45.789 81.7264C45.7091 81.6909 45.6337 81.651 45.5539 81.6155H45.5495C45.5007 81.5889 45.4563 81.5667 45.4075 81.5401C45.2567 81.4647 45.1014 81.3849 44.9551 81.3006H44.9506C44.9506 81.3006 44.9373 81.2917 44.9329 81.2873C44.9285 81.2784 44.9196 81.2695 44.9196 81.2562C44.9107 81.2429 44.9063 81.2296 44.9018 81.2163C44.9018 81.2163 44.9018 81.2119 44.8974 81.2119C44.8885 81.1941 44.8708 81.1675 44.8664 81.1409C44.8619 81.1276 44.853 81.1054 44.8397 81.0877C44.8353 81.0744 44.8309 81.0566 44.822 81.0433C44.822 81.0433 44.8205 81.0418 44.8176 81.0389C44.8176 81.0389 44.8131 81.0344 44.8131 81.03C44.8131 81.03 44.8087 81.0256 44.8087 81.0211H44.8131C44.7821 80.8703 44.7555 80.7151 44.7288 80.5643C44.7244 80.5376 44.72 80.511 44.72 80.4844C44.7155 80.4489 44.7111 80.4223 44.7067 80.3868C44.6934 80.2937 44.6756 80.2005 44.6667 80.1074C44.6623 80.0941 44.6623 80.0719 44.6623 80.0541C44.6135 79.6549 44.578 79.2513 44.5425 78.852C44.5381 78.8121 44.5337 78.7678 44.5337 78.7278C44.5292 78.7101 44.5292 78.6835 44.5292 78.6657C44.5159 78.546 44.5026 78.4306 44.4937 78.3109V78.2976C44.4893 78.271 44.4893 78.2443 44.4849 78.2177C44.4671 78.0226 44.4449 77.8185 44.4139 77.6233C44.4139 77.6233 44.4139 77.6204 44.4139 77.6145C44.4095 77.5568 44.4006 77.4947 44.3873 77.437V77.4237C44.3873 77.4237 44.3828 77.3927 44.3828 77.3794C44.3828 77.3705 44.3784 77.3616 44.3784 77.3483H44.3828V77.3572C44.8042 78.0447 45.4164 78.3774 46.1483 78.4661H46.1527C46.2148 78.475 46.2814 78.4794 46.3479 78.4794C46.41 78.4839 46.4721 78.4883 46.5342 78.4883H46.5431C47.2883 78.4928 48.1311 78.2887 49.0049 77.956C49.0138 77.956 49.0315 77.9516 49.0448 77.9427C49.0537 77.9427 49.0714 77.9383 49.0848 77.9294C49.5993 77.7387 50.1316 77.5036 50.6595 77.2419C51.143 77.0112 51.6176 76.7584 52.0789 76.5055C52.0833 76.5055 52.0878 76.5055 52.0878 76.5011C52.4471 76.3059 52.7975 76.1063 53.1346 75.92C53.3298 75.8091 53.525 75.6938 53.7113 75.5918C53.8931 75.4897 54.0661 75.3922 54.2302 75.299C54.3988 75.2059 54.5541 75.1171 54.7049 75.0373H54.7093C54.767 74.9974 54.8335 74.9619 54.8912 74.9353C55.1351 74.8022 55.3614 74.6824 55.5698 74.5893C55.6142 74.5627 55.6586 74.5449 55.7029 74.5272H55.7162C55.836 74.4518 55.9558 74.3852 56.08 74.3098C56.2042 74.2388 56.3239 74.1679 56.4481 74.0969C56.5546 74.0259 56.6699 73.9638 56.7808 73.8973C56.8518 73.8529 56.9228 73.8086 56.9937 73.7687C57.0425 73.7332 57.0957 73.6977 57.1445 73.6711C57.149 73.6666 57.1579 73.6622 57.1623 73.6578H57.1756C57.3087 73.5779 57.4373 73.5025 57.5704 73.4227C57.6458 73.3783 57.7168 73.334 57.7922 73.2852C57.8764 73.2364 57.9652 73.1831 58.0494 73.1299C58.1204 73.0856 58.187 73.0412 58.2579 72.9968C58.2845 72.9791 58.3112 72.9614 58.3378 72.9436H58.3422C58.5684 72.8105 58.7946 72.673 59.0209 72.5355C59.0563 72.5089 59.0918 72.4912 59.1229 72.4645C59.4955 72.2339 59.8637 71.9988 60.2274 71.7637C60.2451 71.7504 60.2673 71.7371 60.2806 71.7282C60.3072 71.7149 60.325 71.6972 60.3516 71.6839C60.3516 71.6794 60.356 71.6839 60.356 71.6839C60.5379 71.5641 60.7153 71.4488 60.8928 71.3379C60.9637 71.2891 61.0347 71.2491 61.1057 71.2048C61.1057 71.2004 61.1101 71.2004 61.1101 71.2004C61.119 71.1959 61.1234 71.1915 61.1367 71.187C61.1855 71.1604 61.2299 71.1338 61.2698 71.1072C61.2831 71.0983 61.2964 71.0939 61.3053 71.0895C61.3319 71.0717 61.3585 71.054 61.3851 71.0407H61.3984L61.4029 71.0229C61.8154 70.7657 62.1481 70.5572 62.4009 70.4019C62.4054 70.4019 62.4054 70.3975 62.4098 70.3975C62.4852 70.3531 62.5517 70.3043 62.6271 70.2644H62.6316C62.6626 70.2378 62.6892 70.2201 62.7247 70.2023C62.7646 70.1757 62.8001 70.1535 62.8356 70.1269H62.8401C62.8401 70.1269 62.8844 70.0958 62.9022 70.0825H62.9066L62.9643 70.0382C62.9643 70.0382 62.9687 70.0338 62.9731 70.0382C63.0663 69.9761 63.1594 69.9095 63.2526 69.8563C63.4611 69.7188 63.6696 69.5813 63.8825 69.4394C64.0333 69.3373 64.1885 69.2309 64.3438 69.1244C64.3615 69.1111 64.3881 69.0934 64.4059 69.0801C64.4103 69.0801 64.4103 69.0756 64.4148 69.0756C64.5123 69.0047 64.6055 68.9425 64.6986 68.876C64.7341 68.8583 64.7607 68.8317 64.7918 68.805C64.8539 68.7607 64.9249 68.7119 64.987 68.6631H64.9958C65.1777 68.5256 65.3551 68.3925 65.5281 68.2594C65.8165 68.0243 66.1003 67.7893 66.3621 67.5364C66.3709 67.5275 66.3798 67.5231 66.3887 67.5098C66.4641 67.4388 66.5351 67.3723 66.6105 67.2969C66.7125 67.1949 66.8189 67.084 66.9121 66.9775C67.0629 66.8134 67.2048 66.6448 67.3379 66.4718L67.3823 66.4142H67.3867V66.4053C67.4133 66.3654 67.4355 66.321 67.4621 66.2811C67.4621 66.2767 67.4666 66.2722 67.471 66.2633C67.4754 66.2589 67.4799 66.25 67.4843 66.2456C67.4976 66.2146 67.5198 66.1879 67.5331 66.1613C67.5375 66.1525 67.542 66.148 67.5464 66.1436C67.6529 66.0061 67.6883 65.8686 67.7017 65.7355V65.6867C67.7017 65.6867 67.7061 65.6823 67.7017 65.6778C67.7061 65.5492 67.6972 65.4294 67.7105 65.3141C67.7194 65.2209 67.7505 65.1367 67.8214 65.0613C67.8791 65.0346 67.9412 65.0169 67.9989 64.9992C68.2162 64.9238 68.4513 64.8661 68.6953 64.8217C68.7086 64.8173 68.7308 64.8173 68.7441 64.8173C68.784 64.8084 68.8239 64.804 68.8683 64.7996C68.8727 64.7951 68.8816 64.7951 68.8949 64.7996C69.4449 64.7153 70.0349 64.7197 70.5893 64.8129C70.6337 64.8173 70.6736 64.8262 70.718 64.8306C70.7224 64.8306 70.7313 64.8306 70.7357 64.835C70.9886 64.8838 71.2281 64.9548 71.4499 65.048C71.512 65.0746 71.5785 65.1012 71.6406 65.1322C71.6451 65.1322 71.6495 65.1322 71.6539 65.1367H71.6628C71.6628 65.1367 71.6894 65.15 71.6983 65.1633C71.7072 65.1766 71.7249 65.1766 71.7338 65.181C71.7692 65.2076 71.8092 65.2298 71.8402 65.2564C71.9866 65.354 72.1419 65.4516 72.2971 65.5314C72.3282 65.5492 72.3548 65.5669 72.3858 65.5802C73.5657 66.1924 74.8077 66.5517 76.0852 66.769C76.5865 66.8577 77.0877 66.9198 77.5978 66.9686C77.6067 66.9731 77.6156 66.9731 77.6289 66.9731C77.6688 66.9731 77.7043 66.9775 77.7398 66.9819C78.2765 67.0307 78.8221 67.0662 79.3633 67.0928C80.4722 67.1461 81.5945 67.1771 82.699 67.2437C83.7769 67.3146 84.8414 67.4211 85.875 67.6384C87.5694 67.9933 89.1885 68.632 90.6434 69.843C90.7499 69.9362 90.8652 70.0337 90.9717 70.1313H90.9805C91.9298 70.8721 92.8746 71.6395 93.7928 72.4291C94.0856 72.6819 94.3783 72.9303 94.6667 73.192C95.3453 73.7864 96.0018 74.3985 96.6494 75.0195C96.7382 75.1038 96.8224 75.1881 96.9112 75.2724C97.1684 75.5208 97.4257 75.7648 97.6741 76.0176C97.714 76.0531 97.7495 76.093 97.785 76.1241C97.8915 76.2261 97.9979 76.337 98.0911 76.439C98.2596 76.6031 98.4104 76.7628 98.5657 76.9269C98.8718 77.2463 99.169 77.5657 99.4706 77.8895C99.475 77.8984 99.4839 77.9072 99.5016 77.9205C99.5016 77.9205 99.5061 77.9294 99.5105 77.9383C99.515 77.9516 99.5283 77.9782 99.546 78.0137C99.5504 78.027 99.5593 78.0492 99.5726 78.0669C99.5726 78.0713 99.577 78.0802 99.5815 78.0847C99.5859 78.1024 99.5948 78.1246 99.6081 78.1423C99.6436 78.2177 99.6835 78.3064 99.7279 78.4085C99.8654 78.7367 100.061 79.1847 100.247 79.6239C100.273 79.6771 100.296 79.7303 100.318 79.788C100.336 79.8323 100.358 79.8811 100.375 79.9255C100.384 79.9432 100.389 79.961 100.393 79.9743C100.429 80.0497 100.455 80.1251 100.491 80.1961C100.495 80.205 100.5 80.2227 100.504 80.236C100.513 80.2493 100.517 80.2671 100.517 80.2804C100.553 80.3558 100.58 80.4223 100.611 80.4933H100.615C100.642 80.5687 100.668 80.6264 100.695 80.684C100.708 80.7151 100.721 80.7372 100.73 80.7594C100.739 80.786 100.744 80.7993 100.757 80.8171C100.766 80.8481 100.784 80.8748 100.792 80.9014L100.806 80.9369C100.806 80.9369 100.815 80.9635 100.819 80.9768C100.819 80.9768 100.819 80.9812 100.824 80.9812C100.828 80.9945 100.837 81.0167 100.85 81.0344C100.85 81.0344 100.863 81.0699 100.868 81.0788C100.868 81.0788 100.869 81.0818 100.872 81.0877C100.872 81.0877 100.877 81.101 100.881 81.1054V81.1143H100.886L100.881 81.0921Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M72.3904 65.5316L72.3771 65.5449C71.4811 66.8312 70.3145 67.949 69.0325 68.9072C69.0237 68.916 69.0148 68.9205 69.0059 68.9249C68.5757 69.2443 68.1321 69.5459 67.6796 69.8298C66.2025 70.7569 64.6145 71.5243 62.9866 72.1896C62.2059 72.5001 61.4252 72.8062 60.6489 73.1256C60.4227 73.2187 60.2009 73.3074 59.9836 73.405C58.919 73.8664 57.8633 74.3543 56.7943 74.82C56.7765 74.8289 56.7588 74.8333 56.7455 74.8422C55.7297 75.2814 54.7183 75.7205 53.7247 76.2173C52.7888 76.6831 51.844 77.2109 51.0544 77.894C50.4156 78.4441 49.8789 79.0961 49.5595 79.8679C49.2446 80.6398 49.2002 81.5003 49.116 82.3209C49.0982 82.5072 49.0805 82.698 49.0672 82.902C49.0672 82.8665 48.7922 82.7645 48.4373 82.6492C48.007 82.5028 47.4614 82.3342 47.1332 82.2278C47.111 82.2278 47.0888 82.2145 47.0666 82.2056C46.9646 82.1701 46.8892 82.1479 46.8582 82.139C46.7561 82.1036 46.6408 82.0681 46.5255 82.037C46.5255 82.037 46.5166 82.037 46.5122 82.037C46.0509 81.8995 45.5274 81.7576 45.1593 81.487C45.1238 81.4648 45.0927 81.4426 45.0572 81.416C45.0129 81.3761 44.9685 81.3273 44.933 81.2785C44.9153 81.2519 44.8976 81.2253 44.8798 81.1942C44.8399 81.1277 44.8044 81.0523 44.7778 80.9724C44.6048 80.5289 44.6048 79.9567 44.556 79.5663C44.4717 78.8078 44.4362 78.0493 44.3564 77.2908C44.3564 77.3307 44.3697 77.375 44.3786 77.4105C44.454 77.8585 44.6713 78.1336 44.9907 78.2666C45.0262 78.2844 45.0617 78.2977 45.0972 78.3066C45.3944 78.4485 45.7581 78.5062 46.1706 78.4929C46.2194 78.4929 46.2726 78.4929 46.3303 78.484C46.7561 78.4529 47.2263 78.3642 47.7187 78.2267C47.7808 78.209 47.8429 78.1912 47.9094 78.1735C48.0248 78.138 48.149 78.1025 48.2643 78.067C48.495 77.9916 48.7212 77.9073 48.9563 77.8231C50.7749 77.1399 52.6025 76.1286 53.3787 75.7693C53.4719 75.7161 53.5783 75.6673 53.6715 75.6096C54.2969 75.2814 54.9091 74.9309 55.5256 74.5805C55.57 74.5539 55.6232 74.5273 55.6676 74.4962C56.1466 74.2256 56.6257 73.9506 57.1003 73.6712C57.3931 73.4982 57.6859 73.3163 57.9786 73.1389C59.0299 72.509 60.0679 71.8658 61.097 71.2049C61.199 71.1428 61.2966 71.0763 61.3986 71.0142C61.5538 70.9121 61.7091 70.8145 61.8643 70.7125C62.0373 70.5972 62.2192 70.4863 62.3922 70.3665C62.4632 70.3222 62.5341 70.2734 62.6051 70.2335C62.6051 70.2335 62.6184 70.2157 62.6229 70.2157C62.6894 70.1802 62.7515 70.1359 62.818 70.0959C62.8846 70.0516 62.9467 70.0028 63.0132 69.9629C63.3104 69.7633 63.6076 69.5725 63.9092 69.3685C64.0113 69.3064 64.1177 69.2354 64.2197 69.1644C64.2552 69.1378 64.2907 69.1156 64.3262 69.0935C64.3484 69.0757 64.3706 69.058 64.3927 69.0491C65.4396 68.3394 66.3888 67.5764 67.0054 66.8578C67.1074 66.7425 67.2006 66.6227 67.2848 66.5074C67.3159 66.4675 67.3425 66.4231 67.3691 66.3832C67.6486 65.9574 67.7772 65.567 67.6929 65.2388C67.6796 65.1944 67.6929 65.1501 67.7329 65.1057C67.7462 65.088 67.7639 65.0702 67.7816 65.0569C67.795 65.048 67.8038 65.0392 67.8171 65.0347C67.9059 64.9771 68.0389 64.9283 68.1986 64.8839C68.2651 64.8662 68.3361 64.8484 68.416 64.8396C68.8418 64.7553 69.4051 64.7154 69.9507 64.7376C70.0838 64.7376 70.2169 64.7509 70.35 64.7642C70.6605 64.7952 70.9621 64.844 71.2061 64.9194C71.2415 64.9283 71.2815 64.9416 71.317 64.9549C71.3569 64.9682 71.3968 64.9815 71.4323 64.9993C71.4722 65.0126 71.5121 65.0347 71.5432 65.0481C71.5787 65.0747 71.6053 65.088 71.6319 65.1013C71.6408 65.1013 71.6452 65.1102 71.6541 65.1146C71.6763 65.1279 71.6984 65.1456 71.725 65.1545C71.7694 65.1811 71.8138 65.2077 71.8581 65.2344C72.0222 65.3319 72.1952 65.4295 72.386 65.5404L72.3904 65.5316Z' fill='%233B754B'/%3E%3Cpath d='M79.6647 79.8324C76.7637 77.8718 82.4636 75.3256 80.9111 72.9658C78.7509 69.4261 72.0839 80.3558 76.4487 83.5185C78.8263 84.5919 84.3621 81.6111 79.6691 79.8412L79.6647 79.8324Z' fill='%233E8E5B'/%3E%3Cpath d='M68.181 81.039C67.7729 81.2785 67.3515 81.4915 66.8813 81.5935C66.4155 81.7044 65.9409 81.7487 65.4663 81.6556C64.9784 81.558 64.4106 81.3406 63.9138 81.5048C63.6831 81.5802 63.3771 81.7532 63.3637 82.0237C63.3549 82.21 63.448 82.3875 63.5722 82.525C63.8739 82.8532 64.2953 83.0351 64.73 83.1282C65.2667 83.248 65.8212 83.2658 66.3668 83.3012C66.8414 83.3323 67.3071 83.421 67.7818 83.4476C68.2475 83.4742 68.731 83.4565 69.179 83.3323C69.6182 83.2125 70.1105 82.9774 70.3412 82.5693C70.8912 81.6157 69.6492 80.1607 68.1721 81.0301V81.039H68.181Z' fill='%233E8E5B'/%3E%3Cpath d='M98.6055 76.8958H98.5922C98.5922 76.8958 98.5744 76.9003 98.5611 76.9003C98.3127 76.918 98.0643 76.9402 97.8159 76.9713H97.8115C97.8115 76.9713 97.8071 76.9713 97.8026 76.9713C97.7006 76.9801 97.5897 76.989 97.4877 77.0067H97.4788C96.1703 77.1531 94.8839 77.3838 93.602 77.6588C92.8124 77.8274 92.0184 78.0092 91.2333 78.2C90.5679 78.3641 89.9114 78.5282 89.246 78.6923C89.113 78.7278 88.9799 78.7544 88.8424 78.7944C88.35 78.9141 87.8532 79.0294 87.3653 79.1492C87.2322 79.1936 87.0858 79.2335 86.935 79.2779H86.9306C84.8014 79.8368 80.7959 80.2227 81.0975 77.1265H81.102C81.1375 76.9136 81.1818 76.714 81.2395 76.5232C81.408 75.951 81.6698 75.4453 82.0024 74.9885C82.0024 74.9885 82.0024 74.984 82.0069 74.984C82.9694 73.6489 84.5086 72.7041 85.9414 71.7282H85.9458C86.1987 71.5552 86.4471 71.3822 86.6866 71.2136H86.691C86.7975 71.1338 86.8995 71.0584 87.0015 70.983C87.1745 70.8499 87.3387 70.7168 87.5028 70.5838C87.5028 70.5838 87.5117 70.5838 87.5161 70.5749C87.6536 70.464 88.1016 70.0648 88.5319 69.67C88.5408 69.6656 88.5452 69.6567 88.5496 69.6522C88.5674 69.6345 88.5895 69.6168 88.6073 69.599C88.8646 69.3639 89.1085 69.1377 89.2726 68.9736L89.4501 69.0756C89.8493 69.3063 90.2441 69.5591 90.6344 69.8208C90.7453 69.9006 90.8607 69.9849 90.9716 70.0603C92.2535 70.983 93.4822 72.0697 94.6577 73.1698C94.7996 73.2984 94.9371 73.4315 95.0746 73.5646C95.1589 73.64 95.2387 73.711 95.3142 73.7864C96.0594 74.4872 96.7824 75.1881 97.4921 75.8446C97.532 75.8801 97.5808 75.9244 97.6341 75.9732C97.6429 75.9821 97.6518 75.991 97.6651 75.9998C97.705 76.0353 97.7405 76.0752 97.776 76.1063C97.8248 76.1506 97.8692 76.1906 97.9091 76.2305L97.9667 76.2881C97.9667 76.2881 98.0111 76.3236 98.0244 76.3414C98.0377 76.3502 98.051 76.3591 98.0599 76.3769L98.091 76.4079C98.091 76.4079 98.0954 76.4079 98.0998 76.4168H98.1043C98.1575 76.4656 98.2063 76.5144 98.2506 76.5587C98.3305 76.6341 98.3926 76.6918 98.4281 76.7273C98.4857 76.785 98.539 76.8471 98.6011 76.9047L98.6055 76.8958Z' fill='%233B754B'/%3E%3Cpath d='M82.766 67.1372L82.6906 67.217L81.7324 68.2461C81.7324 68.2461 81.5062 68.4856 81.1469 68.8583C81.036 68.978 80.9118 69.1111 80.7699 69.2486C80.6146 69.4172 80.4328 69.599 80.2376 69.7942L80.1977 69.8341C80.1711 69.8607 80.1489 69.8874 80.1178 69.914C79.9848 70.0515 79.8428 70.1934 79.692 70.3442C79.6742 70.362 79.6476 70.3842 79.6299 70.4063C79.6033 70.4241 79.5811 70.4507 79.5545 70.4817C79.2484 70.7834 78.9157 71.1072 78.5609 71.4443C78.1306 71.8613 77.6604 72.3004 77.1636 72.7529C77.1326 72.7839 77.1059 72.8105 77.0705 72.8416C77.0527 72.8593 77.0305 72.8815 77.0084 72.8992C76.2765 73.569 75.4869 74.261 74.6663 74.9441C74.6663 74.9441 74.6663 74.9486 74.6618 74.9486C74.2626 75.2857 73.8501 75.6184 73.4376 75.9466H73.4331C73.2912 76.0575 73.1492 76.1728 73.0029 76.2837C72.9541 76.3236 72.9053 76.3636 72.8521 76.3946C72.8521 76.3946 72.8506 76.3946 72.8476 76.3946C72.8476 76.3946 72.8476 76.4035 72.8432 76.399C72.8432 76.399 72.8432 76.4035 72.8387 76.4079C71.8407 77.1709 70.8205 77.885 69.8136 78.4972C68.4784 79.3133 67.1654 79.9477 65.9677 80.267C65.1161 80.4977 64.3221 80.5731 63.6124 80.4445C62.7474 80.2892 62.0155 79.8323 61.4654 78.9851L61.4078 78.8964C60.9553 78.16 61.0485 77.4015 61.5009 76.6652C61.5897 76.5144 61.6917 76.3636 61.8114 76.2127C61.8469 76.1728 61.8824 76.1285 61.9135 76.0885C61.9135 76.0885 61.9179 76.0885 61.9179 76.0841H61.9223C61.9223 76.0841 61.9179 76.0841 61.9223 76.0797C62.2772 75.6627 62.7296 75.2546 63.2442 74.8643C64.118 74.1989 65.1693 73.5868 66.194 73.0767C66.4779 72.9347 66.7573 72.7972 67.0323 72.673C67.3251 72.5355 67.6134 72.4069 67.8884 72.3004C67.8884 72.3004 67.8884 72.296 67.8929 72.296C68.3631 72.0964 68.8022 71.9278 69.1704 71.7947C69.6539 71.6217 70.2172 71.4177 70.8116 71.1648C70.8604 71.1515 70.9092 71.1294 70.9535 71.1072H70.9624C71.5568 70.8543 72.1823 70.5749 72.7855 70.26C72.8254 70.2422 72.8609 70.22 72.892 70.2023C74.307 69.4571 75.62 68.53 76.2454 67.461C76.272 67.4211 76.2942 67.3811 76.3164 67.3368C76.3962 67.1904 76.4628 67.0352 76.5116 66.8843C76.8487 66.9021 77.1991 66.9243 77.554 66.9331C77.5673 66.9376 77.585 66.9376 77.5983 66.9331C77.6072 66.9376 77.6161 66.9376 77.6294 66.9376H77.7314C77.8512 66.942 77.9709 66.9464 78.0907 66.9509C78.348 66.9553 78.6008 66.9642 78.8625 66.9686C79.0089 66.9731 79.1553 66.973 79.3105 66.9775C79.6432 66.9864 79.9848 66.9908 80.3219 67.0041C80.6058 67.013 80.8941 67.0218 81.178 67.0352C81.7103 67.0618 82.2426 67.0884 82.7749 67.1327L82.766 67.1372Z' fill='%233B754B'/%3E%3Cpath d='M100.881 81.0966V81.1055C100.881 81.1055 100.846 81.1099 100.828 81.1099C100.824 81.1099 100.819 81.1099 100.815 81.1143C100.145 81.1853 99.5019 81.2563 98.8809 81.3406C98.3619 81.4115 97.8474 81.4825 97.3595 81.5624C96.6852 81.6644 96.042 81.7797 95.4166 81.8995C94.4319 82.0858 93.5092 82.2898 92.6398 82.5027C92.2184 82.6048 91.8059 82.7157 91.4067 82.8221C91.3091 82.8487 91.2115 82.8753 91.1139 82.9064C90.8123 82.9862 90.5284 83.0705 90.2445 83.1592C90.0316 83.2169 89.832 83.279 89.6324 83.3411C89.2864 83.4431 88.9493 83.554 88.621 83.6605C88.3726 83.7447 88.1242 83.829 87.8847 83.9044C87.5476 84.0242 87.2104 84.1395 86.8866 84.2593H86.8822C86.0261 84.5654 85.2143 84.867 84.4248 85.1642C83.8836 85.3638 83.3602 85.5634 82.8368 85.7541C82.7037 85.7985 82.5662 85.8473 82.4331 85.8961C81.2754 86.3131 80.1354 86.6901 78.9377 87.005H78.9333C78.7381 87.0583 78.5385 87.1071 78.3433 87.1514C78.0284 87.2313 77.7135 87.2978 77.3941 87.3688C77.3763 87.3688 77.3497 87.3732 77.3231 87.3776C77.1723 87.4131 77.0215 87.4353 76.8662 87.4664C75.8371 87.6527 74.7548 87.7857 73.5749 87.8434C72.5325 87.8966 71.4191 87.8966 70.2037 87.8301C69.9464 87.8168 69.6847 87.7946 69.4186 87.7769C69.3875 87.7724 69.3609 87.7724 69.3254 87.768C67.9459 87.6615 66.4466 87.4619 64.7876 87.1647C63.2218 86.8897 61.5096 86.5215 59.6333 86.0425C59.5801 86.0292 59.5313 86.0114 59.4825 86.0026C59.2962 85.9582 59.101 85.9094 58.9058 85.8606C58.7284 85.8163 58.5465 85.7675 58.3647 85.7231C58.2094 85.6787 58.0497 85.6344 57.89 85.5945C57.8723 85.5856 57.8501 85.5812 57.8279 85.5767C57.6062 85.5191 57.3844 85.4525 57.1537 85.3904C55.8718 85.0356 54.5189 84.6408 53.0861 84.1928C52.9974 84.1661 52.9087 84.1395 52.82 84.1085C52.6292 84.0508 52.4296 83.9887 52.2344 83.9266C52.2744 83.9355 52.3098 83.9399 52.3453 83.9532C53.7648 84.2637 55.2508 84.3746 56.7146 84.3214C57.4154 84.2948 58.1207 84.2282 58.8038 84.1218H58.8127C58.9458 84.1085 59.0788 84.0952 59.2119 84.0863C59.3893 84.073 59.5668 84.0597 59.7398 84.0508C59.7797 84.0464 59.8196 84.0464 59.864 84.0464C60.6269 84.0065 61.3544 84.0153 62.0508 84.0597C62.6895 84.0952 63.3105 84.1573 63.9138 84.2416C65.0449 84.3835 66.1317 84.592 67.2273 84.7827C69.0149 85.0977 70.838 85.3771 72.9362 85.3194C73.8588 85.2928 74.8391 85.2085 75.8904 85.0267L76.3029 84.9513C76.3029 84.9513 76.3206 84.9468 76.3384 84.9424C76.5069 84.9114 76.6711 84.8803 76.8441 84.8404H76.8485C77.0925 84.7872 77.3453 84.7339 77.5981 84.6674C77.9131 84.5875 78.2325 84.4988 78.5607 84.4057C81.3996 83.5806 84.1409 82.3564 86.8999 81.1809H86.9088C87.0907 81.101 87.2725 81.0256 87.4544 80.9502C87.9956 80.724 88.5323 80.4978 89.069 80.2849C89.0823 80.276 89.1045 80.2715 89.1178 80.2671C89.1178 80.2627 89.1222 80.2671 89.1222 80.2671C89.9606 79.93 90.8078 79.6106 91.6595 79.3223C92.0055 79.2025 92.347 79.0916 92.693 78.9852C93.1455 78.8477 93.6024 78.719 94.0593 78.6037C94.2323 78.5593 94.4052 78.515 94.5782 78.4751C95.3412 78.2932 96.1086 78.1468 96.8893 78.0448C97.4304 77.9694 97.976 77.9206 98.5261 77.8984C98.5261 77.8984 98.5305 77.894 98.5349 77.8984C98.5837 77.8895 98.637 77.8895 98.6902 77.8895C98.7035 77.8851 98.7212 77.8851 98.7346 77.8895C98.7479 77.8851 98.7656 77.8851 98.7833 77.8851C99.0096 77.8762 99.2402 77.8718 99.4709 77.8718H99.4975C99.4975 77.8718 99.5019 77.8851 99.5019 77.8984V77.9073C99.5019 77.9073 99.5197 77.9428 99.5463 77.996C99.5507 78.0093 99.5596 78.0315 99.5729 78.0492C99.5729 78.0581 99.5773 78.0625 99.5818 78.067C99.5862 78.0847 99.5951 78.1069 99.6084 78.1246C99.6394 78.2 99.6794 78.2888 99.7282 78.3908C99.8657 78.719 100.061 79.167 100.247 79.6062C100.274 79.6594 100.296 79.7126 100.318 79.7703C100.336 79.8191 100.358 79.8635 100.376 79.9078C100.385 79.9256 100.389 79.9433 100.394 79.9566C100.429 80.0365 100.464 80.1074 100.491 80.1784C100.496 80.1873 100.5 80.205 100.504 80.2183C100.513 80.2316 100.518 80.2494 100.518 80.2627C100.535 80.2937 100.549 80.3203 100.562 80.3514C100.575 80.3958 100.598 80.4357 100.611 80.4756H100.615C100.646 80.551 100.669 80.6131 100.695 80.6663C100.708 80.6974 100.722 80.7196 100.731 80.7417C100.74 80.7683 100.744 80.7817 100.757 80.7994C100.766 80.8305 100.784 80.8571 100.793 80.8837L100.806 80.9192C100.806 80.9192 100.815 80.9458 100.819 80.9591C100.819 80.9591 100.819 80.9635 100.824 80.9635C100.828 80.9768 100.837 80.999 100.85 81.0168C100.859 81.0434 100.864 81.0567 100.868 81.07C100.873 81.0789 100.873 81.0833 100.877 81.0877C100.877 81.0922 100.877 81.0966 100.881 81.0966C100.881 81.101 100.881 81.1055 100.886 81.1055L100.881 81.0966Z' fill='%233B754B'/%3E%3Cpath d='M98.1048 76.408C98.1048 76.408 98.0915 76.408 98.0871 76.4124C97.8165 76.4479 97.5548 76.4701 97.302 76.4923C97.2842 76.4967 97.2665 76.5011 97.2487 76.4967C97.2354 76.5011 97.2177 76.5011 97.2044 76.5011C97.0979 76.51 96.9915 76.5189 96.8895 76.5189H96.885C95.0575 76.6431 93.5848 76.4257 92.5601 75.6805C91.8593 75.1704 91.3669 74.4119 91.1097 73.3473C91.0476 73.0812 90.9988 72.7973 90.9633 72.4912C90.9189 72.0831 90.9012 71.6529 90.9145 71.1782V71.0496C90.9234 70.748 90.9455 70.4286 90.9721 70.1003C90.9721 70.087 90.9766 70.0649 90.9766 70.0515C92.2585 70.9742 93.4872 72.0609 94.6627 73.161C94.8046 73.2896 94.9421 73.4227 95.0797 73.5558C95.1639 73.6312 95.2438 73.7022 95.3192 73.7776C96.0644 74.4784 96.7874 75.1793 97.4972 75.8358C97.5371 75.8713 97.5859 75.9156 97.6391 75.9644C97.648 75.9733 97.6568 75.9822 97.6701 75.991C97.7101 76.0265 97.7455 76.0664 97.781 76.0975C97.8298 76.1418 97.8742 76.1818 97.9141 76.2217L97.9718 76.2794C97.9718 76.2794 98.0161 76.3148 98.0294 76.3326C98.0427 76.3415 98.0561 76.3503 98.0649 76.3681L98.096 76.3991C98.096 76.3991 98.1004 76.3991 98.1048 76.408Z' fill='%232B6B40'/%3E%3Cpath d='M48.4329 82.6447C48.597 82.0192 48.9563 81.3228 48.7567 80.6663C48.7123 80.5244 48.6502 80.3869 48.6413 80.2449C48.6192 79.9921 48.7522 79.7526 48.8498 79.5219C49.076 78.9586 49.0051 78.3775 49.0317 77.8008C48.4595 77.8585 47.8385 78.2001 47.2618 78.3287C46.7828 78.4396 46.2771 78.5239 45.7803 78.4839C45.0129 78.4351 44.4407 78.0271 44.3564 77.2508C44.4717 78.3553 44.5915 79.4554 44.7113 80.5599C44.7379 80.8038 44.7689 81.0611 44.9153 81.2563C45.0839 81.4825 45.3722 81.5934 45.6383 81.691C46.5965 82.037 47.5235 82.3608 48.4284 82.6713C48.4284 82.658 48.4329 82.6491 48.4373 82.6358L48.4329 82.6447Z' fill='%232B6B40'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M69.0022 68.5257C69.0155 68.6011 69.0244 68.6942 69.0155 68.7963C69.0155 68.8229 69.0155 68.8495 69.0066 68.8805C69.0066 68.8938 69.0066 68.9116 69.0066 68.9249C68.9578 69.3862 68.7361 70.0028 68.4211 70.5129C68.0308 71.1428 67.4985 71.6085 66.9751 71.4222C67.0815 71.8126 67.0993 72.2428 67.0327 72.6731C66.9307 73.3784 66.598 74.0792 66.1012 74.5805C66.4117 75.1083 66.3407 76.031 66.0169 76.7496C65.9814 76.8294 65.9415 76.9048 65.9016 76.9758C65.6665 77.3883 65.3427 77.6944 64.9568 77.7787C64.9213 78.2799 64.7838 78.7501 64.5798 79.1804C64.3447 79.6639 64.012 80.0941 63.6127 80.449C63.3732 80.6575 63.0982 80.8438 62.8143 80.999C62.8143 80.999 63.0583 82.7334 61.8562 82.7955C61.8384 82.7955 61.8296 82.7867 61.8207 82.7822C61.834 82.8044 61.8473 82.8266 61.8562 82.8487C62.0247 83.1593 62.078 83.6028 62.0514 84.0642C62.0203 84.5343 61.9139 85.0178 61.7497 85.3993C61.7497 85.3993 61.5235 86.0691 61.4037 86.4328C61.3594 86.4195 61.315 86.4107 61.2751 86.4018C60.9957 86.3397 60.7162 86.2732 60.4367 86.2111C60.3569 86.1933 60.2771 86.1756 60.1972 86.1578C57.1365 85.7143 59.727 84.3347 59.7448 84.0597C59.7669 83.6383 59.7093 83.2125 59.554 82.8221L59.5407 82.7955C59.4831 82.6403 59.4032 82.4895 59.3012 82.3519H59.3411C59.5185 82.0503 59.5585 81.6999 59.5496 81.3362C59.5496 81.0922 59.523 80.8349 59.5097 80.5998C59.5274 80.5643 59.5629 80.4978 59.6117 80.4046C59.7048 80.2317 59.8424 79.9877 59.9754 79.7393C60.1396 79.4377 60.2859 79.1405 60.3525 78.9675C60.6319 78.2356 60.6364 77.3928 60.419 76.6387C60.5388 76.5766 60.6452 76.4967 60.7295 76.3992C60.8138 76.3149 60.8848 76.2173 60.9424 76.1108C60.9779 76.0399 61.0178 75.9689 61.0444 75.8935C61.1376 75.6628 61.1864 75.41 61.1997 75.1527C61.2352 74.4208 60.9956 73.6357 60.6053 73.2231C60.623 73.1921 60.6408 73.1655 60.6585 73.1256C60.9602 72.5578 61.1065 71.4134 61.1065 71.4134V71.3291C61.1065 71.2892 61.1065 71.2448 61.0977 71.2004C61.0977 71.1916 61.0977 71.1827 61.0977 71.1738C61.0977 71.1029 61.0977 71.0319 61.0844 70.9565C61.0844 70.9565 61.0844 70.9476 61.0844 70.9387C61.0844 70.9032 61.0533 70.7923 61.0223 70.6593C60.9602 70.4064 60.8537 70.0738 60.8227 70.0028C60.8626 69.9673 60.9069 69.9407 60.9469 69.9096C61.3328 69.8653 61.5235 69.5459 61.5856 69.1556C61.5856 69.1556 61.5856 69.1467 61.5856 69.1422C61.63 68.814 61.5945 68.4325 61.5102 68.1131C61.4836 68.0111 61.4525 67.9091 61.4126 67.8159C61.7231 67.5587 62.2598 67.257 62.4816 66.9288C62.6058 66.7558 62.7212 66.5739 62.8188 66.3876C62.9296 66.1703 63.0272 65.9396 63.1071 65.7134C63.2579 65.2831 63.3555 64.8396 63.4176 64.3782C63.5728 63.8016 64.1095 63.6375 64.5398 63.2782C65.3116 62.635 65.5334 61.8676 65.8794 61.118C65.9815 62.218 66.1589 63.1717 66.4162 64.0322C66.4383 64.0101 66.4561 63.9968 66.4783 63.9746C66.4783 63.9746 66.4916 63.9657 66.496 63.9613C66.6379 63.8282 66.7222 63.6508 66.7754 63.4645C66.8686 63.1761 67.086 63.5 67.6227 64.1254C67.6227 64.1254 67.6315 64.1476 67.6315 64.1609C67.667 64.2585 67.6937 64.3605 67.7203 64.467C67.7602 64.6488 67.7957 64.8351 67.8223 65.0214C67.911 64.9638 68.0441 64.915 68.2038 64.8706C68.2703 64.8529 68.3413 64.8351 68.4211 64.8262C68.8469 64.742 69.4103 64.702 69.9559 64.7242C70.089 64.7242 70.222 64.7375 70.3551 64.7508C70.6656 64.7819 70.9672 64.8307 71.2112 64.9061C71.2467 64.915 71.2866 64.9283 71.3221 64.9416C71.362 64.9549 71.402 64.9682 71.4374 64.9859C71.7568 66.2634 69.7696 68.0466 69.0022 68.5212V68.5257Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M67.93 45.584C67.8103 46.2715 67.5929 52.8276 67.1804 54.2071C66.8211 55.4092 63.2459 60.5813 57.9939 60.9539C52.7464 60.5768 48.2441 56.0435 47.8715 53.6437C47.6852 52.4638 47.4679 47.6688 47.3082 46.5199C47.2461 46.4356 47.3481 44.9363 47.3082 43.8939C47.4945 42.3947 47.5876 38.0875 48.6212 36.2068C49.2244 35.1067 50.6394 33.8514 51.6286 33.5054C53.5049 32.8445 55.918 33.6074 58.6859 33.807C59.613 33.8736 60.5489 33.8869 61.4804 33.8292C64.4568 33.6429 65.0202 33.0041 66.8078 36.7701C67.1804 38.2605 67.7437 43.3306 67.7437 43.3306L67.93 45.5795V45.584Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M66.9757 51.0844C67.3749 52.2155 67.1798 54.2072 67.1798 54.2072L58.1796 56.2698L55.3673 50.459C55.3673 50.459 55.3673 49.6694 55.9307 49.6871C56.494 49.7093 56.8666 50.6896 57.7094 50.6674C58.5522 50.6453 58.4502 50.1662 59.1555 49.8424C59.8652 49.5186 60.1934 49.6871 60.2156 49.8867C60.2378 50.0864 59.9229 50.4323 59.9229 50.4323C59.9229 50.4323 62.7662 53.3688 63.986 52.3353C66.4212 50.2727 65.8978 46.897 65.8623 45.5885C65.8269 44.3775 64.9353 43.7166 64.9264 43.7122C65.676 42.5855 64.9619 41.4499 63.9904 41.6495C62.6996 41.9157 60.2422 42.7762 59.6789 43.1488C58.7429 42.2129 58.5522 41.8358 57.0529 42.2129C56.8178 42.2705 56.6182 42.55 56.3876 42.7673C56.3831 43.2154 56.2367 43.6944 55.8508 43.9206C55.3407 44.2178 54.702 43.7255 54.2495 43.5037C51.4372 42.1197 49.3702 42.0266 49.1839 42.0266C48.2524 42.0266 48.0572 48.7734 51.8098 53.6483C51.4328 55.5246 48.3766 51.426 48.004 51.5191C47.5293 50.49 47.1922 49.3988 47.0015 48.2987C46.7442 46.7861 47.6225 45.0518 46.7309 43.761C46.1631 42.927 44.5219 42.7452 44.8723 41.4588C45.2893 37.8481 45.2804 35.1378 50.1065 33.4168C52.2091 32.6715 53.8547 33.5454 57.3324 33.8293C58.0909 33.8914 58.8494 33.8914 59.6079 33.8382C61.981 33.6652 67.0556 32.8135 67.437 38.7308C67.4503 38.8772 67.6278 39.0413 67.7121 39.2631C67.783 39.3695 67.7387 39.4938 67.8052 39.6135L67.8629 42.1064C67.7653 42.0887 67.8717 47.3406 66.9713 51.08L66.9757 51.0844Z' fill='%23CEB79B'/%3E%3Cpath d='M49.37 33.0264V33.0352C49.3611 33.0663 49.3522 33.0973 49.3389 33.1284C49.2768 33.3457 49.2103 33.572 49.1437 33.8026C49.0639 34.0821 48.9796 34.3748 48.8998 34.6676C48.8732 34.7474 48.851 34.8228 48.8288 34.9071H48.8244C48.6159 35.6346 48.4074 36.3842 48.2211 37.1294C48.2034 37.2137 48.1812 37.2936 48.1634 37.369C48.1634 37.3778 48.1634 37.3867 48.159 37.4C48.1324 37.4754 48.1146 37.5508 48.1013 37.6307C48.1013 37.6351 48.1013 37.6395 48.0969 37.644C48.0659 37.7637 48.0437 37.8746 48.0126 37.9944C47.9993 38.0698 47.9771 38.1408 47.9638 38.2162C47.9594 38.2295 47.9594 38.2428 47.955 38.2561C47.9106 38.4424 47.8707 38.6243 47.8352 38.8017C47.782 39.0767 47.7332 39.3384 47.6888 39.5869C47.6711 39.7111 47.6489 39.8308 47.6311 39.9506C47.6267 39.9772 47.6267 39.9994 47.6223 40.0216C47.6178 40.0748 47.609 40.1236 47.6045 40.1724C47.6001 40.1768 47.6001 40.1857 47.6001 40.1901C47.5868 40.2877 47.5735 40.3853 47.5602 40.4784V40.4917C47.5602 40.4917 47.5557 40.5006 47.5557 40.5051C47.5424 40.6426 47.5247 40.7756 47.5114 40.9043C47.4803 41.1571 47.4582 41.3922 47.4404 41.614V41.6273C47.436 41.6805 47.4315 41.7293 47.4271 41.7781C47.3783 42.4479 47.3694 42.9802 47.3694 43.3439C47.3694 43.5169 47.3739 43.6544 47.3783 43.7476V43.823C47.3827 43.8674 47.3827 43.894 47.3827 43.894C47.3827 43.894 47.3739 43.8984 47.3473 43.9117C47.3384 43.9117 47.3295 43.9206 47.3118 43.925C47.2718 43.9428 47.2231 43.9694 47.1654 44.0049C47.1033 44.0404 47.0234 44.0803 46.9392 44.1291C46.8682 44.169 46.7972 44.2134 46.7174 44.2577C46.6242 44.3154 46.5266 44.3819 46.4246 44.444C46.3625 44.4884 46.296 44.5283 46.2383 44.5726C46.1097 44.6614 45.981 44.7589 45.8613 44.8565C45.5685 45.0916 45.3068 45.3622 45.1382 45.6417C45.1072 45.686 45.0895 45.7304 45.0673 45.7703C44.881 45.584 44.7124 45.3888 44.5616 45.1803C44.5572 44.6214 44.6592 44.067 44.6902 43.5214C44.6991 43.3528 44.708 43.1931 44.7168 43.0334C44.7213 42.8871 44.7302 42.7407 44.7302 42.6032C44.7612 41.9511 44.7656 41.4011 44.7701 40.9087C44.779 40.1945 44.7745 39.6179 44.8056 39.0368C44.81 38.9304 44.8144 38.815 44.8233 38.7086C44.8277 38.611 44.8366 38.5134 44.8499 38.4158C44.8943 37.9678 44.9608 37.502 45.0717 36.9653C45.3157 35.7765 45.6661 34.6543 46.1718 33.6119C46.5976 32.7425 47.1343 31.9263 47.8041 31.1766C47.9283 31.0391 48.057 30.9061 48.1812 30.7819C48.1856 30.977 48.2788 31.1456 48.4118 31.3142C48.4429 31.3585 48.4739 31.3984 48.5183 31.4428C48.6203 31.567 48.7445 31.6868 48.851 31.8198C49.126 32.1392 49.3434 32.5029 49.1881 33.0308C49.1704 33.0929 49.3966 32.9598 49.3744 33.0308L49.37 33.0264Z' fill='%23CE8000'/%3E%3Cpath d='M47.6976 48.4319C47.6843 48.5162 47.6666 48.6005 47.6488 48.6848C47.6311 48.769 47.6089 48.8489 47.5912 48.9243C47.5734 49.0041 47.5468 49.0795 47.5202 49.155C47.4625 49.3368 47.3915 49.5009 47.3117 49.6518C47.2851 49.7005 47.2585 49.7493 47.223 49.7937C47.1919 49.8514 47.1609 49.9046 47.121 49.9623C47.0899 50.0066 47.0589 50.051 47.0234 50.0909C46.9968 50.1219 46.9746 50.1441 46.9435 50.1707C46.9125 50.2062 46.8903 50.2284 46.8548 50.255C46.8371 50.2728 46.8149 50.2905 46.7972 50.3038L46.7395 50.3482C46.6818 50.3925 46.6109 50.428 46.5443 50.4591C46.5399 50.4635 46.5355 50.4679 46.531 50.4679C46.531 50.4679 46.5266 50.4679 46.5221 50.4724C46.5221 50.4724 46.5177 50.4724 46.5133 50.4768H46.5C46.5 50.4768 46.4911 50.4812 46.4822 50.4857H46.4734C46.4734 50.4857 46.4733 50.4857 46.4689 50.4901C46.4423 50.499 46.4246 50.5079 46.3979 50.5167C46.3092 50.5522 46.2249 50.5611 46.1407 50.5567C46.1362 50.5522 46.1362 50.5567 46.1318 50.5567H46.1007C46.0431 50.5522 45.9899 50.5433 45.9322 50.5212C45.8745 50.5034 45.8257 50.4768 45.7681 50.4458C45.7503 50.4324 45.7281 50.4191 45.7104 50.4058L45.6527 50.3615C45.6527 50.3615 45.6128 50.3304 45.5951 50.3127C45.564 50.2861 45.533 50.255 45.5019 50.224C45.4842 50.2062 45.462 50.184 45.4531 50.1663H45.4487C45.4487 50.1663 45.4309 50.1486 45.4221 50.1353C45.3866 50.0953 45.36 50.0554 45.3289 50.0155C45.3289 50.0155 45.3201 50.0066 45.3245 50.0022C45.2402 49.9002 45.1692 49.776 45.0983 49.6429C45.0983 49.6429 45.0938 49.634 45.0894 49.6118C45.0894 49.603 45.085 49.5941 45.085 49.5808C45.0761 49.5497 45.0672 49.5187 45.0495 49.4699C45.0406 49.4344 45.0317 49.3989 45.0184 49.3634C45.0051 49.3146 44.9918 49.2614 44.9785 49.2082C44.9741 49.1904 44.9696 49.1727 44.9652 49.155C44.9608 49.1416 44.9608 49.1283 44.9563 49.1195C44.8809 48.8134 44.8055 48.4497 44.7878 48.2367C44.7789 48.0638 44.9253 47.8331 44.9785 47.6956C45.0184 47.5758 45.0628 47.3496 45.014 47.2431C45.014 47.2343 45.0051 47.2298 45.0007 47.2165C44.943 47.1367 44.7168 47.2121 44.6281 47.221C44.4994 47.2387 44.4063 47.1189 44.3442 46.8883C44.3264 46.8129 44.3043 46.7197 44.2954 46.6221C44.2954 46.6221 44.2939 46.6177 44.2909 46.6088C44.1801 45.7572 44.0071 44.2313 44.3664 43.1755C44.3664 43.1755 44.3678 43.1741 44.3708 43.1711C44.3708 43.1711 44.3752 43.1578 44.3752 43.1445C44.4196 43.038 44.4639 42.9271 44.5127 42.8296C44.566 42.7275 44.6458 42.661 44.7345 42.6033C44.7345 42.5989 44.739 42.5989 44.739 42.5989C44.7966 42.559 44.8499 42.5279 44.912 42.5013C44.9253 42.4924 44.943 42.4836 44.9608 42.4703C44.9696 42.4614 44.9918 42.4525 45.0007 42.4392C45.014 42.4348 45.0273 42.4259 45.0406 42.4215C45.045 42.417 45.0539 42.4126 45.0583 42.4126C45.1959 42.3283 45.3245 42.2573 45.4753 42.1553L45.5773 42.0977C45.7015 42.0356 45.8302 42.0001 45.9588 42.0134C45.9854 42.0134 46.0076 42.0222 46.0342 42.0267C46.0386 42.0267 46.0431 42.0267 46.0475 42.0311C46.0653 42.0311 46.0919 42.04 46.1096 42.0444C46.1274 42.0489 46.1495 42.0577 46.1673 42.071C46.1806 42.0755 46.1939 42.0799 46.2072 42.0843C46.2205 42.0932 46.2427 42.1021 46.256 42.1154C46.2959 42.142 46.3358 42.1642 46.3758 42.1952C46.3935 42.2085 46.4157 42.2263 46.4334 42.244C46.5621 42.3505 46.6863 42.5013 46.7972 42.6743C46.8016 42.6832 46.8105 42.7009 46.8149 42.7098C46.8282 42.7364 46.8459 42.7541 46.8548 42.7808C46.8814 42.8162 46.8992 42.8562 46.9258 42.8917C46.9347 42.905 46.9435 42.9271 46.9524 42.9404C46.9879 42.9981 47.0145 43.0602 47.0411 43.1223C47.0544 43.1534 47.0677 43.1755 47.081 43.2066C47.0944 43.2332 47.1121 43.2598 47.121 43.2864C47.1254 43.2953 47.1298 43.3042 47.1298 43.3175H47.1343C47.152 43.3663 47.1742 43.4151 47.1875 43.4594C47.1964 43.486 47.2052 43.5038 47.2141 43.5304C47.2452 43.5925 47.2674 43.659 47.2895 43.7256C47.2984 43.7566 47.3073 43.7877 47.3206 43.8232C47.3206 43.8232 47.3235 43.8276 47.3295 43.8365C47.3295 43.8365 47.3339 43.8542 47.3339 43.8631C47.3383 43.872 47.3383 43.8764 47.3428 43.8808C47.3472 43.8897 47.3472 43.8986 47.3516 43.9163C47.4049 44.0937 47.4581 44.2756 47.5025 44.4664C47.5158 44.5151 47.5291 44.5684 47.5379 44.6216C47.5468 44.6482 47.5512 44.666 47.5557 44.6926C47.5601 44.7103 47.5645 44.7369 47.569 44.7547C47.5734 44.799 47.5823 44.839 47.5867 44.8789C47.8218 46.0366 47.8884 47.354 47.6976 48.4319Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M47.6977 48.4319C47.6844 48.5162 47.6667 48.6005 47.649 48.6848C47.6312 48.7691 47.609 48.8489 47.5913 48.9243C47.5735 49.0042 47.5469 49.0796 47.5203 49.155V49.1638C47.4626 49.3413 47.3917 49.501 47.3207 49.6562L47.232 49.8026C47.1965 49.8558 47.161 49.9091 47.1255 49.9578C47.0945 50.0022 47.0634 50.0466 47.0279 50.0865C47.0013 50.1175 46.9792 50.1397 46.9481 50.1663C46.9171 50.2018 46.8949 50.224 46.8594 50.2506C46.8416 50.2684 46.8195 50.2861 46.8017 50.2994L46.7441 50.3438C46.6864 50.3881 46.6154 50.4236 46.5489 50.4547C46.5444 50.4591 46.54 50.4635 46.5356 50.4635C46.5356 50.4635 46.5311 50.4635 46.5267 50.468C46.5267 50.468 46.5223 50.468 46.5178 50.4724C46.5178 50.4724 46.5134 50.4768 46.509 50.4768H46.5045C46.5045 50.4768 46.4912 50.4857 46.4779 50.4857H46.4735C46.4469 50.499 46.4247 50.5123 46.3981 50.5168C46.3138 50.5434 46.2339 50.5567 46.1497 50.5522C46.1497 50.5522 46.1452 50.5522 46.1408 50.5522C46.1364 50.5478 46.1364 50.5522 46.1319 50.5522H46.1009C46.0432 50.5478 45.99 50.5389 45.9323 50.5168C45.8746 50.499 45.8259 50.4724 45.7682 50.4413C45.7504 50.428 45.7283 50.4147 45.7105 50.4014C45.6928 50.3926 45.6706 50.3748 45.6529 50.3615C45.6351 50.3482 45.6129 50.326 45.5952 50.3083C45.5641 50.2817 45.5331 50.2506 45.502 50.2196C45.4843 50.2018 45.4621 50.1796 45.4532 50.1619H45.4488C45.4488 50.1619 45.4311 50.1441 45.4222 50.1308C45.3867 50.0909 45.3601 50.051 45.329 50.0111C45.329 50.0111 45.3202 50.0022 45.3246 49.9978C45.2403 49.8913 45.1694 49.7671 45.0984 49.6385C45.0984 49.6385 45.094 49.6296 45.0895 49.6074C45.0851 49.603 45.0851 49.5941 45.0806 49.5808C45.0806 49.5719 45.0496 49.4965 45.0185 49.4078C45.0052 49.3635 44.9831 49.3191 44.9653 49.2747C44.9476 49.2215 44.9254 49.1683 44.9165 49.1372H44.9121C44.9121 49.1372 44.9077 49.1106 44.9077 49.1062C44.9121 49.1106 44.921 49.1151 44.9343 49.1195C44.9343 49.1151 44.9387 49.1195 44.9387 49.1195C44.9476 49.1239 44.9564 49.1328 44.9742 49.1372C44.9919 49.1461 45.0141 49.155 45.0363 49.1727C45.0407 49.1772 45.0496 49.1772 45.054 49.1816C45.2093 49.2614 45.4355 49.3635 45.6617 49.4522C45.715 49.4699 45.7726 49.4921 45.8303 49.5098C45.848 49.5143 45.8747 49.5231 45.8924 49.5276C45.9678 49.5542 46.0343 49.5719 46.1009 49.5808C46.265 49.6163 46.3848 49.6119 46.4203 49.5364C46.4912 49.3989 46.5533 49.2126 46.611 48.9908C46.6598 48.8001 46.7086 48.5872 46.7529 48.3565C46.9215 47.4428 47.0191 46.3028 47.0191 45.6374V45.4689C47.0058 45.114 46.8993 44.6749 46.7263 44.2357C46.5755 43.8675 46.3715 43.4994 46.1364 43.1889C45.8436 42.7985 45.4887 42.5058 45.1073 42.4348C45.0806 42.4304 45.0629 42.4259 45.0363 42.4259C45.023 42.4215 45.0097 42.4215 44.9964 42.4215C45.0097 42.4126 45.023 42.4082 45.0363 42.4037C45.0363 42.4037 45.0496 42.3904 45.054 42.3904C45.1915 42.3062 45.3202 42.2352 45.471 42.1332L45.573 42.0755C45.7017 42.0178 45.8259 41.9823 45.9545 41.9957C46.0565 42.0045 46.1541 42.04 46.2561 42.0932C46.296 42.1199 46.336 42.142 46.3759 42.1731C46.3936 42.1864 46.4158 42.2041 46.4336 42.2219C46.5622 42.3283 46.6864 42.4791 46.7973 42.6521L46.8062 42.661C46.8461 42.7231 46.886 42.7985 46.9259 42.8695C46.9348 42.8828 46.9437 42.905 46.9525 42.9183C46.988 42.976 47.0146 43.0381 47.0457 43.1002C47.059 43.1312 47.0723 43.1534 47.0812 43.1844C47.0989 43.2199 47.1167 43.2598 47.13 43.2909V43.2998C47.1566 43.3441 47.1743 43.3885 47.1876 43.4328C47.1965 43.4595 47.2054 43.4772 47.2142 43.5038C47.2453 43.5659 47.2675 43.6324 47.2897 43.699C47.303 43.7345 47.3163 43.7744 47.3296 43.8054V43.8143C47.3296 43.8143 47.334 43.8276 47.334 43.8321H47.3384C47.3384 43.8321 47.3429 43.8409 47.3429 43.8498C47.3473 43.8587 47.3473 43.8675 47.3518 43.8853C47.405 44.0627 47.4582 44.2446 47.5026 44.4353C47.5159 44.4841 47.5336 44.5373 47.5425 44.5906C47.5469 44.6083 47.5514 44.6349 47.5558 44.6615C47.5602 44.6793 47.5647 44.7059 47.5691 44.7236C47.8264 45.9124 47.8974 47.2831 47.7022 48.4009L47.6977 48.4319Z' fill='%23CEB79B'/%3E%3Cpath d='M46.5357 45.8414C46.5091 45.5354 46.5446 45.2648 46.4071 44.941C46.0433 44.0937 45.7417 43.903 45.1251 43.699C44.7791 43.5836 44.6594 44.7325 44.7836 45.2914C44.9477 46.0233 45.4267 44.6083 45.6973 44.7103C46.1941 44.9055 45.6397 46.4048 45.5776 46.8129C45.5066 47.2609 45.7594 47.7266 45.9368 48.117C46.0655 48.392 46.274 48.3831 46.4026 48.1347C46.4425 48.0504 46.4736 47.9573 46.4913 47.8508C46.3538 47.6069 45.9679 47.4915 46.0123 47.1278C46.0566 46.7375 46.3494 46.0322 46.5401 45.8414H46.5357Z' fill='%23CEB79B'/%3E%3Cpath d='M46.5748 50.459C46.5615 50.5478 46.5394 50.6542 46.5172 50.774C46.4994 50.8583 46.4817 50.947 46.4639 51.0401C46.4551 51.0845 46.4462 51.1333 46.4329 51.1821C46.424 51.2309 46.4151 51.2752 46.3974 51.324C46.2865 51.7765 46.118 52.2733 45.8917 52.6326C45.8917 52.6326 45.8917 52.637 45.8873 52.637C45.8696 52.6725 45.8429 52.6991 45.8163 52.7301C45.8119 52.7346 45.8075 52.739 45.8075 52.7435C45.7897 52.7701 45.7675 52.7923 45.7453 52.8144L45.732 52.8277C45.732 52.8277 45.7187 52.8366 45.7143 52.8455C45.6966 52.8588 45.6788 52.8765 45.6655 52.8854C45.6478 52.8987 45.63 52.9165 45.6167 52.9253H45.6123C45.6123 52.9253 45.5945 52.9431 45.5812 52.9431C45.4615 53.0229 45.324 53.0717 45.1865 53.0939C45.0844 53.1116 44.9735 53.1116 44.8715 53.1028C44.836 53.0983 44.7961 53.0894 44.7606 53.085C44.734 53.0806 44.7118 53.0717 44.6852 53.0673H44.6808C44.5388 53.0273 44.4013 52.9652 44.2771 52.881C44.2017 52.8277 44.1352 52.7701 44.0686 52.7035C44.0021 52.637 43.9444 52.566 43.8868 52.4862C43.8069 52.3664 43.7404 52.2245 43.696 52.0737C43.665 51.9716 43.6472 51.8607 43.6384 51.7498C43.6251 51.6434 43.6251 51.5281 43.6339 51.4127C43.6517 51.1954 43.7049 50.9603 43.8025 50.703C43.8069 50.6853 43.8158 50.6675 43.8202 50.6498C43.8468 50.5921 43.869 50.5256 43.9001 50.4635C43.9356 50.3881 43.9755 50.3127 44.0243 50.2328C44.0642 50.1574 44.1041 50.0864 44.1529 50.011C44.2461 49.8602 44.3348 49.7316 44.4235 49.6162C44.4856 49.5408 44.5433 49.4787 44.5965 49.4211C44.7074 49.3013 44.8138 49.2126 44.9114 49.1505C44.9203 49.1461 44.9247 49.1416 44.9292 49.1372C44.938 49.1283 44.9425 49.1239 44.9558 49.1239C44.9868 49.1106 45.009 49.0928 45.0401 49.0795C45.2086 48.9908 45.3594 48.9731 45.4925 48.9908C45.5502 48.9997 45.6034 49.0174 45.6611 49.0352L45.7365 49.0662C45.7365 49.0662 45.7764 49.0928 45.7941 49.1017C45.7986 49.1061 45.803 49.1106 45.8119 49.115C45.8829 49.1594 45.945 49.2126 45.9937 49.2658C46.0692 49.3412 46.1179 49.4078 46.1446 49.4521C46.1623 49.4832 46.1756 49.5009 46.1756 49.5009C46.1756 49.5009 46.1446 49.5408 46.0958 49.6029C45.9893 49.7449 45.7897 50.011 45.5945 50.3171C45.2175 50.9115 44.8493 51.639 45.2042 51.8208C45.7409 52.087 45.9228 50.9248 45.9627 50.5788H45.9671C46.0248 50.5744 46.078 50.5699 46.1313 50.5611H46.1401C46.251 50.5478 46.3397 50.5256 46.4152 50.5078C46.4329 50.5034 46.4506 50.499 46.4639 50.499C46.4684 50.4945 46.4684 50.499 46.4684 50.499H46.4772C46.4772 50.499 46.4906 50.4901 46.495 50.4901H46.4994L46.5083 50.4857C46.5349 50.4812 46.5527 50.4768 46.5704 50.4679H46.5748V50.459Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M46.575 50.4545C46.5617 50.5477 46.5395 50.6541 46.5173 50.7739C46.4996 50.8582 46.4818 50.9469 46.4641 51.0401C46.4552 51.0844 46.4464 51.1332 46.433 51.182C46.4242 51.2219 46.4153 51.2619 46.3976 51.3018V51.3106C46.2778 51.7631 46.1181 52.2643 45.8874 52.6325H45.883C45.8653 52.6724 45.8431 52.7035 45.8209 52.7301L45.8076 52.7434C45.7899 52.77 45.7677 52.7878 45.7499 52.8144L45.7366 52.8277C45.7366 52.8277 45.7233 52.8365 45.7189 52.8454C45.7056 52.8543 45.6878 52.872 45.6701 52.8853C45.6568 52.8942 45.639 52.912 45.6213 52.9253H45.6169C45.6169 52.9253 45.5991 52.9386 45.5858 52.943C45.466 53.0229 45.3285 53.0716 45.191 53.0938C45.089 53.1116 44.9781 53.1116 44.8761 53.1027C44.8362 53.0938 44.8007 53.0894 44.7652 53.085C44.7386 53.0805 44.7164 53.0716 44.6898 53.0672H44.6854C44.5434 53.0273 44.4059 52.9652 44.2817 52.8809C44.2063 52.8277 44.1398 52.77 44.0732 52.7035C44.0067 52.6369 43.949 52.566 43.8913 52.4861C43.8115 52.3664 43.745 52.2244 43.7006 52.0736C43.6696 51.9716 43.6518 51.8607 43.6429 51.7498C43.6296 51.6433 43.6296 51.528 43.6385 51.4127C43.918 51.5945 44.2373 51.4703 44.4769 51.2885C44.5478 51.2397 44.6099 51.1864 44.6676 51.1243C44.7519 51.0445 44.8317 50.9558 44.9027 50.8582C45.0713 50.6497 45.2132 50.4279 45.3596 50.2194C45.3773 50.1884 45.3995 50.1662 45.4173 50.1352C45.5548 49.94 45.6923 49.7359 45.8209 49.5275C45.8786 49.4432 45.9318 49.35 45.9895 49.2613C46.0649 49.3367 46.1137 49.4033 46.1403 49.4476C46.158 49.4787 46.1713 49.4964 46.1713 49.4964C46.1713 49.4964 46.1403 49.5363 46.0915 49.5984C45.985 49.7404 45.7854 50.0065 45.5902 50.3126C45.2132 50.907 44.845 51.6345 45.1999 51.8163C45.7366 52.0825 45.9185 50.9203 45.9584 50.5743C46.0072 50.5654 46.056 50.561 46.0959 50.5566H46.127H46.1358C46.2467 50.5433 46.3354 50.5211 46.4109 50.5033C46.4286 50.4989 46.4508 50.4945 46.4641 50.49C46.4774 50.4856 46.4907 50.4856 46.4996 50.4812H46.5084L46.5173 50.4767C46.5218 50.4723 46.5262 50.4723 46.5262 50.4723C46.5395 50.4679 46.5572 50.4634 46.5706 50.4634H46.575V50.4545Z' fill='%23474C2F'/%3E%3Cpath d='M45.9579 50.5742C45.918 50.9246 45.7361 52.0868 45.1994 51.8162C44.574 51.5057 46.1664 49.4963 46.1664 49.4963C46.1664 49.4963 46.1398 49.4475 46.0865 49.3766C45.816 49.5362 45.6252 49.8867 45.4522 50.1528C45.2038 50.5343 44.9776 50.9601 44.8933 51.4259C44.8135 51.8695 44.7736 52.3973 44.9998 52.801C45.0397 52.8764 45.1062 52.9873 45.1861 53.0937C45.4611 53.0494 45.7139 52.8986 45.8869 52.6235C46.2906 51.9848 46.4991 50.9202 46.5745 50.45C46.4192 50.4988 46.2684 50.5432 45.9579 50.5698V50.5742Z' fill='%23474C2F'/%3E%3Cpath opacity='0.69' d='M45.7851 49.0972C45.7851 49.0972 45.7851 49.106 45.7807 49.1105C45.7496 49.2347 45.7053 49.3544 45.652 49.4698C45.5589 49.6694 45.4391 49.8601 45.3238 50.0154C45.2794 50.073 45.2395 50.1218 45.1996 50.1662C45.1198 50.2593 45.031 50.348 44.9379 50.4235C44.8669 50.4811 44.7915 50.5343 44.7161 50.5787C44.5697 50.6674 44.41 50.7251 44.2548 50.7606C44.1084 50.7872 43.9398 50.7739 43.7979 50.7029H43.7935C43.7935 50.7029 43.8068 50.6674 43.8201 50.6497C43.8467 50.592 43.8689 50.5255 43.8999 50.4634C43.9354 50.388 43.9753 50.3126 44.0241 50.2327C44.064 50.1573 44.104 50.0863 44.1528 50.0109C44.2459 49.8601 44.3346 49.7315 44.4233 49.6161C44.4854 49.5407 44.5431 49.4786 44.5963 49.421C44.6984 49.3012 44.8048 49.2125 44.9068 49.146C44.9113 49.1415 44.9157 49.1415 44.9246 49.1371C44.9246 49.1326 44.929 49.1371 44.929 49.1371C44.9379 49.1282 44.9423 49.1238 44.9556 49.1238C44.9867 49.0972 45.0133 49.0839 45.0399 49.075C45.2085 48.9907 45.3593 48.973 45.4923 48.9907C45.55 48.9996 45.6032 49.0173 45.6609 49.0351L45.7363 49.0661C45.7363 49.0661 45.7762 49.0927 45.794 49.1016L45.7851 49.0972Z' fill='%23949984'/%3E%3Cpath opacity='0.4' d='M46.536 45.8413C46.3053 45.6595 45.7686 47.6644 45.6089 47.2829C45.6044 47.2785 45.6044 47.2741 45.6044 47.2741C45.498 47.0212 45.3472 46.8261 45.1209 46.7462C45.0455 46.7196 44.9657 46.7063 44.877 46.7063C44.6996 46.7063 44.4512 46.8527 44.3358 46.8882C44.3181 46.8128 44.2959 46.7196 44.287 46.622C44.287 46.622 44.2856 46.6176 44.2826 46.6087C44.1717 45.757 43.9987 44.2311 44.358 43.1754C44.358 43.1754 44.3595 43.1739 44.3624 43.171C44.3624 43.171 44.4955 43.0734 44.7129 43.0379C44.8105 43.0246 44.9302 43.0246 45.0633 43.0468C45.325 43.0956 45.6266 43.2597 45.9593 43.6412C46.1855 43.9073 46.3275 44.1823 46.4251 44.4485C46.6912 45.1937 46.5448 45.8458 46.5448 45.8458L46.536 45.8413Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M67.8185 40.1103V40.0925H67.814C67.7519 39.924 67.6677 39.6756 67.5612 39.3695C67.5568 39.3651 67.5612 39.3606 67.5612 39.3562C67.5612 39.3562 67.5568 39.3518 67.5479 39.3429V39.334V39.3207V39.3163C67.4769 39.1344 67.4148 38.9215 67.3305 38.7086C67.2196 38.3404 67.0955 37.9501 66.9624 37.5375H66.9535C66.9535 37.5375 66.9491 37.5065 66.9491 37.4932C66.8781 37.298 66.8249 37.1161 66.7583 36.9121C66.7583 36.9121 66.7569 36.9091 66.7539 36.9032C66.7539 36.9032 66.7495 36.8988 66.7495 36.8944C66.745 36.8899 66.745 36.8811 66.7406 36.8677C66.7362 36.8589 66.7362 36.85 66.7362 36.8367C66.7362 36.8367 66.7347 36.8337 66.7317 36.8278V36.8145C66.7317 36.8145 66.7273 36.8056 66.7273 36.8012C66.7228 36.7923 66.7184 36.7835 66.7184 36.7702C66.6652 36.5972 66.6119 36.4375 66.5543 36.2778C66.5543 36.2689 66.5498 36.2645 66.5498 36.2512C66.5498 36.2512 66.541 36.2423 66.541 36.2379C66.5365 36.229 66.5365 36.2201 66.5321 36.2068C66.4123 35.8475 66.3148 35.5281 66.2216 35.2443C66.2216 35.2443 66.2201 35.2413 66.2172 35.2354C66.0708 34.8096 65.9599 34.4946 65.8978 34.3793C65.8889 34.3527 65.8845 34.3438 65.8712 34.3438C65.8179 34.3305 65.7647 34.3305 65.7026 34.3172C65.6716 34.3172 65.6405 34.3127 65.6006 34.3127H65.5962C65.5074 34.3127 65.4187 34.3127 65.3211 34.3261H65.3167C65.2413 34.3261 65.1748 34.3305 65.0949 34.3394H65.0905C65.0905 34.3394 65.0639 34.3482 65.0417 34.3482H65.0373C65.0373 34.3482 65.0106 34.3527 65.0062 34.3527H65.0018C64.5848 34.4325 64.1412 34.5789 63.6888 34.7652H63.6843C63.6045 34.8007 63.5158 34.8406 63.4404 34.8672C63.2718 34.9471 63.1299 35.018 62.9791 35.089V35.0979H62.9746C62.9746 35.0979 62.9702 35.0979 62.9702 35.1023C62.7085 35.2265 62.4645 35.3685 62.2427 35.5015C62.2383 35.506 62.2339 35.506 62.2294 35.506V35.5148C62.1762 35.5459 62.123 35.5725 62.0786 35.6036C62.0742 35.6036 62.0742 35.608 62.0697 35.608C61.95 35.6923 61.8479 35.7632 61.7548 35.8342L61.7193 35.8653H61.7149C61.4354 36.2157 62.6464 37.0807 62.9125 38.1364C62.9436 38.2473 62.9569 38.3582 62.9658 38.4824C62.9658 38.7219 62.9214 38.9747 62.7839 39.2231C62.704 39.3606 62.6065 39.4982 62.4778 39.6312C62.4778 39.6312 62.4867 39.6401 62.4778 39.6401C62.3802 39.7466 62.2649 39.853 62.1185 39.9595C61.9189 40.128 61.604 40.3232 61.2624 40.5361H61.258V40.545C61.0584 40.6692 60.8499 40.7845 60.637 40.9176C60.3753 41.0728 60.1224 41.2281 59.8918 41.37C59.8607 41.3834 59.8341 41.41 59.8075 41.4233C59.5768 41.5608 59.3772 41.6983 59.222 41.8136C59.1599 41.858 59.1022 41.9112 59.049 41.9644C58.9691 42.0487 58.907 42.133 58.8538 42.2306C58.8538 42.2439 58.8449 42.2616 58.8405 42.2749V42.2838C58.8405 42.2838 58.8316 42.3149 58.8272 42.3282C58.7784 42.4967 58.7429 42.6475 58.734 42.7984C58.703 43.131 58.703 43.4105 58.8094 43.7432C58.8893 43.9694 58.9736 44.1956 59.009 44.4396C59.009 44.444 59.0135 44.4662 59.0135 44.4706C59.0534 44.7501 59.0445 45.0207 59.0312 45.2957C59.0224 45.4066 59.0135 45.5175 59.0046 45.6239V45.655C58.9913 45.8324 58.978 46.0143 58.9647 46.1962C58.9647 46.3248 58.9647 46.4579 58.978 46.5909C58.9869 46.6176 59.0312 46.7018 59.0889 46.8305C59.2841 47.2386 59.6301 48.0104 59.6833 48.21C59.8119 48.729 59.4038 48.8931 59.0046 49.0617H59.0002C58.8494 49.1326 58.6941 49.2036 58.5877 49.3056C58.5788 49.3101 58.5699 49.3189 58.5566 49.3322C58.5167 49.3722 58.4768 49.4121 58.4368 49.4431C58.3614 49.5052 58.2905 49.5629 58.2195 49.6073H58.2017C57.7715 49.8823 57.3013 49.7847 56.4895 49.1504C56.0016 48.7733 55.5225 48.7955 55.2298 48.8665H55.2253C55.1011 48.8975 55.0124 48.9419 54.9902 48.9552C54.8483 49.3278 54.9814 49.8335 55.2697 50.3613V50.3702C55.3318 50.49 55.4072 50.6097 55.4915 50.7251V50.7339C55.4915 50.7339 55.4959 50.7339 55.4959 50.7384C55.4959 50.7384 55.4989 50.7413 55.5048 50.7472C55.5846 50.8581 55.6556 50.969 55.731 51.0666V51.0799L55.7399 51.0844C55.9484 51.3549 56.1702 51.6122 56.4053 51.8207C56.6315 52.0381 56.8533 52.2111 57.0484 52.3219C57.1017 52.384 57.217 52.4461 57.3678 52.5216H57.3723C57.6739 52.6635 58.1263 52.8321 58.6631 53.0228C58.8316 53.0805 59.0091 53.1337 59.182 53.2047H59.1909C59.3373 53.2579 59.4748 53.2934 59.6168 53.3466H59.6212C59.772 53.3998 59.9273 53.4442 60.0736 53.4885H60.0781C60.0781 53.4885 60.0869 53.493 60.0914 53.493C60.3531 53.5861 60.5971 53.666 60.8455 53.7503C61.5818 53.9854 62.2738 54.2027 62.7928 54.3801C62.8549 54.3979 62.9258 54.4245 62.9835 54.4422C63.1521 54.4999 63.294 54.5443 63.4005 54.5931C63.5114 54.6374 63.5868 54.6685 63.6001 54.6951C63.6932 54.5443 63.8751 54.4955 64.1191 54.5088H64.1324C64.4118 54.5132 64.7844 54.5931 65.1348 54.6596H65.1393C65.1393 54.6596 65.1482 54.6596 65.1482 54.664C65.4054 54.7173 65.6627 54.7616 65.8712 54.7705H65.8845C65.8845 54.7705 65.92 54.7749 65.9421 54.7749C65.9643 54.7749 65.9954 54.7749 66.0131 54.7705H66.0397C66.2127 54.7616 66.3502 54.6995 66.4079 54.5753C66.4434 54.5043 66.47 54.4378 66.5011 54.3535V54.3447C66.6075 54.0652 66.6962 53.7015 66.7805 53.2712C66.8116 53.0849 66.8515 52.8808 66.8781 52.6724V52.6591C66.9402 52.2554 66.989 51.834 67.0467 51.3949V51.3771C67.0866 50.9602 67.1309 50.5255 67.1576 50.1129V50.0952C67.1842 49.8246 67.2063 49.5673 67.2196 49.3234C67.2241 49.2347 67.233 49.1504 67.233 49.075V49.0572H67.2374C67.2374 49.0572 67.233 49.0528 67.2374 49.0483C67.2463 48.9463 67.2463 48.8399 67.264 48.7423C67.264 48.6314 67.2729 48.5161 67.2773 48.4185V48.4052C67.2862 48.3076 67.2906 48.2233 67.3039 48.1435C67.3172 47.864 67.335 47.6289 67.3483 47.4559C67.3749 47.0744 67.4193 45.9832 67.4547 44.9808C67.4592 44.9187 67.4592 44.8566 67.4636 44.8033C67.4636 44.79 67.4681 44.7723 67.4681 44.759V44.5948C67.4681 44.5948 67.4681 44.5594 67.4725 44.5461V44.3154C67.4814 44.2178 67.4814 44.1335 67.4858 44.0315V44.0138C67.4858 43.9295 67.4947 43.8452 67.4947 43.7742V43.6944C67.4947 43.6633 67.5035 43.6456 67.5035 43.619V43.5657C67.5169 43.1931 67.5213 42.958 67.5213 42.958L67.5346 42.8161H67.5435V42.7851L67.5967 42.408V42.3991L67.6056 42.3947C67.6056 42.3903 67.6011 42.3858 67.6011 42.3858V42.3681L67.61 42.3503L67.7963 40.9974H67.8052V40.9664L67.8939 40.3409C67.8939 40.3409 67.8362 40.2522 67.783 40.1103H67.8185ZM61.6262 42.9536C61.7193 42.9403 61.7947 42.927 61.879 42.9226H61.8834V42.9137H61.9721C62.5577 42.8383 63.1654 42.8028 63.7198 42.8959C64.0348 42.9447 63.711 42.9847 63.223 42.998H63.2097C62.4335 43.0246 61.2757 43.0068 61.6262 42.9536Z' fill='%23CEB79B'/%3E%3Cpath d='M55.8509 50.3659C55.5138 50.1485 55.048 49.9932 55.0081 49.6162C54.9859 49.3944 55.1766 48.8222 55.4117 48.6803C55.5892 48.5738 55.4206 48.321 55.2432 48.4274C54.8839 48.6448 54.6577 49.2658 54.6798 49.6162C54.7065 50.0997 55.2609 50.3481 55.6868 50.6231C55.8597 50.734 56.0239 50.4767 55.8509 50.3703V50.3659Z' fill='%23CEB79B'/%3E%3Cpath d='M59.3907 50.3658C59.2177 50.4767 59.3818 50.7295 59.5548 50.6186C59.9806 50.3436 60.5351 50.0952 60.5617 49.6117C60.5839 49.2613 60.3577 48.6359 59.9984 48.4229C59.8209 48.3165 59.6568 48.5738 59.8298 48.6758C60.0649 48.8177 60.2556 49.3899 60.2335 49.6117C60.1935 49.9888 59.7322 50.144 59.3907 50.3614V50.3658Z' fill='%23CEB79B'/%3E%3Cpath d='M64.3854 33.5854C64.2612 33.918 64.0882 34.2108 63.8708 34.4592C63.862 34.4725 63.8531 34.4814 63.8442 34.4902C63.3341 35.0625 62.6022 35.4351 61.7505 35.6524C61.4888 35.7234 61.2138 35.7811 60.9299 35.821C60.7037 35.8565 60.4775 35.8831 60.2424 35.9008C60.0916 35.9141 59.9363 35.923 59.7811 35.9319C58.7121 35.9807 57.5987 35.9008 56.5784 35.7722C56.2502 35.7278 55.9264 35.6835 55.6203 35.6302C54.2497 35.4085 52.9367 34.9294 51.7169 34.2596C51.7035 34.2552 51.6947 34.2463 51.6814 34.2418C51.1801 33.9624 50.6035 33.6874 50.0268 33.4301C50.0179 33.4301 50.0091 33.4257 50.0002 33.4168C50.0002 33.4168 49.9958 33.4168 49.9913 33.4168C49.7474 33.3059 49.499 33.1994 49.2594 33.093C48.7804 32.8801 48.3235 32.6805 47.942 32.4986C47.9154 32.4853 47.8888 32.472 47.8666 32.4631C47.8267 32.4454 47.7868 32.4232 47.7513 32.4054C47.9819 32.0639 48.2348 31.7445 48.5009 31.4517C48.8114 31.1102 49.1352 30.7997 49.4635 30.5158C52.9322 29.7662 57.4434 30.9416 60.5972 32.0506C60.8856 32.1526 61.1606 32.2546 61.4223 32.3522L61.5288 32.3921C61.9457 32.5518 62.3272 32.6982 62.6643 32.8401C62.6688 32.8401 62.6776 32.8446 62.682 32.849C62.7087 32.8623 62.7353 32.8712 62.7663 32.8845C63.3208 33.1107 63.7555 33.3059 64.0305 33.4301C64.2612 33.5366 64.381 33.5942 64.381 33.5942L64.3854 33.5854Z' fill='%23CE8000'/%3E%3Cpath opacity='0.4' d='M50.4966 40.5228C50.4966 40.5228 51.224 42.5056 52.5459 42.825C53.8677 43.1443 55.2073 44.311 55.8505 43.9162C56.4937 43.5214 56.3873 42.7629 56.3873 42.7629C56.3873 42.7629 56.4937 41.6451 57.616 41.6451C58.2902 41.6451 58.5519 38.8328 56.1167 39.3961C54.5597 39.7554 52.8431 39.4494 51.9515 39.2364C51.0599 39.0235 50.3058 40.1458 50.4966 40.5228Z' fill='%23CEB79B'/%3E%3Cpath d='M53.6199 43.0245C53.3715 42.9136 53.0388 42.9092 52.7682 42.8826C52.4887 42.8515 52.1161 42.7672 51.8367 42.8781C51.779 42.8781 51.7214 42.9003 51.677 42.958C51.3754 43.3616 51.7081 44.0004 52.0718 44.2576C52.5065 44.5681 53.1719 44.5016 53.5844 44.1911C53.9525 43.9117 54.1034 43.2374 53.6243 43.0289L53.6199 43.0245Z' fill='%233E875B'/%3E%3Cpath d='M53.6203 43.0245C53.3719 42.9136 53.0392 42.9092 52.7686 42.8826C52.4892 42.8515 52.1165 42.7672 51.8371 42.8781C51.7794 42.8781 51.7218 42.9003 51.6774 42.958C51.5798 43.091 51.5488 43.2507 51.5665 43.4104C51.6552 43.4104 51.7439 43.4104 51.8282 43.4104C52.0589 43.4193 52.2895 43.4148 52.5158 43.4237C52.8174 43.437 53.3009 43.4947 53.2565 43.9028C53.221 44.2133 52.7819 44.3375 52.5335 44.3951L52.4226 44.4173C52.8174 44.5194 53.2743 44.4262 53.5848 44.1867C53.953 43.9072 54.1038 43.233 53.6247 43.0245H53.6203Z' fill='%233B754B'/%3E%3Cpath d='M55.3231 43.814C55.1191 43.7431 53.0121 41.6849 50.1067 43.0289C49.8805 43.1354 50.0579 43.4769 50.2841 43.3705C52.8568 42.1817 55.1013 44.1467 55.2034 44.1778C55.4385 44.2576 55.5627 43.8894 55.3276 43.8096L55.3231 43.814Z' fill='%23676D54'/%3E%3Cpath d='M61.405 44.1071C61.7732 44.4486 62.412 44.5817 62.8644 44.32C63.2414 44.1071 63.6318 43.5215 63.3745 43.0957C63.339 43.0336 63.2858 43.007 63.2281 43.0025C62.9664 42.8695 62.5983 42.9138 62.3232 42.9138C62.0615 42.9138 61.7333 42.8917 61.4804 42.9715C60.9925 43.1268 61.0724 43.801 61.405 44.1071Z' fill='%233E875B'/%3E%3Cpath d='M63.3786 43.1001C63.3432 43.038 63.2899 43.0114 63.2323 43.007C62.9706 42.8739 62.6024 42.9183 62.3274 42.9183C62.0657 42.9183 61.7374 42.8961 61.489 42.9759C61.1918 43.0691 61.1075 43.353 61.1563 43.628C61.6487 43.5481 62.3274 43.4594 62.3495 43.9119C62.3628 44.1736 62.0435 44.2978 61.8394 44.3643C61.8306 44.3643 61.8261 44.3643 61.8217 44.3688C62.1588 44.5018 62.558 44.5063 62.873 44.3288C63.25 44.1159 63.6359 43.5304 63.3831 43.1046L63.3786 43.1001Z' fill='%233B754B'/%3E%3Cpath d='M59.7146 43.6323C59.932 43.5791 62.314 41.5164 65.1395 43.3307C65.3613 43.4726 65.1396 43.8363 64.9222 43.6944C62.4204 42.0887 59.9053 44.0271 59.7989 44.0537C59.546 44.1158 59.4618 43.6944 59.7146 43.6279V43.6323Z' fill='%23676D54'/%3E%3Cpath d='M59.129 45.2114C59.1423 45.0384 59.1512 44.8565 59.16 44.6835C59.1733 44.373 59.1378 44.0802 59.0447 43.7653C58.9249 43.3483 58.9294 42.9757 59.0624 42.4967C59.0757 42.4434 59.0669 42.3902 59.0358 42.3503C59.0003 42.3059 58.9427 42.2793 58.885 42.2793C58.8052 42.2793 58.7431 42.3281 58.7209 42.4035C58.6277 42.7451 58.5878 43.0245 58.5923 43.2996C58.5923 43.5125 58.6499 43.721 58.7031 43.925C58.7519 44.1157 58.8052 44.3109 58.814 44.5061C58.8273 44.8166 58.8096 45.1315 58.7874 45.4332C58.7608 45.8723 58.7297 46.3247 58.8007 46.7772C58.814 46.857 58.8673 46.9058 58.9471 46.9058C59.0048 46.9058 59.0624 46.8792 59.0979 46.8349C59.1334 46.7949 59.1467 46.7417 59.1378 46.6885C59.0669 46.205 59.0979 45.6993 59.1334 45.2158L59.129 45.2114Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.3' d='M65.556 34.4725C65.556 34.4725 65.5471 34.4814 65.5427 34.4858C65.5294 34.4991 65.5161 34.5124 65.5028 34.5257C65.5028 34.5257 65.4983 34.5257 65.4939 34.5346C65.3342 34.6943 64.8596 35.1246 64.1499 35.4306C64.0922 35.4528 64.0124 35.4883 63.9192 35.5238C63.764 35.5814 63.6043 35.6302 63.4313 35.6701C63.3337 35.6923 63.2317 35.7145 63.1252 35.7322C62.9699 35.7589 62.8058 35.781 62.6373 35.8032C62.2691 35.8431 61.8743 35.8698 61.4884 35.8875C61.2844 35.8964 61.0803 35.9008 60.8851 35.9052C60.6589 35.9052 60.4416 35.9052 60.242 35.9052C60.0911 35.9186 59.9359 35.9274 59.7806 35.9363C58.7116 35.9851 57.5982 35.9052 56.578 35.7766C56.2498 35.7322 55.926 35.6879 55.6199 35.6347C54.2492 35.4129 52.9363 34.9338 51.7164 34.264C51.5124 34.1842 51.2995 34.1088 51.091 34.0334C51.0821 34.0334 51.0732 34.0289 51.0644 34.0245C51.0688 34.0245 51.0732 34.0156 51.0777 34.0156C51.0777 34.0156 51.0644 34.0156 51.0599 34.0245C51.0599 34.0245 51.0511 34.0245 51.0333 34.0334C50.9623 34.06 50.7583 34.1309 50.4922 34.2197C49.7469 34.4681 48.5182 34.8407 48.2565 34.712C48.0614 34.6144 47.5512 34.3084 47.4137 33.8204C47.3161 33.47 47.4137 33.022 47.9549 32.4986C48.088 32.3655 48.2521 32.228 48.4473 32.0861C50.5099 30.5868 52.7588 30.9594 54.6352 32.0861C56.5115 33.2127 58.4898 34.8007 61.1957 34.335C61.6836 34.2507 66.0706 32.0328 66.0706 32.6494C66.0706 33.399 66.1947 33.8559 65.5693 34.4725H65.556Z' fill='%23C77500'/%3E%3Cpath d='M70.8171 44.2267V44.3376C70.8215 44.444 70.8215 44.5549 70.8171 44.6614C70.8126 44.6702 70.8038 44.688 70.7993 44.6969C70.7816 44.7279 70.7594 44.759 70.7417 44.7989C70.7017 44.8743 70.6663 44.963 70.6352 45.0606C70.4622 45.553 70.3513 46.276 70.2626 46.9192C70.2626 46.9369 70.2582 46.9591 70.2582 46.9724C70.2493 47.0478 70.2404 47.1144 70.2315 47.1853C70.2271 47.1898 70.2315 47.1898 70.2315 47.1898C70.1473 47.8596 70.1029 48.383 70.0585 48.3874C69.9565 48.3963 69.8589 48.414 69.7702 48.4362C69.6726 48.454 69.5884 48.4894 69.513 48.5205C69.4996 48.5294 69.4819 48.5338 69.473 48.5471C69.4198 48.5737 69.3754 48.6048 69.34 48.6358C69.34 48.6358 69.3385 48.6388 69.3355 48.6447C69.3355 48.6447 69.3178 48.658 69.3178 48.6624C69.2779 48.6979 69.2601 48.7378 69.2468 48.7689C69.2291 48.831 69.2113 48.8975 69.1891 48.9552C69.1803 48.9995 69.1625 49.0439 69.1492 49.0883C69.1492 49.0971 69.1492 49.1016 69.1448 49.1149C69.1448 49.1149 69.1403 49.1415 69.1359 49.1504C69.1315 49.1681 69.127 49.1859 69.1182 49.2036C69.0649 49.3722 69.0117 49.5185 68.9496 49.6516C68.8919 49.7936 68.8298 49.9178 68.7677 50.0242C68.7411 50.0819 68.7145 50.1307 68.6835 50.1795C68.6702 50.2061 68.6524 50.2283 68.6347 50.2549C68.6169 50.2904 68.5947 50.317 68.577 50.348C68.5459 50.3835 68.5238 50.419 68.4972 50.4456H68.4927C68.4617 50.49 68.4306 50.5255 68.404 50.5521H68.3996C68.3552 50.6009 68.3153 50.6363 68.2754 50.663C68.0758 50.8315 67.9382 50.8315 67.9382 50.8315C67.9382 50.8315 67.9294 50.6053 67.9072 50.2283C67.9028 50.0952 67.8983 49.9488 67.8895 49.7891C67.8895 49.7625 67.885 49.7403 67.885 49.7137C67.8806 49.6117 67.8762 49.5008 67.8717 49.3855C67.8717 49.3588 67.8673 49.3322 67.8673 49.3012C67.854 48.9641 67.8362 48.5782 67.8185 48.1701V48.1523C67.8096 47.9838 67.8052 47.8152 67.7919 47.6422V47.6067C67.7608 46.9724 67.7342 46.2982 67.7032 45.6417V45.6284C67.6943 45.4332 67.6854 45.2292 67.6721 45.0384V44.9364C67.6677 44.9053 67.6677 44.8832 67.6677 44.8521C67.6632 44.7501 67.6588 44.6525 67.6544 44.5594V44.515C67.6499 44.4174 67.6455 44.3287 67.6455 44.2355C67.6411 44.1424 67.6366 44.0537 67.6322 43.965C67.6322 43.9206 67.6278 43.8762 67.6278 43.8363V43.7565C67.6278 43.7565 67.6233 43.752 67.6233 43.7476V43.7033C67.6189 43.6278 67.6189 43.5569 67.6144 43.4859C67.6056 43.2419 67.5967 43.0157 67.5878 42.8072V42.7806C67.579 42.5588 67.5701 42.3681 67.5612 42.204C67.5568 42.0221 67.5523 41.8447 67.5435 41.6672C67.539 41.6273 67.539 41.583 67.5346 41.543V41.5342C67.5346 41.5342 67.5302 41.4987 67.5302 41.4809V41.4454C67.5213 41.2769 67.5124 41.1172 67.4991 40.9531C67.4858 40.7756 67.4636 40.5982 67.4503 40.4341C67.4503 40.4208 67.4459 40.4075 67.4459 40.3942C67.4459 40.3676 67.4414 40.3454 67.437 40.3188C67.4015 39.9639 67.3572 39.6312 67.3084 39.3118C67.2729 39.0901 67.2374 38.8816 67.2019 38.6775C67.1531 38.4158 67.0999 38.1674 67.0467 37.9368V37.9279C67.0422 37.9013 67.0378 37.8791 67.0334 37.8569C66.9446 37.5109 66.8559 37.2004 66.7672 36.9121C66.7672 36.8988 66.7628 36.8855 66.7583 36.8722C66.7583 36.8722 66.7539 36.8677 66.7539 36.8633C66.7539 36.8589 66.7495 36.8544 66.7495 36.85L66.7362 36.8056C66.6341 36.4907 66.5277 36.2068 66.4301 35.9673C66.4301 35.9628 66.4257 35.9628 66.4257 35.9584C66.4257 35.9584 66.4212 35.9584 66.4212 35.954C66.4212 35.9495 66.4168 35.9495 66.4168 35.9451C66.2039 35.4483 66.0087 35.0934 65.8579 34.8539C65.818 34.7829 65.778 34.7297 65.7514 34.6853C65.6405 34.5345 65.574 34.4636 65.574 34.4636C65.5696 34.4724 65.5607 34.4813 65.5474 34.4946C65.5385 34.5035 65.5341 34.5123 65.5208 34.5212H65.5163C65.5163 34.5212 65.4986 34.5523 65.4808 34.5611H65.4764C65.4365 34.6011 65.3833 34.6543 65.3123 34.7075C65.2591 34.7563 65.1925 34.8051 65.126 34.8583C65.0994 34.8761 65.0727 34.9027 65.0417 34.9204C64.8155 35.0846 64.5227 35.2709 64.1679 35.4261C64.1146 35.4439 64.0303 35.4793 63.9372 35.5193C63.7819 35.5725 63.6178 35.6213 63.4448 35.6612C63.3517 35.6878 63.2497 35.7056 63.1388 35.7189C62.9835 35.7499 62.8194 35.7677 62.6464 35.7898C62.3536 35.8253 62.0387 35.8475 61.7238 35.8653H61.7193C61.6439 35.8697 61.5774 35.8697 61.502 35.8741C61.2935 35.883 61.0894 35.8874 60.8987 35.8919H60.2555C59.5768 35.8919 59.0978 35.8653 59.0978 35.8653C59.0978 35.8653 59.1821 35.7898 59.3196 35.6656C59.5813 35.4217 60.0382 34.9648 60.4729 34.4059H60.4773C60.6148 34.2285 60.7523 34.0422 60.8765 33.8514C60.9076 33.8071 60.9342 33.7671 60.9608 33.7228C61.0894 33.5232 61.2003 33.3103 61.2979 33.0973C61.4088 32.8622 61.4931 32.6138 61.5419 32.3743C61.5818 32.1836 61.5951 31.984 61.5818 31.7977C61.5552 31.5404 61.4798 31.2964 61.3245 31.0658L62.0564 30.6843L61.0983 30.2141L60.3975 29.8637L60.2999 29.8149L60.2112 29.7705L60.1579 29.7395L60.0071 29.6641C60.0071 29.6641 60.0914 29.6774 60.1845 29.6907C60.1934 29.6951 60.2023 29.6951 60.2156 29.6951C60.2732 29.6995 60.3398 29.704 60.4063 29.7084C60.4906 29.7084 60.5793 29.7084 60.6592 29.6951C60.8943 29.6641 61.0806 29.5576 61.0051 29.2915C60.9564 29.1273 60.7346 28.9233 60.4285 28.6971C60.3708 28.6527 60.3043 28.6083 60.2422 28.564C60.1978 28.5329 60.1491 28.5019 60.1003 28.4708C59.9982 28.3999 59.8918 28.3333 59.7853 28.2712C59.6522 28.187 59.5192 28.1071 59.3861 28.0317H59.3817C59.2175 27.9385 59.0623 27.8498 58.9203 27.77C59.0091 27.77 59.0978 27.7744 59.1865 27.7833C59.293 27.7877 59.4083 27.7966 59.5147 27.8099C59.5946 27.8232 59.67 27.8277 59.7543 27.841C59.7676 27.841 59.7853 27.8454 59.7986 27.8454C59.9095 27.8587 60.0248 27.8809 60.1357 27.8986C60.1712 27.9031 60.1978 27.9075 60.2333 27.9119C60.2954 27.9208 60.3575 27.9385 60.4196 27.9474C60.4285 27.9474 60.4374 27.9519 60.4507 27.9519C60.464 27.9519 60.464 27.9563 60.4773 27.9563C60.5705 27.974 60.6592 27.9962 60.7523 28.014L60.8277 28.0273C60.9297 28.0539 61.0406 28.0761 61.1471 28.1071C61.1737 28.1115 61.1959 28.1204 61.2225 28.1248C61.2935 28.1426 61.3556 28.1648 61.4221 28.1825H61.431C61.5508 28.218 61.6705 28.2579 61.7947 28.2934C61.808 28.2978 61.8258 28.3023 61.8435 28.3067C61.8923 28.32 61.9411 28.3378 61.9899 28.3555H61.9943C62.0964 28.391 62.1939 28.4309 62.3004 28.4664L62.3448 28.4797C62.4911 28.5374 62.6464 28.6039 62.7972 28.666C62.8948 28.7104 62.9968 28.7547 63.1033 28.8035C63.223 28.8568 63.3384 28.9144 63.4626 28.981C63.7465 29.1318 64.0481 29.2959 64.332 29.4778C64.3453 29.4866 64.3586 29.4911 64.3719 29.5044C64.3852 29.5132 64.3985 29.5221 64.4118 29.5354C64.5094 29.5931 64.607 29.6641 64.7001 29.7306C64.709 29.735 64.7268 29.7439 64.7356 29.7483C64.8243 29.806 64.9086 29.8725 64.9973 29.9346C65.1082 30.0189 65.2236 30.1076 65.3345 30.2008C65.3877 30.2407 65.4365 30.2806 65.4853 30.325L65.676 30.4891C65.7869 30.5867 65.9022 30.6843 66.0087 30.7907C66.2216 30.9904 66.4301 31.2033 66.6341 31.4251C66.6652 31.4561 66.6918 31.4872 66.7184 31.5182C66.9579 31.7844 67.1797 32.0682 67.3882 32.3787C67.406 32.4054 67.4237 32.432 67.4459 32.4675C67.6544 32.7913 67.9782 33.3857 68.3641 34.1353C68.3685 34.1397 68.3685 34.1442 68.373 34.1531C68.7544 34.9914 69.0605 35.8874 69.2867 36.779C69.3976 37.2226 69.4952 37.6573 69.5662 38.092C69.5795 38.1807 69.6017 38.2783 69.615 38.3803C69.6416 38.5178 69.6593 38.6642 69.6859 38.8239C69.7126 38.988 69.7347 39.1522 69.7569 39.3252C69.7569 39.3252 69.7614 39.3252 69.7614 39.3296C69.7658 39.3562 69.7658 39.3739 69.7702 39.4006C69.788 39.5336 69.8101 39.6756 69.8234 39.8131C69.8412 39.9373 69.8589 40.0571 69.8767 40.1813C69.89 40.2877 69.9077 40.3942 69.9166 40.4962C69.9432 40.6692 69.9654 40.8333 69.9876 40.993C70.0807 41.7205 70.165 42.3237 70.2005 42.51C70.2049 42.5455 70.2094 42.5633 70.2138 42.5677C70.2271 42.5987 70.2715 42.6431 70.3247 42.6919C70.4489 42.8028 70.6174 42.9314 70.6263 42.9359V42.9447C70.6529 43.0068 70.6707 43.0734 70.6884 43.1355C70.7017 43.1887 70.7195 43.2464 70.7283 43.3085C70.7461 43.3927 70.7638 43.477 70.7771 43.5657C70.8082 43.7742 70.8259 43.9871 70.8348 44.2089L70.8171 44.2267Z' fill='%23C77500'/%3E%3Cpath d='M70.9408 44.6037C70.9452 44.7501 70.9452 44.8965 70.9408 45.0429C70.9319 45.2292 70.9231 45.4066 70.9053 45.5796C70.8964 45.6594 70.8964 45.726 70.8876 45.8058C70.8876 45.8103 70.8876 45.8147 70.8831 45.8191C70.8743 45.9744 70.8521 46.1208 70.8343 46.2494C70.8299 46.2849 70.8299 46.3248 70.821 46.3559C70.8122 46.4268 70.8033 46.4889 70.7944 46.551L70.7811 46.6397V46.6531L70.7767 46.6575C70.7767 46.6664 70.7767 46.6708 70.7722 46.6841C70.7678 46.7196 70.7589 46.764 70.7456 46.8172C70.7101 46.9414 70.6702 47.0878 70.6214 47.2386C70.5638 47.4204 70.4972 47.6067 70.4396 47.7797C70.3642 47.9927 70.302 48.1745 70.2843 48.2499C70.2533 48.3741 70.2045 48.5782 70.1557 48.7822C70.1379 48.8443 70.1202 48.9109 70.1069 48.9685C70.1024 48.973 70.1024 48.9774 70.098 48.9863C70.0847 49.0661 70.0581 49.1371 70.0448 49.2081C70.0403 49.2347 70.0359 49.248 70.0315 49.2613C70.027 49.279 70.0226 49.3012 70.0182 49.3145C69.9915 49.4032 69.9738 49.4698 69.9561 49.5319C69.9516 49.5407 69.9516 49.5496 69.9472 49.5629C69.9339 49.5984 69.9295 49.625 69.9161 49.6472V49.6738C69.9161 49.6738 69.9073 49.6916 69.9073 49.7004C69.9073 49.7093 69.9028 49.7137 69.9028 49.7137C69.9028 49.7182 69.8984 49.7182 69.8984 49.7226C69.8895 49.7403 69.8718 49.7625 69.8629 49.7758C69.8363 49.8246 69.8097 49.869 69.7786 49.9133C69.7609 49.94 69.7431 49.9666 69.7254 49.9932H69.721C69.7032 50.0287 69.681 50.0553 69.6589 50.0863H69.6544C69.6544 50.0863 69.6367 50.1174 69.6234 50.1263C69.6145 50.1396 69.6056 50.1573 69.5879 50.1706C69.5524 50.215 69.5125 50.2549 69.4814 50.2904C69.4726 50.2993 69.4548 50.3081 69.4415 50.3303L69.4149 50.3569C69.4149 50.3569 69.4105 50.3569 69.4016 50.3658C69.3972 50.3658 69.3927 50.3702 69.3883 50.3747C69.3617 50.4013 69.335 50.4235 69.3084 50.4456H69.304C69.304 50.4456 69.2996 50.4501 69.2951 50.4501C69.2596 50.4811 69.2197 50.5033 69.1887 50.5255C69.1798 50.5299 69.1621 50.5388 69.1532 50.5432C69.1488 50.5432 69.1443 50.5477 69.1399 50.5521C69.131 50.5521 69.1266 50.5521 69.1221 50.5565C69.1088 50.561 69.0955 50.5654 69.0866 50.5698C69.0467 50.5876 69.0024 50.6009 68.958 50.6142C68.927 50.6186 68.887 50.6231 68.856 50.6275H68.8028C68.8028 50.6275 68.7628 50.6319 68.7495 50.6319C68.7407 50.6319 68.7318 50.6319 68.7185 50.6275C68.714 50.6319 68.7096 50.6275 68.7052 50.6275H68.6475C68.6475 50.6275 68.6165 50.6186 68.6031 50.6186C68.5854 50.6142 68.5632 50.6142 68.5499 50.6053C68.541 50.6053 68.5322 50.6009 68.5233 50.5965H68.5056C68.5056 50.5965 68.4745 50.5876 68.4612 50.5787C68.4479 50.5743 68.4302 50.5698 68.4169 50.561H68.408C68.408 50.561 68.3947 50.5565 68.3902 50.5565C68.3902 50.5565 68.3814 50.5477 68.3769 50.5477L68.3459 50.5344H68.3414C68.3148 50.5255 68.2926 50.5077 68.2705 50.4989C68.2616 50.49 68.2394 50.4811 68.2261 50.4678C68.1995 50.4589 68.1773 50.4412 68.1551 50.4279C68.1152 50.4013 68.0797 50.3791 68.0487 50.348C68.0221 50.3303 68.0043 50.3081 67.9777 50.2904C67.96 50.2726 67.9378 50.2505 67.92 50.2372H67.9156C67.889 50.2105 67.8757 50.1928 67.8535 50.1751C67.8003 50.113 67.7426 50.042 67.6983 49.9666L67.6672 49.9222C67.6317 49.8779 67.6095 49.8335 67.5785 49.7847C67.5696 49.7714 67.5607 49.7492 67.5519 49.7359C67.5386 49.7049 67.5208 49.6827 67.5075 49.6516C67.4809 49.6028 67.4632 49.5585 67.4454 49.5097C67.4188 49.4609 67.4011 49.4165 67.3833 49.3633C67.37 49.3278 67.3567 49.3012 67.3478 49.2657C67.3478 49.2657 67.3478 49.2628 67.3478 49.2569C67.339 49.2214 67.3212 49.1992 67.3123 49.1637C67.3079 49.1593 67.3035 49.1504 67.3035 49.146L67.2902 49.0883C67.2902 49.0883 67.2857 49.0839 67.2857 49.0794V49.0705C67.2857 49.0705 67.2813 49.0705 67.2857 49.0661C67.2769 49.0351 67.268 49.004 67.2502 48.973V48.9463C67.2414 48.9109 67.2369 48.8931 67.2236 48.8621C67.2236 48.8443 67.2192 48.8221 67.2148 48.8088C67.2103 48.7955 67.2059 48.7734 67.2014 48.7556C67.1881 48.6846 67.1704 48.6137 67.1571 48.5383C67.1216 48.3564 67.0994 48.1701 67.0817 47.9794C67.0772 47.9483 67.0772 47.9173 67.0772 47.8862V47.8685C67.0772 47.8685 67.0684 47.864 67.0684 47.8552V47.8463L67.0728 47.8418H67.0684V47.8152C67.0684 47.7886 67.0639 47.7709 67.0639 47.7443V47.6733C67.0639 47.6733 67.0639 47.6378 67.0595 47.6245C67.0462 47.3894 67.0462 47.1366 67.0551 46.8926C67.0551 46.7373 67.0639 46.5732 67.0817 46.418C67.0817 46.418 67.0817 46.415 67.0817 46.4091H67.0861L67.0817 46.4047V46.3603C67.0817 46.3603 67.0906 46.3159 67.0906 46.2982C67.0906 46.245 67.095 46.205 67.1039 46.1518V46.1385C67.1039 46.1385 67.1039 46.103 67.1083 46.0853V46.0675C67.1083 46.0675 67.1127 46.0587 67.1127 46.0542C67.1127 46.0498 67.1172 46.0454 67.1172 46.0409C67.1172 46.0365 67.1127 46.0365 67.1127 46.0365C67.1172 46.0276 67.1172 46.0187 67.1172 46.0054C67.1172 45.9921 67.1216 45.9744 67.126 45.9611V45.9478C67.1349 45.8945 67.1394 45.8457 67.1438 45.7925C67.1527 45.7304 67.1571 45.6683 67.1704 45.6062C67.1748 45.5707 67.1793 45.5441 67.1881 45.5086C67.2059 45.3889 67.2325 45.2691 67.2591 45.1493C67.2547 45.1405 67.2591 45.1227 67.2636 45.1138L67.2769 45.0251C67.2857 44.9852 67.2902 44.9453 67.3035 44.9054V44.8965C67.3035 44.8965 67.3035 44.8921 67.3079 44.8876C67.3079 44.8832 67.3123 44.8832 67.3123 44.8832C67.3123 44.8566 67.3168 44.8433 67.3212 44.8255C67.3212 44.8167 67.3256 44.8078 67.3256 44.7945C67.3256 44.7945 67.3301 44.7856 67.3301 44.7812C67.3301 44.7812 67.3301 44.7767 67.3345 44.7767C67.3345 44.7679 67.3345 44.7634 67.339 44.7501C67.339 44.7501 67.3434 44.7324 67.3478 44.7191C67.3478 44.7102 67.3478 44.7013 67.3523 44.6836C67.3567 44.657 67.3611 44.6303 67.37 44.5993C67.37 44.5904 67.3745 44.5816 67.3789 44.5682C67.3745 44.5638 67.3789 44.5594 67.3833 44.5594C67.3922 44.5195 67.4011 44.4751 67.4144 44.4352V44.4263C67.4144 44.4263 67.4188 44.4086 67.4232 44.3953C67.4321 44.3509 67.441 44.311 67.4632 44.2711C67.4809 44.1956 67.5031 44.1247 67.5253 44.0537V44.0448C67.5253 44.0448 67.5253 44.0404 67.5297 44.0404C67.5297 44.036 67.5297 44.0315 67.5341 44.0315C67.5341 44.0315 67.5356 44.0286 67.5386 44.0227C67.5386 44.0227 67.5386 44.0093 67.543 44.0049C67.5519 43.9694 67.5608 43.9428 67.5741 43.9118C67.5785 43.8851 67.5874 43.863 67.6007 43.8408V43.8319C67.6007 43.8319 67.6051 43.823 67.6051 43.8142H67.6095C67.6095 43.8142 67.6184 43.7876 67.6184 43.7787H67.6228V43.7654V43.7565H67.6317V43.7476C67.6317 43.7476 67.645 43.7121 67.6583 43.6944C67.6761 43.6323 67.7027 43.5702 67.7293 43.5125C67.7382 43.4859 67.747 43.4682 67.7604 43.4416V43.4327C67.7604 43.4327 67.7692 43.4238 67.7692 43.4194L67.7825 43.4061C67.7825 43.4061 67.787 43.3883 67.787 43.3795C67.7914 43.375 67.7914 43.3706 67.7914 43.3662C67.7958 43.3617 67.7958 43.3573 67.7958 43.3573H67.8047V43.344C67.8047 43.344 67.8092 43.3351 67.8092 43.3307C67.8092 43.3307 67.8091 43.3218 67.8136 43.3218C67.8225 43.2952 67.8313 43.2774 67.8491 43.2508C67.8579 43.2242 67.8757 43.2065 67.8846 43.1799C67.9245 43.0956 67.9688 43.0157 68.0088 42.9448C68.0354 42.9093 68.0531 42.8738 68.0709 42.8427C68.0842 42.825 68.0975 42.8028 68.1108 42.7851C68.1374 42.7496 68.164 42.7097 68.1906 42.6742C68.1995 42.6653 68.2084 42.6476 68.2217 42.6387C68.2305 42.6298 68.235 42.6076 68.2527 42.5988C68.2572 42.5899 68.266 42.581 68.2705 42.5677C68.2971 42.5367 68.3193 42.5101 68.3414 42.4834L68.3681 42.4568C68.3681 42.4568 68.4035 42.4169 68.4302 42.3947C68.4346 42.3903 68.439 42.3814 68.4479 42.377C68.4656 42.3504 68.4923 42.3282 68.5189 42.3149C68.5366 42.2971 68.5632 42.275 68.5943 42.2617C68.5987 42.2572 68.5987 42.2528 68.6031 42.2483C68.6209 42.2395 68.6386 42.2217 68.6519 42.2129C68.683 42.1996 68.7007 42.1818 68.7318 42.1685L68.7628 42.1552C68.7939 42.1375 68.8205 42.1241 68.8515 42.1108C68.8826 42.102 68.9092 42.0931 68.9447 42.0842C68.9536 42.0798 68.958 42.0754 68.9713 42.0754C69.0024 42.0709 69.029 42.0665 69.0556 42.0665C69.0867 42.062 69.1088 42.062 69.1399 42.062C69.1532 42.0665 69.1665 42.0665 69.1798 42.0665H69.1842C69.1842 42.0665 69.2109 42.0665 69.2197 42.0709C69.2242 42.0665 69.233 42.0709 69.2375 42.0709C69.2508 42.0709 69.273 42.0753 69.2863 42.0798H69.2907C69.3262 42.0931 69.3617 42.1064 69.3927 42.1197C69.3927 42.1197 69.3942 42.1197 69.3972 42.1197C69.3972 42.1197 69.4016 42.1197 69.406 42.1241C69.4105 42.1241 69.4149 42.1286 69.4193 42.1286C69.4282 42.133 69.4326 42.1375 69.4459 42.1419C69.477 42.1508 69.4992 42.1685 69.5258 42.1818C69.5302 42.1818 69.5347 42.1818 69.5391 42.1862C69.548 42.1907 69.5568 42.1951 69.5702 42.204L69.6722 42.2617L69.721 42.2883C69.721 42.2883 69.7564 42.306 69.7698 42.3193C69.7875 42.3282 69.8052 42.3371 69.823 42.3504L69.8673 42.3814L70.0226 42.4701C70.0226 42.4701 70.0537 42.4834 70.067 42.4967H70.0714C70.0714 42.4967 70.1024 42.5101 70.1157 42.5234C70.1291 42.5322 70.1512 42.5411 70.169 42.5544C70.1778 42.5588 70.1823 42.5633 70.1956 42.5677C70.2222 42.5766 70.2444 42.5943 70.271 42.6076C70.2799 42.6121 70.2976 42.6165 70.3065 42.6254C70.3242 42.6387 70.3508 42.6564 70.3775 42.6697C70.3952 42.6786 70.4174 42.6964 70.4351 42.7097C70.4972 42.754 70.546 42.8117 70.5859 42.8827C70.6259 42.9581 70.6658 43.0335 70.6968 43.1178C70.7101 43.1444 70.7234 43.171 70.7279 43.202C70.7279 43.202 70.7294 43.205 70.7323 43.2109H70.7367V43.2242H70.7412C70.7589 43.2863 70.7811 43.3484 70.7944 43.4105C70.8122 43.4726 70.8299 43.5347 70.8432 43.6013C70.9142 43.8896 70.9408 44.2045 70.9497 44.5283C70.9541 44.5638 70.9541 44.6037 70.9541 44.6392L70.9408 44.6037Z' fill='%23E8D4BA'/%3E%3Cpath d='M69.5661 49.4299C69.7568 49.35 69.9298 49.2702 70.0363 49.2169C70.0319 49.2347 70.0274 49.2524 70.023 49.2702C70.023 49.2879 70.0141 49.3057 70.0097 49.3234C69.9875 49.4077 69.9653 49.4787 69.9476 49.5363C69.9343 49.5851 69.921 49.625 69.9121 49.6516C69.9121 49.6605 69.9121 49.665 69.9077 49.6738C69.9077 49.6827 69.9032 49.6871 69.9032 49.696V49.7093C69.9032 49.7093 69.8943 49.7182 69.8899 49.7226C69.8145 49.8513 69.7391 49.971 69.6548 50.0775C69.6282 50.1085 69.606 50.1396 69.5794 50.1706C69.5439 50.2106 69.5084 50.2505 69.473 50.286C69.473 50.286 69.4508 50.3081 69.433 50.3215L69.4108 50.3436C69.3754 50.3747 69.3399 50.4057 69.3044 50.4323C69.2645 50.4634 69.2246 50.49 69.1802 50.5122C69.1625 50.5211 69.1491 50.5299 69.1314 50.5388L69.0782 50.561C68.9983 50.5965 68.9096 50.6186 68.8253 50.6275C68.781 50.6275 68.7411 50.6275 68.6967 50.6275C68.679 50.6275 68.6568 50.6275 68.6346 50.6186C68.5947 50.6186 68.5503 50.6053 68.5104 50.592C68.4705 50.5832 68.435 50.5654 68.3995 50.5521C68.3906 50.5521 68.3818 50.5432 68.3729 50.5388C68.3729 50.5388 68.3463 50.5255 68.333 50.5211C68.333 50.5211 68.333 50.5211 68.3241 50.5211C68.2842 50.5033 68.2487 50.4856 68.2088 50.459C68.1866 50.4457 68.1644 50.4279 68.1422 50.4146C68.1067 50.3924 68.0668 50.3658 68.0358 50.3348C68.0136 50.317 67.9914 50.2993 67.9692 50.2771C67.9249 50.2372 67.8849 50.1972 67.845 50.1529C67.7874 50.0908 67.7341 50.0198 67.6853 49.9488C67.641 49.8912 67.6011 49.8291 67.5656 49.767C67.539 49.7226 67.5168 49.6783 67.4946 49.6339C67.4724 49.5895 67.4502 49.5408 67.4281 49.492C67.4059 49.4432 67.3837 49.3944 67.366 49.3411C67.2684 49.0883 67.193 48.8089 67.1397 48.5117C67.1043 48.3298 67.0821 48.1479 67.0643 47.9528C66.9667 46.9458 67.0643 45.797 67.3039 44.7812C67.3127 44.7368 67.3216 44.6925 67.3349 44.6481C67.3704 44.5062 67.4103 44.3687 67.4502 44.2311C67.5123 44.0271 67.5744 43.8364 67.6454 43.6501C67.6942 43.5259 67.743 43.4105 67.7962 43.2996C67.8229 43.242 67.8495 43.1887 67.8761 43.1311C67.916 43.0512 67.9604 42.9714 68.0003 42.9004C68.0225 42.8649 68.0402 42.8294 68.0624 42.794C68.0757 42.7762 68.0846 42.754 68.0979 42.7363C68.1245 42.6964 68.1511 42.6609 68.1777 42.621C68.1955 42.5944 68.2132 42.5722 68.2354 42.5456C68.2664 42.5056 68.2975 42.4701 68.3285 42.4347C68.3374 42.4258 68.3418 42.4214 68.3507 42.4125C68.3729 42.3903 68.3951 42.3681 68.4128 42.3459L68.4305 42.3282C68.4749 42.2838 68.5237 42.2439 68.5725 42.2084C68.5947 42.1907 68.6168 42.1774 68.6346 42.1641C68.6612 42.1463 68.6834 42.133 68.71 42.1197C68.7854 42.0754 68.8652 42.0443 68.9495 42.031C68.9761 42.031 69.0028 42.0221 69.0294 42.0177C69.0737 42.0133 69.1137 42.0133 69.1536 42.0177C69.229 42.0266 69.2955 42.0443 69.3665 42.0754C69.3709 42.0754 69.3754 42.0754 69.3798 42.0754C69.4153 42.0887 69.4552 42.1064 69.4863 42.1286C69.504 42.1375 69.5217 42.1463 69.5395 42.1596C69.7214 42.2705 69.881 42.3504 70.0452 42.448C68.9229 42.5322 68.191 44.515 68.1467 45.6018C68.1067 46.5422 68.0801 48.8355 68.4882 49.6162C68.5769 49.7847 69.1181 49.6073 69.5617 49.421L69.5661 49.4299Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M70.8254 43.5614C70.7988 43.5658 70.781 43.5702 70.7544 43.5791C70.6834 43.5969 70.6213 43.6235 70.5592 43.6501C70.4572 43.69 70.3596 43.7432 70.2665 43.8053C70.2576 43.8098 70.2487 43.8142 70.2354 43.8231C70.2044 43.8408 70.1822 43.863 70.1511 43.8807C69.8406 44.1158 69.6055 44.4397 69.437 44.7945C69.2729 45.1272 69.1797 45.4954 69.1353 45.8369V45.8458C69.1353 45.8724 69.1309 45.8946 69.1309 45.9168C69.1265 45.9966 69.122 46.0631 69.1176 46.1385C69.1087 46.418 69.1043 46.7773 69.122 47.1588C69.1309 47.3761 69.1486 47.6023 69.1708 47.8286C69.1886 47.9794 69.2108 48.1346 69.2329 48.2855C69.2462 48.3742 69.264 48.4585 69.2817 48.5427C69.2862 48.5738 69.2906 48.596 69.2995 48.627C69.2995 48.6359 69.2995 48.6536 69.3039 48.6625C69.3305 48.7911 69.3616 48.9065 69.3971 49.0262C69.3971 49.0307 69.4015 49.0351 69.4015 49.0395C69.4015 49.044 69.4015 49.044 69.4059 49.0484C69.4104 49.0661 69.4148 49.0928 69.4237 49.1105C69.4636 49.2214 69.5035 49.3279 69.5567 49.4254C69.5967 49.5142 69.641 49.5896 69.6898 49.6605C69.7253 49.7049 69.7874 49.7226 69.8761 49.7182C69.8672 49.736 69.8495 49.7581 69.8406 49.7714C69.8096 49.8158 69.7874 49.8602 69.7564 49.9045C69.7386 49.9356 69.7209 49.9622 69.7031 49.9888H69.6987C69.6809 50.0243 69.6588 50.0509 69.6366 50.0819C69.6277 50.0952 69.6188 50.113 69.6011 50.1219C69.5922 50.1352 69.5834 50.1529 69.5656 50.1662C69.5301 50.2106 69.4902 50.2505 69.4592 50.286C69.4592 50.286 69.4325 50.3126 69.4192 50.3259C69.4104 50.3303 69.4059 50.3392 69.3926 50.3437L69.3793 50.357C69.3793 50.357 69.3704 50.3614 69.366 50.3658C69.3394 50.3836 69.3128 50.4102 69.2862 50.4279H69.2817C69.2817 50.4279 69.2773 50.4368 69.2729 50.4368C69.2374 50.4679 69.1975 50.49 69.1664 50.5122C69.1575 50.5166 69.1398 50.5255 69.1309 50.53C69.1265 50.53 69.122 50.5344 69.1176 50.5344C69.1132 50.5388 69.1043 50.5388 69.0999 50.5433C69.0865 50.5477 69.0732 50.5521 69.0644 50.5566C69.0466 50.5477 69.0289 50.5433 69.0111 50.5388C68.9402 50.5211 68.8781 50.4945 68.816 50.4634C68.7583 50.4368 68.7051 50.4146 68.6474 50.3836C68.6164 50.3703 68.5942 50.3525 68.5631 50.3348C68.5498 50.3259 68.5277 50.317 68.5143 50.3037C68.5099 50.3037 68.501 50.2993 68.501 50.2949C68.4966 50.2904 68.4922 50.2904 68.4877 50.286C68.4877 50.286 68.4862 50.2845 68.4833 50.2816C68.4079 50.2372 68.3413 50.1884 68.2704 50.1352C68.2083 50.0819 68.1417 50.0243 68.0841 49.9577C68.0087 49.8823 67.9466 49.8069 67.8845 49.7182L67.8756 49.7093C67.8312 49.6517 67.7869 49.5896 67.747 49.523C67.7381 49.5097 67.7292 49.4875 67.7159 49.4742C67.7026 49.4476 67.6848 49.421 67.676 49.3944C67.5828 49.2391 67.503 49.0662 67.4409 48.8843C67.4276 48.8399 67.4054 48.7911 67.3921 48.7468C67.3655 48.6714 67.3477 48.6004 67.33 48.5206C67.3211 48.4806 67.3122 48.4407 67.2989 48.3964C67.2235 48.0947 67.1792 47.7887 67.157 47.4648V47.4294C67.1526 47.3451 67.1481 47.2608 67.1481 47.1765C67.1481 47.1765 67.1437 47.1721 67.1481 47.1676C67.1304 46.52 67.2014 45.8369 67.3477 45.1937C67.3477 45.1937 67.3522 45.176 67.3522 45.1627C67.3522 45.1582 67.3566 45.1494 67.361 45.1361C67.361 45.1316 67.361 45.1228 67.3655 45.1095C67.3965 44.9986 67.4187 44.8788 67.4542 44.7723C67.4542 44.7635 67.4586 44.759 67.4586 44.7457C67.4675 44.7147 67.4764 44.6881 67.4897 44.6526V44.6393C67.4897 44.6393 67.4941 44.626 67.4986 44.6126L67.5119 44.5683L67.5429 44.4796C67.574 44.3909 67.6006 44.3021 67.6316 44.2179C67.6316 44.2134 67.6361 44.209 67.6361 44.2046C67.6494 44.1691 67.6627 44.1336 67.676 44.1025H67.6804V44.0892C67.6804 44.0892 67.6849 44.0848 67.6849 44.0804H67.6893C67.6893 44.0804 67.6937 44.0626 67.6937 44.0537C67.7248 43.9916 67.747 43.9207 67.778 43.863C67.778 43.863 67.7824 43.8541 67.7824 43.8497C67.7913 43.832 67.7958 43.8142 67.8091 43.8009C67.8091 43.7965 67.8135 43.792 67.8135 43.7876C67.8179 43.7743 67.8224 43.761 67.8268 43.7521C67.8312 43.7432 67.8312 43.7388 67.8357 43.7344C67.8357 43.7299 67.8401 43.7255 67.8445 43.7211C67.8889 43.619 67.9377 43.5126 67.9909 43.4194C67.9998 43.4061 68.0042 43.3884 68.022 43.3751C68.0663 43.2819 68.1196 43.1976 68.1728 43.1134C68.5055 42.5944 68.9136 42.2129 69.3616 42.071C69.3616 42.071 69.363 42.071 69.366 42.071C69.366 42.071 69.3704 42.071 69.3749 42.0754C69.3793 42.0754 69.3838 42.0798 69.3882 42.0798C69.3971 42.0843 69.4015 42.0887 69.4148 42.0931C69.4414 42.0976 69.4592 42.1109 69.4858 42.1242C69.4902 42.1242 69.4902 42.1286 69.4946 42.1286C69.4991 42.1331 69.5035 42.1331 69.508 42.1375L69.539 42.1508C69.5745 42.1685 69.6144 42.1952 69.641 42.2129L69.6898 42.2395C69.6898 42.2395 69.7253 42.2573 69.7386 42.2706C69.7563 42.2794 69.7741 42.2883 69.7918 42.3016L69.8362 42.3327L69.9914 42.4214C69.9914 42.4214 70.0225 42.4347 70.0358 42.448H70.0402C70.0402 42.448 70.0713 42.4613 70.0846 42.4746C70.0979 42.4835 70.1201 42.4923 70.1378 42.5057C70.1467 42.5101 70.1511 42.5145 70.1644 42.519C70.1911 42.5278 70.2132 42.5456 70.2398 42.5589C70.2487 42.5633 70.2665 42.5678 70.2753 42.5766C70.302 42.5855 70.3197 42.6032 70.3463 42.6166L70.404 42.6609C70.4661 42.7053 70.5149 42.7629 70.5548 42.8339C70.5947 42.9093 70.6346 42.9847 70.6657 43.069C70.6745 43.1001 70.6923 43.1222 70.7012 43.1533V43.1622H70.7056V43.1755H70.71C70.7278 43.2376 70.75 43.2997 70.7633 43.3618C70.781 43.4239 70.7988 43.486 70.8121 43.5525L70.8254 43.5614Z' fill='%23CEB79B'/%3E%3Cpath d='M68.9361 47.1809C68.9805 47.5446 68.568 47.6644 68.4216 47.9083C68.4438 48.0148 68.4704 48.1079 68.5147 48.1922C68.6478 48.4406 68.8696 48.4539 69.0071 48.1745C69.1979 47.7841 69.4684 47.3095 69.3975 46.8615C69.3309 46.449 68.7543 44.9408 69.2821 44.7456C69.5705 44.6392 70.0673 46.063 70.2491 45.3267C70.3866 44.7589 70.2713 43.6056 69.8987 43.721C69.2378 43.9294 68.9228 44.1202 68.5281 44.9763C68.3817 45.3001 68.4172 45.5751 68.3861 45.8856C68.5857 46.0764 68.8918 46.7905 68.9361 47.1809Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M70.9413 44.6037C70.9457 44.7501 70.9457 44.8965 70.9413 45.0428C70.9324 45.2291 70.9236 45.4066 70.9058 45.5796C70.8969 45.6594 70.8969 45.726 70.8881 45.8058C70.8881 45.8102 70.8881 45.8147 70.8836 45.8191C70.8748 45.9744 70.8526 46.1207 70.8348 46.2494C70.8304 46.2849 70.8304 46.3248 70.8215 46.3558C70.8127 46.4268 70.8038 46.4889 70.7949 46.551L70.7816 46.6397V46.653L70.7772 46.6575C70.7772 46.6663 70.7772 46.6708 70.7728 46.6841C70.7683 46.7196 70.7594 46.7639 70.7461 46.8172C70.7107 46.9414 70.6707 47.0877 70.6219 47.2386C70.5421 47.0744 70.4046 46.9946 70.2538 46.968C70.2183 46.9591 70.1828 46.9547 70.1473 46.9502C70.0231 46.9458 69.9033 46.968 69.788 47.0123H69.7747C69.7747 47.0123 69.7481 47.0256 69.7348 47.0301C69.6993 47.0434 69.6727 47.0611 69.6416 47.0744C69.513 47.1454 69.4154 47.2252 69.371 47.3095V47.3228C69.371 47.3228 69.371 47.3273 69.3666 47.3273C69.3134 47.4293 69.2291 47.3361 69.1315 47.1543C69.0117 46.9369 68.8787 46.5998 68.75 46.3203C68.6879 46.1784 68.617 46.0542 68.5593 45.9699C68.5016 45.8856 68.4484 45.8413 68.3952 45.8768H68.3907C68.3907 45.8768 68.3774 45.7925 68.3641 45.6905C68.3597 45.6417 68.3553 45.5884 68.3553 45.5219C68.3508 45.4376 68.3508 45.34 68.3553 45.2336V45.2247C68.3597 45.1937 68.3597 45.1626 68.3641 45.1271C68.3774 44.9807 68.4085 44.8211 68.4617 44.6614C68.5105 44.4884 68.5815 44.3243 68.6835 44.1468C68.7678 43.9827 68.8787 43.8186 69.0295 43.6589C69.1714 43.5036 69.3089 43.3794 69.4464 43.2907C69.5973 43.1843 69.7525 43.1133 69.89 43.0734C69.8989 43.0689 69.9167 43.0689 69.93 43.0689C69.961 43.0601 69.9876 43.0556 70.0187 43.0512C70.1872 43.0246 70.3336 43.0379 70.4489 43.0645C70.5465 43.0955 70.6264 43.1266 70.6752 43.1488C70.7062 43.1665 70.7195 43.1754 70.7195 43.1754H70.724V43.1843H70.7284C70.7461 43.2419 70.7683 43.304 70.7816 43.3661C70.7994 43.4282 70.8171 43.4903 70.8304 43.5569C70.9014 43.8452 70.928 44.1601 70.9369 44.4839C70.9413 44.5194 70.9413 44.5594 70.9413 44.5948V44.6037Z' fill='%23CEB79B'/%3E%3Cpath d='M68.5952 48.5471C68.5952 48.5471 68.4976 49.0706 69.0565 49.1992C69.6155 49.3278 69.6687 48.5471 69.6687 48.5471H68.5952Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.3' d='M65.7201 33.4344C65.7068 33.7671 65.658 34.1131 65.556 34.4724C65.5471 34.4857 65.5383 34.4901 65.5294 34.5034C65.5205 34.5123 65.5161 34.5212 65.5028 34.53C65.1523 34.9204 64.6866 35.222 64.1543 35.4349C64.0966 35.4571 64.0168 35.4926 63.9236 35.5281C63.7684 35.5857 63.6087 35.6345 63.4357 35.6744C63.3381 35.6966 63.2361 35.7188 63.1296 35.7365C63.3692 35.3728 64.1587 34.1219 64.3539 32.8489C64.5092 31.8375 64.1543 30.112 63.4446 29.0119C63.7462 29.1716 64.0523 29.3446 64.3539 29.5354C64.3672 29.5442 64.3805 29.5531 64.3938 29.562C64.589 29.6862 64.7797 29.8237 64.9749 29.9656C65.2189 30.6931 65.7645 32.3698 65.7201 33.4388V33.4344Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M62.6376 35.7987C62.2695 35.8387 61.8747 35.8653 61.4888 35.883C61.2847 35.8919 61.0807 35.8963 60.8855 35.9008C61.2315 35.333 62.7175 32.8623 62.682 31.3364C62.6598 30.4004 62.682 29.6508 62.3227 28.5063C62.4735 28.564 62.6243 28.6261 62.7751 28.6927C63.4316 29.6508 63.5248 30.5867 63.6179 31.3364C63.8042 32.8357 63.0989 35.0092 62.6376 35.7987Z' fill='%23A05A07'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.6'%3E%3Cpath d='M68.0978 55.1475C68.0357 55.8262 67.9603 56.5048 67.8228 57.1702C67.8006 57.3654 67.7784 57.5472 67.7607 57.7247C67.7518 57.7823 67.7429 57.8444 67.7207 57.9154C67.703 57.9864 67.6764 58.0618 67.6498 58.1416C67.6098 58.2481 67.5566 58.359 67.499 58.4832C67.4945 58.4965 67.4856 58.5054 67.4812 58.5187C67.4058 58.6695 67.3171 58.8336 67.2195 59.0066C67.2018 59.0332 67.1885 59.0598 67.1707 59.0864C67.1707 59.0953 67.1618 59.1042 67.1574 59.1086C66.7981 59.7784 66.3368 60.3906 65.871 60.9983C65.8533 61.0204 65.8355 61.047 65.8178 61.0692C65.7823 61.118 65.7468 61.1668 65.7069 61.2156C65.7069 61.2289 65.7025 61.2467 65.698 61.26C65.6892 61.2999 65.6803 61.3398 65.6714 61.3797C65.6581 61.433 65.6448 61.4862 65.6315 61.5394C65.6049 61.6326 65.5738 61.7257 65.5383 61.8144C65.525 61.8544 65.5073 61.8898 65.4895 61.9298C65.4718 61.9741 65.4541 62.014 65.4319 62.054C65.4097 62.0983 65.3875 62.1427 65.3653 62.187C65.3432 62.2314 65.3166 62.2713 65.2944 62.3157C65.2722 62.3556 65.2456 62.4 65.219 62.4399C65.1923 62.4798 65.1657 62.5242 65.1391 62.5596C65.1036 62.6084 65.0726 62.6572 65.0371 62.706C64.9972 62.7548 64.9573 62.808 64.9173 62.8524L64.8952 62.879C64.8952 62.879 64.8818 62.8968 64.873 62.9056C64.8685 62.9145 64.8597 62.9234 64.8508 62.9278C64.8375 62.9411 64.8286 62.95 64.8197 62.9633C64.7843 62.9988 64.7532 63.0387 64.7177 63.0742C64.6778 63.1185 64.6335 63.1585 64.5935 63.1984C64.5536 63.2383 64.5093 63.2738 64.4693 63.3137C64.3318 63.4379 64.1943 63.5444 64.0701 63.6331C64.0169 63.6686 63.9681 63.7041 63.9237 63.7307C63.9015 63.7484 63.8749 63.7617 63.8572 63.775C63.8128 63.8061 63.7685 63.8327 63.7285 63.8549C63.5689 63.9968 63.4358 64.161 63.3781 64.3872C63.3781 64.396 63.3693 64.4005 63.3693 64.4094C63.3471 64.6001 63.316 64.7775 63.2805 64.9461C63.2761 64.9683 63.2717 64.9949 63.2628 65.0215C63.2628 65.0215 63.2628 65.0304 63.2628 65.0348C63.2584 65.0614 63.2495 65.088 63.2451 65.1146C63.2317 65.1767 63.2184 65.2344 63.2007 65.2965C63.183 65.3675 63.1608 65.4385 63.1386 65.505C63.1253 65.5493 63.1164 65.6425 63.0809 65.6735C63.0721 65.6913 63.0676 65.7135 63.0587 65.7357C63.0454 65.7711 63.0366 65.8066 63.0233 65.8377C63.0144 65.8599 63.0055 65.8776 63.0011 65.8998C62.9922 65.9131 62.9878 65.9308 62.9789 65.9486C62.97 65.9663 62.9656 65.9841 62.9567 66.0018C62.9567 66.0062 62.9479 66.0151 62.9479 66.0195C62.9479 66.024 62.9434 66.0328 62.939 66.0373C62.9124 66.0994 62.8858 66.1615 62.8547 66.2236C62.8414 66.2458 62.8325 66.2679 62.8237 66.2857C62.8237 66.2946 62.8148 66.3034 62.8103 66.3079C62.797 66.33 62.7882 66.3522 62.7749 66.3744C62.766 66.3921 62.7527 66.4143 62.7438 66.4321C62.7216 66.4809 62.695 66.5208 62.6728 66.5607C62.6595 66.5829 62.6462 66.6051 62.6329 66.6272L62.6152 66.6539C62.6152 66.6539 62.5974 66.6849 62.5886 66.7026C62.5575 66.7514 62.5265 66.7958 62.491 66.8402C62.4865 66.849 62.4821 66.8535 62.4777 66.8623C62.4777 66.8623 62.4732 66.8712 62.4688 66.8756C62.4688 66.8756 62.4688 66.8801 62.4688 66.8845C62.4511 66.9067 62.4333 66.9333 62.42 66.9555C62.42 66.9555 62.4156 66.9599 62.4111 66.9644L62.3978 66.9821C62.3978 66.9821 62.3756 67.0087 62.3668 67.022C62.3668 67.0309 62.3535 67.0398 62.349 67.0442C62.3313 67.0708 62.3135 67.093 62.2869 67.1196C62.2736 67.1329 62.2648 67.1462 62.2514 67.1595C62.2337 67.1817 62.216 67.1995 62.2026 67.2172C62.1672 67.2571 62.1317 67.297 62.0962 67.337C62.0962 67.337 62.0917 67.3414 62.0873 67.3458C62.074 67.3591 62.0651 67.3724 62.0518 67.3813C62.0474 67.3858 62.0385 67.3946 62.0341 67.3991L61.9498 67.4833C61.8611 67.5765 61.7679 67.6608 61.6703 67.7362C61.6925 67.785 61.7103 67.8382 61.728 67.8959C61.8478 68.2862 61.8833 68.7741 61.7901 69.1645C61.7901 69.1734 61.7901 69.1822 61.7812 69.1911C61.7458 69.2089 61.7147 69.2266 61.6792 69.2443C61.3554 69.404 61.0139 69.5105 60.6546 69.5415H60.6501C60.384 69.5637 60.109 69.5415 59.8295 69.4617C59.5412 69.3818 59.4303 69.1113 59.4613 68.6943C59.4613 68.681 59.4613 68.6633 59.4613 68.6499C59.4613 68.6455 59.4613 68.6366 59.4613 68.6322V68.6233C59.4835 68.3971 59.5456 68.131 59.6388 67.8382C59.661 67.7761 59.6787 67.7184 59.7009 67.6563C59.7763 67.439 59.865 67.2083 59.9715 66.9644C60.0824 66.7026 60.211 66.4276 60.3485 66.1393C60.455 65.9175 60.5703 65.6913 60.69 65.4606C61.8522 63.2561 63.6221 60.568 65.1569 58.4832C65.1879 58.4388 65.219 58.3945 65.2545 58.3501C66.5719 56.5669 67.6941 55.2539 68.0623 55.1342C68.0756 55.1342 68.0845 55.1253 68.0978 55.1253V55.1475Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M57.6736 50.8449C57.301 50.8449 56.9106 50.4989 56.64 50.2017C56.2231 49.7404 55.8239 49.869 55.8061 49.8735C55.7174 49.9045 55.611 49.8557 55.5799 49.7626C55.5489 49.6694 55.5932 49.5719 55.6864 49.5364C55.713 49.5275 56.3162 49.3146 56.9018 49.9578C57.2699 50.3614 57.5494 50.4945 57.6913 50.4856C57.8909 50.4679 58.1926 50.3126 58.3434 50.1485C58.6051 49.8602 59.062 49.5275 59.4967 49.5275C59.5943 49.5275 59.6741 49.6073 59.6741 49.7049C59.6741 49.8025 59.5943 49.8824 59.4967 49.8824C59.2394 49.8824 58.8757 50.0908 58.6051 50.388C58.4232 50.5921 58.0417 50.8139 57.7224 50.8405C57.7046 50.8405 57.6913 50.8405 57.6736 50.8405V50.8449Z' fill='%23CEB79B'/%3E%3Cpath d='M68.4922 50.5654C68.4922 50.7472 68.4922 50.9335 68.4833 51.1154C68.4833 51.1154 68.4833 51.1154 68.4833 51.1198C68.4833 51.1198 68.4833 51.1198 68.4833 51.1243C68.1152 54.5221 68.3414 58.3146 65.8707 60.9938C65.4404 62.1294 64.8549 63.2472 63.7282 63.8549C63.36 64.1255 63.3334 64.609 63.2625 65.0259C63.1205 65.6913 62.8544 66.3301 62.464 66.8845C61.2752 68.7875 58.9952 68.7919 57.0036 68.6056C54.0627 68.7298 52.4835 66.7115 51.8226 64.0678C50.7181 64.3606 50.1281 62.5463 49.6801 61.7213C47.0409 62.9367 46.5174 52.9873 46.4066 51.2973C46.4199 51.0311 46.4509 50.7383 46.4686 50.4766C46.9743 47.3184 47.032 44.1912 47.5332 41.0107C47.6574 40.3498 47.3602 38.9525 47.3114 38.2872C47.3602 38.2384 47.4135 38.1851 47.4534 38.1319C47.826 37.6972 48.0034 37.0673 48.2829 36.6104C48.0345 38.7219 47.1251 40.891 47.9236 42.9802C47.7151 43.1221 47.5155 43.5036 47.3203 43.8363C47.3203 43.8363 47.307 43.8674 47.2981 43.8807C47.3026 43.8762 47.3203 43.8629 47.3292 43.8585C47.3292 43.8585 47.8792 43.4681 47.9147 43.4415C47.9147 43.7387 47.9147 44.0315 47.9147 44.3198C47.8038 44.4129 47.6574 44.7811 47.6308 44.9231C47.6441 44.9142 47.9058 44.7323 47.9191 44.719C48.1587 46.6042 47.7994 51.071 50.1326 51.5767C49.9285 52.4905 50.1326 52.8897 50.8822 53.6393C51.0153 52.2421 51.8492 50.9025 54.4442 51.0134C54.2091 51.1819 53.8808 51.5767 54.0671 51.9493C54.2046 51.7852 55.2115 50.7029 55.7882 51.0843C57.8242 51.8429 60.7429 50.1085 61.3773 51.9493C61.5724 51.7497 61.8297 51.3061 61.3906 51.0134C62.7124 50.9956 64.5399 51.4259 64.4424 53.4486C65.7598 52.7921 66.1413 52.0513 65.9416 51.0134C67.503 50.9113 66.9441 45.9921 67.0772 44.719C67.157 44.7767 67.2813 44.8654 67.3655 44.9231C67.3345 44.7545 67.1925 44.4174 67.0816 44.3198C67.0816 44.027 67.0816 43.7387 67.0816 43.4415C67.1083 43.4593 67.5075 43.7476 67.5385 43.7653C67.5829 43.7964 67.6583 43.8496 67.6982 43.8807C67.5208 43.579 67.2946 43.1354 67.0728 42.9846C67.8801 40.7978 66.9574 38.7707 66.7135 36.6149C66.9929 37.0718 67.1704 37.6972 67.543 38.1363C67.5829 38.1896 67.6361 38.2428 67.6849 38.2916C67.5607 39.3784 67.3079 40.5893 67.543 41.6716C68.0132 44.4573 67.991 47.2962 68.4833 50.0907C68.4967 50.246 68.4967 50.4012 68.5011 50.5609L68.4922 50.5654Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M68.5013 50.6808C68.4924 50.8183 68.4835 50.9602 68.4702 51.0933C68.1597 53.5551 68.2041 56.1589 67.4766 58.5188C66.9975 59.468 66.3455 60.3552 65.7067 61.2201C65.6047 61.7613 65.3696 62.2714 65.0414 62.7105C64.6865 63.1763 64.2163 63.5755 63.7239 63.8683C63.2271 64.2542 63.3513 64.9861 63.134 65.5228C62.9876 66.0063 62.7569 66.4809 62.4597 66.8935C62.238 67.2173 61.9629 67.5056 61.6613 67.754C60.5657 68.6456 59.6075 68.8275 58.2369 68.65C56.9638 68.4726 55.5178 68.7565 54.3645 68.1532C54.187 68.0512 54.0274 67.9137 53.8677 67.7851C52.7942 66.8003 52.2353 65.3897 51.7962 64.0457C50.7893 64.6401 49.7823 61.8234 49.6759 61.7347C46.9745 62.7017 46.5309 53.147 46.389 51.3062C46.4023 51.0401 46.4333 50.7473 46.4511 50.4856C46.9567 47.3273 47.0144 44.2001 47.5157 41.0197C47.6399 40.5362 47.3737 39.1212 47.3338 38.6199C47.6177 38.0255 47.906 37.5819 48.0479 37.1428C48.2076 37.9501 47.8483 38.7175 47.7241 39.5204C47.356 40.6204 47.6487 41.9334 47.906 42.9803C47.6975 43.1222 47.4979 43.5037 47.3027 43.8364C47.3027 43.8364 47.2894 43.8674 47.2806 43.8807C47.285 43.8763 47.3027 43.863 47.3116 43.8586C47.3116 43.8586 47.8616 43.4682 47.8971 43.4416C47.8971 43.7388 47.8971 44.0315 47.8971 44.3199C47.7862 44.413 47.6399 44.7812 47.6133 44.9231C47.6266 44.9143 47.8883 44.7324 47.9016 44.7191C47.9903 46.6664 48.0879 49.1371 48.9883 50.9025C48.1633 52.8587 48.1455 55.4847 49.0549 57.5739C49.5206 58.6252 50.0662 59.4902 50.7493 60.4217C50.9268 60.0713 50.7493 59.3261 50.8735 58.8426C54.5685 63.2783 59.4257 64.476 59.958 57.2723C61.1512 58.7095 62.3267 57.9199 62.8767 56.4384C64.203 57.3255 64.2341 53.2446 64.274 52.4728C64.3671 52.739 64.4248 53.0628 64.4248 53.4531C65.7422 52.7966 66.1237 52.0558 65.9241 51.0179C65.9241 51.0622 66.4697 50.8538 66.554 50.6763C66.6382 50.5654 66.6915 50.4279 66.7403 50.2993C66.9931 49.4299 67.0064 48.5028 67.0463 47.5979C67.0463 47.5979 67.0463 47.5979 67.0463 47.5935C67.0685 46.6664 67.0685 45.6639 67.0685 44.7324C67.1483 44.7901 67.2726 44.8788 67.3524 44.9364C67.3169 44.7634 67.1883 44.4396 67.0729 44.3332C67.0729 44.0449 67.0729 43.7477 67.0729 43.4549C67.0907 43.4682 67.481 43.7477 67.4988 43.7565C67.552 43.7965 67.6363 43.8541 67.6895 43.894C67.6806 43.8807 67.6762 43.8674 67.6673 43.8586C67.6274 43.7831 67.5786 43.7122 67.5387 43.6368C67.3834 43.3662 67.2326 43.1178 67.0641 42.998C67.8536 40.8422 66.9709 38.8107 66.7048 36.6726C66.7048 36.6637 66.6959 36.5972 66.7225 36.6371C66.9221 37.023 67.0774 37.4622 67.3213 37.8392C67.379 37.9501 67.4633 38.061 67.5387 38.1586C67.5786 38.2118 67.6274 38.2651 67.6762 38.3094C67.6052 38.8861 67.4943 39.8264 67.4234 40.4075C67.4234 41.3169 67.6318 42.2218 67.7472 43.1133C67.898 44.0449 67.9867 44.9941 67.9645 45.97C67.9379 47.5802 68.5589 49.1016 68.4746 50.6985C68.4791 50.6985 68.4879 50.6896 68.4924 50.6852L68.5013 50.6808Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M68.4923 50.5653C68.3593 53.0405 68.031 55.4757 67.7205 57.9109C67.308 59.1263 66.4563 60.1776 65.7067 61.2156C65.5071 62.3423 64.6909 63.2915 63.7283 63.8593C63.3557 64.1254 63.3468 64.6267 63.2626 65.0303C63.1206 65.6957 62.8545 66.3344 62.4641 66.8889C62.2423 67.2083 61.9718 67.501 61.6657 67.7494C60.5789 68.6455 59.6075 68.8229 58.2457 68.6455C56.9726 68.468 55.5266 68.7519 54.3733 68.1487C54.1959 68.0466 54.0362 67.9224 53.8809 67.7849C57.7622 66.2723 60.7475 62.8524 61.404 58.7138C61.8209 60.7232 60.9249 62.95 60.3039 64.6355C62.3932 61.9608 64.6554 59.0908 64.9038 55.5733C65.4893 56.4249 65.0191 57.7779 65.2276 58.5231C66.2567 53.9542 67.2326 49.4386 67.0995 44.7101C67.1793 44.7633 67.3035 44.8565 67.3834 44.9141C67.339 44.7411 67.2193 44.4218 67.1039 44.3109C67.1039 44.0225 67.1039 43.7298 67.1039 43.4282C67.2237 43.5124 67.5697 43.7653 67.685 43.8451L67.7205 43.8717C67.6673 43.783 67.6185 43.6943 67.5653 43.6056C67.4144 43.3439 67.2592 43.091 67.0951 42.9757C67.8314 40.7844 66.9709 38.7706 66.7092 36.6193C66.9886 37.0761 67.166 37.7016 67.5386 38.1407C67.5786 38.194 67.6318 38.2472 67.6806 38.296C67.5564 39.3827 67.3035 40.5937 67.5386 41.676C68.0088 44.4617 67.9866 47.3006 68.479 50.0951C68.4923 50.2504 68.4923 50.4056 68.4968 50.5653H68.4923Z' fill='%23A05A07'/%3E%3Cpath d='M60.8098 65.6559C60.8009 65.3942 60.3928 65.3942 60.4017 65.6559C60.4239 66.2636 60.1444 66.8491 59.7275 67.2794C59.377 67.6431 58.8758 67.8117 58.4056 67.9803C58.9202 67.4613 59.2306 66.8802 59.244 66.1084C59.244 65.8466 58.8403 65.8466 58.8359 66.1084C58.8181 66.8669 58.4677 67.3859 57.9221 67.8782C57.7535 68.029 57.9398 68.2597 58.1217 68.2198C58.1084 68.3529 58.2104 68.4904 58.3701 68.4327C59 68.1976 59.6254 67.9891 60.1001 67.4923C60.557 67.0177 60.8408 66.3168 60.8187 65.6603H60.8142L60.8098 65.6559Z' fill='%23995A07'/%3E%3Cpath d='M57.2254 67.7141C56.5778 67.7451 55.9923 66.787 55.9657 66.2103C55.9523 65.9486 55.5443 65.9486 55.5576 66.2103C55.5842 66.8136 56.0233 67.6298 56.6222 67.9669C56.3871 67.8737 56.1386 67.8338 55.908 67.7141C55.5753 67.5411 55.3047 67.2927 55.0563 67.0132C54.5861 66.4853 54.1426 65.7091 54.249 64.9728C54.2889 64.7155 53.8941 64.6046 53.8542 64.8663C53.73 65.6913 54.1159 66.4676 54.6039 67.1064C54.8345 67.408 55.1051 67.6697 55.4156 67.8959C55.5797 68.0113 55.766 68.1177 55.9523 68.1887C56.1165 68.2508 56.3028 68.2685 56.458 68.3395C56.6798 68.4371 56.8705 68.1443 56.7109 68.0157C56.875 68.0911 57.0435 68.131 57.221 68.1221C57.4827 68.1088 57.4827 67.7007 57.221 67.7141H57.2254Z' fill='%23995A07'/%3E%3Cpath d='M58.6365 54.6551C58.5034 54.8192 58.0643 54.7527 57.8824 54.7394C57.6251 54.7261 57.3457 54.6995 57.1017 54.6019C56.8622 54.5087 56.7557 54.8947 56.9952 54.9878C57.3146 55.1164 57.7005 55.1342 58.0421 55.1475C58.3082 55.1564 58.7296 55.1652 58.9204 54.9346C59.0845 54.735 58.805 54.4511 58.6365 54.6507V54.6551Z' fill='%23995A07'/%3E%3Cpath d='M60.8053 52.8631C60.415 53.1115 59.7984 53.1337 59.3548 53.1869C58.8624 53.249 58.3612 53.2313 57.8688 53.2224C56.8397 53.2047 55.8106 53.1426 54.7948 52.9563C54.542 52.9075 54.4356 53.2934 54.6884 53.3422C55.8018 53.5507 56.9196 53.6083 58.0507 53.6261C58.5697 53.6349 59.0798 53.6261 59.5943 53.5551C60.0512 53.4886 60.6101 53.462 61.0094 53.2047C61.2267 53.0672 61.0271 52.7167 60.8053 52.8587V52.8631Z' fill='%23995A07'/%3E%3Cpath d='M61.4 68.6234V68.6323C61.2846 68.7743 61.1427 68.9118 60.9874 69.1202C60.9786 69.1336 60.9697 69.1424 60.9608 69.1557C60.8987 69.24 60.8366 69.3332 60.7745 69.4396C60.7923 69.4662 60.81 69.4929 60.8278 69.5195C60.8499 69.555 60.8721 69.5949 60.8943 69.6348C60.912 69.6658 60.9298 69.6969 60.9475 69.728C60.952 69.7324 60.9564 69.7368 60.9564 69.7457C60.9697 69.7767 60.9874 69.8078 61.0008 69.8388C61.0141 69.8699 61.0229 69.8965 61.0362 69.9231C61.0362 69.9276 61.0407 69.932 61.0451 69.9364C61.0584 69.9675 61.0717 69.9985 61.0806 70.0296V70.0385C61.0806 70.0385 61.0895 70.0384 61.0895 70.0473L61.1117 70.105C61.1117 70.105 61.1117 70.1094 61.1117 70.1139C61.1117 70.1139 61.1205 70.1405 61.125 70.1493V70.1671H61.1338V70.1804C61.1427 70.207 61.1516 70.2336 61.156 70.2558V70.2647L61.1826 70.3667C61.1915 70.4066 61.2004 70.4421 61.2092 70.482C61.2092 70.482 61.2137 70.5131 61.2181 70.5264L61.227 70.5885C61.227 70.5885 61.2359 70.6284 61.2359 70.6506L61.2447 70.7349V70.7437V70.7526C61.2447 70.7748 61.2492 70.8014 61.2536 70.8236C61.2536 70.8546 61.258 70.8901 61.2625 70.9212C61.2625 70.9433 61.2625 70.9611 61.2625 70.9833C61.2625 71.0188 61.2625 71.0542 61.2625 71.0897V71.1075C61.2625 71.1075 61.2625 71.1474 61.2625 71.1696C61.2625 71.7861 61.1028 72.4027 60.779 72.8995C61.3334 73.454 61.4798 74.6605 61.2004 75.4501C61.1871 75.49 61.1738 75.5255 61.156 75.561C61.1427 75.5965 61.125 75.6319 61.1072 75.663C61.0939 75.694 61.0762 75.7207 61.0628 75.7473C61.0407 75.7828 61.0185 75.8182 60.9963 75.8493C60.9786 75.8715 60.9653 75.8937 60.9475 75.9114C60.9298 75.9291 60.9165 75.9469 60.8987 75.9646C60.881 75.9824 60.8632 76.0001 60.8455 76.0134C60.8278 76.0267 60.8056 76.0445 60.7878 76.0578C60.7346 76.0977 60.6769 76.1288 60.6148 76.1509H60.6104C60.8588 77.0381 60.7657 77.8365 60.4995 78.493C60.4685 78.5684 60.4374 78.6438 60.4019 78.7192C60.3931 78.737 60.3842 78.7503 60.3798 78.768C60.3709 78.7858 60.362 78.7991 60.3531 78.8168C60.3354 78.8479 60.3221 78.8789 60.3043 78.91C60.3043 78.91 60.291 78.9366 60.2822 78.9499C60.2733 78.9676 60.26 78.9854 60.2511 79.0031C60.2289 79.0342 60.2156 79.0608 60.1979 79.0918C60.1624 79.1495 60.1225 79.2072 60.0826 79.2604C60.0426 79.3181 60.0027 79.3713 59.9628 79.4245C59.8918 79.5132 59.8208 79.5931 59.7454 79.6685C59.7366 79.6818 59.7233 79.6907 59.7144 79.704C59.6922 79.7306 59.6656 79.7483 59.639 79.775C59.6212 79.7927 59.6035 79.8104 59.5857 79.8282C59.5769 79.8371 59.5636 79.8504 59.5503 79.8592C59.5192 79.8903 59.4837 79.9169 59.4482 79.9435C59.4261 79.9657 59.4039 79.979 59.3817 79.9967C59.3728 80.0056 59.3595 80.0145 59.3507 80.0234C59.3373 80.0322 59.3285 80.0411 59.3152 80.05C59.3063 80.0544 59.3019 80.0588 59.293 80.0633L59.2841 80.0721C59.2619 80.0899 59.2353 80.1032 59.2131 80.1209L59.1821 80.1431C59.1821 80.1431 59.151 80.1653 59.1377 80.1697C59.12 80.1786 59.1067 80.1919 59.0845 80.2008C59.0756 80.2008 59.0668 80.2097 59.0623 80.2141C59.0535 80.2185 59.0446 80.223 59.0401 80.2274C59.0091 80.2451 58.9825 80.2584 58.9559 80.2718C58.9071 80.2939 58.8627 80.3161 58.8139 80.3339C58.7607 80.356 58.7075 80.3693 58.6542 80.3871C58.6232 80.396 58.5966 80.4004 58.57 80.4048H58.5611C58.5611 80.4048 58.5167 80.4137 58.4946 80.4137H58.4857C58.4857 80.4137 58.4768 80.4137 58.4679 80.4137C58.4502 80.4137 58.4324 80.4137 58.4147 80.4137C58.3703 80.4137 58.326 80.4137 58.2905 80.4048C58.2861 80.4048 58.2816 80.4048 58.2728 80.4048C58.2284 80.396 58.184 80.3871 58.1397 80.3826C58.0731 80.3738 58.0066 80.3738 57.9489 80.3826H57.9312C57.9312 80.3826 57.8913 80.3827 57.8735 80.3915C57.8558 80.3915 57.8381 80.3915 57.8203 80.4004C57.8159 80.4004 57.8114 80.4004 57.8026 80.4004C57.7937 80.4004 57.7893 80.4004 57.7804 80.4004C57.7582 80.4048 57.7316 80.4093 57.7094 80.4137H57.6828C57.6828 80.4137 57.6606 80.4226 57.6473 80.427C57.6163 80.4314 57.5852 80.4359 57.5542 80.4403H57.5497C57.5497 80.4403 57.5364 80.4403 57.5275 80.4403C57.5054 80.4403 57.4876 80.4447 57.4699 80.4447C57.4566 80.4447 57.4477 80.4447 57.4344 80.4447C57.4033 80.4447 57.3723 80.4448 57.3413 80.4359C57.3324 80.4359 57.3191 80.4359 57.3102 80.427C57.288 80.4226 57.2658 80.4181 57.2437 80.4048C57.2126 80.396 57.186 80.3827 57.1549 80.3649L57.1017 80.3339C57.0751 80.3161 57.0485 80.2984 57.0219 80.2762C56.9686 80.2363 56.911 80.183 56.8489 80.1209C56.7956 80.0677 56.7424 80.01 56.6892 79.9568C56.6892 79.9524 56.6803 79.9479 56.6759 79.9435C56.6626 79.9302 56.6493 79.9169 56.636 79.9036C56.6049 79.8637 56.5694 79.8326 56.5384 79.7927L56.5339 79.7838C56.4985 79.7483 56.4674 79.7084 56.4364 79.6729C56.3698 79.5931 56.3077 79.5177 56.2456 79.4378C56.2101 79.3935 56.1746 79.3447 56.1392 79.2959C56.0682 79.2027 56.0061 79.1051 55.944 79.0031C55.598 78.4531 55.354 77.8321 55.2298 77.047C55.221 77.007 55.2165 76.9627 55.2121 76.9183C55.2032 76.8651 55.1988 76.8163 55.1899 76.7675C55.1855 76.7098 55.181 76.6566 55.1722 76.6034C55.1722 76.5723 55.1633 76.5368 55.1633 76.5014C55.1633 76.4614 55.1544 76.426 55.1544 76.386C55.1544 76.3505 55.15 76.3106 55.1455 76.2707C55.1455 76.2707 55.1234 76.2308 55.1145 76.2086C55.1101 76.1997 55.1056 76.1864 55.0968 76.1775C55.0923 76.1687 55.0879 76.1554 55.079 76.1465C55.0613 76.1154 55.048 76.0888 55.0302 76.0578C55.0302 76.0489 55.0213 76.0445 55.0213 76.0356C55.0125 76.0223 55.008 76.009 54.9992 75.9957C54.9859 75.9735 54.9725 75.9513 54.9637 75.9247C54.9548 75.9158 54.9504 75.8981 54.9415 75.8848C54.9326 75.8715 54.9282 75.8537 54.9193 75.8449C54.906 75.8183 54.8927 75.7916 54.8794 75.7606C54.8705 75.734 54.8572 75.7029 54.8439 75.6719C54.8217 75.6275 54.8084 75.5787 54.7907 75.5299C54.7907 75.5211 54.7818 75.5077 54.7818 75.4989C54.7818 75.4944 54.7818 75.49 54.7774 75.4811C54.7596 75.4235 54.7419 75.3658 54.7286 75.3037C54.7286 75.2948 54.7242 75.2815 54.7197 75.2727C54.7064 75.1972 54.6931 75.1218 54.6842 75.042V75.0331C54.6842 74.9976 54.6754 74.9621 54.6754 74.9222C54.6754 74.8823 54.6754 74.8379 54.6754 74.798V74.767C54.6754 74.4254 54.7596 74.0395 54.9726 73.5959C54.9859 73.5649 54.9992 73.5383 55.0125 73.5117C55.0258 73.4806 55.0435 73.454 55.0568 73.4274C55.0701 73.3963 55.0879 73.3697 55.1056 73.3387C55.1234 73.3076 55.1411 73.281 55.1589 73.2499C55.1411 73.21 55.1234 73.1701 55.1056 73.1346C55.1056 73.1257 55.0968 73.1169 55.0968 73.108C55.0746 73.0548 55.0524 73.006 55.0302 72.9527C55.0258 72.9394 55.0213 72.9261 55.0169 72.9128C55.008 72.8906 54.9992 72.8685 54.9903 72.8463V72.8285C54.9681 72.7842 54.9548 72.7443 54.9415 72.7043C54.9238 72.66 54.9104 72.6112 54.8971 72.5624C54.8883 72.5402 54.8794 72.5136 54.875 72.4914C54.875 72.4781 54.8661 72.4692 54.8661 72.4559L54.8439 72.3805C54.835 72.3495 54.8262 72.3229 54.8217 72.2963C54.8217 72.2918 54.8217 72.2874 54.8217 72.2829C54.8129 72.2563 54.8129 72.2297 54.804 72.2075C54.7996 72.1854 54.7907 72.1587 54.7862 72.1366C54.6487 71.5244 54.631 70.8946 54.7996 70.349V70.3401C54.8306 70.2336 54.8705 70.1316 54.9193 70.034V70.0251C54.9193 70.0251 54.9238 70.0251 54.9238 70.0207C54.9238 70.0118 54.9282 70.0074 54.9326 69.9985C54.9326 69.9985 54.9371 69.9852 54.9415 69.9764C54.9592 69.9364 54.9814 69.8965 54.9992 69.861C54.9859 69.8255 54.9726 69.7901 54.9592 69.7546C54.8883 69.5594 54.8439 69.3997 54.8217 69.2622C54.804 69.1735 54.7996 69.0892 54.7996 69.0049V68.996C54.7996 68.9384 54.7996 68.8807 54.8129 68.8231C54.8173 68.761 54.8306 68.6989 54.8439 68.6368V68.6279H61.4V68.6234Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M59.9621 72.4825C59.9621 72.4825 59.9266 72.4958 59.9133 72.5002C59.8113 72.7442 59.6915 72.9881 59.5629 73.2232C59.554 73.2587 59.5319 73.2853 59.5141 73.3164C59.5097 73.3297 59.5052 73.3474 59.4964 73.3563C59.5097 73.3519 59.523 73.3386 59.5319 73.3208C59.5452 73.312 59.5629 73.2942 59.5762 73.2809C59.6117 73.2499 59.6383 73.2232 59.6694 73.1922H59.6738L59.6827 73.1789H59.6871C59.8113 72.9394 59.9266 72.6954 60.0242 72.4514C59.9976 72.4647 59.9799 72.478 59.9621 72.4825ZM58.5604 75.2016C58.5338 75.0641 58.5693 74.9266 58.6403 74.7979C58.5427 74.9221 58.4451 75.0419 58.3386 75.1617C58.312 75.1794 58.2943 75.2016 58.281 75.2193C58.281 75.2193 58.2987 75.2282 58.312 75.2282C58.4096 75.2593 58.5072 75.2814 58.6048 75.308C58.6004 75.308 58.6003 75.3036 58.6003 75.3036C58.587 75.2726 58.5693 75.2415 58.5604 75.2016ZM61.3372 74.1991C61.3328 74.0882 61.3195 73.9729 61.2884 73.862C61.2086 73.5382 61.0799 73.2543 60.9114 73.0236C60.8759 72.9837 60.8404 72.9482 60.8049 72.9127C60.8892 72.7885 60.9557 72.651 61.0178 72.518C61.0444 72.447 61.0711 72.3804 61.0977 72.3095C61.1154 72.2385 61.142 72.1631 61.1687 72.0966C61.213 71.9457 61.2441 71.7949 61.2574 71.6441C61.2884 71.4933 61.2973 71.3425 61.2973 71.1828H61.2884V70.992C61.2884 70.992 61.284 70.9477 61.284 70.9344C61.2751 70.9033 61.2751 70.8634 61.2751 70.8368C61.2751 70.8102 61.2707 70.7924 61.2707 70.7658C61.2707 70.7614 61.2662 70.7614 61.2662 70.7614C61.2662 70.7614 61.2662 70.7525 61.2618 70.7525V70.7215C61.2618 70.7215 61.2618 70.7082 61.2574 70.6949V70.6549C61.2574 70.6549 61.2485 70.6106 61.2485 70.5973C61.2441 70.584 61.2441 70.5706 61.2396 70.5618C61.2352 70.5529 61.2352 70.544 61.2352 70.5352C61.2352 70.5219 61.2263 70.4997 61.2263 70.4952V70.4864C61.2263 70.4864 61.2174 70.4509 61.213 70.4331L61.1997 70.3755C61.1997 70.3755 61.1953 70.3577 61.1953 70.3444C61.1953 70.3444 61.1908 70.3267 61.1908 70.3178C61.1864 70.3045 61.182 70.2823 61.182 70.269H61.1731V70.2601C61.1731 70.2601 61.1687 70.2335 61.1642 70.2202C61.1598 70.2069 61.1553 70.1936 61.1509 70.1847V70.1759C61.1509 70.1759 61.1553 70.1759 61.1509 70.1714C61.1509 70.167 61.1509 70.1581 61.1465 70.1537C61.1376 70.1404 61.1376 70.1359 61.1332 70.1182V70.1093C61.1243 70.0827 61.1199 70.0694 61.1066 70.0517C61.1066 70.0517 61.0977 70.0206 61.0977 70.0117C61.0932 70.0073 61.0932 69.9984 61.0888 69.994C61.0844 69.9851 61.0844 69.9763 61.0799 69.9674L61.0666 69.9363L61.0533 69.892C61.0533 69.892 61.0444 69.8654 61.0356 69.8521C61.0356 69.8476 61.0312 69.8432 61.0312 69.8388H61.0267C61.0267 69.8388 61.0178 69.8121 61.0134 69.8033C61.0134 69.8033 61.0104 69.8003 61.0045 69.7944C61.0045 69.7944 61.009 69.7944 61.0045 69.79C61.0045 69.7855 61.0001 69.7766 61.0001 69.7722C60.9957 69.7678 60.9957 69.7589 60.9912 69.7545H60.9868C60.9868 69.7545 60.9868 69.7367 60.9779 69.7279L60.9336 69.6347C60.9336 69.6347 60.9247 69.6214 60.9158 69.6037C60.9069 69.5859 60.8892 69.5637 60.8803 69.5504V69.5416H60.8759L60.8626 69.5238H60.8582C60.8448 69.4972 60.8271 69.4706 60.8138 69.444C60.8315 69.4085 60.8537 69.373 60.8759 69.3464C60.8848 69.3286 60.9025 69.3065 60.9114 69.2887C60.9202 69.2798 60.9291 69.2621 60.938 69.2532C60.9424 69.2488 60.9469 69.2399 60.9469 69.2355C60.9557 69.2266 60.9602 69.2177 60.9735 69.2C60.9824 69.1867 60.9868 69.1689 61.0001 69.1556H61.0045C61.0045 69.1556 61.0223 69.129 61.0312 69.1202H61.04V69.1113C61.04 69.1113 61.0533 69.0935 61.0578 69.0847C61.0666 69.0714 61.0755 69.0581 61.0844 69.0492C61.0932 69.0447 61.0977 69.0403 61.1021 69.0359C61.1021 69.0359 61.1036 69.0329 61.1066 69.027H61.111C61.111 69.027 61.111 69.0226 61.1154 69.0181C61.1199 69.0137 61.1243 69.0093 61.1243 69.0004H61.1287C61.1287 69.0004 61.1376 68.9871 61.1376 68.9738H61.1465C61.1465 68.9738 61.1775 68.9383 61.1908 68.9205C61.2086 68.8939 61.2308 68.8718 61.2485 68.8496C61.284 68.8097 61.3195 68.7697 61.3461 68.7387C61.3816 68.7032 61.4037 68.6677 61.4348 68.6367H54.8787C54.861 68.7076 54.8521 68.7653 54.8433 68.823C54.8433 68.854 54.8433 68.8851 54.8388 68.9161V69.0891C54.8388 69.0891 54.8388 69.1202 54.8433 69.129C54.8388 69.1379 54.8433 69.1468 54.8433 69.1601C54.8433 69.1956 54.8433 69.2133 54.8521 69.2444C54.8521 69.2444 54.8521 69.2532 54.8566 69.2577V69.2665L54.8654 69.3242V69.3331C54.8743 69.3597 54.8743 69.3774 54.8787 69.404C54.8876 69.4174 54.8876 69.4218 54.8876 69.444C54.8876 69.444 54.8876 69.4484 54.892 69.4573C54.9009 69.475 54.9054 69.5061 54.9187 69.5327C54.9187 69.5416 54.9231 69.5504 54.9275 69.5593C54.932 69.577 54.9364 69.5992 54.9453 69.617C54.9586 69.6613 54.9763 69.7101 54.9896 69.7545C54.9896 69.7545 54.9896 69.7855 54.9985 69.7855C55.0029 69.8121 55.0074 69.8299 55.0251 69.8565C55.0251 69.8609 55.0251 69.8654 55.0296 69.8698C55.0207 69.8831 55.0163 69.8875 55.0118 69.8964C55.0118 69.9008 55.0074 69.9009 55.0074 69.9009C55.0029 69.9053 55.0029 69.9142 55.0029 69.9186C55.0029 69.923 54.9985 69.923 54.9941 69.9275C54.9941 69.9363 54.9896 69.9452 54.9852 69.9541C54.9852 69.963 54.9808 69.963 54.9808 69.9674V69.9763C54.9808 69.9763 54.9763 69.9763 54.9763 69.9807L54.9675 69.9896C54.9675 69.9896 54.963 70.0073 54.9542 70.0206V70.0295H54.9453V70.0428C54.9453 70.0428 54.9408 70.0517 54.9408 70.0605C54.9364 70.065 54.932 70.0694 54.932 70.0738C54.932 70.0738 54.9305 70.0783 54.9275 70.0872C54.9275 70.0872 54.9142 70.1226 54.9009 70.1359C54.8965 70.167 54.8832 70.1892 54.8699 70.2202H54.8654C54.8654 70.2202 54.8566 70.2557 54.8477 70.2779C54.8433 70.2912 54.8344 70.3178 54.8344 70.3311C54.8344 70.3311 54.8344 70.3356 54.83 70.3356C54.9497 70.3444 55.0872 70.3622 55.207 70.3755H55.278C55.6683 70.4331 56.0542 70.5307 56.3692 70.7303C56.4224 70.7614 56.4712 70.7924 56.52 70.8324H56.5244C56.5244 70.8324 56.5288 70.8412 56.5333 70.8457C56.5688 70.8634 56.5954 70.89 56.6309 70.9255H56.6353V70.9388C56.6664 70.9521 56.6797 70.9699 56.693 70.9832C57.0656 71.378 57.1365 71.7328 57.0168 72.0167C56.968 72.1365 56.8793 72.2341 56.7728 72.3183C56.4534 72.5579 55.9167 72.6288 55.3889 72.4115C55.207 72.3361 55.0118 72.2429 54.8166 72.132C54.8166 72.1409 54.8166 72.1498 54.8211 72.1675C54.8255 72.1808 54.8255 72.1986 54.83 72.2119C54.8344 72.2208 54.8388 72.2296 54.8388 72.2474C54.8388 72.2562 54.8388 72.2651 54.8433 72.2829V72.2962C54.8433 72.2962 54.8477 72.3095 54.8521 72.3139C54.8521 72.3228 54.8566 72.3317 54.8566 72.3405C54.861 72.345 54.8654 72.3538 54.8654 72.3671C54.8654 72.3716 54.8699 72.376 54.8743 72.3849C54.8743 72.3937 54.8787 72.4115 54.8876 72.4248C54.8876 72.4337 54.8876 72.4425 54.892 72.4559V72.4647C54.892 72.4647 54.9009 72.4825 54.9009 72.4958C54.9009 72.5091 54.9054 72.5224 54.9098 72.5357C54.9142 72.5446 54.9187 72.5623 54.9187 72.5712C54.932 72.62 54.9542 72.6643 54.9675 72.7087C54.9808 72.7486 54.9985 72.793 55.0118 72.8329V72.8595C55.0118 72.8595 55.0384 72.9039 55.0429 72.9216C55.0517 72.9305 55.0562 72.9482 55.0562 72.9615C55.0651 72.9704 55.065 72.9748 55.0695 72.9881C55.0828 73.0192 55.0961 73.0458 55.1094 73.0769V73.0857C55.1094 73.0857 55.1183 73.1123 55.1227 73.1168C55.1227 73.1257 55.1316 73.1434 55.1316 73.1478C55.1493 73.1878 55.1671 73.2277 55.1804 73.2676C55.1804 73.272 55.1759 73.2809 55.1715 73.2942C55.1671 73.3075 55.1582 73.3208 55.1449 73.3341H55.1404V73.343C55.1404 73.343 55.136 73.3519 55.1316 73.3563C55.1183 73.3874 55.0961 73.414 55.0828 73.4406C55.0695 73.4716 55.0517 73.4983 55.0384 73.5337C55.0384 73.5382 55.034 73.5382 55.034 73.5426C55.0207 73.5692 55.0074 73.587 54.9985 73.6136C55.0517 73.618 55.0961 73.618 55.1449 73.6225C55.5752 73.6535 56.1208 73.7467 56.4401 74.0793C56.4401 74.0838 56.449 74.0838 56.449 74.0838C56.4623 74.1104 56.4668 74.1193 56.4845 74.1326C56.6309 74.3144 56.653 74.5495 56.5688 74.7624V74.7713C56.5377 74.86 56.4934 74.9399 56.4357 75.002L56.4268 75.0108C56.3736 75.0685 56.3204 75.1084 56.245 75.1484C56.1474 75.1927 56.0498 75.2193 55.9389 75.2238H55.93C55.93 75.2238 55.9167 75.2326 55.9123 75.2326H55.9078C55.5752 75.2593 55.2203 75.1262 54.9497 74.9576C54.9408 74.9576 54.9408 74.9532 54.932 74.9532C54.9275 74.9532 54.9275 74.9443 54.9275 74.9443C54.9187 74.9399 54.9098 74.9354 54.8965 74.9266C54.8255 74.8866 54.7634 74.8379 54.7057 74.7891V75.0064C54.7057 75.0064 54.7102 75.0242 54.7102 75.033C54.7102 75.0419 54.7146 75.0463 54.7146 75.0596V75.0685C54.7146 75.0685 54.7191 75.0863 54.7191 75.0951V75.1484C54.7279 75.1794 54.7324 75.2105 54.7324 75.2415C54.7324 75.2415 54.7338 75.2445 54.7368 75.2504C54.7368 75.2504 54.7412 75.2637 54.7412 75.2681C54.7457 75.277 54.7457 75.2814 54.7457 75.2947C54.7457 75.2947 54.7545 75.3258 54.7545 75.3302V75.3568C54.7545 75.3568 54.759 75.3657 54.759 75.3701C54.759 75.3968 54.7679 75.4145 54.7767 75.4322C54.7812 75.45 54.79 75.4766 54.7945 75.4944V75.5121C54.7945 75.5121 54.7989 75.5121 54.7989 75.5165C54.7989 75.5165 54.8033 75.521 54.8033 75.5254C54.8078 75.5254 54.8078 75.5343 54.8078 75.5387C54.8078 75.5431 54.8122 75.5476 54.8166 75.552C54.83 75.5964 54.8477 75.6496 54.8699 75.694C54.8743 75.6984 54.8743 75.7028 54.8743 75.7073C54.8743 75.7073 54.8787 75.7161 54.8832 75.7206C54.8832 75.725 54.8876 75.7339 54.892 75.7516C54.8965 75.7605 54.9009 75.7782 54.9009 75.7871C54.9142 75.8182 54.9275 75.8403 54.9408 75.8714C54.9453 75.8758 54.9497 75.8803 54.9497 75.8847C54.9541 75.8936 54.9586 75.9024 54.963 75.9024C54.9675 75.9113 54.9675 75.9202 54.9675 75.9291C54.9675 75.9379 54.9719 75.9424 54.9763 75.9424C54.9896 75.9734 54.9941 75.9956 55.0162 76.0222C55.0207 76.0266 55.0296 76.0399 55.034 76.0577C55.034 76.0666 55.0429 76.0666 55.0429 76.0843C55.0473 76.0843 55.0473 76.0932 55.0473 76.0976L55.0606 76.1109C55.0606 76.1109 55.065 76.1198 55.0695 76.1242C55.0739 76.1375 55.0828 76.1508 55.0961 76.1641C55.0961 76.1686 55.0961 76.173 55.1005 76.1775C55.1005 76.1863 55.105 76.1863 55.1094 76.1908C55.1094 76.1908 55.1109 76.1952 55.1138 76.2041C55.1138 76.2041 55.1227 76.2129 55.1227 76.2174C55.136 76.244 55.1405 76.2573 55.1538 76.2795C55.1538 76.2795 55.1582 76.3238 55.1582 76.3371C55.1582 76.346 55.1582 76.3549 55.1626 76.3682C55.1671 76.3771 55.1671 76.3859 55.1671 76.3948C55.1671 76.4259 55.1671 76.4658 55.1759 76.5013V76.5146C55.1759 76.5456 55.1804 76.5855 55.1804 76.6122C55.1804 76.621 55.1804 76.6299 55.1848 76.6476C55.1848 76.6565 55.1848 76.6743 55.1892 76.6831C55.1892 76.7142 55.1937 76.7408 55.1937 76.7718V76.7852C55.2026 76.8162 55.2026 76.8384 55.207 76.8694C55.207 76.896 55.207 76.9094 55.2159 76.9227C55.2159 76.9626 55.2203 77.0069 55.2292 77.0469V77.0602C55.2558 77.0469 55.2735 77.0291 55.3046 77.0202C55.5707 76.9182 55.8502 76.896 56.0897 77.0025H56.0941C56.0941 77.0025 56.0986 77.0025 56.103 77.0069C56.1208 77.0114 56.1429 77.0203 56.1607 77.038H56.1651C56.3159 77.109 56.4446 77.2332 56.5244 77.4195C56.7595 77.9118 56.7595 78.8611 56.0941 78.9942C56.0498 79.0075 56.001 79.0075 55.9478 79.0119H55.9433C55.9744 79.0563 56.0054 79.1095 56.0409 79.1583C56.072 79.2071 56.103 79.2559 56.1385 79.3002C56.1784 79.3535 56.2095 79.3978 56.245 79.4422C56.276 79.4821 56.3026 79.522 56.3381 79.5619C56.3692 79.6019 56.4002 79.6418 56.4357 79.6817C56.4712 79.7261 56.4934 79.7615 56.5333 79.7926V79.8015C56.5333 79.8015 56.5732 79.837 56.5865 79.8547C56.5998 79.8724 56.6176 79.8902 56.6309 79.9079L56.6708 79.9479C56.6708 79.9479 56.6841 79.9567 56.6841 79.9656C56.7373 80.0188 56.7817 80.0676 56.8394 80.1297C56.8394 80.1297 56.8748 80.1652 56.8881 80.1785C56.9014 80.1918 56.9192 80.2096 56.9325 80.2184C56.9635 80.2495 56.9857 80.2628 57.0168 80.2894C57.0212 80.2938 57.0212 80.2983 57.0256 80.2983C57.039 80.3116 57.0567 80.3249 57.0656 80.3293C57.0656 80.3293 57.0685 80.3308 57.0744 80.3338C57.0744 80.3338 57.0833 80.3426 57.0878 80.3426C57.0878 80.3426 57.0922 80.3471 57.0922 80.3515C57.1011 80.3559 57.1099 80.3559 57.1277 80.3693C57.1277 80.3693 57.1321 80.3693 57.141 80.3737C57.1499 80.3826 57.1543 80.3826 57.1676 80.3826C57.172 80.3914 57.1809 80.3959 57.1853 80.3959C57.1898 80.4003 57.1942 80.4003 57.1986 80.4003C57.2075 80.4092 57.2164 80.4092 57.2341 80.4092C57.2341 80.4136 57.243 80.418 57.2474 80.418C57.2519 80.4225 57.2563 80.4225 57.2608 80.4225C57.2741 80.4225 57.2785 80.4314 57.2962 80.4314C57.3051 80.4314 57.314 80.4358 57.3317 80.4358C57.3628 80.4447 57.3894 80.4447 57.4204 80.4447H57.4293C57.4293 80.4447 57.447 80.4447 57.4604 80.4358H57.5579C57.5846 80.4225 57.5979 80.4225 57.6156 80.4225H57.6555L57.6644 80.4092H57.6954C57.6954 80.4092 57.7398 80.3959 57.7709 80.3959H57.7797C57.7797 80.3959 57.7842 80.3959 57.7886 80.3914H57.793C57.793 80.3914 57.793 80.3914 57.7975 80.3914L57.8596 80.3826C57.8596 80.3826 57.8773 80.3826 57.8906 80.3781C57.8995 80.3826 57.9084 80.3781 57.9172 80.3737H58.0237C58.0547 80.3737 58.0858 80.3737 58.1169 80.3826C58.1346 80.3826 58.1523 80.3826 58.1656 80.387H58.1834C58.21 80.3914 58.2322 80.3914 58.2544 80.3959C58.2544 80.3959 58.2632 80.4047 58.2677 80.4047C58.2765 80.4047 58.281 80.4092 58.2943 80.4092H58.5161C58.5161 80.4092 58.5338 80.4047 58.5471 80.4047H58.556V80.3959C58.587 80.3959 58.6137 80.3914 58.6447 80.3826C58.6536 80.3826 58.6713 80.3737 58.6846 80.3737L58.729 80.3604C58.7556 80.3559 58.7733 80.3426 58.8088 80.3293C58.8443 80.316 58.8975 80.2894 58.9419 80.2717C58.9774 80.2628 58.9951 80.2451 59.0262 80.2273C59.035 80.2273 59.0395 80.2273 59.0617 80.2184C59.0617 80.2096 59.075 80.2096 59.0794 80.2051C59.0927 80.1963 59.1105 80.1785 59.1238 80.1741C59.1415 80.1652 59.1593 80.1608 59.1726 80.1475C59.1859 80.143 59.1903 80.1342 59.208 80.1208C59.2125 80.1164 59.2169 80.1164 59.2258 80.112C59.2302 80.1075 59.2391 80.1031 59.2435 80.1031L59.2568 80.0898C59.2568 80.0898 59.2657 80.0809 59.2702 80.0765C59.2702 80.0765 59.2746 80.0735 59.2835 80.0676C59.2835 80.0676 59.3012 80.0632 59.3101 80.0543C59.3189 80.0454 59.3367 80.0277 59.3411 80.0277C59.3544 80.0144 59.3677 80.01 59.381 79.9966C59.4077 79.9833 59.4254 79.9656 59.452 79.9434C59.4653 79.9301 59.4964 79.9124 59.5097 79.8946C59.523 79.8858 59.5407 79.868 59.5496 79.8591C59.5585 79.8547 59.5762 79.8414 59.5806 79.8281H59.5851C59.6294 79.7882 59.6649 79.7571 59.7093 79.7172V79.7083H59.7182C59.7182 79.7083 59.7315 79.6906 59.7492 79.6728L59.7803 79.6418L59.7891 79.6329C59.8157 79.6063 59.8291 79.5886 59.8468 79.5753L59.8601 79.5575C59.8601 79.5575 59.8956 79.5132 59.9089 79.4998C59.9222 79.4821 59.9444 79.4555 59.9666 79.4244C59.9799 79.4111 59.9976 79.3845 60.0109 79.3623C60.0375 79.3313 60.0597 79.3047 60.0819 79.2736C60.0908 79.2603 60.0952 79.247 60.1129 79.2337C60.1129 79.2293 60.1218 79.2071 60.1263 79.2026C60.1307 79.1982 60.1351 79.1982 60.1351 79.1938C60.1351 79.1938 60.1396 79.1893 60.144 79.1893C60.1529 79.176 60.1617 79.1583 60.175 79.1405L60.2061 79.0962C60.2061 79.0962 60.2194 79.0651 60.2371 79.0474C60.2416 79.0385 60.2505 79.0297 60.2638 79.0119C60.2638 79.0075 60.2682 78.9986 60.2726 78.9853C60.2726 78.9853 60.2726 78.9809 60.2771 78.9764C60.2815 78.972 60.2859 78.9631 60.2904 78.9587C60.2948 78.9542 60.2948 78.9454 60.3037 78.9276C60.317 78.8877 60.3436 78.8567 60.3569 78.83C60.3613 78.8034 60.3702 78.799 60.3747 78.7857C60.3747 78.7768 60.3835 78.7768 60.3835 78.7724C60.3835 78.7679 60.3835 78.7679 60.388 78.7679C60.388 78.7679 60.3894 78.7665 60.3924 78.7635H60.3968V78.7502H60.4013C60.4013 78.7502 60.4013 78.7413 60.4057 78.7369C60.4057 78.7236 60.4101 78.7103 60.419 78.697C60.419 78.697 60.4205 78.694 60.4234 78.6881C60.4234 78.6881 60.4367 78.657 60.4501 78.6393C60.4634 78.6083 60.4811 78.5639 60.4944 78.5328V78.5195C60.4944 78.5195 60.5033 78.5107 60.5033 78.5062C60.5077 78.5018 60.5077 78.4974 60.5077 78.4929C60.5122 78.4885 60.5166 78.484 60.5166 78.4752C60.521 78.4707 60.521 78.4663 60.521 78.4574C60.5255 78.4486 60.5299 78.4441 60.5299 78.4397C60.5299 78.4308 60.5343 78.4219 60.5388 78.4131V78.3998L60.5521 78.3732C60.5521 78.3732 60.5654 78.3421 60.5698 78.3288C60.5698 78.3199 60.5743 78.3111 60.5743 78.2977C60.5787 78.2889 60.5831 78.28 60.5831 78.2711C60.5964 78.2268 60.6186 78.1824 60.6231 78.1336C60.6319 78.0981 60.6497 78.0627 60.6497 78.036L60.6541 78.0183C60.663 78.005 60.663 77.9828 60.663 77.9695C60.6674 77.9562 60.6763 77.934 60.6763 77.9207V77.8941C60.6763 77.8941 60.6807 77.8808 60.6807 77.8764C60.6896 77.8276 60.6985 77.7832 60.7073 77.7344C60.7073 77.7211 60.7162 77.7034 60.7162 77.6901C60.7206 77.6501 60.7206 77.6368 60.7206 77.6058C60.7206 77.6058 60.7295 77.5747 60.7251 77.5659C60.7295 77.5614 60.7295 77.557 60.7295 77.5525C60.7339 77.5392 60.7339 77.5348 60.7339 77.5171C60.7339 77.4816 60.7339 77.4638 60.7428 77.4328V77.0336C60.7428 77.0336 60.7428 76.9892 60.7339 76.9626C60.7384 76.9582 60.7339 76.9537 60.7339 76.9493V76.865C60.7295 76.8251 60.7206 76.7896 60.7206 76.7408C60.7162 76.7231 60.7162 76.7053 60.7118 76.6876C60.7029 76.6122 60.6852 76.5368 60.6763 76.4613C60.6763 76.4569 60.6674 76.448 60.6674 76.4436V76.4303C60.663 76.3815 60.6497 76.3504 60.6364 76.3061C60.6364 76.3061 60.6364 76.2972 60.6319 76.2928C60.6231 76.2617 60.6186 76.2307 60.6053 76.1908H60.5964V76.1819H60.6053C60.6053 76.1819 60.6142 76.1775 60.6186 76.173C60.6186 76.1686 60.6231 76.1686 60.6275 76.1641C60.6275 76.1641 60.6319 76.1627 60.6408 76.1597H60.6452C60.6452 76.1597 60.6718 76.1508 60.6851 76.1464C60.7162 76.1331 60.7428 76.1065 60.7694 76.0932C60.796 76.0799 60.8094 76.0621 60.8271 76.0488H60.8315C60.8315 76.0488 60.867 76.0178 60.8803 76C60.8803 76 60.8833 75.9985 60.8892 75.9956C60.8892 75.9956 60.8981 75.9823 60.9025 75.9778C60.9025 75.9778 60.9158 75.9601 60.9203 75.9512C60.938 75.9379 60.9469 75.9246 60.9557 75.9113H60.9602V75.9024C60.9602 75.9024 60.969 75.898 60.9735 75.8891C61.0001 75.8581 61.0223 75.8182 61.0445 75.7871V75.7782L61.0578 75.7472C61.0578 75.7472 61.0844 75.7161 61.0888 75.7028C61.1065 75.6673 61.1243 75.6407 61.1376 75.6052L61.182 75.4855C61.2086 75.4145 61.2263 75.3524 61.2396 75.2859C61.2485 75.2415 61.2574 75.1971 61.2707 75.1484C61.2751 75.1217 61.2796 75.0996 61.2796 75.0685C61.2884 75.0197 61.2973 74.9709 61.2973 74.9266C61.3017 74.9088 61.3062 74.8866 61.3062 74.8689C61.3062 74.8512 61.3106 74.829 61.3062 74.8112V74.8024C61.315 74.7403 61.315 74.6693 61.315 74.6116C61.315 74.5362 61.315 74.4564 61.3062 74.3765C61.3062 74.3277 61.3062 74.2789 61.2973 74.2346L61.3372 74.1991ZM60.2992 75.2859L60.2904 75.2947C60.1706 75.3968 60.0331 75.481 59.8867 75.5343C59.8379 75.5476 59.7891 75.5653 59.7403 75.5875H59.6915C59.2347 75.6984 58.76 75.5919 58.6048 75.308C58.6004 75.308 58.6003 75.3036 58.6003 75.3036C58.587 75.2726 58.5693 75.2415 58.5604 75.2016C58.5338 75.0641 58.5693 74.9266 58.6403 74.7979C58.6403 74.7935 58.6447 74.7891 58.6491 74.7846C58.7024 74.6782 58.7822 74.585 58.8576 74.5096H58.8621C58.8621 74.5096 58.8665 74.5007 58.8709 74.5007C59.1548 74.2302 59.8424 73.8043 60.246 73.9374C60.3037 73.9551 60.3702 73.9862 60.4234 74.0261H60.4279C60.4279 74.0261 60.4412 74.035 60.4545 74.0394C60.6053 74.1503 60.694 74.3189 60.6763 74.5274C60.6585 74.7137 60.6053 74.8733 60.5255 75.0108C60.4678 75.1173 60.3924 75.2105 60.3037 75.2903L60.2992 75.2859ZM60.8936 71.378V71.4179C60.9114 71.5554 60.8581 71.6929 60.7872 71.8127C60.7339 71.9058 60.663 71.9812 60.5964 72.0433L60.5831 72.0566V72.0699C60.3968 72.2429 60.2061 72.376 60.0287 72.4514C60.002 72.4647 59.9843 72.478 59.9666 72.4825C59.9532 72.4913 59.9311 72.4958 59.9178 72.5002C59.5807 72.6377 59.2746 72.6067 59.1105 72.4425C59.1105 72.4425 59.109 72.4396 59.106 72.4337C58.9596 72.2829 58.9375 72.0256 59.1016 71.6707C59.1016 71.6663 59.106 71.6618 59.106 71.6574C59.4121 70.9699 59.9 70.8235 60.2948 70.9033C60.3037 70.9033 60.3126 70.9078 60.3214 70.9078C60.3658 70.9166 60.4057 70.9344 60.4501 70.9433C60.4634 70.9477 60.4767 70.9521 60.49 70.961C60.5077 70.9654 60.5255 70.9699 60.5388 70.9787C60.6763 71.0497 60.7827 71.1429 60.8493 71.2449C60.8537 71.2715 60.867 71.2848 60.8803 71.3025C60.8848 71.3114 60.8848 71.3159 60.8848 71.3292C60.8848 71.3292 60.9025 71.3602 60.9025 71.3735L60.8936 71.378ZM59.798 78.7103C59.727 78.7546 59.6605 78.799 59.5762 78.8389H59.5718C59.5718 78.8389 59.5452 78.8522 59.5319 78.8655C59.3234 78.9542 59.075 79.003 58.8532 78.9099C58.6669 78.8212 58.5471 78.5994 58.5471 78.3953C58.5471 77.934 59.0351 77.2997 59.6294 77.211H59.6339C59.6605 77.2066 59.6782 77.2065 59.7048 77.2065C59.7359 77.2021 59.7581 77.2021 59.7891 77.2021H59.8379C60.1085 77.2154 60.2992 77.4328 60.3125 77.6989C60.3214 77.8675 60.2948 78.0227 60.2327 78.1647C60.1484 78.3865 59.9976 78.5772 59.7936 78.7147L59.798 78.7103Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M60.8896 69.2489C60.8497 69.3066 60.8098 69.3687 60.7699 69.4396C60.7876 69.4662 60.8054 69.4929 60.8187 69.515C60.8408 69.5505 60.863 69.5904 60.8852 69.6304C60.9029 69.6614 60.9207 69.6925 60.9384 69.7235C60.9429 69.7279 60.9473 69.7324 60.9473 69.7413C60.9606 69.7723 60.9783 69.8034 60.9916 69.8344C61.005 69.8655 61.0227 69.9009 61.0316 69.932C61.0493 69.9675 61.0626 70.003 61.0715 70.0385C61.0715 70.0385 61.0715 70.0384 61.0715 70.0473C61.0804 70.0651 61.0848 70.0872 61.0937 70.105C61.0937 70.105 61.0937 70.1094 61.0937 70.1139C61.0981 70.1272 61.1025 70.136 61.107 70.1493C61.107 70.1582 61.1114 70.1627 61.1158 70.1715V70.1804C61.1247 70.207 61.1336 70.2336 61.138 70.2558C61.138 70.2558 61.138 70.2602 61.138 70.2647C61.138 70.2647 61.107 70.2558 61.0937 70.2469C60.9384 70.1893 60.7743 70.1449 60.6102 70.1094C60.2198 70.0251 59.8117 70.0118 59.417 70.1094C59.4569 70.0739 59.5012 70.0384 59.5412 70.0074C59.5722 69.9852 59.55 69.9364 59.5145 69.9453C59.1065 70.034 58.7028 70.1227 58.3746 70.3933C58.3923 70.3002 58.4233 70.207 58.4411 70.1094C58.4411 70.0828 58.4189 70.0562 58.3923 70.0739C58.2237 70.176 58.0951 70.3179 57.9931 70.4865C57.5451 69.9808 56.8886 69.8433 56.2365 69.8211C55.9083 69.8122 55.5889 69.7856 55.2651 69.7679C55.1631 69.7634 55.0566 69.759 54.9501 69.7679C54.9501 69.759 54.9457 69.7501 54.9413 69.7457C54.8703 69.5505 54.8259 69.3908 54.8038 69.2533C54.7638 69.036 54.7771 68.8541 54.8259 68.6279C54.8259 68.6279 54.8259 68.6279 54.8259 68.6234H61.3776C61.2667 68.7654 61.1292 68.9029 60.9739 69.1069C60.965 69.1202 60.9517 69.138 60.9384 69.1513C60.9296 69.1646 60.9162 69.1823 60.9074 69.1957C60.8941 69.2134 60.8852 69.2311 60.8719 69.2489H60.8896Z' fill='%23A05A07'/%3E%3Cpath d='M59.9978 83.2171C59.9845 83.5276 59.9224 83.8469 59.8204 84.1619C59.7893 84.2683 59.7494 84.3792 59.705 84.4813C59.6828 84.5301 59.6651 84.5744 59.6473 84.6232C59.5941 84.7474 59.5365 84.8672 59.4699 84.9869C59.4123 85.0978 59.3457 85.2087 59.2836 85.3152C59.2792 85.3241 59.2748 85.3329 59.2703 85.3418C59.2038 85.4483 59.1328 85.5547 59.0574 85.6567C59.053 85.6656 59.0441 85.6745 59.0397 85.6833C58.9687 85.7854 58.8888 85.883 58.809 85.9805C58.8001 85.9894 58.7957 85.9983 58.7868 86.0116C58.7114 86.1047 58.6316 86.1935 58.5473 86.2822C58.5384 86.2955 58.5251 86.3044 58.5162 86.3177C58.4364 86.4019 58.3566 86.4818 58.2723 86.5572C58.259 86.5705 58.2412 86.5838 58.2279 86.5971C58.1481 86.6681 58.0638 86.7391 57.9839 86.8056C57.9662 86.8233 57.944 86.8366 57.9263 86.8544C57.8464 86.9165 57.7666 86.9742 57.6868 87.0274C57.6734 87.0363 57.6646 87.0451 57.6513 87.054C57.5936 87.0895 57.5359 87.1338 57.4738 87.1693C57.6202 86.9209 57.6158 86.5882 57.5271 86.2866C57.3895 85.8209 56.1741 83.6119 56.3471 82.321C56.356 82.2368 56.3738 82.1614 56.3959 82.0904C56.4181 82.0194 56.4447 81.9484 56.4802 81.8863C56.5157 81.8242 56.5556 81.7621 56.6089 81.7089C56.6399 81.6779 56.671 81.6424 56.7109 81.6158C56.7109 81.6158 56.7552 81.5803 56.7774 81.567C57.4472 81.1367 58.3699 80.6931 59.1505 80.7641C59.1505 80.7641 59.1905 80.773 59.2038 80.773C59.2171 80.773 59.2348 80.7818 59.2437 80.7863C59.257 80.7907 59.2659 80.7996 59.2747 80.8084C59.2836 80.8173 59.2925 80.8218 59.2969 80.8306C59.3635 80.9193 59.3191 81.0746 59.3235 81.221C59.3235 81.2476 59.3235 81.2653 59.328 81.2831C59.328 81.2964 59.328 81.3097 59.3369 81.323C59.3457 81.354 59.3546 81.3762 59.3679 81.4028C59.3768 81.4161 59.3857 81.4295 59.3945 81.4383C59.3945 81.4383 59.4167 81.4649 59.43 81.4738C59.4433 81.4827 59.4566 81.4916 59.4699 81.5004C59.4921 81.5315 59.5143 81.5581 59.5365 81.5891C59.5365 81.5891 59.5453 81.6069 59.5542 81.6158C59.5897 81.6645 59.6207 81.7178 59.6518 81.771C59.6695 81.8021 59.6873 81.8331 59.7006 81.8642C59.7183 81.8952 59.7316 81.9263 59.7449 81.9573C59.7582 81.9884 59.7716 82.0194 59.7849 82.0505C59.7982 82.0815 59.8115 82.117 59.8204 82.148C59.8292 82.1791 59.8425 82.2146 59.8514 82.2456C59.8603 82.2811 59.8691 82.3122 59.878 82.3477C59.878 82.361 59.8824 82.3743 59.8869 82.3876C59.9002 82.4408 59.9135 82.494 59.9224 82.5473C59.9224 82.5606 59.9224 82.5739 59.9268 82.5828C59.9623 82.7912 59.9756 83.0086 59.9667 83.2259L59.9978 83.2171Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M59.483 81.496C59.1371 81.2964 59.554 80.7907 59.1504 80.7597C58.3697 80.6887 57.4426 81.1323 56.7772 81.5625C56.52 81.7311 56.3869 81.9972 56.3425 82.3211C57.3317 82.2456 58.4939 82.707 58.7511 83.7227C58.9818 84.6365 58.5338 85.4394 58.0991 86.2068C57.9394 86.4862 57.793 86.7701 57.6511 87.054C59.3588 85.9185 60.8226 83.1905 59.4875 81.496H59.483Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M59.9981 83.1949V83.2748C59.9892 83.3103 59.9892 83.3458 59.9848 83.3812C59.9848 83.4212 59.9759 83.4655 59.9715 83.5054C59.9715 83.5409 59.9626 83.572 59.9537 83.6075C59.9537 83.643 59.9449 83.6784 59.936 83.7139C59.8207 83.399 59.6654 83.0974 59.4569 82.8401C59.3948 82.7647 59.3283 82.6893 59.2617 82.6227C59.1065 82.463 58.9379 82.3255 58.7561 82.2102C58.7295 82.188 58.7028 82.1747 58.6718 82.157C58.5077 82.0549 58.3391 81.9707 58.1617 81.8997C58.0242 81.842 57.8822 81.7977 57.7403 81.7578C57.4076 81.6646 57.0616 81.6158 56.7112 81.6069C56.7112 81.6069 56.7555 81.5715 56.7777 81.5581C57.4475 81.1279 58.3702 80.6843 59.1509 80.7553C59.173 80.7553 59.1908 80.7597 59.2085 80.7641C59.2218 80.7641 59.2396 80.773 59.2484 80.7774C59.2617 80.7819 59.2706 80.7908 59.2795 80.7996C59.2884 80.8085 59.2972 80.8129 59.3017 80.8218C59.3017 80.8218 59.3105 80.844 59.315 80.8529C59.3416 80.9105 59.3372 80.9904 59.3283 81.0746C59.3238 81.1412 59.3194 81.2077 59.3283 81.2698C59.3283 81.2698 59.3283 81.3009 59.3372 81.3097C59.3372 81.3097 59.3372 81.3319 59.346 81.3408C59.346 81.3452 59.346 81.3497 59.3505 81.3541C59.3549 81.3674 59.3593 81.3763 59.3682 81.3896C59.3771 81.4029 59.386 81.4162 59.3948 81.4251C59.3948 81.4251 59.417 81.4517 59.4303 81.4606C59.4436 81.4694 59.4569 81.4783 59.4702 81.4872C59.4924 81.5182 59.5146 81.5448 59.5368 81.5759C59.5368 81.5759 59.5456 81.5936 59.5501 81.6025C59.5856 81.6513 59.6166 81.7045 59.6477 81.7578C59.6654 81.7888 59.6831 81.8199 59.6965 81.8509C59.7142 81.882 59.7275 81.913 59.7408 81.9441C59.7541 81.9751 59.7674 82.0062 59.7807 82.0372C59.794 82.0683 59.8073 82.1037 59.8162 82.1348C59.8251 82.1658 59.8384 82.2013 59.8473 82.2324C59.8561 82.2679 59.865 82.2989 59.8739 82.3344C59.9493 82.6094 59.9759 82.9022 59.9626 83.1949H59.9981Z' fill='%23A05A07'/%3E%3Cpath d='M59.0617 76.8162C58.7423 76.9538 58.4584 77.1933 58.2189 77.4905C58.0504 77.0691 57.8729 76.6654 57.5447 76.3239C57.2697 76.04 56.8571 75.6851 56.4357 75.7916C56.1873 75.8537 56.2894 76.2396 56.5422 76.1775C56.8172 76.111 57.141 76.4836 57.3096 76.6566C57.629 76.9892 57.7709 77.4239 57.935 77.8453C57.9395 77.8586 57.9483 77.872 57.9572 77.8853C57.5447 78.5994 57.3717 79.4999 57.5713 80.1874C57.6423 80.4358 58.0282 80.3294 57.9572 80.081C57.6689 79.0874 58.3076 77.5748 59.2702 77.1578C59.5053 77.0558 59.3013 76.7142 59.0706 76.8118L59.0617 76.8162Z' fill='%23995A07'/%3E%3Cpath d='M59.6779 73.1833C59.1944 73.3297 58.6266 73.6712 58.2096 74.1148C57.9258 73.6313 57.3979 73.1301 56.8523 73.1744C56.5995 73.1966 56.595 73.5958 56.8523 73.5737C57.3136 73.5382 57.7395 74.0527 57.9391 74.4475C57.7528 74.7181 57.6374 75.0108 57.6197 75.3125C57.6064 75.5697 58.0056 75.5697 58.0189 75.3125C58.0411 74.8645 58.4048 74.4963 58.7198 74.2168C59.0214 73.9418 59.394 73.6845 59.7843 73.5648C60.0283 73.4938 59.9219 73.1079 59.6779 73.1789V73.1833Z' fill='%23995A07'/%3E%3Cpath d='M59.3947 70.4952C59.0132 70.7791 58.5741 70.9654 58.2281 71.2892C57.9664 70.7303 57.4297 70.167 56.8175 70.167C56.5603 70.167 56.5603 70.5662 56.8175 70.5662C57.3276 70.5662 57.7712 71.165 57.9353 71.6263C57.7224 71.9324 57.5938 72.2828 57.5317 72.6554C57.4918 72.9083 57.8777 73.0147 57.9176 72.7619C57.993 72.2917 58.1793 71.9147 58.512 71.5687C58.818 71.2537 59.2528 71.0985 59.6032 70.8412C59.8072 70.6904 59.6076 70.3444 59.4036 70.4952H59.3947Z' fill='%23995A07'/%3E%3Cpath d='M59.2882 83.013C59.266 82.4895 59.1773 81.7399 58.6229 81.5004C58.3878 81.3983 58.1837 81.7443 58.4233 81.8464C58.8535 82.0282 58.8757 82.6803 58.8934 83.0795C58.9201 83.7626 58.7781 84.3836 58.4543 84.9869C58.3301 85.2131 58.6761 85.4127 58.8003 85.1865C59.1685 84.4989 59.3237 83.7892 59.2927 83.0085L59.2882 83.013Z' fill='%23995A07'/%3E%3Cpath d='M58.0145 81.3939C57.8948 81.1677 57.571 81.3939 57.6863 81.6245C58.0057 82.2234 57.3935 82.7024 57.0209 83.0972C56.8435 83.2835 57.1496 83.5408 57.3226 83.3545C57.8637 82.7867 58.4404 82.2101 58.0101 81.3983L58.0145 81.3939Z' fill='%23995A07'/%3E%3Cpath d='M61.9227 69.1467C61.9227 69.1467 61.9183 69.1645 61.9139 69.1734C61.8429 69.4395 61.7098 69.6524 61.4969 69.7456C61.3638 69.7456 61.2396 69.7456 61.1199 69.7456H60.9513C57.3672 69.7367 58.4939 69.7367 54.963 69.7456H54.9541C54.7989 69.7456 54.6348 69.7456 54.4573 69.7456C54.4041 69.7234 54.3509 69.6879 54.3065 69.648C54.2888 69.6347 54.2755 69.6214 54.2622 69.6036C54.2222 69.5593 54.1823 69.5105 54.1513 69.4528C54.138 69.4262 54.1202 69.3996 54.1114 69.3685C54.0847 69.3109 54.0626 69.2488 54.0448 69.1822C53.9206 68.7298 53.9827 68.1265 54.1601 67.7096C54.1601 67.7007 54.1646 67.6962 54.169 67.6874H54.1734C54.2666 67.6874 54.3597 67.6874 54.4485 67.6874C54.8299 67.6874 55.1671 67.6829 55.4687 67.6785C55.7215 67.6785 55.9433 67.6785 56.1429 67.6741C56.2849 67.6741 56.4135 67.6741 56.5333 67.6741C56.8039 67.6741 57.0256 67.6696 57.2164 67.6696C57.5579 67.6696 57.793 67.6652 58.0281 67.6652C58.1435 67.6652 58.2544 67.6652 58.383 67.6652C58.5338 67.6652 58.7024 67.6652 58.9064 67.6652C58.9907 67.6652 59.0838 67.6652 59.1859 67.6652C59.248 67.6652 59.3145 67.6652 59.3855 67.6652C59.4254 67.6652 59.4697 67.6652 59.5097 67.6652C59.6294 67.6652 59.7581 67.6652 59.8956 67.6652C59.9532 67.6652 60.0153 67.6652 60.0819 67.6652C60.5299 67.6652 61.0844 67.6741 61.7852 67.6785C61.7852 67.6785 61.7985 67.7184 61.8074 67.7362C61.8074 67.7362 61.8074 67.7406 61.8074 67.745C61.8296 67.7938 61.8473 67.8471 61.8606 67.9003C61.976 68.2818 62.007 68.7564 61.9183 69.1334L61.9227 69.1467Z' fill='%2300C55E'/%3E%3Cpath d='M61.927 69.1468C61.927 69.1468 61.927 69.1645 61.9181 69.1734C61.8472 69.4395 61.7141 69.6569 61.5012 69.75C61.3681 69.75 61.2395 69.75 61.1197 69.75H60.9556C57.3715 69.7412 58.5026 69.7412 54.9673 69.75H54.9584C54.8032 69.75 54.639 69.75 54.4661 69.75C54.4128 69.7234 54.3596 69.6924 54.3152 69.6525C54.2975 69.6391 54.2842 69.6258 54.2709 69.6081C54.231 69.5637 54.191 69.5149 54.16 69.4573C54.1467 69.4307 54.1289 69.4041 54.1201 69.373C54.0934 69.3153 54.0713 69.2532 54.0535 69.1867C54.0934 69.1956 54.1378 69.2 54.1733 69.2089C54.3906 69.2444 54.608 69.2577 54.8253 69.2532C55.2157 69.2532 55.6149 69.1911 55.9875 69.1024C56.4045 69.0048 56.8347 68.8584 57.2073 68.6278C57.2073 68.6278 57.2118 68.6278 57.2162 68.6234C57.2162 68.6234 57.2517 68.6012 57.2695 68.5879C57.2872 68.579 57.3049 68.5657 57.3227 68.5568C57.3759 68.5258 57.4203 68.4858 57.4691 68.4504C57.682 68.2818 57.8284 68.0423 57.957 67.8072C57.9792 67.7584 58.0058 67.7096 58.028 67.6608C58.1433 67.6608 58.2542 67.6608 58.3828 67.6608C58.5337 67.6608 58.7022 67.6608 58.9063 67.6608C58.9905 67.6608 59.0837 67.6608 59.1857 67.6608C59.2478 67.6608 59.3143 67.6608 59.3853 67.6608C59.4252 67.6608 59.4696 67.6608 59.5095 67.6608C59.6293 67.6608 59.7579 67.6608 59.8954 67.6608C59.9531 67.6608 60.0152 67.6608 60.0817 67.6608C60.5297 67.6608 61.0842 67.6697 61.7851 67.6741L61.8072 67.7318C61.8072 67.7318 61.8072 67.7318 61.8072 67.7362C61.8294 67.785 61.8472 67.8382 61.8605 67.8915C61.9758 68.2729 62.0113 68.7476 61.9181 69.1246L61.927 69.1468Z' fill='%2306B253'/%3E%3Cpath d='M59.7671 81.1456C59.7582 81.1899 59.7538 81.2298 59.7449 81.2698C59.7449 81.2786 59.7449 81.2875 59.7405 81.2964C59.7272 81.3496 59.7139 81.3984 59.7005 81.4427C59.6872 81.4827 59.6739 81.5137 59.6562 81.5448C59.6429 81.5714 59.6251 81.5936 59.6074 81.6113H59.5675C59.3412 81.6113 59.1549 81.6113 58.9997 81.6113C58.9287 81.6113 58.8622 81.6113 58.8001 81.6113C58.6093 81.6113 58.4718 81.6113 58.3565 81.6113C58.2633 81.6113 58.1879 81.6113 58.1081 81.6113C57.9883 81.6113 57.8641 81.6113 57.6823 81.6113C57.4693 81.6113 57.1766 81.6113 56.7153 81.6157H56.6931C56.6532 81.5758 56.6133 81.5093 56.5778 81.425C56.5689 81.4028 56.56 81.3851 56.5512 81.3629C56.5467 81.3496 56.5423 81.3319 56.5334 81.3185C56.5245 81.2919 56.5157 81.2609 56.5068 81.2343C56.4979 81.2032 56.489 81.1677 56.4802 81.1322C56.3737 80.6975 56.3294 80.0854 56.4092 79.6817H56.4358C56.9193 79.6729 57.2431 79.664 57.4827 79.6596C57.6468 79.6596 57.771 79.6596 57.8774 79.6596C58.0504 79.6596 58.1791 79.6596 58.3698 79.6684C58.3876 79.6684 58.4009 79.6684 58.4186 79.6684C58.4363 79.6684 58.4541 79.6684 58.4718 79.6684C58.5694 79.6684 58.6848 79.6729 58.8267 79.6773C58.9376 79.6773 59.0618 79.6818 59.2126 79.6862C59.257 79.6862 59.3013 79.6862 59.3457 79.6862C59.3945 79.6862 59.4477 79.6862 59.5009 79.6862C59.5719 79.6862 59.6429 79.6862 59.7183 79.6862C59.7183 79.6906 59.7183 79.6951 59.7183 79.6995C59.7227 79.7261 59.7271 79.7527 59.7316 79.7838C59.7405 79.8326 59.7449 79.8858 59.7538 79.939C59.7626 79.9923 59.7671 80.0499 59.7759 80.1076C59.807 80.4536 59.8026 80.8395 59.7626 81.1411L59.7671 81.1456Z' fill='%2300C55E'/%3E%3Cpath d='M59.767 81.1455C59.7581 81.1855 59.7537 81.2298 59.7448 81.2697C59.7448 81.2786 59.7448 81.2875 59.7404 81.2964C59.7271 81.3496 59.7138 81.3984 59.7005 81.4427C59.6872 81.4827 59.6739 81.5137 59.6561 81.5448C59.6428 81.5714 59.6251 81.5936 59.6073 81.6113H59.5674C59.3412 81.6113 59.1549 81.6113 58.9996 81.6113C58.9286 81.6113 58.8621 81.6113 58.8 81.6113C58.6093 81.6113 58.4718 81.6113 58.3564 81.6113C58.2633 81.6113 58.1879 81.6113 58.108 81.6113C57.9883 81.6113 57.8641 81.6113 57.6822 81.6113C57.4693 81.6113 57.1765 81.6113 56.7152 81.6157H56.693C56.6531 81.5758 56.6132 81.5093 56.5777 81.425C56.5688 81.4028 56.5599 81.3851 56.5511 81.3629C56.5466 81.3496 56.5422 81.3318 56.5333 81.3185C56.5245 81.2919 56.5156 81.2609 56.5067 81.2343C56.4978 81.2032 56.489 81.1677 56.4801 81.1322C56.9725 81.0213 57.4249 80.7641 57.7975 80.4003C57.7975 80.4003 57.8108 80.387 57.8197 80.3782C58.0282 80.1741 58.2234 79.9257 58.3653 79.664C58.383 79.664 58.3963 79.664 58.4141 79.664C58.4318 79.664 58.4496 79.664 58.4673 79.664C58.5649 79.664 58.6802 79.6684 58.8222 79.6729C58.9331 79.6729 59.0573 79.6773 59.2081 79.6817C59.2525 79.6817 59.2968 79.6817 59.3412 79.6817C59.3855 79.6817 59.4432 79.6817 59.4964 79.6817C59.5674 79.6817 59.6384 79.6817 59.7138 79.6817C59.7138 79.6817 59.7138 79.6906 59.7138 79.695C59.7182 79.7217 59.7226 79.7483 59.7271 79.7793C59.736 79.8281 59.7404 79.8814 59.7493 79.9346C59.7581 79.9922 59.7626 80.0499 59.767 80.1076C59.7981 80.4536 59.7936 80.8395 59.7537 81.1411L59.767 81.1455Z' fill='%2306B253'/%3E%3Cpath d='M57.8112 35.8297C57.4785 35.8164 57.1502 35.7942 56.8442 35.7676C55.4469 35.6567 54.0851 35.2797 52.8076 34.703C52.4705 34.5478 52.0979 34.4014 51.7164 34.2595C51.5124 34.1796 51.2995 34.1042 51.091 34.0288C51.0821 34.0288 51.0732 34.0244 51.0644 34.0199C51.0688 34.0199 51.0732 34.0111 51.0777 34.0111C51.0777 34.0111 51.0644 34.0111 51.0599 34.0199C51.0599 34.0199 51.0511 34.0199 51.0333 34.0288C50.9402 34.0554 50.7361 34.0998 50.4922 34.2151C50.3014 34.3038 50.0929 34.4325 49.8978 34.6232C49.4276 35.0934 48.9219 36.1935 48.6291 36.9564C47.9859 38.6597 47.6932 39.2053 47.5025 41.4543C47.5025 41.4543 47.1964 42.6874 47.1254 43.3306L46.7484 42.581C46.7218 42.5189 46.5621 42.2039 46.5798 41.4898L46.0963 38.5888L47.3295 38.9303C47.3295 38.9303 46.6286 36.9786 46.9835 36.9209C48.8598 36.606 47.223 33.7316 47.223 33.7316L47.4049 33.8159L48.4916 34.3127C48.4916 34.3127 48.6336 33.6606 48.9308 33.3457C49.015 33.257 49.1259 33.1683 49.2634 33.0884C49.8401 32.7424 50.8027 32.5206 51.4813 32.9287C53.3443 34.0421 56.4139 35.7499 57.8112 35.8253V35.8297Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M55.0217 53.2668C55.0217 53.2668 55.7447 52.7079 57.4347 52.5216C58.1932 52.4373 58.934 52.5216 59.4974 52.7079C60.0607 52.8942 60.8724 53.076 60.8414 53.2668C60.8103 53.4575 56.8714 53.2668 55.0217 53.2668Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M58.9339 54.7704C58.9339 54.7704 58.8408 55.4579 58.2109 55.6797C57.927 55.7773 57.6342 55.7507 57.4036 55.6398C57.1729 55.5289 56.8757 54.9079 56.8713 54.7615C56.8669 54.6151 58.4016 55.2583 58.9339 54.7659V54.7704Z' fill='%23A05A07'/%3E%3Cpath d='M69.7041 48.7644C69.6509 48.8797 69.5622 48.9817 69.4468 49.0394C69.398 49.066 69.3448 49.0838 69.2871 49.0926C68.9678 49.1459 68.6617 48.9108 68.604 48.5692C68.5552 48.2853 68.6883 48.0192 68.9145 47.8994C68.9633 47.8728 69.0166 47.855 69.0742 47.8462C69.3936 47.7929 69.6997 48.028 69.7573 48.3696C69.784 48.5115 69.7573 48.649 69.7041 48.7644Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M69.4468 49.035C69.398 49.0616 69.3448 49.0793 69.2871 49.0882C68.9678 49.1414 68.6617 48.9063 68.604 48.5648C68.5552 48.2809 68.6883 48.0148 68.9145 47.895C68.9145 47.895 68.5641 48.9197 69.4468 49.035Z' fill='%23474C2F'/%3E%3Cpath d='M69.7045 48.7644C68.6709 48.5781 69.0746 47.8417 69.0746 47.8417C69.394 47.7885 69.7 48.0236 69.7577 48.3651C69.7843 48.5071 69.7577 48.6446 69.7045 48.7599V48.7644Z' fill='%23949984'/%3E%3Cpath d='M53.3597 39.3379C53.4129 39.581 53.7319 39.7861 54.1649 39.8089C54.4992 39.8241 54.8866 39.7329 55.1449 39.5658C55.8057 39.148 55.3651 38.715 54.5827 38.715C53.9826 38.715 53.2686 38.9657 53.3597 39.3455V39.3379Z' fill='%23E8D4BA'/%3E%3Cpath d='M63.5697 29.2955C63.5165 29.1283 63.4785 29.0144 63.4633 28.9916C63.5089 29.0828 63.5393 29.1815 63.5697 29.2955Z' fill='%23C77500'/%3E%3Cpath d='M43.9404 39.1177C43.9404 39.1177 70.1476 39.9609 70.1248 39.733C68.4308 24.586 57.8947 26.0369 57.758 25.9913C55.2588 25.9381 50.9669 25.5963 47.7765 29.0146C46.0977 30.9137 44.7228 33.7927 44.0771 38.0846C44.0239 38.4188 43.9784 38.7607 43.9404 39.1177Z' fill='%23979E87'/%3E%3Cpath d='M43.9404 39.1177C43.9404 39.1177 70.1476 39.9609 70.1248 39.733C68.4308 24.586 57.8947 26.0369 57.758 25.9913C55.2588 25.9381 50.9669 25.5963 47.7765 29.0146C46.1053 30.8074 44.7304 33.6332 44.0771 38.0846C44.0239 38.4188 43.9784 38.7607 43.9404 39.1177Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M51.4231 27.5561C50.0481 27.389 47.1919 29.8426 48.0123 31.3163C48.2478 31.7416 48.7644 31.8556 49.2126 31.8328C51.2863 31.734 53.0411 29.1969 52.3954 28.1866C52.1827 27.8599 51.8181 27.6017 51.4231 27.5561Z' fill='%23C5CAB9'/%3E%3Cpath d='M70.0716 39.3303C70.0488 39.148 70.026 38.9733 70.0033 38.7986C69.9805 38.6467 69.9577 38.4947 69.9349 38.3428C69.9121 38.1909 69.8893 38.0466 69.8589 37.9022C69.8058 37.606 69.7526 37.3249 69.6994 37.0514C69.669 36.9147 69.6386 36.778 69.6082 36.6412C69.5779 36.5045 69.5475 36.3754 69.5171 36.2386C69.4867 36.1095 69.4487 35.9728 69.4183 35.8436C69.3879 35.7145 69.35 35.5854 69.312 35.4638C69.2816 35.3423 69.2436 35.2283 69.2056 35.1144V35.084C69.1601 34.9625 69.1221 34.8485 69.0841 34.727C69.0461 34.6054 69.0081 34.4915 68.9701 34.3776C68.8106 33.9142 68.6435 33.4812 68.4612 33.0634C68.4156 32.957 68.37 32.8583 68.3245 32.7595C68.2333 32.562 68.1346 32.3645 68.0434 32.1746C67.9978 32.0835 67.9446 31.9847 67.8991 31.8936C67.8383 31.7796 67.7775 31.6733 67.7168 31.5669C67.6788 31.4986 67.6332 31.4302 67.5952 31.3618C67.542 31.2707 67.4889 31.1871 67.4357 31.1036C67.3294 30.9364 67.223 30.7769 67.1167 30.6174C67.0635 30.5414 67.0103 30.4655 66.9571 30.3895C66.8508 30.2376 66.7368 30.0932 66.6229 29.9489L66.5166 29.8198C66.5166 29.8198 66.4862 29.7818 66.471 29.7666C66.471 29.7666 66.4558 29.7514 66.4482 29.7438C66.4026 29.6906 66.357 29.6299 66.3038 29.5767C66.2431 29.5007 66.1747 29.4248 66.1064 29.3488C65.9924 29.2197 65.8709 29.0981 65.7569 28.9842C65.6962 28.9234 65.6354 28.8702 65.5822 28.8095C65.286 28.5284 64.9897 28.2701 64.6859 28.0422C64.3212 27.7688 63.9566 27.5257 63.592 27.3206C63.2274 27.1155 62.8703 26.9332 62.5133 26.7889C61.8068 26.485 61.1232 26.2951 60.5079 26.1736C60.3939 26.1508 60.2876 26.128 60.1812 26.1128C60.0901 26.0976 59.9989 26.0824 59.9154 26.0672C59.9002 26.0672 59.885 26.0672 59.8774 26.0672C59.8242 26.0672 59.771 26.052 59.7179 26.0444C59.4672 26.014 59.2393 25.9912 59.0266 25.9837C58.8975 25.9837 58.7683 25.9685 58.6544 25.9685C58.1606 25.9609 57.8416 25.9912 57.7656 25.9837H57.7504C57.7049 25.9685 57.6669 25.9533 57.6213 25.9457C57.3326 25.8621 57.006 25.7937 56.6414 25.733C56.1476 25.657 55.5855 25.619 54.9854 25.6342C54.7955 25.7937 54.6815 25.9305 54.6436 25.9761L54.636 25.9912C54.636 25.9912 54.636 26.0064 54.636 26.0216C54.636 26.0216 54.636 26.0292 54.636 26.0368C54.636 26.052 54.636 26.0596 54.636 26.0748C54.636 26.0748 54.636 26.1204 54.636 26.1356C54.636 26.1812 54.6208 26.2267 54.6132 26.2799C55.1373 27.1687 55.3044 28.2246 55.1373 29.2652C55.0917 29.5387 55.031 29.8046 54.9474 30.0705C54.8638 30.3363 54.7727 30.587 54.6587 30.8453C54.636 30.8909 54.6208 30.9364 54.598 30.982C54.5372 31.1111 54.4764 31.2403 54.4081 31.3618C54.2334 31.6809 54.0358 31.9847 53.8231 32.281C53.7244 32.4177 53.6181 32.5544 53.5041 32.6836C53.223 33.0178 52.9116 33.3369 52.5774 33.6331C52.5546 33.6559 52.5318 33.6711 52.509 33.6863C52.3951 33.785 52.2735 33.8838 52.152 33.975C51.8405 34.2104 51.5215 34.4231 51.1796 34.6054C51.1721 34.6054 51.1569 34.613 51.1493 34.6206C50.9138 34.7498 50.6707 34.8637 50.42 34.9625C50.063 35.0992 49.6908 35.2056 49.3109 35.2663C49.0223 35.3119 48.7336 35.3347 48.445 35.3271C48.05 35.3271 47.6549 35.2587 47.2675 35.1296C47.2447 35.1296 47.222 35.1144 47.1916 35.1068C47.1004 35.0764 47.0169 35.0384 46.9257 35.0004C46.4472 34.7878 46.0521 34.4611 45.7711 34.0281C45.7027 33.9294 45.6495 33.8306 45.5964 33.7243C45.4976 33.5192 45.4292 33.3141 45.3685 33.1014C45.3305 33.2077 45.2925 33.3065 45.2545 33.4128C45.2317 33.4812 45.2089 33.542 45.1786 33.6103C45.1558 33.6787 45.1254 33.7547 45.1026 33.823C45.0267 34.0357 44.9583 34.2484 44.8899 34.4687C44.7912 34.7878 44.7 35.1144 44.6164 35.4562C44.4265 36.1855 44.267 36.9679 44.1379 37.8111C44.1151 37.9326 44.0999 38.0542 44.0847 38.1757C44.0467 38.4112 44.0163 38.6543 43.986 38.8898C43.9784 38.9581 43.9632 39.0341 43.9556 39.11C43.9556 39.11 44.1151 39.11 44.4113 39.1252C44.4569 39.1252 44.4949 39.1252 44.5481 39.1252C44.6316 39.1252 44.7228 39.1252 44.8215 39.1328C45.0722 39.1328 45.3685 39.148 45.7179 39.1632C45.9078 39.1632 46.1129 39.1784 46.3256 39.186C46.5003 39.186 46.6826 39.1936 46.8649 39.2012C46.8953 39.2012 46.9257 39.2012 46.9561 39.2012C47.108 39.2012 47.26 39.2088 47.4195 39.2164H47.4347H47.4802C47.4802 39.2164 47.5182 39.2164 47.541 39.2164C47.7461 39.2164 47.9664 39.2316 48.1791 39.2316C48.1791 39.2316 48.1791 39.2316 48.1943 39.2316C48.3234 39.2316 48.4602 39.2316 48.5969 39.2468C48.5969 39.2468 48.6045 39.2468 48.6121 39.2468C48.8172 39.2468 49.0299 39.262 49.2502 39.2696H49.2654C49.4857 39.2696 49.7059 39.2848 49.9262 39.2924H50.1769C50.5643 39.3151 50.9593 39.3227 51.362 39.3379C52.0228 39.3607 52.6989 39.3759 53.3978 39.3987C53.5801 39.3987 53.77 39.4063 53.9447 39.4139C54.0131 39.4139 54.089 39.4139 54.1574 39.4139H54.1802C54.5524 39.4215 54.917 39.4367 55.2892 39.4443C55.3652 39.4443 55.4412 39.4443 55.5095 39.4443C55.9729 39.4595 56.4287 39.4747 56.8921 39.4823C56.93 39.4823 56.9756 39.4823 57.0136 39.4823C57.0516 39.4823 57.0972 39.4823 57.1351 39.4823C57.1731 39.4823 57.2187 39.4823 57.2567 39.4823C57.363 39.4823 57.477 39.4823 57.5833 39.4899C58.4417 39.5126 59.2849 39.5354 60.1205 39.5582C60.7358 39.581 61.3435 39.5962 61.936 39.6038C61.9967 39.6038 62.0651 39.6038 62.1259 39.6038C62.1487 39.6038 62.1715 39.6038 62.1867 39.6038C62.2474 39.6038 62.3082 39.6038 62.3614 39.6038H62.3994C62.3994 39.6038 62.4221 39.6038 62.4373 39.6038C62.5133 39.6038 62.5817 39.6038 62.65 39.6038H62.6804C62.7488 39.6038 62.8247 39.6038 62.8931 39.6038H62.9311C63.0147 39.6038 63.0906 39.6038 63.1742 39.6038C63.2425 39.6038 63.3109 39.6038 63.3793 39.6038C63.554 39.6038 63.7211 39.6038 63.8882 39.6114C64.0478 39.6114 64.1997 39.6114 64.3516 39.619C64.42 39.619 64.4807 39.619 64.5491 39.619H64.5947C64.6554 39.619 64.7162 39.619 64.777 39.619H64.8074C64.8682 39.619 64.9365 39.619 64.9973 39.619C65.0809 39.619 65.1644 39.619 65.248 39.619C65.3087 39.619 65.3695 39.619 65.4303 39.619H65.5062C65.6961 39.619 65.8785 39.6266 66.0532 39.6342C66.1215 39.6342 66.1899 39.6342 66.2507 39.6342H66.2811C66.2811 39.6342 66.3418 39.6342 66.3722 39.6342H66.4406C66.4406 39.6342 66.4634 39.6342 66.471 39.6342C66.5165 39.6342 66.5545 39.6342 66.6001 39.6342H66.6305C66.6837 39.6342 66.7293 39.6342 66.7748 39.6342H66.8204C66.8204 39.6342 66.8584 39.6342 66.8736 39.6342C66.9571 39.6342 67.0407 39.6342 67.1243 39.6342H67.1394H67.1774C67.223 39.6342 67.2686 39.6342 67.3142 39.6342C67.8611 39.6342 68.3473 39.6494 68.7575 39.6494C68.7878 39.6494 68.8106 39.6494 68.841 39.6494C68.9626 39.6494 69.0841 39.6494 69.1904 39.6494C69.2284 39.6494 69.2664 39.6494 69.3044 39.6494C69.3652 39.6494 69.4259 39.6494 69.4791 39.6494H69.5019C69.8665 39.6494 70.0792 39.6342 70.102 39.619C70.0868 39.4747 70.0716 39.3455 70.0564 39.2088L70.0716 39.3303ZM56.4211 32.676C56.5654 32.8051 56.5882 32.9722 56.5502 33.1318C56.5426 33.1849 56.5198 33.2381 56.4971 33.2837C56.4363 33.4052 56.3451 33.5192 56.254 33.6103C56.254 33.6103 56.1856 33.6711 56.1476 33.7015C56.0413 33.7926 55.8969 33.8914 55.7526 33.9446C55.6387 33.9901 55.5171 34.0053 55.4108 33.9674C55.3728 33.9522 55.3348 33.9294 55.2968 33.899C55.2968 33.899 55.2816 33.8838 55.274 33.8762C55.1145 33.7091 55.1145 33.5116 55.1905 33.3217V33.3065C55.2133 33.2609 55.2361 33.2153 55.2589 33.1697C55.2589 33.1546 55.274 33.1394 55.2892 33.1242C55.4791 32.8203 55.8741 32.4253 56.2464 32.5696C56.3071 32.5924 56.3603 32.6304 56.4211 32.676ZM64.9441 28.8095C65.134 28.9006 65.3239 29.0222 65.4151 29.2273C65.5594 29.5463 65.6202 29.8957 65.643 30.2452C65.6582 30.5718 65.643 30.9136 65.5822 31.2403C65.5062 31.5897 65.3543 31.9164 65.0809 32.167C65.0429 32.1974 65.0125 32.2278 64.9669 32.2582C64.7162 32.4405 64.3288 32.4861 64.1237 32.205C63.911 31.924 63.9794 31.5517 64.0098 31.2251C64.0553 30.7617 63.987 30.3211 63.8958 29.9261C63.5692 28.5512 62.8475 27.7992 64.9441 28.8019V28.8095Z' fill='%23949984'/%3E%3Cpath opacity='0.4' d='M58.275 38.1756C56.7482 37.454 55.077 37.0362 53.3906 36.9222C51.4004 36.7855 49.3418 37.0134 47.4503 37.6743C46.6831 37.9401 45.9386 38.2896 45.2246 38.6922C44.9815 38.8289 44.746 38.9732 44.5181 39.1403C46.6451 39.2087 54.1958 39.4442 60.5539 39.6113C60.4704 39.543 60.3868 39.4822 60.3032 39.4214C59.6651 38.9428 58.9967 38.5251 58.275 38.1832V38.1756Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M66.3118 29.5919C66.5245 33.3445 65.7801 35.8741 61.2755 39.6267C66.1371 39.7482 69.8821 39.8242 69.8745 39.7406C69.3199 34.8106 68.0741 31.6278 66.3118 29.5919Z' fill='%23676D54'/%3E%3Cpath d='M70.3755 41.4648C70.3072 41.4648 70.2236 41.4572 70.1325 41.4572C70.0717 41.4572 70.0109 41.4572 69.9425 41.4572C69.9122 41.4572 69.8742 41.4572 69.8362 41.4572C69.7451 41.4572 69.6539 41.4572 69.5551 41.4496C69.54 41.4496 69.5172 41.4496 69.502 41.4496C67.8916 41.404 64.9518 41.3812 61.6398 41.3661C61.1081 41.3661 60.5687 41.3661 60.0218 41.3661C57.629 41.3585 55.1222 41.3585 52.8281 41.3509C48.0728 41.3509 44.2443 41.3585 44.2443 41.3585H43.6898C43.3327 41.123 43.3555 39.9455 43.4922 39.0416C45.3837 38.4035 55.1905 38.6238 62.3766 38.9276C62.4906 38.9276 62.6045 38.9352 62.7185 38.9428C62.9236 38.9504 63.1287 38.958 63.3338 38.9732C63.349 38.9732 63.3717 38.9732 63.3945 38.9732C63.592 38.9808 63.782 38.9884 63.9719 38.996C64.9974 39.0416 65.9393 39.0872 66.7673 39.1327C67.0028 39.1479 67.2307 39.1555 67.451 39.1707C67.846 39.1935 68.2106 39.2163 68.5372 39.2391C68.5904 39.2391 68.636 39.2391 68.6816 39.2467C68.8715 39.2619 69.0538 39.2695 69.2057 39.2847C69.2817 39.2847 69.3576 39.2999 69.4336 39.2999C69.5551 39.3075 69.6615 39.3151 69.7526 39.3227H69.8286C69.8286 39.3227 69.8438 39.3302 69.859 39.3302C69.8894 39.3302 69.9198 39.3302 69.9425 39.3378C69.9425 39.3378 69.9957 39.3378 70.0185 39.3454C70.1173 39.353 70.178 39.3682 70.2008 39.3758H70.2084C70.4515 39.6037 70.4135 41.0546 70.3755 41.48V41.4648Z' fill='%23C2C2AC'/%3E%3Cpath d='M60.0301 41.3434C57.6372 41.3358 55.1304 41.3358 52.8364 41.3282C52.9351 41.1687 53.0642 41.0244 53.1858 40.8952C53.4669 40.6066 53.8467 40.4394 54.2189 40.3255C55.6546 39.9001 59.4451 39.8925 60.0225 41.3434H60.0301Z' fill='%23BBB99D'/%3E%3Cpath d='M70.3761 41.4649C70.3078 41.4649 70.2242 41.4573 70.133 41.4573C70.0723 41.4573 70.0115 41.4573 69.9431 41.4573C69.9127 41.4573 69.8748 41.4573 69.8368 41.4573C69.7456 41.4573 69.6545 41.4573 69.5557 41.4497C69.5405 41.4497 69.5177 41.4497 69.5025 41.4497C67.8921 41.4041 64.9524 41.3813 61.6404 41.3661C61.7163 41.1914 61.7771 41.0167 61.8379 40.842C61.9746 40.4546 62.0734 40.0595 62.1113 39.6493C62.1341 39.4215 62.1417 39.1556 62.0962 38.9049C62.1873 38.9049 62.2861 38.9125 62.3772 38.9125C62.4912 38.9125 62.6051 38.9201 62.7191 38.9277C62.9242 38.9353 63.1293 38.9429 63.3344 38.9581C63.3496 38.9581 63.3723 38.9581 63.3951 38.9581C63.5926 38.9657 63.7825 38.9733 63.9724 38.9809C64.9979 39.0264 65.9399 39.072 66.7679 39.1176C67.0034 39.1328 67.2312 39.1404 67.4515 39.1556C67.8465 39.1784 68.2112 39.2012 68.5378 39.224C68.591 39.224 68.6366 39.224 68.6821 39.2315C68.872 39.2467 69.0544 39.2543 69.2063 39.2695C69.2822 39.2695 69.3582 39.2847 69.4342 39.2847C69.5557 39.2923 69.6621 39.2999 69.7532 39.3075C69.776 39.3075 69.8064 39.3075 69.8292 39.3075C69.8368 39.3075 69.8444 39.3075 69.8596 39.3075C69.89 39.3075 69.9203 39.3075 69.9431 39.3151C69.9431 39.3151 69.9963 39.3151 70.0191 39.3227C70.1178 39.3303 70.1786 39.3455 70.2014 39.3531H70.209C70.4521 39.581 70.4141 41.0319 70.3761 41.4573V41.4649Z' fill='%23BBB99D'/%3E%3Cpath d='M48.6271 40.5383C49.3867 40.599 50.1311 40.6218 50.8832 40.5079C51.7036 40.3863 52.5088 40.166 53.276 39.847C54.0128 39.5431 54.7193 39.1557 55.365 38.6696C50.1691 38.548 45.2391 38.5708 43.6819 38.9658C44.9884 40.1129 46.9711 40.4015 48.6271 40.5383Z' fill='%23C5CAB9'/%3E%3Cpath d='M46.265 39.6872C46.2422 39.6037 46.2042 39.5277 46.151 39.4594C45.9383 39.1935 45.3306 39.1251 45.0572 39.5277V39.5429C44.9964 39.6113 44.966 39.6948 44.9508 39.786C44.9432 39.8392 44.9356 39.8847 44.9432 39.9379C45.004 41.1457 46.5308 40.5076 46.2726 39.6872H46.265Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M45.2166 39.9227C45.2166 39.8696 45.2166 39.8164 45.2242 39.7708C45.2394 39.6872 45.2698 39.6037 45.323 39.5277V39.5125C45.4293 39.3682 45.5661 39.2846 45.7104 39.2467C45.4673 39.2163 45.2014 39.2922 45.0343 39.5277V39.5429C44.9736 39.6113 44.9432 39.6948 44.928 39.786C44.9204 39.8316 44.9128 39.8847 44.9204 39.9379C44.9508 40.5228 45.323 40.6748 45.6724 40.5836C45.4293 40.5456 45.2242 40.3481 45.2014 39.9227H45.2166Z' fill='%23676D54'/%3E%3Cpath d='M51.985 39.4821C51.628 39.1934 50.8988 39.5429 50.7544 39.991C50.6937 40.181 50.7544 40.3785 50.876 40.5228C51.1874 40.8874 51.985 40.819 52.1901 40.1886C52.2737 39.9227 52.1901 39.6416 51.985 39.4745V39.4821Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M51.0051 40.5306C50.8836 40.3863 50.8152 40.1888 50.8836 39.9988C50.9899 39.6722 51.3849 39.4063 51.7419 39.3835C51.3697 39.338 50.876 39.6342 50.7544 39.9988C50.6937 40.1888 50.7544 40.3863 50.876 40.5306C51.0127 40.6825 51.233 40.7661 51.4609 40.7509C51.2786 40.7357 51.1115 40.6597 51.0051 40.5382V40.5306Z' fill='%23676D54'/%3E%3Cpath d='M56.8008 39.6493C56.2842 40.1507 56.9451 41.3889 57.8338 40.652C58.6239 39.9987 57.4085 39.0644 56.8008 39.6493Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M56.6191 40.143C56.6419 40.6596 57.1737 41.1913 57.8346 40.6444C57.9409 40.5608 58.0093 40.4697 58.0472 40.3785C57.9789 40.3633 56.9154 40.0975 56.6191 40.143Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M56.9456 39.6646C57.1204 39.5203 57.3255 39.4823 57.5306 39.5051C57.2875 39.4216 57.0064 39.4443 56.8013 39.6494C56.3987 40.0369 56.7026 40.8649 57.2799 40.88C56.7633 40.7661 56.5127 40.0293 56.9456 39.6646Z' fill='%23676D54'/%3E%3Cpath d='M63.4246 39.7481C62.4903 39.5505 62.1637 41.0318 63.2271 41.0166C63.5234 41.0166 63.8045 40.8115 63.8424 40.295C63.8576 40.0367 63.6753 39.8012 63.4322 39.7481H63.4246Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M63.4252 39.7481C63.3264 39.7253 63.2352 39.7253 63.1517 39.7405C63.2048 39.7405 63.258 39.7405 63.3112 39.7557C63.5543 39.8089 63.7366 40.052 63.7214 40.3026C63.691 40.766 63.4631 40.9711 63.2125 41.0167H63.2276C63.5239 41.0167 63.805 40.8192 63.8429 40.295C63.8581 40.0368 63.6758 39.8013 63.4327 39.7481H63.4252Z' fill='%23676D54'/%3E%3Cpath d='M69.0313 39.733C68.8566 39.7102 68.6743 39.7862 68.5527 39.9153C68.3932 40.0824 68.3628 40.3027 68.3932 40.5154C68.4616 40.9484 68.9325 41.2978 69.3427 41.0092C69.4187 40.9864 69.4871 40.9408 69.5554 40.8876C70.0112 40.5002 69.5403 39.7862 69.0313 39.733Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M69.031 39.7329C68.9474 39.7253 68.8714 39.7329 68.7955 39.7557C69.2816 39.8621 69.6994 40.5305 69.2664 40.9027C69.1981 40.9559 69.1297 41.0015 69.0537 41.0243C69.0082 41.0547 68.955 41.0851 68.9094 41.1003C69.0461 41.1306 69.1981 41.1154 69.3424 41.0091C69.4183 40.9863 69.4867 40.9407 69.5551 40.8876C70.0109 40.5001 69.5399 39.7861 69.031 39.7329Z' fill='%23676D54'/%3E%3Cpath d='M54.2791 29.1815L54.3703 31.3693C54.3551 31.2401 54.3475 31.111 54.3323 30.9818C54.2715 30.3741 54.2639 29.7664 54.2791 29.1815Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.4' d='M58.0474 36.2765L58.1994 36.0866C58.3741 35.0838 58.7159 34.0583 58.9514 33.0632C59.1869 32.0681 59.3236 31.0578 59.354 30.0323C59.3844 29.136 59.3312 28.2472 59.2324 27.3584C59.1793 26.9026 59.1109 26.4393 59.0274 25.9835C59.4451 26.0063 59.9541 26.0595 60.5086 26.1734C61.3746 29.5537 60.0832 36.1093 58.055 36.2689L58.0474 36.2765Z' fill='%23676D54'/%3E%3Cpath d='M54.3094 28.4448C54.3778 29.1817 54.4842 30.0097 54.6209 30.8453C54.6209 30.8832 54.6361 30.9212 54.6361 30.9592C54.7728 31.7644 54.5373 32.4936 54.7652 33.2305C54.8336 33.4508 54.8944 34.3244 54.9323 34.5446C55.2742 36.4209 56.4896 36.7324 57.3024 36.6412C58.7837 36.4741 59.7408 33.8078 59.9155 31.1719C60.0826 28.6195 59.9003 26.0976 59.9003 26.0976C59.9003 26.0976 59.8927 26.09 59.8699 26.0672C59.8168 26.0672 59.7636 26.052 59.7104 26.0444C59.4597 26.014 59.2242 25.9912 59.0191 25.9836C58.2595 25.938 57.7733 25.9988 57.743 25.9836C57.0593 25.7709 56.087 25.6038 54.9703 25.6342C54.7576 25.8165 54.6361 25.9684 54.6209 25.9912V26.0216C54.5981 26.0976 54.5829 26.1811 54.5677 26.2875C54.5677 26.3179 54.5601 26.3482 54.5525 26.3862C54.5525 26.409 54.5449 26.4318 54.5373 26.4622C54.5373 26.4774 54.5373 26.5002 54.5297 26.5154C54.5221 26.5685 54.5145 26.6217 54.5069 26.6749C54.4841 26.8116 54.4614 26.9559 54.4462 27.1155C54.4386 27.1838 54.431 27.2598 54.4158 27.3358C54.4006 27.4421 54.393 27.5485 54.3778 27.6548C54.3778 27.7004 54.3702 27.746 54.3626 27.7915C54.3474 27.9055 54.3398 28.027 54.3322 28.1486C54.3246 28.2473 54.317 28.3385 54.3094 28.4372V28.4448Z' fill='%23676D54'/%3E%3Cpath d='M59.7789 30.0628C59.7713 30.3895 59.7561 30.7237 59.7333 31.0579C59.5814 33.4128 58.5255 35.9499 57.2418 36.3829C57.1126 36.4285 56.9759 36.4513 56.8391 36.4513C55.6085 36.4361 54.9932 35.2587 54.6286 33.2457C54.5223 32.6835 54.4463 32.0606 54.3704 31.3694C54.3552 31.2402 54.3476 31.1111 54.3324 30.982C54.3096 30.7769 54.2944 30.5642 54.2868 30.3515V30.2071C54.264 29.8577 54.264 29.5159 54.2792 29.1816C54.2792 28.931 54.2944 28.6879 54.3172 28.4448C54.3172 28.3461 54.3324 28.2549 54.34 28.1561C54.3476 28.0346 54.3628 27.9131 54.3704 27.7991C54.3704 27.7535 54.378 27.708 54.3856 27.6624C54.4008 27.5484 54.4083 27.4421 54.4235 27.3433C54.4311 27.2674 54.4387 27.1914 54.4539 27.1231C54.4767 26.9635 54.4995 26.8192 54.5147 26.6825C54.5223 26.6293 54.5299 26.5685 54.5375 26.5229C54.5375 26.5078 54.5375 26.485 54.5451 26.4698C54.5451 26.447 54.5527 26.4166 54.5603 26.3938C54.5603 26.3634 54.5679 26.3254 54.5755 26.2951C54.5831 26.2419 54.5907 26.1963 54.5983 26.1507C54.5983 26.1127 54.6134 26.0748 54.6134 26.0444V26.0292C54.6134 26.0292 54.6134 26.014 54.621 26.0064C54.621 26.0064 55.2363 25.186 55.6921 24.9733C55.996 24.829 56.2846 24.7454 56.5505 24.6998C57.4544 24.5479 58.1685 24.867 58.6775 25.1556C59.0193 25.3531 59.3535 25.6494 59.703 26.052C59.703 26.1355 59.8397 27.9738 59.7637 30.0704L59.7789 30.0628Z' fill='%23C2C2AC'/%3E%3Cpath d='M59.779 30.0627C59.7714 30.3894 59.7562 30.7236 59.7334 31.0579C59.5815 33.4127 58.5256 35.9499 57.2418 36.3829C57.1127 36.4284 56.976 36.4512 56.8392 36.4512C55.6086 36.436 54.9933 35.2586 54.6287 33.2456C55.0161 33.3292 58.0015 33.8153 59.7866 30.0703L59.779 30.0627Z' fill='%23BBB99D'/%3E%3Cpath d='M54.2868 30.3515V30.2071C54.264 29.8577 54.264 29.5159 54.2792 29.1816C54.2792 28.931 54.2944 28.6879 54.3172 28.4448C54.3172 28.3461 54.3324 28.2549 54.34 28.1561C54.3476 28.0346 54.3628 27.9131 54.3704 27.7991C54.3704 27.7535 54.378 27.708 54.3856 27.6624C54.4008 27.5484 54.4083 27.4421 54.4235 27.3433C54.4311 27.2674 54.4387 27.1914 54.4539 27.1231C54.4767 26.9635 54.4995 26.8192 54.5147 26.6825C54.5223 26.6293 54.5299 26.5685 54.5375 26.5229C54.5375 26.5077 54.5375 26.485 54.5451 26.4698C54.5451 26.447 54.5527 26.4166 54.5603 26.3938C54.5603 26.3634 54.5679 26.3254 54.5755 26.2951C54.5831 26.2419 54.5907 26.1963 54.5983 26.1507C54.5983 26.1127 54.6134 26.0748 54.6134 26.0444V26.0292C54.6134 26.0292 54.6134 26.014 54.621 26.0064C54.621 26.0064 55.2363 25.186 55.6921 24.9733C55.996 24.829 56.2846 24.7454 56.5505 24.6998C57.4544 24.5479 58.1685 24.867 58.6775 25.1556C58.9281 28.6499 54.2792 30.3591 54.2792 30.3591L54.2868 30.3515Z' fill='%23C5CAB9'/%3E%3Cpath d='M57.629 32.1897C57.4087 31.734 56.8618 31.734 56.5883 31.9087C55.9958 32.3037 56.1629 33.5419 57.0061 33.4203C57.4771 33.352 57.8341 32.6303 57.6214 32.1897H57.629Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M57.6294 32.1896C57.5307 31.9921 57.3787 31.8782 57.2116 31.8326C57.2876 31.8934 57.3559 31.9769 57.4091 32.0833C57.6218 32.5239 57.2572 33.2455 56.7938 33.3139C56.6875 33.3291 56.5963 33.3215 56.5128 33.2987C56.6343 33.3974 56.8014 33.4506 57.0141 33.4202C57.4851 33.3519 57.8421 32.6302 57.6294 32.1896Z' fill='%23676D54'/%3E%3Cpath d='M57.3252 28.2548C57.2568 28.2016 57.1885 28.1636 57.0973 28.1636C56.9606 28.1332 56.8086 28.1484 56.6567 28.232C55.6768 28.7941 57.1733 30.4273 57.6822 29.341C57.8645 28.9612 57.6518 28.4751 57.3176 28.2624L57.3252 28.2548Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M57.325 28.2548C57.325 28.2548 57.3098 28.2472 57.3022 28.2396C57.5225 28.4903 57.6365 28.8625 57.4921 29.1663C57.287 29.5993 56.9224 29.5993 56.6262 29.4094C56.9452 29.7437 57.439 29.8728 57.6896 29.3335C57.8719 28.9536 57.6593 28.4675 57.325 28.2548Z' fill='%23676D54'/%3E%3Cpath d='M57.8039 25.4516C57.7203 25.1022 56.9607 24.5173 56.6188 25.125C56.4593 25.4061 56.596 25.7555 56.786 25.9682C56.9303 26.1277 57.1886 26.272 57.4089 26.2341C57.576 26.2037 57.6975 26.1201 57.7811 25.9682C57.8646 25.8163 57.8419 25.6188 57.8039 25.4592V25.4516Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M57.8039 25.452C57.7431 25.1937 57.3253 24.8215 56.9759 24.8594C57.2797 24.9202 57.5912 25.2241 57.6368 25.4368C57.6748 25.5963 57.7052 25.7938 57.614 25.9457C57.5304 26.0976 57.4089 26.1812 57.2418 26.2116C57.2342 26.2116 57.2266 26.2116 57.219 26.2116C57.2873 26.2268 57.3481 26.2268 57.4089 26.2116C57.576 26.1812 57.6976 26.0976 57.7811 25.9457C57.8647 25.7938 57.8419 25.5963 57.8039 25.4368V25.452Z' fill='%23676D54'/%3E%3Cpath d='M65.3873 40.2301C63.9279 39.9462 61.3907 40.4475 59.8736 40.8866L59.8914 41.5298L59.47 41.0152C58.7824 41.2681 58.7736 41.5209 59.1196 42.0887C59.7805 43.1843 59.6829 43.0823 60.0245 43.0335C62.1137 42.1463 64.4868 41.6983 65.7466 41.7516C65.8708 41.583 65.9639 40.3366 65.3917 40.2301H65.3873Z' fill='%23CE8000'/%3E%3Cpath opacity='0.6' d='M65.387 40.2303C65.0055 40.1549 64.5486 40.1371 64.0562 40.1549C64.0695 40.2835 64.0784 40.4077 64.0695 40.5186C64.0518 41.0287 63.8566 41.5166 63.5683 41.9691C64.4288 41.805 65.1918 41.734 65.7418 41.7562C65.866 41.5876 65.9592 40.3412 65.3914 40.2347L65.387 40.2303Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M65.3789 40.2259C64.8643 40.1283 64.2123 40.1238 63.5247 40.1815C63.3384 40.5364 63.0545 40.8646 62.7352 41.1263C62.6154 41.2239 62.3226 41.5167 62.1275 41.4058C61.9855 41.3259 61.9589 41.1662 61.95 41.011C61.6883 41.5211 61.1072 41.8804 60.6149 42.2353C60.3177 42.4526 60.0249 42.7631 59.7011 43.0115C59.7898 43.0914 59.8519 43.0559 60.0072 43.0337C62.0964 42.1465 64.4696 41.6985 65.7293 41.7518C65.8535 41.5832 65.9467 40.3368 65.3744 40.2303L65.3789 40.2259Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M62.305 42.182C62.2606 42.213 62.2163 42.2485 62.1763 42.284C62.8772 42.0888 63.5558 41.9513 64.168 41.8582C64.199 41.6098 64.1769 41.348 64.1236 41.1263C63.893 41.3126 63.6224 41.5388 63.2986 41.561C63.2764 41.561 63.2587 41.5477 63.2542 41.5299L63.232 41.348C63.0369 41.6985 62.6465 41.9336 62.3094 42.182H62.305Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M64.5931 41.0331C64.5975 41.0864 64.5754 41.2416 64.633 41.2283C64.6907 41.2194 64.7484 41.2017 64.8016 41.1795C64.9347 41.1174 65.0544 41.0331 65.1609 40.9355C65.325 40.7803 65.4891 40.5807 65.6133 40.3678C65.5512 40.2968 65.4758 40.2436 65.3782 40.2258C65.1076 40.1726 64.7971 40.146 64.46 40.1415C64.5044 40.4387 64.5665 40.7315 64.5931 41.0287V41.0331Z' fill='%23C77500'/%3E%3Cpath d='M55.2729 40.9443L54.9136 41.3435L54.9934 40.8378C53.6317 40.412 50.775 39.9418 49.5286 40.3321C49.4487 40.3543 49.2136 41.7959 49.6439 41.7604C49.6705 41.7604 49.6971 41.7604 49.7282 41.7604C49.7947 41.7072 49.8746 41.654 49.9677 41.6185C50.5754 41.3834 51.1432 41.4588 51.1432 41.4588C51.1432 41.4588 50.9569 41.6318 50.7351 41.8802C52.2477 42.1508 54.6386 42.8028 55.3172 43.0424C55.7165 43.1843 56.0979 42.5544 56.2443 41.9689C56.4306 41.2104 56.333 41.2903 55.2684 40.9487L55.2729 40.9443Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M55.2729 40.9486L54.9136 41.3478L54.9935 40.8421C54.8959 40.8111 54.8781 40.8067 54.7628 40.7756C54.612 40.8732 54.4878 40.9575 54.3547 41.024C53.8579 41.2724 53.33 41.4631 52.7844 41.574C52.1546 41.7027 51.5069 41.7648 50.8638 41.7426C50.8238 41.7825 50.7839 41.8313 50.7396 41.8801C52.2522 42.1507 54.6475 42.8027 55.3261 43.0423C55.7254 43.1842 56.1068 42.5543 56.2532 41.9688C56.4395 41.2103 56.3464 41.2902 55.2774 40.9486H55.2729Z' fill='%23C77500'/%3E%3Cpath opacity='0.6' d='M55.7479 41.0995C55.5837 41.5919 55.2865 42.0177 54.8563 42.3548C54.6833 42.4879 54.5058 42.621 54.324 42.7407C54.7631 42.8649 55.118 42.9714 55.322 43.0424C55.7212 43.1843 56.1027 42.5544 56.2491 41.9689C56.4043 41.3435 56.3644 41.2902 55.7479 41.0995Z' fill='%23A05A07'/%3E%3Cpath d='M26.0353 89.2001H30.1601L21.0597 74.0151C20.6875 73.8936 10.2274 77.7069 6.62677 87.3086C13.5318 85.6602 22.8828 90.3319 26.0353 93.6135V89.2001Z' fill='%239EA58E'/%3E%3Cpath d='M26.0807 93.6894C26.3466 93.4995 28.0862 91.9878 28.3368 91.7827C28.4964 91.6536 28.6559 91.5169 28.8078 91.3801C29.3775 90.8788 29.9093 90.3318 30.3954 89.7393L20.8621 73.8251C20.4899 73.7036 10.0298 77.5169 6.42914 87.1186C13.5241 85.4246 23.1866 90.4002 26.0807 93.6894Z' fill='%239EA58E'/%3E%3Cpath d='M14.0635 82.7508C12.1644 82.3558 8.99677 84.027 7.83454 86.4047C7.75098 86.5794 7.65982 86.7465 7.56866 86.9136C9.90073 86.5946 12.4379 86.8984 14.8839 87.5593C15.484 85.7134 15.9626 83.1535 14.0635 82.7508Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M20.8623 73.8251C20.5964 73.734 15.0283 75.7166 10.6149 80.4643C10.6377 80.4643 10.668 80.4643 10.6908 80.4719C14.3295 80.9125 18.477 83.2293 21.9182 90.5142C23.7489 91.5776 25.215 92.7095 26.0809 93.6894C26.3468 93.4995 28.0864 91.9878 28.337 91.7827C28.4966 91.6536 28.6561 91.5169 28.808 91.3801C29.3777 90.8788 29.9095 90.3243 30.3956 89.7393L20.8623 73.8251Z' fill='%23949984'/%3E%3Cpath d='M28.808 91.3803C29.3777 90.8789 29.9095 90.332 30.3956 89.7395L20.8623 73.8252C20.6344 73.7493 16.5096 75.1926 12.5595 78.5957C18.9404 80.791 24.9187 86.2148 28.3674 91.7601C28.5193 91.6385 28.6713 91.5094 28.8156 91.3803H28.808Z' fill='%23949984'/%3E%3Cpath d='M30.4631 91.6689C30.577 91.5018 30.7973 91.4258 30.9796 91.3574C31.2151 91.2739 31.4582 91.2055 31.6937 91.1144C32.4381 90.8257 33.1902 90.5446 33.965 90.3244C34.322 90.2256 34.6866 90.142 35.0513 90.0585C35.3475 89.9825 35.6514 89.9066 35.9552 89.8838C36.2439 89.861 36.5553 89.861 36.8136 89.9977H36.8288H36.844C37.4213 89.5951 37.9531 89.1393 38.4468 88.6456C37.5353 82.9408 27.8804 68.1508 27.8804 68.1508C20.3221 67.9609 12.4371 70.4525 8.57819 74.8735C18.7648 75.6407 26.3459 83.8295 29.9921 91.8436C30.1441 91.8816 30.3188 91.7752 30.4555 91.6765L30.4631 91.6689Z' fill='%239EA58E'/%3E%3Cpath d='M36.7832 89.671C37.3605 89.2684 37.8922 88.8126 38.386 88.3189C37.4744 82.6141 27.8196 67.8241 27.8196 67.8241C20.2613 67.6342 12.3763 70.1258 8.5174 74.5468C18.8256 75.3216 26.4826 83.7383 30.0757 91.8436C32.4609 91.7752 34.8157 91.0308 36.7756 89.6634L36.7832 89.671Z' fill='%239EA58E'/%3E%3Cpath d='M17.1169 73.2097C15.2102 72.3969 11.4576 73.4983 10.1131 74.7365C12.9845 75.1771 15.6356 76.2178 18.0208 77.6611C19.0691 75.9595 18.8336 73.9541 17.1169 73.2173V73.2097Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M27.8203 67.8316C23.1106 67.7177 18.2717 68.6368 14.3672 70.4144C19.3884 72.2147 24.9717 77.0307 24.9033 83.6015C27.0834 86.1615 28.823 89.0253 30.0764 91.8435C32.4616 91.7751 34.8165 91.0307 36.7763 89.6634C37.3536 89.2608 37.8854 88.805 38.3791 88.3112C37.4676 82.6064 27.8127 67.8164 27.8127 67.8164L27.8203 67.8316Z' fill='%23949984'/%3E%3Cpath d='M27.8196 67.8317C23.5733 67.7253 19.2282 68.4697 15.544 69.9206C20.869 70.1409 31.4734 82.9711 33.4333 91.1599C33.4409 91.2055 33.4561 91.2434 33.4637 91.289C34.6411 90.9244 35.7577 90.385 36.7756 89.6786C37.3529 89.276 37.8847 88.8202 38.3785 88.3265C37.4669 82.6216 27.812 67.8317 27.812 67.8317H27.8196Z' fill='%23949984'/%3E%3Cpath d='M13.4029 68.675C13.1826 68.7433 13.2965 68.9408 13.0762 69.0168C23.787 69.3282 33.1836 78.4894 35.3638 91.9044L35.4169 91.9272L40.4989 91.9044V66.2441C34.08 65.0363 21.8196 66.0542 13.3953 68.6826L13.4029 68.675Z' fill='%239EA58E'/%3E%3Cpath d='M41.418 92.3678C44.3426 86.9896 48.2167 73.8784 44.5704 67.8089C42.3675 64.1399 24.182 65.0363 13.0838 68.6901C23.8857 69.0092 33.3507 78.3146 35.4245 91.9196C37.9617 92.3602 39.8076 92.4665 41.418 92.3678Z' fill='%239EA58E'/%3E%3Cpath d='M26.9546 71.9186C26.3924 71.4248 25.686 71.1893 24.9643 71.0526C24.3414 70.931 23.6957 70.8703 23.1108 70.6196C22.5259 70.3689 22.1157 69.9207 21.9258 69.313C21.7511 68.7281 21.47 68.1128 20.9459 67.7634C20.4749 67.4519 19.9052 67.3836 19.3507 67.4064C18.5986 67.4367 17.8618 67.5811 17.1402 67.7482C16.0691 67.9913 14.9676 68.2875 13.9497 68.7509C18.9329 69.1231 23.597 71.4096 27.3268 75.1394C27.4103 74.9951 27.4787 74.8507 27.5395 74.6988C27.9345 73.7265 27.7598 72.6402 26.9546 71.9262V71.9186Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M44.5701 67.809C43.4611 65.9555 38.2728 65.2718 31.9831 65.5149C32.0742 66.0542 32.1046 66.6088 32.1198 67.1557C32.135 68.1356 32.0666 69.1231 31.8919 70.0879C31.5881 71.7211 30.9955 73.3239 30.0156 74.676C29.5674 75.2989 29.0433 75.8459 28.4736 76.3472C31.9603 80.3277 34.4746 85.6679 35.4318 91.9196C37.9689 92.3602 39.8148 92.4666 41.4252 92.3678C44.3498 86.9896 48.2239 73.8784 44.5777 67.809H44.5701Z' fill='%23949984'/%3E%3Cpath d='M40.7871 84.3082C40.149 87.1265 39.0323 89.8915 37.308 92.2008C38.926 92.3983 40.225 92.4363 41.41 92.3679C44.3345 86.9897 48.2087 73.8785 44.5624 67.8091C44.0231 66.9127 42.5266 66.2898 40.4149 65.91C40.5972 66.776 40.7491 67.6496 40.8858 68.5307C41.3492 71.5313 41.5771 74.5698 41.5391 77.6083C41.5087 79.8568 41.2808 82.1205 40.7795 84.3158L40.7871 84.3082Z' fill='%23949984'/%3E%3Cpath d='M39.1687 66.6465C39.6245 66.8136 41.0298 67.4137 40.9158 67.8847C39.9359 68.2341 37.9761 67.9834 36.9278 67.991C28.3516 68.0062 26.3462 70.0041 24.1584 69.3128C23.9077 69.2368 24.7661 68.143 24.8877 68.067C26.3006 67.2314 28.1693 67.0187 29.7645 66.7453C32.1041 66.3502 36.9354 65.8185 39.1611 66.6389L39.1687 66.6465Z' fill='%23949984'/%3E%3Cpath opacity='0.63' d='M24.7436 69.4494C24.417 69.4494 24.0296 69.3886 23.8852 69.1C23.7941 68.9177 23.8245 68.6974 23.9232 68.5227C24.022 68.348 24.1815 68.2112 24.3486 68.0973C24.6677 67.8694 25.0323 67.7023 25.4121 67.6035C25.8451 67.4896 26.3389 67.4668 26.7035 67.7099C28.2683 68.7582 26.4528 69.4418 24.7436 69.457V69.4494Z' fill='%23676D54'/%3E%3Cpath opacity='0.63' d='M39.8748 67.201C39.9508 67.3681 40.0723 67.5125 40.0571 67.6948C39.9964 68.3557 37.2769 68.1885 36.5477 67.7404C36.2666 67.5732 35.9779 67.315 36.0007 66.9883C36.0159 66.7908 36.1678 66.6161 36.3426 66.5174C36.5173 66.4186 37.4668 66.2971 37.6643 66.2819C38.0517 66.2591 38.4543 66.3123 38.8265 66.4186C39.2519 66.5477 39.6849 66.7832 39.8672 67.1934L39.8748 67.201Z' fill='%23676D54'/%3E%3Cpath d='M28.7312 61.4809C27.8425 62.0355 25.7383 63.1369 25.1458 62.271C24.9407 61.9747 25.0926 61.5645 25.2445 61.2455C25.6699 60.3643 26.1333 59.4755 26.8322 58.7919C27.3563 58.2829 27.9868 57.8955 28.6097 57.5233C29.5592 56.946 30.5088 56.3762 31.5419 55.9736C32.5142 55.5938 33.5397 55.3735 34.5576 55.1608C35.1501 55.0393 35.7502 54.9102 36.3427 55.0013C34.9146 57.3865 33.3954 59.8705 31.0253 61.329C29.0123 62.5672 27.7285 61.8228 28.7312 61.4961V61.4809Z' fill='%2334381B'/%3E%3Cpath d='M39.8375 41.0242C41.6302 43.3107 43.4077 47.2152 39.4121 51.2868C39.3589 51.34 39.2981 51.3703 39.245 51.3779C37.9916 54.5684 35.6291 57.9032 36.0773 59.4376C36.3052 60.2124 36.647 60.9948 35.8646 61.5646C34.0035 62.9243 31.5803 60.2732 31.2841 57.9791C28.1544 59.6123 26.3768 59.1413 24.4626 58.8831C24.379 59.111 24.2879 59.3313 24.1967 59.5515C23.8245 60.4327 23.08 62.0887 21.8646 61.8684C20.7556 61.6633 20.4745 59.8782 20.315 58.9818C19.4262 59.6807 18.3855 60.1441 17.6259 61.0252C16.7675 62.0127 14.238 65.0133 14.3595 63.0155C14.3747 62.7648 14.4962 62.5369 14.6178 62.3242C14.4279 62.6205 14.2152 62.9091 13.9873 63.175C13.5695 63.6687 13.0605 63.4181 13.1289 62.5217C13.4252 58.8299 17.2157 48.9471 19.3731 45.7719C20.9683 43.417 23.1028 41.1685 25.8831 40.2798C25.8527 39.5657 26.1186 36.3677 23.7257 35.5473C23.5054 35.4713 23.7257 34.856 23.8169 34.7041C23.5814 34.2255 23.4675 33.6862 23.3155 33.1848C23.1788 32.7366 22.9737 32.3188 22.7762 31.8934C22.7078 31.8783 22.6471 31.8327 22.6015 31.7415C22.5103 31.5364 22.4572 31.3389 22.4496 31.149C22.3812 30.9591 22.3204 30.7692 22.2748 30.5717C22.2141 30.283 22.5179 30.1235 22.7154 30.2147C23.6954 28.6878 30.175 25.0948 34.2466 32.5771C37.3231 38.2288 33.9428 33.4659 39.8527 41.0166L39.8375 41.0242Z' fill='%23676D54'/%3E%3Cpath d='M26.7257 29.9792C25.9357 30.7844 24.0063 31.0807 24.3329 29.9944C24.8494 28.2624 28.4577 28.2169 26.7257 29.9792Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M39.8374 41.0242C33.9275 33.4735 37.3079 38.2364 34.2314 32.5847C30.1598 25.1024 23.6801 28.6954 22.7002 30.2223C22.5027 30.1311 22.1912 30.2907 22.2596 30.5793C22.3052 30.7768 22.3659 30.9667 22.4343 31.1566C22.4419 31.3465 22.4951 31.544 22.5862 31.7491C22.6242 31.8403 22.6926 31.8859 22.761 31.9011C22.9585 32.3265 23.1636 32.7443 23.3003 33.1924C23.4522 33.6938 23.5662 34.2331 23.8017 34.7117C23.7105 34.8636 23.4826 35.4789 23.7105 35.5549C26.1033 36.3677 25.8375 39.5657 25.8678 40.2874C24.7968 40.6292 23.8169 41.1761 22.9281 41.8522C23.1712 41.9965 23.3915 42.1789 23.5662 42.4067C23.6953 42.5739 23.7789 42.7638 23.8548 42.9613C23.9536 43.2196 24.0447 43.4778 24.1131 43.7513C24.2954 44.4957 24.3562 45.3161 24.0827 46.0454C23.946 46.4176 23.7257 46.7442 23.4978 47.0709C23.2775 47.3899 23.042 47.7014 22.7838 47.9976C22.2672 48.5977 21.6823 49.1371 21.0594 49.6156C20.5352 50.0182 19.9807 50.3905 19.3958 50.7019C18.8033 51.0133 18.1728 51.2792 17.5119 51.4235C17.1853 51.4919 16.8434 51.5451 16.5092 51.5375C14.8532 55.5255 13.3036 60.2352 13.1213 62.5369C13.0529 63.4333 13.5619 63.684 13.9797 63.1902C14.2075 62.9243 14.4202 62.6357 14.6101 62.3394C14.4886 62.5597 14.3671 62.7876 14.3519 63.0307C14.2303 65.0285 16.7675 62.028 17.6183 61.0405C18.3779 60.1517 19.4186 59.6959 20.3074 58.997C20.4669 59.8934 20.7479 61.6785 21.857 61.8836C23.0724 62.1039 23.8169 60.4479 24.1891 59.5668C24.2802 59.3541 24.3714 59.1262 24.4549 58.8983C26.3768 59.149 28.1543 59.6275 31.2764 57.9943C31.5727 60.2884 33.9959 62.9395 35.857 61.5798C36.647 61.0025 36.2976 60.2201 36.0697 59.4528C35.6215 57.9184 37.9763 54.5836 39.2373 51.3932C39.2981 51.3856 39.3513 51.3552 39.4044 51.302C43.4001 47.2304 41.6226 43.3259 39.8298 41.0394L39.8374 41.0242ZM27.0301 29.6906C26.8022 30.0704 26.4148 30.3514 26.0122 30.5261C25.5868 30.7085 24.9563 30.8984 24.5157 30.6705C24.2195 30.5185 24.1891 30.1843 24.3106 29.8957C24.5081 29.4019 25.0019 28.9309 25.5488 28.7714L25.4652 28.7866C25.4652 28.7866 25.4121 28.7334 25.45 28.7258C25.7463 28.6802 26.0426 28.6271 26.3464 28.6195C26.5895 28.6195 26.9465 28.6195 27.1136 28.8246C27.3111 29.0677 27.182 29.4475 27.0377 29.6906H27.0301Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M26.7645 31.3921C27.0076 31.4529 27 31.7264 26.9848 31.9315C26.962 32.1973 26.8481 32.4176 26.6354 32.5771C26.2707 32.8582 25.7314 32.805 25.4047 32.4936C24.6679 31.8099 25.0933 30.9591 26.7645 31.3845V31.3921Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M22.4344 31.1566C22.3661 30.9667 22.3053 30.7768 22.2597 30.5793C22.199 30.2906 22.5028 30.1311 22.7003 30.2222C22.7535 30.1463 22.8142 30.0627 22.8902 29.9792C25.8376 33.0101 26.7491 35.0231 26.7036 36.4512C26.6808 37.1273 26.1414 37.3248 25.4958 37.3855C25.1995 36.6031 24.6678 35.8891 23.7106 35.5624C23.4903 35.4865 23.7106 34.8712 23.8018 34.7192C23.5663 34.2407 23.4523 33.7013 23.3004 33.2C23.1637 32.7518 22.9586 32.334 22.7611 31.9086C22.6927 31.8934 22.6319 31.8478 22.5864 31.7567C22.4952 31.5516 22.442 31.3541 22.4344 31.1642V31.1566Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M24.7969 36.2309C24.5158 35.9422 24.1588 35.6991 23.7106 35.5472C23.4903 35.4713 23.7106 34.856 23.8018 34.704C23.5663 34.2255 23.4523 33.6861 23.3004 33.1848C23.1637 32.7366 22.9586 32.3188 22.7611 31.8934C22.6927 31.8782 22.6319 31.8326 22.5864 31.7415C22.4952 31.5364 22.442 31.3389 22.4344 31.149C22.3661 30.9591 22.3053 30.7692 22.2597 30.5716C22.199 30.283 22.5028 30.1235 22.7003 30.2146C22.7383 30.1539 22.7915 30.0855 22.8522 30.0171C24.0904 31.4072 26.2174 34.5369 25.3742 35.8511C25.2603 36.0258 25.0324 36.1853 24.7969 36.2309Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M13.7593 63.3573C13.8352 63.3194 13.9036 63.251 13.9796 63.175C14.0935 63.0459 14.1999 62.9092 14.3062 62.7648C14.4126 62.6281 14.5113 62.4762 14.6024 62.3318C14.5721 62.385 14.5417 62.4382 14.5189 62.4914C14.5037 62.5218 14.4885 62.5445 14.4733 62.5749C14.405 62.7193 14.3518 62.8636 14.3442 63.0231C14.3062 63.646 14.5265 63.7827 14.8759 63.646C15.6432 63.3422 17.0257 61.709 17.6106 61.0329C17.8993 60.6986 18.2259 60.4252 18.5677 60.1821C18.9627 59.8934 19.3805 59.6428 19.7907 59.3617C19.9654 59.2402 20.1325 59.1186 20.2997 58.9895C20.4592 59.8858 20.7403 61.671 21.8493 61.8761C22.1076 61.9216 22.3431 61.8837 22.5558 61.7925C22.6165 61.7697 22.6697 61.7393 22.7229 61.7014C22.8672 61.6102 22.9964 61.5039 23.1255 61.3747C23.2015 61.2988 23.2698 61.2152 23.3382 61.124C23.361 61.0937 23.3838 61.0633 23.4066 61.0329C23.4749 60.9417 23.5357 60.8506 23.5965 60.7518C23.6345 60.6835 23.6724 60.6227 23.7028 60.5619C23.7256 60.5239 23.7408 60.4935 23.7636 60.4556C23.794 60.3948 23.8319 60.3264 23.8623 60.2657C23.9231 60.1289 23.9839 60.0074 24.0371 59.8934C24.0902 59.7719 24.1358 59.658 24.1814 59.5592C24.2725 59.3389 24.3637 59.1186 24.4473 58.8907C26.3691 59.1414 28.1466 59.62 31.2687 57.9868C31.5574 60.2277 33.8819 62.8104 35.7202 61.6558C35.7657 61.6254 35.8113 61.595 35.8493 61.5646C35.9632 61.4811 36.0544 61.3899 36.1304 61.2988C36.1531 61.2608 36.1835 61.2304 36.1987 61.1924C36.2215 61.1544 36.2443 61.1164 36.2595 61.0785C36.4646 60.5847 36.2291 60.015 36.062 59.4453C35.8949 58.8755 36.1152 58.0551 36.5254 57.0904C36.5861 56.9461 36.6545 56.7942 36.7229 56.6422C36.7912 56.4827 36.8672 56.3232 36.9508 56.1637C37.0267 56.0041 37.1027 55.8446 37.1862 55.6775C37.3078 55.4192 37.4369 55.1685 37.566 54.9103C38.1358 53.7784 38.7511 52.5782 39.222 51.3932C39.2828 51.3856 39.336 51.3552 39.3892 51.302C39.6094 51.0741 39.8145 50.8463 40.0045 50.6184C40.0956 50.5044 40.1868 50.3981 40.2703 50.2841C43.081 46.5847 41.4478 43.1284 39.807 41.0394C38.5764 39.467 37.7484 38.4339 37.1862 37.7199C35.3327 35.403 36.2595 36.588 35.0213 34.142C34.8162 33.7394 34.5503 33.2305 34.2085 32.5924C32.8943 30.1767 31.3219 28.9158 29.7722 28.3612C28.8987 28.0574 28.0327 27.9738 27.2123 28.0346C34.0186 35.479 29.8786 52.8061 25.6779 49.0839C23.1407 52.7833 19.616 54.7659 15.9622 52.8061C15.2026 54.728 14.5037 56.7258 13.9796 58.4957C13.501 60.1137 13.1668 61.5418 13.0908 62.5294C13.03 63.2738 13.3719 63.57 13.7365 63.3649L13.7593 63.3573Z' fill='%23464C2E'/%3E%3Cpath opacity='0.7' d='M13.7592 63.3573C13.8352 63.3193 13.9035 63.251 13.9795 63.175C14.0934 63.0459 14.1998 62.9091 14.3061 62.7648C14.4125 62.6281 14.5112 62.4762 14.6024 62.3318C14.572 62.385 14.5416 62.4382 14.5188 62.4914C14.5036 62.5217 14.4884 62.5445 14.4732 62.5749C14.4049 62.7192 14.3593 62.8636 14.3441 63.0231C14.3289 63.3118 14.3669 63.5017 14.4505 63.6004C14.4656 63.6156 14.4808 63.6308 14.496 63.646C14.5112 63.6612 14.5264 63.6688 14.5416 63.6688C14.6328 63.7068 14.7467 63.6992 14.8758 63.646C15.6431 63.3421 17.0256 61.7089 17.6105 61.0329C17.8992 60.6986 18.2258 60.4252 18.5676 60.1821C18.9626 59.8934 19.3804 59.6427 19.7906 59.3617C19.9654 59.2401 20.1325 59.1186 20.2996 58.9895H20.3072C20.4667 59.8782 20.7478 61.6709 21.8568 61.8685C21.9632 61.8912 22.0695 61.8912 22.1759 61.8836C22.2063 61.8836 22.2367 61.876 22.267 61.8685H22.2746C22.2746 61.8685 22.3354 61.8533 22.3658 61.8457C22.4114 61.8305 22.4569 61.8153 22.5101 61.8001C22.5253 61.8001 22.5481 61.7925 22.5633 61.7849C22.6241 61.7545 22.6772 61.7317 22.7304 61.6937C22.7912 61.6558 22.8444 61.6178 22.8975 61.5722C22.9279 61.5494 22.9507 61.5266 22.9811 61.5038C23.0343 61.4583 23.0874 61.4127 23.133 61.3595C23.209 61.2835 23.2773 61.2 23.3457 61.1088C23.3685 61.0784 23.3913 61.0481 23.4141 61.0177C23.4824 60.9265 23.5432 60.8354 23.604 60.7366C23.642 60.6682 23.68 60.6075 23.7103 60.5467C23.7331 60.5087 23.7483 60.4783 23.7711 60.4404C23.8015 60.3796 23.8395 60.3112 23.8699 60.2504C23.9306 60.1213 23.9914 59.9922 24.0446 59.8782C24.0978 59.7567 24.1509 59.6427 24.1965 59.5364C24.2876 59.3237 24.3712 59.0958 24.4624 58.8755C25.6398 59.0274 26.764 59.2705 28.1845 59.0502C28.2605 59.035 28.3441 59.0198 28.4276 59.0047C29.2556 58.8527 30.1824 58.5337 31.2838 57.964C31.5041 59.6427 32.8639 61.5266 34.3148 61.8609C34.4667 61.8988 34.6186 61.914 34.7629 61.914C34.8085 61.914 34.8541 61.914 34.8997 61.914C34.9376 61.914 34.9832 61.9064 35.0212 61.8988C35.0364 61.8988 35.0592 61.8988 35.0744 61.8912C35.1124 61.8912 35.1428 61.876 35.1807 61.8685C35.2339 61.8533 35.2947 61.8381 35.3478 61.8153H35.3631C35.4846 61.7697 35.6137 61.7089 35.7353 61.633C35.7808 61.6026 35.8264 61.5722 35.8644 61.5418C35.9784 61.4583 36.0695 61.3671 36.1455 61.2759C36.1683 61.238 36.1986 61.2076 36.2138 61.1696C36.2366 61.1316 36.2594 61.0936 36.2746 61.0557C36.2898 61.0253 36.2974 60.9949 36.305 60.9645V60.9493C36.4493 60.4783 36.2442 59.9466 36.0847 59.4225C35.9176 58.8527 36.1379 58.0323 36.5481 57.0676C36.6088 56.9233 36.6772 56.7713 36.7456 56.6194C36.8139 56.4599 36.8899 56.3004 36.9735 56.1408C37.0494 55.9813 37.1254 55.8218 37.2089 55.6547C37.3305 55.3964 37.4596 55.1457 37.5888 54.8875C38.1585 53.7556 38.7814 52.5554 39.2447 51.3704C39.2979 51.3552 39.3587 51.3324 39.4119 51.2792C39.6322 51.0513 39.8373 50.8234 40.0272 50.5956C40.1183 50.4816 40.2095 50.3753 40.293 50.2613C41.5616 48.5901 41.9262 46.9645 41.7895 45.4984V45.4833C41.7743 45.3693 41.7667 45.2478 41.7439 45.1338C41.5844 44.0476 41.159 43.0524 40.6425 42.1941L40.5589 42.0497C40.4981 41.951 40.445 41.8674 40.3842 41.7763C40.2019 41.5028 40.0196 41.2445 39.8297 41.009C39.6094 40.728 39.3967 40.4621 39.1992 40.2114C38.3104 39.0796 37.6723 38.282 37.2089 37.6971C37.8926 40.1203 39.2296 43.9564 36.738 48.9472C35.0212 52.3807 31.9447 54.3177 29.0657 54.7051C26.6577 55.0242 24.0522 54.7127 25.2524 52.9048C25.8601 51.9857 26.3994 50.9298 26.331 49.8283C25.3283 53.1251 22.381 55.837 16.3799 54.1582C16.1065 54.0823 15.8254 53.9987 15.5519 53.9075C14.9594 55.4724 14.4201 57.0524 13.9947 58.4805C13.5161 60.0985 13.1895 61.5266 13.1135 62.5065C13.0527 63.251 13.3946 63.5472 13.7516 63.3497L13.7592 63.3573Z' fill='%23464C2E'/%3E%3Cpath opacity='0.7' d='M14.4505 63.5928C14.4505 63.5928 14.4809 63.6232 14.5037 63.6384C14.5189 63.6536 14.5341 63.6612 14.5493 63.6612C15.157 63.9118 16.9269 61.8153 17.6181 61.0252C18.3854 60.1365 19.4185 59.6807 20.3072 58.9818C20.4744 59.8858 20.7554 61.6633 21.8569 61.8684H21.8645C21.9708 61.8912 22.0772 61.8912 22.1835 61.8836C22.2139 61.8836 22.2443 61.876 22.2747 61.8684H22.2823C22.2823 61.8684 22.343 61.8532 22.3734 61.8456C22.5633 61.7925 22.7381 61.7013 22.8976 61.5722C22.928 61.5494 22.9507 61.5266 22.9811 61.5038C23.5584 61.0025 23.9535 60.1137 24.189 59.544C24.2801 59.3237 24.3712 59.1034 24.4548 58.8755C25.6322 59.035 26.7565 59.2705 28.177 59.0502C28.253 59.035 28.3365 59.0198 28.4201 59.0046C29.2481 58.8527 30.1748 58.5337 31.2763 57.9639C31.4966 59.6503 32.8639 61.5342 34.3148 61.8684C34.4667 61.9064 34.6187 61.9216 34.763 61.9216C34.8086 61.9216 34.8541 61.9216 34.8997 61.9216C34.9377 61.9216 34.9833 61.914 35.0212 61.9064C35.0364 61.9064 35.0592 61.9064 35.0744 61.8988C35.1124 61.8988 35.1428 61.8836 35.1808 61.876C35.4163 61.8229 35.6442 61.7165 35.8568 61.557C36.6469 60.9797 36.2974 60.1972 36.0771 59.4224C35.629 57.888 37.9838 54.5532 39.2448 51.3628C39.3056 51.3552 39.3587 51.3248 39.4119 51.2716C41.5389 49.1067 42.025 46.9949 41.7592 45.1414C41.5996 44.0551 41.1743 43.06 40.6577 42.2016L40.5741 42.0573C40.5134 41.9585 40.4602 41.8674 40.3994 41.7838C40.2171 41.5104 40.0348 41.2521 39.8449 41.0166C39.6246 40.7355 39.4119 40.4697 39.2144 40.219C39.2448 42.1257 39.2448 43.7665 39.2448 43.7741C39.146 52.2135 30.9648 57.6297 22.9128 54.9558C22.89 55.0166 15.6583 62.8104 14.4657 63.5928H14.4505Z' fill='%23464C2E'/%3E%3Cpath d='M24.7742 35.8284C24.7134 35.9044 24.6147 35.9348 24.4932 35.8816C20.2013 34.1192 12.8708 38.0693 13.8583 36.5121C14.7775 35.0688 16.0157 32.9494 17.4058 31.7948C18.0591 31.2478 18.7655 30.6933 19.6391 30.5794L22.822 30.1996C23.6196 30.9136 25.6022 35.5777 24.7818 35.8284H24.7742Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M22.8136 30.192C23.6112 30.906 25.5938 35.5625 24.7734 35.8208C24.7127 35.8968 24.6139 35.9272 24.4924 35.874C20.7018 34.3167 14.5488 37.2109 13.8423 36.8463C13.9487 36.8311 14.0551 36.8159 14.1614 36.8007C14.5944 36.7324 15.0274 36.6336 15.4452 36.5045C16.2808 36.2538 17.086 35.8892 17.8608 35.479C18.2482 35.2739 18.628 35.046 19.0002 34.8181C19.3421 34.6054 19.6915 34.3927 20.003 34.1268C20.5803 33.6179 21.0057 32.957 21.3855 32.2885C21.6589 31.8024 22.0312 30.9592 21.9172 30.3135L22.8212 30.2071L22.8136 30.192Z' fill='%2334381B'/%3E%3Cpath opacity='0.3' d='M24.7733 35.8283C24.7125 35.9042 24.6138 35.9346 24.4922 35.8814C22.7831 35.1826 20.6029 35.3801 18.6507 35.7827C19.1141 35.5092 19.623 35.2889 20.094 35.1218C20.6333 34.9319 21.1955 34.8179 21.7424 34.6584C22.2513 34.5065 22.7755 34.309 23.1629 33.9368C23.6187 33.4962 23.6718 32.8809 23.5655 32.2884C23.4895 31.8478 23.3528 31.4148 23.2237 30.9894C23.1705 30.8071 23.1021 30.6324 23.0262 30.4653C23.9149 31.6731 25.5177 35.6004 24.7657 35.8359L24.7733 35.8283Z' fill='%2334381B'/%3E%3Cpath opacity='0.4' d='M14.4957 36.2688C14.3514 36.3296 14.1691 36.3448 14.0248 36.2688C14.0476 36.2233 14.078 36.1701 14.1007 36.1245C14.4882 35.5092 14.9135 34.8179 15.3845 34.1419C15.4605 34.2558 15.5136 34.3698 15.5516 34.4609C15.8175 35.2813 14.83 36.1245 14.4957 36.2764V36.2688Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M17.3979 31.7947C18.0512 31.2477 18.7577 30.6932 19.6312 30.5793L21.0897 30.4045C21.0897 30.4045 21.1201 30.4425 21.1277 30.4653C21.5531 31.1718 21.2796 32.4631 19.8287 33.124C17.7701 34.066 16.6991 34.5901 16.494 32.6986C16.7902 32.3644 17.0941 32.0529 17.4055 31.7947H17.3979Z' fill='%23676D54'/%3E%3Cpath d='M26.3843 31.6731C26.5742 31.6503 26.7717 31.6275 26.9768 31.5744C27.0832 31.7643 27.1211 31.977 27.068 32.1973C26.9768 32.5619 26.6274 32.9113 26.2248 32.8809C25.769 32.843 25.4044 32.4403 25.3968 31.9846C25.3968 31.8934 25.4044 31.8099 25.4348 31.7187C25.7538 31.7187 26.0729 31.7035 26.3919 31.6731H26.3843Z' fill='%23464C2E'/%3E%3Cpath d='M27.0601 32.205C26.969 32.5696 26.6195 32.919 26.2169 32.8886C26.1409 32.8886 26.0726 32.8658 26.0042 32.843C26.1182 32.7291 26.2169 32.5924 26.3005 32.4632C26.4448 32.2429 26.5132 31.9315 26.4524 31.6732C26.6195 31.6504 26.7942 31.6276 26.9689 31.5821C27.0753 31.772 27.1133 31.9847 27.0601 32.205Z' fill='%2334381B'/%3E%3Cpath d='M14.2909 36.8538C15.3088 36.3752 16.2507 35.7295 17.2231 35.1674C17.7928 34.8332 18.3625 34.5141 18.955 34.2255C19.2437 34.0811 19.5475 33.9596 19.8438 33.8304C20.1552 33.6861 20.4667 33.6633 20.8085 33.6102C20.9604 33.5874 21.1199 33.5646 21.2719 33.5646C21.5529 33.5646 21.8416 33.6178 22.1075 33.5114C22.2822 33.443 22.4189 33.3139 22.586 33.2379C22.7532 33.162 22.9886 33.1772 23.0798 33.3291C23.1709 33.4886 23.0646 33.6937 22.9051 33.7849C22.7456 33.8684 22.5556 33.8608 22.3733 33.8456C21.0516 33.7697 19.7526 34.2179 18.5676 34.7952C17.9067 35.1142 17.2686 35.4712 16.6229 35.8283C16.1064 36.1169 15.4911 36.5803 14.9062 36.7246C14.6707 36.7854 14.458 36.831 14.2909 36.8538Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M38.1734 53.71C36.996 56.0876 35.735 58.2678 36.0693 59.43C36.206 59.901 36.3883 60.3795 36.3351 60.8049C36.3199 60.7821 36.3047 60.7594 36.2896 60.7366C35.9401 60.2352 35.5147 59.7794 35.0437 59.392C34.4816 58.9211 33.8132 58.5944 33.1067 58.4121C32.5294 58.2678 31.9369 58.2754 31.3595 58.4121C31.3216 58.2678 31.2988 58.1234 31.276 57.9791C31.1469 58.0475 31.0177 58.1082 30.8962 58.169C31.2 57.9183 31.4355 57.5917 31.7925 57.4018C32.1648 57.2043 32.5826 57.1131 32.9928 57.022C33.798 56.8245 34.5576 56.4826 35.2717 56.0572C35.9477 55.6622 36.5706 55.1837 37.1707 54.6823C37.5278 54.3861 37.8772 54.067 38.181 53.71H38.1734Z' fill='%2334381B'/%3E%3Cpath d='M25.8751 40.2798C25.8751 40.1887 26.1029 41.1382 25.6624 42.1713C25.5788 42.3764 25.4649 42.5815 25.2825 42.7106C25.1078 42.8474 24.8496 42.8929 24.6597 42.7866C24.4166 42.6499 24.3558 42.3232 24.3558 42.0422C24.3558 41.7611 24.3634 41.4496 24.1887 41.2294C24.1507 41.1762 24.0975 41.1306 24.0444 41.1002C24.6217 40.766 25.2294 40.4849 25.8751 40.2798Z' fill='%23464C2E'/%3E%3Cpath d='M41.5313 47.9216C41.1894 49.0079 40.5286 50.1397 39.4043 51.2792C39.3511 51.3324 39.2904 51.3627 39.2372 51.3703C39.2372 51.3703 39.7233 50.3296 40.1108 48.3394C40.4982 46.3492 40.4602 44.5717 40.4602 44.5717C40.4602 44.5717 41.3414 46.1973 41.5389 47.9216H41.5313Z' fill='%2334381B'/%3E%3Cpath opacity='0.32' d='M14.5869 59.3237C14.8908 59.4376 15.2706 59.2325 15.5061 59.0122C15.4833 59.149 15.4453 59.2933 15.3845 59.4528C15.1035 60.258 14.3135 60.5923 14.4046 59.7263C14.4198 59.5592 14.4502 59.3996 14.4806 59.2553C14.511 59.2781 14.5489 59.2933 14.5869 59.3085V59.3237Z' fill='%23676D54'/%3E%3Cpath opacity='0.32' d='M18.0961 56.627C18.438 56.8852 18.9773 56.7637 19.3571 56.5814C19.2812 56.7409 19.1748 56.908 19.0457 57.0903C18.4076 57.9943 17.2909 58.1234 17.7163 57.0751C17.7999 56.87 17.8834 56.6877 17.9746 56.5206C18.005 56.5586 18.043 56.5966 18.0886 56.6345L18.0961 56.627Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M29.5746 37.4007C29.3695 38.1376 28.3668 38.2591 28.1617 37.7881C28.1617 37.8793 29.3239 39.8467 29.5746 37.4007Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M29.9772 32.2885C29.9772 32.8278 29.3163 33.0937 29.0884 32.805C29.1036 32.8658 30.2506 33.99 29.9772 32.2885Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M28.0783 41.8825C27.7821 42.3915 27.0072 42.2927 26.9465 41.8977C26.9313 41.9585 27.4174 43.6601 28.0783 41.8825Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M34.4056 43.6069C34.1093 44.1159 33.3345 44.0171 33.2737 43.6221C33.2585 43.6829 33.7447 45.3845 34.4056 43.6069Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M30.6608 45.3465C30.3645 45.8554 29.5897 45.7567 29.5289 45.3617C29.5137 45.4225 29.9999 47.124 30.6608 45.3465Z' fill='%23464C2E'/%3E%3Cpath d='M27.1593 33.1392C27.0758 33.1392 26.9694 33.124 26.939 33.0404C26.8859 32.9265 27.0226 32.729 27.1137 32.6606C27.2505 32.5618 27.5316 32.5391 27.5847 32.7366C27.6455 32.9645 27.334 33.1164 27.1593 33.1316V33.1392Z' fill='%23676D54'/%3E%3Cpath d='M26.5668 65.8337C26.4149 65.902 26.2554 65.978 26.149 66.1147C25.9971 66.3122 26.0199 66.5857 26.0427 66.8364C26.0579 66.9883 26.0731 67.1326 26.0807 67.2846C25.7844 67.0263 25.5489 66.7072 25.3894 66.3426C25.2907 66.1223 25.3514 65.8641 25.5261 65.6969C25.6477 65.583 25.7768 65.4691 25.8984 65.3551C26.0655 65.2032 26.2402 65.0437 26.4453 64.9449C26.6504 64.8462 26.8935 64.8082 27.1062 64.8917C27.3189 64.9753 27.4784 65.2108 27.4252 65.4311C27.1365 65.5602 26.8479 65.6893 26.5592 65.8185L26.5668 65.8337Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M26.2552 65.4159C26.5971 65.2944 27.0528 65.2336 27.4327 65.3096C27.4327 65.3552 27.4327 65.4007 27.4327 65.4463C27.144 65.5755 26.8553 65.7046 26.5667 65.8337C26.4147 65.9021 26.2552 65.9781 26.1489 66.1148C25.997 66.3123 26.0197 66.5858 26.0425 66.8364C26.0577 66.9884 26.0729 67.1327 26.0805 67.2846C25.7919 67.0264 25.5488 66.7073 25.3893 66.3427C25.3057 66.1604 25.3285 65.9553 25.4424 65.7958C25.5032 65.7654 25.564 65.735 25.6095 65.7122C25.8222 65.6134 26.0274 65.4919 26.2552 65.4083V65.4159Z' fill='%2334381B'/%3E%3Cpath d='M37.4445 64.0865C37.8395 64.0562 37.8319 64.6714 37.4445 64.7018C37.0723 64.7246 36.4038 64.5043 36.1152 64.8158C36.024 64.9145 35.9101 64.9297 35.8189 64.8917C35.591 64.9145 35.3707 64.5955 35.5606 64.36C35.7505 64.1321 36.0772 63.9802 36.3506 63.8814C36.6241 63.7827 36.9887 63.6763 37.2546 63.8586C37.3458 63.9194 37.3837 64.003 37.3913 64.0941C37.4141 64.0941 37.4369 64.0941 37.4521 64.0941L37.4445 64.0865Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M37.2691 64.4055C37.345 64.4891 37.421 64.5878 37.4818 64.6942C37.4742 64.6942 37.4666 64.6942 37.4514 64.6942C37.0791 64.717 36.4107 64.4967 36.122 64.8081C36.0309 64.9069 35.9169 64.9221 35.8257 64.8841C35.5979 64.9069 35.3776 64.5878 35.5675 64.3523C35.6814 64.208 35.8561 64.1017 36.0309 64.0105C36.2208 63.9953 36.4183 63.9953 36.6006 64.0105C36.8665 64.0409 37.0867 64.2156 37.2615 64.4055H37.2691Z' fill='%2334381B'/%3E%3Cpath d='M23.6346 68.067C25.0019 63.8511 37.5738 62.6889 39.8754 66.1224C40.1565 66.5402 40.3616 67.0567 40.1489 67.5125C40.0425 67.7404 39.8602 67.9379 39.6172 68.0215C39.3817 68.0974 39.093 68.0367 38.9335 67.8392C38.8499 67.7328 38.8119 67.6037 38.7512 67.4821C38.0523 66.0312 31.6183 64.4512 25.4045 69.0774C24.9335 69.4344 24.1815 69.5407 23.7941 69.1001C23.551 68.8267 23.5206 68.4165 23.6346 68.067Z' fill='%23676D54'/%3E%3Cpath opacity='0.5' d='M39.8754 66.1146C40.1565 66.5324 40.3616 67.049 40.1489 67.5048C40.0425 67.7327 39.8602 67.9302 39.6172 68.0137C39.3817 68.0897 39.093 68.0289 38.9335 67.8314C38.8499 67.7251 38.8119 67.5959 38.7512 67.4744C38.0523 66.0235 31.6183 64.4435 25.4045 69.0696C24.9335 69.4266 24.1815 69.533 23.7941 69.0924C23.551 68.8189 23.5206 68.4087 23.6346 68.0593C23.6574 67.9985 23.6725 67.9378 23.7029 67.877C23.7713 67.9833 23.8473 68.0745 23.9384 68.1581C24.2651 68.4467 24.7132 68.4847 25.1082 68.3176C25.3817 68.196 25.6248 68.0061 25.8527 67.8086C26.1033 67.5883 26.3388 67.3301 26.4832 67.0186C26.7339 66.5021 26.5743 65.902 26.073 65.6589C27.5694 64.8992 29.5445 64.3979 31.5499 64.2004C31.5499 64.3295 31.5879 64.4587 31.679 64.5726C32.0209 65.0208 32.7045 65.1347 33.2211 65.2031C33.8288 65.2866 34.4517 65.3246 35.0518 65.1499C35.4696 65.0284 35.9254 64.7093 36.0241 64.2839C37.8016 64.5574 39.2373 65.1651 39.883 66.1222L39.8754 66.1146Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M27.0524 67.3301C27.1663 66.8971 27.2575 66.4489 27.2499 65.9932C27.2499 65.7273 27.1891 65.431 26.984 65.2487C27.9488 64.8689 29.0426 64.5803 30.1897 64.3828C30.4479 64.6334 30.5999 65.0588 30.6834 65.3779C30.767 65.6817 30.805 66.0008 30.8126 66.3198V66.4337C29.5288 66.768 28.169 67.3073 26.8017 68.1353C26.8929 67.8694 26.9764 67.6036 27.0524 67.3301Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M37.0263 65.4767C37.0718 65.2108 37.0794 64.793 36.9579 64.474C38.0897 64.7474 39.0165 65.1804 39.5938 65.7805C39.4343 66.3427 39.0165 66.8136 38.5303 67.1858C38.1885 66.844 37.5504 66.5174 36.692 66.2971C36.8743 66.0692 36.9807 65.7425 37.0187 65.4767H37.0263Z' fill='%23474C2F'/%3E%3Cpath d='M37.7032 63.2131C37.8856 63.5017 38.0679 63.8284 38.1134 64.155C37.9387 64.4437 37.2551 64.4816 37.2095 64.1702C37.2095 64.155 37.1943 64.1398 37.1791 64.1398C37.1335 63.9119 36.9512 63.722 36.7841 63.5549L35.0597 61.8457C35.0218 61.633 35.0977 61.3975 35.2344 61.2456C35.4699 60.9722 35.9029 61.0253 36.2144 61.1621C36.7461 61.8229 37.2475 62.5066 37.7032 63.2207V63.2131Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M37.7033 63.2132C37.8856 63.5018 38.068 63.8284 38.1135 64.1551C37.9388 64.4437 37.2551 64.4817 37.2096 64.1703C37.2096 64.1551 37.1944 64.1399 37.1792 64.1399C37.1488 63.9956 37.0728 63.874 36.9817 63.7601C37.0121 63.7601 37.0425 63.7449 37.0728 63.7297C37.2931 63.6234 37.3007 63.3423 37.3007 63.1296C37.3007 62.8865 37.2628 62.6738 37.1944 62.4535C37.3691 62.7042 37.5438 62.9549 37.7033 63.2132Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M36.206 61.1545C36.4263 61.4279 36.6466 61.709 36.8517 61.9901C36.7226 61.9521 36.5934 61.9217 36.4719 61.8913C36.3883 61.8761 36.2516 61.8533 36.1832 61.9217C36.1225 61.9825 36.1377 62.0584 36.1681 62.1344C35.9933 62.0053 35.7047 61.8153 35.6819 62.1344C35.6743 62.2483 35.6819 62.3547 35.6971 62.4686L35.0666 61.8457C35.0286 61.633 35.1046 61.3975 35.2413 61.2456C35.4768 60.9722 35.9098 61.0253 36.2212 61.1621L36.206 61.1545Z' fill='%2334381B'/%3E%3Cpath d='M38.2115 63.9042C38.6293 64.0257 40.2169 65.0057 40.0118 65.8185C39.9131 66.1983 39.0319 67.991 38.2191 67.7099C38.0596 67.6568 37.976 67.4744 38.0368 67.3225L39.0243 66.2135C39.1458 66.0995 39.237 65.9704 39.3206 65.826C39.4877 65.5374 38.1051 64.5119 38.014 64.4891C37.6342 64.3752 37.8393 63.7978 38.2191 63.9118L38.2115 63.9042Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M39.5334 64.7701C39.8601 65.0968 40.0956 65.469 40.012 65.8108C39.9133 66.1906 39.0321 67.9833 38.2193 67.7023C38.0598 67.6491 37.9762 67.4668 38.037 67.3149L39.0245 66.2058C39.146 66.0919 39.2372 65.9627 39.3207 65.8184C39.3739 65.7348 39.2752 65.5753 39.1232 65.4006C39.1384 65.4006 39.1536 65.4006 39.1612 65.393C39.3056 65.3474 39.4119 65.2107 39.4727 65.074C39.5031 65.0056 39.5335 64.8917 39.5486 64.7701H39.5334Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M39.5183 66.8136C39.1688 67.353 38.6827 67.8619 38.2193 67.7024C38.0598 67.6492 37.9762 67.4669 38.037 67.315L39.0245 66.2059C39.0853 66.1452 39.1384 66.0844 39.1916 66.016C39.1764 66.1755 39.1536 66.3275 39.222 66.4794C39.2828 66.6313 39.3967 66.7377 39.5258 66.8212L39.5183 66.8136Z' fill='%2334381B'/%3E%3Cpath d='M38.1134 63.9725C38.7743 64.5575 39.2605 65.469 39.2529 65.5298C39.2377 65.9476 38.6224 67.634 38.1362 67.6036C37.9843 67.596 37.1107 67.1402 37.4829 66.768C37.5133 66.7376 37.5437 66.7148 37.5817 66.7072C37.5969 66.692 37.612 66.6844 37.6272 66.6692C37.7412 66.6009 37.8703 66.6161 37.9615 66.692C38.0982 66.3502 38.3033 66.0311 38.4021 65.6817C38.3945 65.6589 38.3793 65.6437 38.3717 65.6209C38.3033 65.4462 38.1514 65.3019 38.0374 65.1576C37.9083 64.998 37.8096 64.8309 37.7488 64.6258C37.7336 64.5651 37.7336 64.5119 37.7488 64.4663C37.726 64.4435 37.6956 64.4207 37.6728 64.3979C37.3766 64.1321 37.8096 63.7067 38.1058 63.9649L38.1134 63.9725Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M39.1161 65.4768C39.1161 65.4768 39.1693 65.4236 39.1921 65.3932C39.2301 65.4692 39.2529 65.5224 39.2529 65.53C39.2377 65.9478 38.6224 67.6342 38.1362 67.6038C37.9843 67.5962 37.1107 67.1404 37.4829 66.7682C37.5133 66.7378 37.5437 66.715 37.5817 66.7074C37.5969 66.6922 37.612 66.6846 37.6272 66.6694C37.7412 66.6011 37.8703 66.6163 37.9615 66.6922C38.0982 66.3504 38.3033 66.0313 38.4021 65.6819C38.3945 65.6591 38.3793 65.6439 38.3717 65.6211C38.3717 65.6135 38.3641 65.6059 38.3565 65.5908C38.4249 65.6135 38.5008 65.6211 38.5692 65.6287C38.7591 65.6439 38.9718 65.5984 39.1161 65.4692V65.4768Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M38.3482 66.6084C38.3937 66.8211 38.4773 67.049 38.6216 67.2085C38.4621 67.4516 38.295 67.6187 38.1431 67.6111C37.9911 67.6035 37.1175 67.1477 37.4898 66.7755C37.5202 66.7451 37.5505 66.7224 37.5885 66.7148C37.6037 66.6996 37.6189 66.692 37.6341 66.6768C37.748 66.6084 37.8772 66.6236 37.9683 66.6996C38.0671 66.4641 38.1886 66.2286 38.295 65.9931C38.2874 66.1982 38.3026 66.4033 38.3405 66.6084H38.3482Z' fill='%2334381B'/%3E%3Cpath d='M38.1205 64.2385C38.6294 66.0009 37.847 67.3986 37.5203 67.5125C37.057 67.672 36.3885 66.7909 36.1074 66.168C36.5404 66.2439 36.9354 66.3503 37.2773 66.4718C37.2849 66.4946 37.2925 66.5098 37.3076 66.525C37.376 66.1984 37.4064 65.7958 37.4976 65.4463C37.5431 65.264 37.5203 65.0665 37.4064 64.907C37.3152 64.7779 37.2165 64.6487 37.1101 64.5272C36.8443 64.2385 37.2773 63.8055 37.5431 64.0942C37.5583 64.1094 37.5659 64.1246 37.5811 64.1322C37.7178 63.9651 38.0445 63.9575 38.1205 64.2309V64.2385Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M38.2267 65.4008C38.2267 65.4008 38.2647 65.378 38.2799 65.3628C38.2951 66.563 37.771 67.4214 37.5127 67.5125C37.0493 67.6721 36.3809 66.7909 36.0998 66.168C36.5328 66.244 36.9278 66.3503 37.2696 66.4718C37.2772 66.4946 37.2848 66.5098 37.3 66.525C37.3684 66.1984 37.3987 65.7958 37.4899 65.4463C37.4975 65.416 37.5051 65.378 37.5051 65.3476C37.7178 65.5071 37.9609 65.5755 38.2267 65.4008Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M37.4292 66.5782C37.452 66.8213 37.5052 67.1631 37.6495 67.4214C37.6039 67.467 37.5583 67.4973 37.5203 67.5049C37.452 67.5277 37.3836 67.5277 37.3153 67.5125C37.2849 66.9732 36.7607 66.3351 36.2366 66.4187C36.191 66.3275 36.1454 66.244 36.1074 66.1604C36.5404 66.2364 36.9354 66.3427 37.2773 66.4643C37.2849 66.487 37.2925 66.5022 37.3076 66.5174C37.376 66.1908 37.4064 65.7882 37.4976 65.4388C37.5052 65.4084 37.5127 65.3704 37.5127 65.34C37.5279 65.3476 37.5431 65.3628 37.5583 65.3704C37.5051 65.4767 37.4748 65.5983 37.452 65.7122C37.3912 65.9933 37.3912 66.2819 37.4216 66.563L37.4292 66.5782Z' fill='%2334381B'/%3E%3Cpath d='M30.6379 64.1928C30.9797 64.246 31.4583 66.3046 31.1696 66.7224C31.0101 66.9503 31.0025 66.8439 30.5087 67.3225C29.6807 68.1429 29.3389 67.7555 29.3541 67.5048C29.3541 67.4213 29.9618 66.7148 30.2353 66.4033C30.3188 66.3122 30.3492 66.1907 30.3264 66.0691C30.296 65.8944 30.2504 65.6361 30.2201 65.4462C30.1897 65.2791 30.0757 65.1348 29.9162 65.0664C29.8478 65.036 29.7719 65.0056 29.7035 64.9828C28.7768 64.6714 26.8245 63.9042 27.9032 63.7219C28.7084 63.5851 30.0378 64.1017 30.6379 64.2004V64.1928Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M31.1697 66.7149C31.0102 66.9428 31.0026 66.8364 30.5088 67.315C29.6808 68.1354 29.339 67.748 29.3542 67.4973C29.3542 67.4138 29.9619 66.7073 30.2354 66.3959C30.3189 66.3047 30.3493 66.1832 30.3265 66.0616C30.2961 65.8869 30.2505 65.6286 30.2201 65.4387C30.205 65.3476 30.167 65.264 30.1062 65.1956C30.2429 65.1653 30.3797 65.0969 30.5012 65.0057C30.6911 64.8614 30.8583 64.6487 30.8279 64.398V64.3752C31.1241 64.8994 31.4128 66.3731 31.1697 66.7149Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M30.638 67.201C30.638 67.201 30.562 67.2769 30.5164 67.3225C29.6884 68.1429 29.3466 67.7555 29.3618 67.5048C29.3618 67.4289 29.8784 66.8211 30.167 66.4869C30.205 66.6692 30.2886 66.8515 30.4025 66.9959C30.4633 67.0794 30.5468 67.1478 30.638 67.201Z' fill='%2334381B'/%3E%3Cpath d='M30.1902 65.4083C30.2206 65.8337 29.894 67.6113 29.4078 68.0518C29.104 68.3253 27.9493 67.8999 27.2505 67.8847C27.7594 67.6037 28.2684 67.353 28.7697 67.1403C28.8457 67.1631 28.9216 67.1175 28.9444 67.0415C29.0128 66.7605 29.0888 66.3275 29.1723 66.0008C29.2255 65.8109 29.1495 65.6058 28.99 65.4843C28.7241 65.2792 28.4583 65.0741 28.2076 64.8538C28.0101 65.2792 27.2505 65.3855 26.9466 65.3096C24.9792 64.8538 22.5711 63.0003 22.4876 63.0079C22.3508 63.0231 22.2065 63.0231 22.085 62.9547C21.8951 62.8484 21.8343 62.6129 21.8191 62.3926C21.8191 62.3774 21.728 62.1115 21.614 61.7241C21.6976 61.7545 21.7887 61.7697 21.8723 61.7849C22.1002 61.8229 22.3736 61.8381 22.6015 61.8001C22.7534 61.7697 22.8902 61.7241 23.0193 61.6482C23.0421 61.6861 23.0649 61.7241 23.1029 61.7469C23.5814 62.0584 26.468 63.3042 27.8354 63.57C28.0785 63.6156 28.276 63.7523 28.3443 63.9195C28.5722 63.9954 28.7849 64.1549 28.9596 64.2917C29.0736 64.3752 30.1978 65.264 30.2054 65.4007L30.1902 65.4083Z' fill='%23474C2F'/%3E%3Cpath opacity='0.25' d='M23.0877 61.7469C23.0497 61.7241 23.0193 61.6861 23.0041 61.6482C22.8826 61.7241 22.7383 61.7697 22.5863 61.8001C22.3584 61.8381 22.085 61.8153 21.8571 61.7849C21.7735 61.7697 21.6824 61.7545 21.5988 61.7241C21.7204 62.1115 21.8039 62.3774 21.8039 62.3926C21.8191 62.6053 21.8799 62.8484 22.0698 62.9547C22.1913 63.0231 22.3357 63.0155 22.4724 63.0079C22.5483 63.0079 24.4246 64.436 26.2097 65.0893C26.2629 64.6639 26.4832 64.2765 26.8251 63.9954C27.0682 63.7903 27.3872 63.608 27.7138 63.5472C26.3085 63.2434 23.5511 62.0508 23.0877 61.7469ZM26.0274 63.9878C25.8679 64.474 25.1691 64.3069 24.85 64.1246C24.5918 63.9726 24.379 63.7751 24.1739 63.5624C24.0524 63.4409 23.8245 63.2282 23.9536 63.0459C24.1967 62.6813 26.2174 63.4105 26.0274 63.9954V63.9878Z' fill='%2334381B'/%3E%3Cpath opacity='0.25' d='M23.9308 63.8207C23.8017 63.7827 23.6726 63.7371 23.5435 63.6992C22.9282 63.3118 22.5104 63.0079 22.48 63.0079C22.3432 63.0231 22.1989 63.0231 22.0774 62.9547C21.8875 62.8484 21.8267 62.6129 21.8115 62.3926C21.8115 62.3774 21.7203 62.1115 21.6064 61.7241C21.6899 61.7545 21.7811 61.7697 21.8647 61.7849C22.0925 61.8229 22.366 61.8381 22.5939 61.8001C22.7458 61.7697 22.8826 61.7241 23.0117 61.6482C23.0345 61.6861 23.0573 61.7241 23.0953 61.7469C23.3004 61.8837 23.946 62.1875 24.7209 62.5141C24.5993 62.5293 24.4854 62.5445 24.3714 62.5597C24.0752 62.5901 23.703 62.6661 23.4371 62.5217C23.4143 62.5141 23.3915 62.5217 23.3915 62.5445C23.4143 63.0155 23.6346 63.4637 23.9385 63.8207H23.9308Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M30.1899 65.4084C30.2203 65.8338 29.8937 67.6113 29.4075 68.0519C29.1037 68.3254 27.949 67.9 27.2502 67.8848C27.7591 67.6037 28.2681 67.353 28.7694 67.1404C28.8454 67.1631 28.9214 67.1176 28.9441 67.0416C29.0125 66.7605 29.0885 66.3275 29.172 66.0009C29.2252 65.811 29.1492 65.6059 28.9897 65.4844C28.9062 65.4236 28.8226 65.3628 28.7467 65.2945C28.7846 65.3096 28.815 65.3248 28.8454 65.3324C29.1264 65.4464 29.4303 65.492 29.6962 65.3324C29.7873 65.2793 29.8633 65.1881 29.9089 65.0818C30.076 65.2261 30.1899 65.3552 30.1975 65.4008L30.1899 65.4084Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M29.5215 67.0338C29.567 67.0642 29.7038 67.1554 29.8481 67.2237C29.7266 67.5808 29.5822 67.8922 29.4075 68.0441C29.1037 68.3176 27.949 67.8922 27.2502 67.877C27.7591 67.596 28.2681 67.3453 28.7694 67.1326C28.8454 67.1554 28.9214 67.1098 28.9441 67.0338C28.9897 66.8363 29.0429 66.5629 29.0961 66.3046C29.1568 66.5933 29.2936 66.8591 29.5291 67.0338H29.5215Z' fill='%2334381B'/%3E%3Cpath d='M28.9973 66.1071C28.9593 66.4945 28.7846 66.6996 28.5643 67.0415C28.5263 67.1022 28.4884 67.1706 28.4504 67.239C27.5768 69.1836 27.4021 68.5303 26.1943 68.5151C26.4525 68.348 26.7032 68.1885 26.9615 68.0366C27.0982 68.0062 27.2122 67.9074 27.2654 67.7783C27.4477 67.3453 27.873 66.335 27.873 66.335C27.9642 66.1223 27.9566 65.8716 27.8579 65.6665C26.5589 63.0078 29.0809 65.2031 28.9897 66.1071H28.9973Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M28.7694 65.4311C28.9214 65.6742 29.0125 65.9249 28.9973 66.1148C28.9593 66.5022 28.7846 66.7073 28.5643 67.0491C28.5263 67.1099 28.4884 67.1782 28.4504 67.2466C27.5768 69.1913 27.4021 68.538 26.1943 68.5228C26.4525 68.3557 26.7032 68.1961 26.9615 68.0442C27.0982 68.0138 27.2122 67.9151 27.2654 67.7859C27.4477 67.353 27.873 66.3426 27.873 66.3426C27.9414 66.1831 27.9566 66.0008 27.911 65.8337C27.9262 65.8413 27.9414 65.8565 27.9642 65.8641C28.2073 66.0008 28.4656 65.8945 28.6327 65.7046C28.7086 65.621 28.7542 65.5222 28.7618 65.4311H28.7694Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M27.592 67.5504C27.6452 67.7783 27.7895 68.0138 27.987 68.1277C27.4629 68.9405 27.1514 68.5227 26.1943 68.5151C26.4525 68.348 26.7032 68.1885 26.9615 68.0366C27.0982 68.0062 27.2122 67.9074 27.2654 67.7783C27.3413 67.596 27.4553 67.3225 27.5692 67.0566C27.554 67.2238 27.554 67.3909 27.592 67.5504Z' fill='%2334381B'/%3E%3Cpath d='M23.4444 63.1523C23.2089 63.0611 22.9886 62.9168 22.8139 62.7345C22.8139 63.0079 22.9202 63.2814 23.1025 63.4865C22.4568 63.4333 21.8567 63.0763 21.4238 62.5902C20.9908 62.104 20.7173 61.4963 20.5426 60.8658C20.3679 60.2353 20.2843 59.5896 20.2083 58.9439L20.178 58.6781C20.178 58.6781 20.178 58.6325 20.178 58.6097C20.1856 58.5869 20.216 58.5869 20.2236 58.5641C21.0212 57.1436 23.4672 56.8474 25.1231 56.9385C24.8345 58.397 24.2876 59.8099 23.5203 61.0861C23.4444 61.2076 23.3684 61.352 23.3988 61.4887C23.4216 61.5874 23.4976 61.671 23.5659 61.7394C23.7634 61.9369 23.9609 62.142 24.1584 62.3395C23.7102 62.2787 23.2697 62.1572 22.8443 61.9976C23.0646 62.3699 23.2621 62.7573 23.4368 63.1523H23.4444Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M23.5662 61.7468C23.4903 61.6709 23.4219 61.5949 23.3991 61.4961C23.3687 61.3518 23.4447 61.2151 23.5207 61.0935C24.2879 59.8174 24.8348 58.4044 25.1235 56.946C23.4675 56.8548 21.0215 57.1511 20.2239 58.5716C20.2163 58.5868 20.1859 58.5944 20.1783 58.6171C20.1707 58.6399 20.1707 58.6627 20.1783 58.6855L20.2087 58.9514C20.2846 59.5971 20.3682 60.2427 20.5429 60.8732C20.7176 61.4961 20.9987 62.1114 21.4241 62.5976C21.8571 63.0838 22.4572 63.4408 23.1029 63.494C22.9205 63.2889 22.8218 63.0154 22.8142 62.7419C22.9889 62.9318 23.2016 63.0762 23.4447 63.1597C23.27 62.7647 23.0649 62.3849 22.8522 62.0051C23.2776 62.1722 23.7182 62.2862 24.1664 62.3469C23.9689 62.1494 23.7713 61.9443 23.5738 61.7468H23.5662ZM23.3687 58.9818C23.3308 59.4755 23.0649 59.9541 22.7079 60.2883C22.404 60.5694 21.9482 60.8656 21.5152 60.7365C21.0215 60.5922 20.8468 59.9997 20.8392 59.5363C20.7708 57.1283 23.4827 57.4777 23.3687 58.9818Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M23.5741 61.747C23.7716 61.9445 23.9691 62.1496 24.1666 62.3471C23.7184 62.2863 23.2778 62.1648 22.8524 62.0052C23.0727 62.3775 23.2702 62.7649 23.4449 63.1599C23.2095 63.0687 22.9892 62.9244 22.8144 62.7421C22.8144 63.0155 22.9208 63.289 23.1031 63.4941C22.7385 63.4637 22.3891 63.3346 22.0776 63.1447C22.146 63.0763 22.2067 62.9928 22.2447 62.894C22.3435 62.6433 22.2447 62.3699 22.0776 62.1724C22.0396 62.1192 21.9637 62.0508 22.0548 61.9824C22.0852 61.9673 22.108 61.9521 22.1384 61.9293C22.1764 61.9065 22.1916 61.8685 22.2067 61.8305C22.2219 61.7773 22.2295 61.709 22.1612 61.6862C22.0928 61.6634 21.9941 61.7242 21.9333 61.7394C21.8421 61.7697 21.7054 61.7546 21.8041 61.6406C21.9485 61.4735 22.184 61.3747 22.3739 61.2836C22.5562 61.1924 22.7461 61.1089 22.9132 61.0025C23.2246 60.7974 23.4677 60.4936 23.6425 60.1669C23.9539 59.6124 24.1362 58.9591 24.2425 58.3438C24.3185 57.8804 24.4173 57.4019 24.4097 56.9309C24.6528 56.9309 24.8958 56.9309 25.1161 56.9461C24.8275 58.4046 24.2805 59.8175 23.5133 61.0937C23.4373 61.2152 23.3614 61.3595 23.3918 61.4963C23.4146 61.595 23.4905 61.6786 23.5589 61.747H23.5741Z' fill='%23464C2E'/%3E%3Cpath d='M36.2901 60.8126C36.2901 60.8126 36.2977 60.9493 36.518 61.5646C35.971 61.4279 35.766 61.3063 35.766 61.3063C35.8115 61.4431 35.8419 61.5874 35.8571 61.7317C35.6596 61.6178 35.4393 61.5418 35.2114 61.4962C35.2114 61.6861 35.2418 61.8684 35.3026 62.0508C35.0595 61.9672 35.1051 61.9824 34.5809 61.9368C34.6265 61.876 35.538 59.8934 36.2977 60.8202L36.2901 60.8126Z' fill='%23464C2E'/%3E%3Cpath d='M205.89 34.9969C207.106 33.8864 207.832 32.3034 207.185 30.8621C206.822 30.0115 206.087 29.3814 205.243 28.9089C202.566 27.3179 198.997 27.3179 195.965 28.2079C192.925 29.1294 190.249 30.8306 187.62 32.5633C190.336 30.3816 193.091 28.0976 194.552 25.0654C195.973 22.0411 195.602 18.048 192.767 16.0554C190.178 14.244 186.53 14.5826 183.364 15.3151C176.961 16.7879 170.96 19.5996 165.851 23.4036C162.527 25.8766 156.006 30.6731 155.271 34.9969H205.89Z' fill='%23EAEAEA'/%3E%3Cpath d='M191.789 30.0117C190.778 31.453 194.22 32.0437 195.192 32.0831C197.418 32.1933 199.692 31.4215 201.555 30.3819C202.566 29.8306 203.458 29.1296 204.193 28.3499C201.682 27.3182 198.642 27.389 195.965 28.2003C194.505 28.6413 193.131 29.232 191.836 29.9723C191.836 29.9723 191.836 30.0117 191.796 30.0117H191.789Z' fill='white'/%3E%3Cpath d='M167.471 30.7916C173.59 31.1617 181.249 31.1617 186.152 27.2868C189.034 24.9949 191.379 21.0097 189.642 17.5758C189.113 16.5441 188.307 15.5439 187.328 14.7326C185.994 14.772 184.652 15.024 183.357 15.3233C176.953 16.7961 170.953 19.6078 165.844 23.4119C163.902 24.8531 160.815 27.1372 158.47 29.6496C161.391 30.3111 164.471 30.6498 167.471 30.7916Z' fill='%23F3F3F3'/%3E%3Cpath d='M299.862 63.6023C301.078 62.4918 301.804 60.9087 301.157 59.4674C300.794 58.6168 300.06 57.9868 299.215 57.5142C296.538 55.9233 292.969 55.9233 289.937 56.8132C286.898 57.7347 284.221 59.4359 281.592 61.1686C284.308 58.987 287.063 56.703 288.524 53.6708C289.945 50.6464 289.574 46.6534 286.74 44.6608C284.15 42.8493 280.502 43.188 277.336 43.9204C270.933 45.3932 264.932 48.2049 259.824 52.009C256.5 54.482 249.978 59.2784 249.244 63.6023H299.862Z' fill='%23EAEAEA'/%3E%3Cpath d='M285.761 58.6171C284.75 60.0583 288.193 60.649 289.164 60.6884C291.39 60.7987 293.664 60.0268 295.528 58.9872C296.538 58.4359 297.43 57.735 298.165 56.9552C295.654 55.9235 292.614 55.9944 289.938 56.8056C288.477 57.2467 287.103 57.8373 285.808 58.5777C285.808 58.5777 285.808 58.6171 285.769 58.6171H285.761Z' fill='white'/%3E%3Cpath d='M261.443 59.3969C267.562 59.7671 275.221 59.7671 280.124 55.8921C283.006 53.6003 285.351 49.6151 283.614 46.1812C283.085 45.1494 282.279 44.1492 281.3 43.338C279.966 43.3774 278.624 43.6294 277.329 43.9287C270.926 45.4015 264.925 48.2132 259.817 52.0172C257.874 53.4585 254.787 55.7425 252.442 58.2549C255.364 58.9165 258.443 59.2551 261.443 59.3969Z' fill='%23F3F3F3'/%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='clip0_6029_1157'%3E%3Crect width='320' height='194' fill='white'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E\");\n    }\n\n.light-mode .promo-notification__title {\n            color: #4d4d4d;\n        }\n\n.dark-mode .promo-notification {\n        background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='320' height='194' viewBox='0 0 320 194' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg clip-path='url%28%23clip0_6029_1961%29'%3E%3Crect width='320' height='194' fill='url%28%23paint0_linear_6029_1961%29'/%3E%3Cpath d='M196.774 142.101C199.505 141.029 201.648 138.885 203.86 136.948C209.339 132.193 215.786 128.579 222.7 126.366C225.552 125.45 228.663 124.793 231.498 125.761C235.387 127.092 237.737 131.225 238.325 135.288C238.913 139.369 238.118 143.484 237.668 147.582C237.219 151.68 237.132 156.02 239.016 159.669C239.673 160.931 240.572 162.366 239.984 163.663C239.5 164.735 238.238 165.15 237.098 165.426C225.949 168.141 214.041 167.674 203.134 164.112C200.473 163.248 197.828 162.158 195.702 160.343C192.107 157.248 190.707 152.631 190.102 148.084C189.895 146.527 189.03 143.087 190.465 142.153C191.433 141.565 195.166 142.723 196.774 142.101Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.64' d='M237.582 154.81C229.907 154.516 222.337 151.248 217.204 145.473C214.732 142.689 212.917 139.455 211.776 135.928C211.379 134.7 210.964 133.352 210.687 131.951C208.285 133.438 206.003 135.115 203.86 136.983C201.648 138.902 199.505 141.064 196.774 142.136C195.184 142.758 191.45 141.6 190.482 142.222C189.065 143.138 189.929 146.597 190.119 148.153C190.724 152.7 192.124 157.317 195.719 160.412C197.845 162.228 200.49 163.317 203.152 164.182C214.058 167.743 225.967 168.21 237.115 165.496C238.256 165.219 239.535 164.787 240.001 163.732C240.589 162.435 239.69 161 239.033 159.738C238.238 158.147 237.806 156.504 237.582 154.81Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.64' d='M239.033 159.686C237.149 156.02 237.218 151.68 237.685 147.6C238.135 143.502 238.947 139.386 238.342 135.306C237.772 131.381 235.577 127.404 231.93 125.934C231.964 126.539 231.964 127.127 231.964 127.663C231.809 138.193 223.166 146.234 214.248 150.453C208.786 153.029 202.84 154.55 196.825 154.965C195.166 155.069 193.524 155.069 191.899 154.983C192.764 157.023 193.991 158.873 195.736 160.378C197.862 162.193 200.507 163.282 203.169 164.147C214.075 167.709 225.984 168.176 237.132 165.461C238.273 165.184 239.552 164.752 240.019 163.697C240.572 162.383 239.69 160.948 239.033 159.686Z' fill='%23E9E9E9'/%3E%3Cpath d='M-8.57976 78.4875C-1.9772 75.3233 2.93151 69.5654 8.03035 64.309C13.9243 58.2226 20.596 52.4647 28.685 49.8883C36.774 47.312 46.5741 48.6088 52.2087 54.9546C59.1397 62.7701 57.636 74.5798 58.8977 84.9544C59.8311 92.6488 62.7521 100.412 68.5941 105.496C72.6214 108.989 77.7202 110.977 82.8018 112.516C90.7525 114.92 99.7403 116.303 107.069 112.378C114.466 108.401 118.269 100.067 124.146 94.0667C128.173 89.9687 133.41 86.8737 139.131 86.2512C144.835 85.6287 150.971 87.7728 154.427 92.3722C159.837 99.5825 157.383 109.663 157.815 118.654C158.766 138.781 175.739 155.346 194.803 161.864C198.606 163.161 202.702 164.268 205.519 167.138C210.566 172.274 209.495 180.677 207.663 187.645C206.384 192.504 204.724 197.605 200.818 200.752C196.705 204.072 191.035 204.504 185.764 204.573C153.097 205.057 120.896 197.57 89.0932 190.135C61.1792 183.599 33.0406 176.994 7.04515 164.908C2.91423 162.988 -1.28583 160.827 -4.18958 157.317C-9.66866 150.695 -9.23656 141.219 -9.65138 132.643C-10.2563 120.193 -13.2811 107.865 -18.5009 96.5393C-19.7108 93.9284 -27.4022 81.4443 -24.9306 79.5769C-23.7207 78.6605 -18.5873 80.5279 -16.9626 80.4933C-14.0588 80.4414 -11.1724 79.7325 -8.57976 78.4875Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.34' d='M205.537 167.155C202.72 164.285 198.623 163.196 194.821 161.882C175.773 155.363 158.8 138.781 157.833 118.672C157.4 109.68 159.855 99.5998 154.445 92.3895C153.788 91.5076 153.01 90.7122 152.181 90.0033C150.781 92.5797 149.208 95.0868 147.427 97.3865C145.198 100.274 142.553 102.816 139.615 104.977C136.504 107.26 133.064 108.85 129.711 110.735C127.983 111.703 125.667 113.173 123.714 111.946C122.365 111.098 121.691 109.456 121.259 108.003C120.378 104.995 120.205 101.692 120.412 98.4932C116.385 103.68 112.824 109.352 107.103 112.412C99.7749 116.337 90.7871 114.954 82.8364 112.551C77.7376 111.012 72.6387 109.023 68.6288 105.531C62.7868 100.447 59.8657 92.6834 58.9324 84.9889C57.6706 74.6144 59.1744 62.8047 52.2434 54.9892C46.6088 48.6434 36.8086 47.3466 28.7196 49.9229C20.5961 52.4647 13.9244 58.2226 8.03045 64.309C2.93161 69.5654 -1.9771 75.3233 -8.57966 78.4875C-11.1723 79.7325 -14.0587 80.4414 -16.9279 80.5106C-18.5526 80.5452 -23.686 78.695 -24.8959 79.5942C-27.3676 81.4443 -19.6761 93.9456 -18.4662 96.5566C-13.2464 107.882 -10.2217 120.211 -9.61671 132.66C-9.20189 141.236 -9.63399 150.729 -4.15491 157.334C-1.25116 160.844 2.94889 163.006 7.07981 164.925C33.0752 177.011 61.2139 183.616 89.1279 190.152C120.948 197.588 153.148 205.075 185.798 204.59C191.07 204.504 196.739 204.089 200.853 200.769C204.759 197.622 206.418 192.504 207.697 187.663C209.512 180.677 210.584 172.291 205.537 167.155Z' fill='%23D8D8D8'/%3E%3Cpath d='M32.1769 95.4156C65.2761 83.2428 70.5305 54.9375 88.5233 52.7588C120.568 48.8511 111.892 103.75 113.879 115.456C115.003 121.992 117.716 128.58 122.988 132.591C144.732 149.104 179.265 118.395 182.549 116.787C189.636 113.346 199.108 112.793 204.569 118.464C214.456 128.753 203.152 148.533 212.624 159.219C217.308 164.51 225.414 165.185 232.328 163.749C306.805 148.36 324.02 227 319.25 233.778C313.581 241.818 279.064 228.452 269.351 230.043C224.394 237.391 178.436 232.1 133.186 226.792C109.696 224.043 86.19 221.276 62.8217 217.611C39.972 213.98 16.5174 209.501 -6.12488 214.343C-15.4929 185.086 -17.0485 153.98 -17.809 123.271C-17.9646 116.77 -18.0337 91.698 -7.30021 94.4646C-0.628511 96.1937 4.86786 98.77 12.0235 98.8911C18.8681 99.0121 25.7472 97.7845 32.1769 95.4156Z' fill='%23F3F3F3'/%3E%3Cg opacity='0.34'%3E%3Cpath opacity='0.34' d='M175.618 167.277C174.91 169.749 174.529 172.447 175.186 174.971C180.181 194.216 221.629 172.291 242.94 163.801C244.755 163.075 246.587 162.383 248.437 161.761C243.39 161.916 238.031 162.539 232.328 163.715C225.414 165.15 217.308 164.476 212.624 159.184C203.152 148.516 214.456 128.718 204.569 118.43C203.705 117.531 202.737 116.787 201.683 116.182C213.35 133.732 180.648 149.64 175.618 167.277Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M212.623 159.202C209.253 155.398 208.51 150.453 208.51 145.196C207.939 145.974 207.334 146.718 206.695 147.427C205.243 149.035 203.48 150.383 201.734 151.663C198.105 154.308 194.164 156.746 191.606 160.55C189.618 163.49 187.665 167.121 188.408 170.804C189.134 174.401 192.522 175.922 195.892 176.13C198.45 176.285 201.06 175.818 203.549 175.248C205.9 174.712 208.216 173.968 210.445 173.052C214.853 171.254 218.811 168.746 222.907 166.378C224.117 165.686 225.344 164.994 226.606 164.372C221.317 164.476 216.063 163.075 212.623 159.202Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M263.768 162.885C289.487 180.262 219.002 182.821 178.488 200.959C192.782 200.752 255.212 232.342 269.368 230.026C279.082 228.435 313.598 241.801 319.267 233.76C323.26 228.072 311.749 171.617 263.768 162.885Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M292.581 176.285C293.721 180.954 293.687 185.83 291.855 190.464C288.415 199.109 280.326 204.469 272.462 208.688C266.689 211.784 260.639 214.308 254.4 216.296C246.795 222.815 237.358 228.798 226.659 233.587C240.953 233.38 255.212 232.325 269.368 230.008C279.082 228.417 313.598 241.783 319.267 233.743C322.292 229.455 316.433 196.049 292.581 176.285Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M103.975 59.4158C114.864 88.309 58.9846 90.9891 70.1502 144.02C74.7132 165.686 97.7358 196.983 145.527 137.899C145.993 137.329 146.494 136.793 147.013 136.274C138.665 138.332 130.144 138.003 123.005 132.574C117.734 128.562 115.003 121.974 113.896 115.438C112.237 105.825 117.803 67.0757 102.074 55.7155C102.835 56.874 103.474 58.1017 103.975 59.4158Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M122.21 139.179C121.536 140.476 121.346 141.963 122.418 143.104C123.506 144.245 125.131 144.453 126.618 144.211C129.314 143.778 132.027 142.222 133.877 140.234C134.689 139.352 135.398 138.383 136.055 137.381C132.632 137.156 129.297 136.291 126.168 134.614C124.613 135.911 123.126 137.381 122.21 139.179Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M113.084 83.8825C111.908 85.9228 110.543 87.8594 109.074 89.7095C102.229 98.3031 93.3451 104.908 85.6018 112.62C81.6091 116.597 77.8239 122.355 79.9153 128.216C81.6783 133.179 86.8462 135.997 91.7031 137.156C97.3205 138.487 103.007 137.778 108.521 136.343C113.256 135.116 117.906 133.611 122.625 132.297C117.578 128.268 114.95 121.836 113.861 115.456C112.997 110.338 114.173 96.9717 113.084 83.8825Z' fill='%23888888'/%3E%3C/g%3E%3Cg opacity='0.5'%3E%3Cpath opacity='0.5' d='M89.7497 69.1159C90.2682 69.2715 90.8559 69.0467 91.046 68.5453C91.0979 68.407 91.1152 68.2686 91.1152 68.1303C91.0979 67.8364 90.9423 67.5424 90.7349 67.3176C90.0608 66.5395 88.9028 66.211 87.8657 66.2975C86.8287 66.3666 85.8608 66.7816 84.9793 67.2312C85.9126 66.626 86.9497 66.0554 87.6238 65.1736C88.2978 64.2917 88.5053 62.9776 87.5892 62.1131C86.7768 61.335 85.3941 61.2485 84.2188 61.3696C81.8336 61.6289 79.6212 62.5626 77.9619 63.9459C77.3397 64.4301 76.4582 65.26 75.8187 66.1419C75.2483 66.9372 75.8878 68.0266 76.8557 67.9228C81.2113 67.4041 85.5842 67.8191 89.7497 69.1159Z' fill='%23D8D8D8'/%3E%3C/g%3E%3Cpath d='M83.9768 63.41C84.4953 62.8913 84.8065 62.1478 84.5299 61.4734C84.3744 61.0757 84.0632 60.7818 83.7003 60.557C82.5595 59.8135 81.0385 59.8135 79.7422 60.2285C78.4459 60.6608 77.3051 61.4561 76.1816 62.2688C77.3397 61.2487 78.515 60.1766 79.1372 58.7588C79.7422 57.3409 79.5866 55.4735 78.3767 54.5398C77.2705 53.6925 75.7149 53.8481 74.3668 54.194C71.6359 54.8856 69.0778 56.1997 66.9 57.9807C65.4827 59.1392 62.6999 61.387 62.3888 63.41H83.9768Z' fill='%23D8D8D8'/%3E%3Cpath d='M77.9618 61.0757C77.5296 61.75 78.9988 62.0267 79.4136 62.044C80.3643 62.0958 81.3322 61.7327 82.1272 61.2486C82.5593 60.9892 82.9396 60.6607 83.2507 60.2976C82.1791 59.8134 80.8828 59.848 79.742 60.2284C79.1198 60.4359 78.5321 60.7126 77.979 61.0584C77.979 61.0584 77.979 61.0757 77.9618 61.0757Z' fill='white'/%3E%3Cpath d='M67.5911 61.4388C70.201 61.6117 73.4677 61.6117 75.5591 59.7961C76.7863 58.7241 77.7888 56.8567 77.0456 55.2486C76.8209 54.7645 76.4752 54.2976 76.0604 53.9172C75.49 53.9345 74.9196 54.0555 74.3665 54.1939C71.6356 54.8855 69.0776 56.1996 66.8998 57.9806C66.0701 58.6549 64.7565 59.727 63.754 60.9027C64.9985 61.214 66.3121 61.3696 67.5911 61.4388Z' fill='%23F3F3F3'/%3E%3Cpath d='M245.912 144.037C246.275 144.037 246.535 143.692 246.431 143.346C246.206 142.654 245.29 142.464 244.581 142.671C243.89 142.879 243.302 143.346 242.594 143.553C243.562 143.259 244.27 142.239 244.184 141.219C244.08 140.043 243.009 139.092 241.851 138.85C240.693 138.591 239.483 138.902 238.376 139.369C237.201 139.87 236.13 140.597 235.127 141.375C234.539 141.842 233.883 142.36 233.779 143.138C233.762 143.242 233.762 143.38 233.762 143.519C233.779 143.813 234.021 144.037 234.297 144.037H245.912Z' fill='%23D8D8D8'/%3E%3Cpath d='M-65.6456 -16.8731C-73.4353 -11.7413 -75.7152 -1.98448 -78.0585 6.44184C-80.7817 16.0086 -81.9217 26.1455 -80.1484 36.029C-77.6152 50.284 -68.3055 63.9689 -54.5627 68.6572C-36.7033 74.8027 -30.2436 54.3388 -13.8408 51.9946C31.8208 45.469 20.2946 -2.04783 15.6714 -9.77724C12.8849 -14.2121 8.95834 -17.7601 4.5885 -20.5477C-17.1974 -34.486 -47.9762 -28.4672 -65.6456 -16.8731Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.52' d='M-65.6456 -16.8731C-73.4353 -11.7413 -75.7152 -1.98448 -78.0585 6.44184C-80.7817 16.0086 -81.9217 26.1455 -80.1484 36.029C-77.6152 50.284 -68.3055 63.9689 -54.5627 68.6572C-36.7033 74.8027 -30.2436 54.3388 -13.8408 51.9946C31.8208 45.469 20.2946 -2.04783 15.6714 -9.77724C12.8849 -14.2121 8.95834 -17.7601 4.5885 -20.5477C-17.1974 -34.486 -47.9762 -28.4672 -65.6456 -16.8731Z' fill='%2393BC82'/%3E%3Cpath d='M54.6679 119.574C54.4468 119.409 54.1704 119.464 53.9493 119.519C53.1202 119.684 52.2911 119.795 51.462 119.96C51.0198 115.217 52.4017 109.813 53.065 105.07C53.2308 103.802 53.2308 98.7281 53.673 97.57C49.7485 95.8604 45.4371 95.0332 41.0705 94.8677C42.3971 98.5627 42.6734 107.166 42.784 110.033C43.1156 117.092 42.1207 124.206 39.6887 130.879C38.5279 134.133 36.9802 137.332 36.3722 140.751C35.6537 144.611 36.0958 148.582 36.4828 152.442L38.6384 171.965C39.0806 175.88 39.3017 179.63 38.8043 183.491C38.4174 186.689 38.9701 190.108 41.4021 192.535C43.6684 194.796 49.03 196.616 50.7987 193.086C52.7333 189.281 49.9143 182.498 48.7536 178.803C46.9295 173.123 46.8743 167.222 45.603 161.321C44.7739 157.571 43.6131 153.6 44.8844 149.961C45.2713 148.802 45.9346 147.7 46.3215 146.486C46.3768 146.321 46.4321 146.211 46.4321 146.045C46.819 144.556 46.8743 142.957 46.9848 141.413C47.2612 138.159 47.9798 135.015 49.0852 131.927C50.0802 129.17 51.5173 128.398 53.286 126.247C54.6679 124.593 55.2759 122.276 54.9443 120.181C54.889 119.96 54.8337 119.739 54.6679 119.574Z' fill='%23B5926E'/%3E%3Cpath d='M46.2661 146.486C46.3214 146.321 46.3767 146.211 46.3767 146.045C46.7636 144.556 46.8189 142.957 46.9294 141.413C47.2058 138.159 47.9244 135.015 49.0298 131.927C50.0248 129.17 51.4619 128.398 53.2307 126.247C54.6125 124.593 55.2205 122.276 54.8889 120.181C54.8336 119.96 54.7783 119.739 54.6125 119.574C54.3914 119.409 54.115 119.464 53.8939 119.519C53.0648 119.684 52.2357 119.795 51.4066 119.96C50.9644 115.217 52.3463 109.813 53.0096 105.07C53.1754 103.802 53.1754 98.7281 53.6176 97.57C49.6931 95.8604 45.3818 95.0332 41.0151 94.8677C41.6231 96.6325 42.01 99.5553 42.2864 102.368C45.437 103.691 48.4218 106.228 49.8037 108.544C52.7332 113.453 49.7484 120.346 47.3716 124.758C46.9294 125.585 45.7134 127.515 46.2109 128.563C46.3214 128.784 46.7636 128.894 46.9294 129.059C47.4269 129.721 47.9244 130.052 48.1455 130.879C48.6982 132.699 47.8138 134.685 46.9847 136.284C44.3868 141.192 40.2966 145.328 36.6485 149.464C36.4826 149.63 36.3168 149.85 36.151 150.071C36.2063 150.843 36.3168 151.615 36.3721 152.387L38.5278 171.909C38.97 175.825 39.1911 179.575 38.6936 183.435C38.3067 186.634 38.8594 190.053 41.2915 192.48C43.5577 194.741 48.9193 196.561 50.6881 193.031C52.6226 189.226 49.8037 182.443 48.6429 178.748C46.8189 173.068 46.7636 167.167 45.4923 161.266C44.6632 157.516 43.5024 153.545 44.7737 149.905C45.2159 148.747 45.8792 147.644 46.2661 146.486Z' fill='%238B7E74'/%3E%3Cpath d='M108.725 22.6774C104.248 18.6516 97.4494 14.7361 91.2035 14.7361C86.4499 14.7912 81.9727 16.8869 77.0534 16.942C62.3505 17.2177 47.4818 15.2324 33.2764 18.3759C25.5933 20.0854 18.0208 22.512 11.4985 26.8686C0.664757 34.093 -6.02339 45.8947 -12.3799 57.2552C-14.4803 61.0052 -16.5807 64.8656 -17.1335 69.112C-18.4048 78.432 -11.5508 87.366 -3.0386 91.4469C5.41832 95.5279 15.2018 95.8588 24.6537 95.8036C34.1055 95.7485 43.7232 95.4727 52.6776 98.561C56.9336 100.05 60.8581 102.201 64.9484 103.966C82.1386 111.411 104.414 110.252 117.072 96.4102C124.036 88.7998 127.242 78.3217 127.187 68.009C127.132 57.7515 124.036 47.6594 119.67 38.3394C116.795 32.6592 113.479 26.9789 108.725 22.6774Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.2' d='M108.725 22.6774C104.248 18.6516 97.4494 14.7361 91.2035 14.7361C86.4499 14.7912 81.9727 16.8869 77.0534 16.942C62.3505 17.2177 47.4818 15.2324 33.2764 18.3759C25.5933 20.0854 18.0208 22.512 11.4985 26.8686C0.664757 34.093 -6.02339 45.8947 -12.3799 57.2552C-14.4803 61.0052 -16.5807 64.8656 -17.1335 69.112C-18.4048 78.432 -11.5508 87.366 -3.0386 91.4469C5.41832 95.5279 15.2018 95.8588 24.6537 95.8036C34.1055 95.7485 43.7232 95.4727 52.6776 98.561C56.9336 100.05 60.8581 102.201 64.9484 103.966C82.1386 111.411 104.414 110.252 117.072 96.4102C124.036 88.7998 127.242 78.3217 127.187 68.009C127.132 57.7515 124.036 47.6594 119.67 38.3394C116.795 32.6592 113.479 26.9789 108.725 22.6774Z' fill='%2393BC82'/%3E%3Cpath d='M-67.599 7.2913C-74.3977 11.7583 -76.3876 20.2511 -78.4327 27.5858C-80.8095 35.9131 -81.8044 44.7368 -80.2568 53.3399C-78.0458 65.7482 -69.9205 77.6601 -57.9261 81.7411C-42.3388 87.0905 -36.7009 69.2776 -22.3849 67.2372C17.4676 61.5569 7.40775 20.1959 3.37275 13.4679C0.940697 9.60752 -2.48629 6.51923 -6.30019 4.09272C-25.3144 -8.03984 -52.1776 -2.80078 -67.599 7.2913Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.52' d='M-67.599 7.2913C-74.3977 11.7583 -76.3876 20.2511 -78.4327 27.5858C-80.8095 35.9131 -81.8044 44.7368 -80.2568 53.3399C-78.0458 65.7482 -69.9205 77.6601 -57.9261 81.7411C-42.3388 87.0905 -36.7009 69.2776 -22.3849 67.2372C17.4676 61.5569 7.40775 20.1959 3.37275 13.4679C0.940697 9.60752 -2.48629 6.51923 -6.30019 4.09272C-25.3144 -8.03984 -52.1776 -2.80078 -67.599 7.2913Z' fill='%2393BC82'/%3E%3Cpath d='M38.914 33.9275C37.9744 34.0378 37.0347 34.1481 36.0398 34.2584C36.0951 38.6151 35.6529 43.1373 33.4972 46.9425C23.4926 64.4244 18.4074 45.4535 19.2918 36.5195C19.6787 32.3834 21.2264 28.4127 22.7188 24.5524C25.2061 18.2104 27.9145 11.7029 26.8643 4.75424C26.6985 3.70643 26.4774 2.65862 26.0905 1.66595C25.2061 5.19543 24.6533 -2.415 23.1609 0.728441C19.6787 8.17342 13.6538 24.6075 5.14164 22.7325C-6.18953 20.1957 -14.4253 8.94549 -19.2342 -0.815704C-22.8823 -8.26068 -25.4801 -16.4777 -26.6962 -24.8051C-28.5755 -24.8051 -30.3995 -24.4742 -32.2236 -23.7021C-37.751 -21.3859 -41.6754 -15.9263 -42.7809 -10.1357C-44.0522 -3.84884 -41.786 2.54832 -37.9168 7.51165C-33.4949 13.1367 -27.4147 16.2802 -20.8371 18.7618C-13.7068 21.4641 -5.58151 24.056 -1.27014 30.8392C2.65431 37.0158 0.99609 44.2402 -1.04905 50.7477C-2.98363 56.8691 -5.47096 63.2111 -4.58658 69.7186C-4.03384 73.7444 -2.04398 77.2739 -0.772675 81.0791C0.553898 85.1049 0.774994 89.2961 0.443348 93.4874C-0.219936 101.649 -2.76254 109.48 -3.26 117.642C-3.86802 128.341 -0.21994 138.764 1.32773 149.242C0.830265 157.073 -0.219936 181.669 -4.58658 185.585C-6.79754 187.57 -10.0034 187.79 -12.9329 187.79C-19.6764 187.846 -26.4751 186.798 -33.1079 187.018C-28.1886 191.154 -15.5861 192.643 -9.06377 194.849C1.6041 198.434 14.4829 200.254 23.1057 193.085C16.3623 188.232 15.8648 178.581 16.0306 170.309C16.307 155.915 16.4728 141.576 16.5833 127.183C16.6386 120.069 15.8648 112.403 16.7492 105.344C17.0808 102.752 17.523 100.822 17.3019 98.0647C17.0808 95.2521 16.5833 92.3293 18.1863 89.7924C18.9601 88.524 20.1762 87.6417 21.2264 86.5939C30.844 76.943 24.2112 66.906 28.3567 59.5714C29.1305 58.1927 30.4018 57.2 31.5073 56.0419C34.271 53.0639 35.8187 49.1484 37.2005 45.288C38.5271 41.6483 39.9642 37.6776 38.914 33.9275Z' fill='%23B5926E'/%3E%3Cpath d='M15.9741 170.309C16.2505 155.915 16.4163 141.576 16.5268 127.183C16.5821 120.069 15.8083 112.403 16.6926 105.344C17.0243 102.752 17.4665 100.822 17.2454 98.0647C17.0796 96.0242 16.7479 93.8735 17.2454 91.833C14.5922 93.1014 12.1602 94.5904 10.9994 97.2375C9.72812 100.105 11.2758 103.469 12.2155 106.227C13.2104 109.315 13.7631 112.458 13.9289 115.712C14.2606 123.543 10.8889 130.878 10.6125 138.709C10.3914 144.665 12.934 151.448 10.3361 157.073C10.1703 157.459 9.61757 157.459 9.34121 157.183C7.57244 155.584 4.256 149.683 0.829018 146.374C0.994839 147.312 1.16066 148.249 1.32648 149.242C0.829014 157.073 -0.221188 181.669 -4.58783 185.585C-6.79879 187.57 -10.0047 187.791 -12.9342 187.791C-19.6776 187.846 -26.4763 186.798 -33.1092 187.018C-28.1898 191.155 -15.5873 192.644 -9.06502 194.849C1.60285 198.434 14.4817 200.254 23.1044 193.085C16.3057 188.232 15.8083 178.581 15.9741 170.309Z' fill='%238B7E74'/%3E%3Cpath d='M38.914 33.9276C37.9744 34.0378 37.0347 34.1482 36.0398 34.2584C36.0951 38.6151 35.6529 43.1373 33.4972 46.9425C23.4926 64.4244 18.4074 45.4535 19.2918 36.5195C19.6787 32.3834 21.2264 28.4128 22.7188 24.5524C25.2061 18.2104 27.9145 11.7029 26.8643 4.75426C26.6985 3.70644 26.4774 2.65863 26.0905 1.66596C25.2061 5.19544 24.6534 -2.41499 23.161 0.728449C19.6787 8.17343 13.6538 24.6075 5.14165 22.7325C-6.18952 20.1957 -14.4253 8.9455 -19.2342 -0.815697C-22.8823 -8.26068 -25.4801 -16.4777 -26.6962 -24.8051C-28.5755 -24.8051 -30.3995 -24.4742 -32.2236 -23.7021C-37.751 -21.3859 -41.6754 -15.9263 -42.7809 -10.1357C-44.0522 -3.84884 -41.786 2.54833 -37.9168 7.51165C-33.4949 13.1368 -27.4147 16.2802 -20.8371 18.7618C-13.7068 21.4641 -5.5815 24.0561 -1.27013 30.8393C0.830276 34.1481 1.32774 37.7328 0.996098 41.4277C3.92562 40.2144 7.07624 39.5527 9.83994 40.9865C14.8146 43.5785 15.8648 51.1337 15.3121 56.3176C18.4627 55.2147 22.0002 54.8287 24.7639 57.0346C26.0352 58.0824 27.0301 59.4059 27.7487 60.8949C27.9145 60.5089 28.0803 60.0677 28.3014 59.6817C29.0753 58.303 30.3466 57.3103 31.4521 56.1522C34.2158 53.1742 35.7634 49.2587 37.1453 45.3983C38.5271 41.6483 39.9642 37.6776 38.914 33.9276Z' fill='%238B7E74'/%3E%3Cpath d='M11.1664 75.3435C11.0559 77.0531 11.0559 79.0384 12.3272 80.2517C13.5432 81.4098 15.5884 81.465 17.0808 80.6377C18.5732 79.8105 19.5681 78.3767 20.3419 76.8325C22.166 73.0273 22.5529 68.7258 22.3318 64.4794C22.1107 60.4536 16.4727 58.6888 13.8749 61.722C11.4428 64.5345 11.3875 71.9243 11.1664 75.3435Z' fill='%238B7E74'/%3E%3Cpath d='M55.8833 49.4247C58.039 51.2997 58.9234 54.2226 60.6922 56.4285C71.9128 70.4361 113.81 55.7667 108.007 18.3764C100.711 -28.6097 34.3818 -23.6464 28.6333 3.04524C17.4127 55.0498 51.0192 45.2886 55.8833 49.4247Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.34' d='M55.8833 49.4247C58.039 51.2997 58.9234 54.2226 60.6922 56.4285C71.9128 70.4361 113.81 55.7667 108.007 18.3764C100.711 -28.6097 34.3818 -23.6464 28.6333 3.04524C17.4127 55.0498 51.0192 45.2886 55.8833 49.4247Z' fill='%2393BC82'/%3E%3Cpath d='M55.8285 17.0515C56.4365 18.7059 55.939 20.5258 56.2154 22.2905C57.8736 33.2098 84.7368 38.1732 93.1384 16.5C103.696 -10.7983 66.828 -28.5008 55.4968 -15.9822C33.6083 8.2278 54.5019 13.3566 55.8285 17.0515Z' fill='%23BDDA97'/%3E%3Cpath d='M3.48365 36.1332C6.52371 31.9971 7.4081 25.9309 11.9406 23.4492C15.3675 21.5742 19.6236 22.5117 23.4375 21.6845C41.8438 17.7138 37.0349 -15.4301 29.186 -25.4671C23.2717 -33.0224 13.1013 -35.6695 3.53892 -37.0482C-2.43067 -37.8754 -8.5108 -38.3717 -14.5357 -37.6548C-29.128 -35.7798 -37.7507 -26.4597 -47.5342 -16.5883C-56.4886 -7.59913 -52.2325 2.82385 -47.7 13.4674C-27.3039 61.1704 -0.0538864 41.0414 3.48365 36.1332Z' fill='%23BDDA97'/%3E%3Cpath opacity='0.34' d='M29.186 -25.4126C23.2717 -32.9678 13.1013 -35.6149 3.53891 -36.9936C0.609388 -37.4348 -2.26485 -37.7657 -5.19438 -37.876C-0.38554 -36.9936 4.14692 -35.2841 7.79501 -32.1406C17.4679 -23.8684 28.6333 7.78653 11.3325 15.2315C7.73973 16.7757 3.37309 16.6654 0.388294 19.2022C-3.53616 22.5111 -3.25979 28.6325 -5.41547 33.2649C-6.52095 35.6363 -11.3851 41.5923 -18.847 44.1842C-7.62643 46.1695 1.54905 38.8349 3.48363 36.1326C6.5237 31.9965 7.40809 25.9302 11.9406 23.4486C15.3675 21.5735 19.6236 22.5111 23.4375 21.6838C41.8438 17.7683 37.0349 -15.4308 29.186 -25.4126Z' fill='%2393BC82'/%3E%3Cpath d='M205.89 33.9968C207.106 32.8863 207.832 31.3032 207.185 29.8619C206.822 29.0114 206.087 28.3813 205.243 27.9087C202.566 26.3178 198.997 26.3178 195.965 27.2078C192.925 28.1293 190.249 29.8304 187.62 31.5631C190.336 29.3815 193.091 27.0975 194.552 24.0653C195.973 21.041 195.602 17.0479 192.767 15.0553C190.178 13.2438 186.53 13.5825 183.364 14.315C176.961 15.7877 170.96 18.5994 165.851 22.4035C162.527 24.8765 156.006 29.6729 155.271 33.9968H205.89Z' fill='%23EAEAEA'/%3E%3Cpath d='M191.789 29.0116C190.778 30.4529 194.22 31.0436 195.192 31.0829C197.418 31.1932 199.692 30.4214 201.555 29.3817C202.566 28.8304 203.458 28.1295 204.193 27.3498C201.682 26.318 198.642 26.3889 195.965 27.2001C194.505 27.6412 193.131 28.2319 191.836 28.9722C191.836 28.9722 191.836 29.0116 191.796 29.0116H191.789Z' fill='white'/%3E%3Cpath d='M167.471 29.7914C173.59 30.1616 181.249 30.1616 186.152 26.2867C189.034 23.9948 191.379 20.0096 189.642 16.5757C189.113 15.544 188.307 14.5437 187.328 13.7325C185.994 13.7719 184.652 14.0239 183.357 14.3232C176.954 15.796 170.953 18.6077 165.844 22.4117C163.902 23.853 160.815 26.137 158.47 28.6494C161.391 29.311 164.471 29.6497 167.471 29.7914Z' fill='%23F3F3F3'/%3E%3Cpath d='M299.862 62.6023C301.078 61.4918 301.804 59.9087 301.156 58.4674C300.793 57.6168 300.059 56.9868 299.214 56.5142C296.538 54.9233 292.969 54.9233 289.937 55.8132C286.897 56.7347 284.22 58.4359 281.591 60.1686C284.307 57.987 287.063 55.703 288.524 52.6708C289.945 49.6464 289.574 45.6534 286.739 43.6608C284.149 41.8493 280.502 42.188 277.335 42.9204C270.932 44.3932 264.932 47.2049 259.823 51.009C256.499 53.482 249.977 58.2784 249.243 62.6023H299.862Z' fill='%23EAEAEA'/%3E%3Cpath d='M285.76 57.6171C284.75 59.0583 288.192 59.649 289.163 59.6884C291.39 59.7987 293.664 59.0268 295.527 57.9872C296.538 57.4359 297.43 56.735 298.164 55.9552C295.653 54.9235 292.614 54.9944 289.937 55.8056C288.476 56.2467 287.103 56.8373 285.808 57.5777C285.808 57.5777 285.808 57.6171 285.768 57.6171H285.76Z' fill='white'/%3E%3Cpath d='M261.443 58.3969C267.562 58.7671 275.22 58.7671 280.123 54.8921C283.005 52.6003 285.35 48.6151 283.613 45.1812C283.084 44.1494 282.279 43.1492 281.3 42.338C279.966 42.3774 278.623 42.6294 277.328 42.9287C270.925 44.4015 264.925 47.2132 259.816 51.0172C257.874 52.4585 254.787 54.7425 252.442 57.2549C255.363 57.9165 258.442 58.2551 261.443 58.3969Z' fill='%23F3F3F3'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.88'%3E%3Cpath d='M320 0H-2V195H320V0Z' fill='url%28%23paint1_linear_6029_1961%29'/%3E%3C/g%3E%3Cg style='mix-blend-mode:multiply' opacity='0.65'%3E%3Cpath d='M320 0H0V194H320V0Z' fill='url%28%23paint2_linear_6029_1961%29'/%3E%3C/g%3E%3Cpath d='M111.212 210.985V210.998C111.212 211.1 111.208 211.188 111.194 211.272C111.186 211.321 111.181 211.365 111.164 211.409L111.15 211.466C111.15 211.466 111.141 211.506 111.137 211.524C111.133 211.542 111.124 211.559 111.11 211.577C111.106 211.595 111.097 211.612 111.093 211.617C111.088 211.634 111.08 211.656 111.066 211.674C111.013 211.771 111.013 211.776 111.009 211.78C110.978 211.82 110.951 211.86 110.916 211.891C110.885 211.922 110.854 211.953 110.819 211.984C110.779 212.019 110.739 212.054 110.691 212.081C110.651 212.107 110.607 212.129 110.562 212.156C110.562 212.156 110.558 212.165 110.554 212.165C110.483 212.2 110.408 212.227 110.328 212.262H110.324C110.24 212.297 110.151 212.319 110.054 212.346C109.97 212.364 109.886 212.386 109.798 212.403C109.784 212.403 109.767 212.408 109.749 212.412C109.701 212.417 109.647 212.43 109.594 212.439C109.541 212.448 109.488 212.452 109.426 212.456C109.413 212.461 109.396 212.461 109.382 212.465C109.369 212.465 109.351 212.47 109.338 212.47C109.214 212.483 109.095 212.496 108.962 212.505C108.702 212.523 108.423 212.536 108.136 212.549C107.99 212.554 107.844 212.558 107.689 212.563C107.61 212.563 107.526 212.563 107.446 212.567C107.225 212.567 107 212.576 106.766 212.593C105.435 212.646 103.963 212.784 102.58 213.314H102.571C101.886 213.579 101.214 213.937 100.604 214.423H100.6C100.481 214.525 100.37 214.618 100.255 214.728C100.158 214.821 100.069 214.918 99.9855 215.016C99.9855 215.016 99.984 215.019 99.9811 215.024C98.9424 216.236 98.9822 217.911 98.7214 219.639L98.6772 219.891C98.4871 221 98.1424 222.123 97.2805 223.153C97.2716 223.157 97.2672 223.166 97.254 223.17C97.223 223.219 97.1788 223.268 97.1302 223.316C97.0904 223.36 97.0551 223.4 97.0197 223.44C96.2771 224.253 95.4108 224.938 94.4871 225.539H94.4827V225.553L93.802 225.981C93.771 225.995 93.7489 226.017 93.718 226.03C93.5191 226.149 93.3158 226.26 93.1125 226.375C92.8826 226.503 92.6484 226.622 92.4141 226.746C92.4141 226.746 92.4112 226.748 92.4053 226.751H92.392L92.1268 226.883C92.1268 226.883 92.0959 226.901 92.0826 226.91C91.9942 226.954 91.9058 226.994 91.8174 227.033C91.8042 227.042 91.7821 227.051 91.7688 227.064C91.76 227.069 91.7555 227.073 91.7423 227.078C91.7158 227.086 91.6937 227.104 91.6671 227.113C91.4285 227.223 91.1854 227.334 90.9467 227.436C90.9069 227.449 90.8716 227.467 90.8362 227.48C90.6285 227.568 90.4251 227.657 90.2174 227.741H90.213C89.9699 227.838 89.7268 227.931 89.4837 228.019C89.3334 228.077 89.1787 228.13 89.0284 228.187C88.9356 228.222 88.8384 228.258 88.75 228.289C88.7367 228.289 88.7146 228.293 88.7102 228.293C88.4671 228.377 88.224 228.457 87.9765 228.527C87.8306 228.576 87.6759 228.625 87.5257 228.669C87.4328 228.7 87.3356 228.722 87.2428 228.753C87.2163 228.762 87.1986 228.766 87.1721 228.766C86.929 228.841 86.6814 228.907 86.4383 228.983C86.1952 229.053 85.9433 229.115 85.7002 229.177C85.466 229.239 85.2361 229.296 85.0063 229.349C84.9267 229.367 84.8516 229.385 84.772 229.403C84.3698 229.5 83.9588 229.597 83.5521 229.685C83.2029 229.685 82.8715 229.69 82.5532 229.69H82.54C82.4471 229.699 82.3543 229.699 82.2615 229.699H82.2571C81.8283 229.703 81.4261 229.716 81.0372 229.73H81.0328C79.5432 229.783 78.3057 229.871 77.2625 229.986C76.9311 230.021 76.6172 230.057 76.3167 230.092C73.8503 230.406 72.6083 230.821 71.4636 231.003C70.9641 231.087 70.4779 231.122 69.921 231.082C69.7044 231.069 69.479 231.042 69.2359 230.998C68.7718 230.927 68.2414 230.812 67.6138 230.636H67.6094C67.5564 230.622 67.5033 230.605 67.4414 230.591C67.3795 230.574 67.3088 230.552 67.2425 230.534C66.8624 230.424 66.4425 230.295 65.9828 230.136C65.6646 230.03 65.3464 229.928 65.037 229.836C64.4403 229.654 63.8701 229.504 63.3309 229.385C63.1806 229.345 63.0303 229.314 62.8889 229.288C62.7209 229.252 62.5618 229.226 62.3983 229.195C62.217 229.164 62.0358 229.137 61.859 229.106C61.8193 229.098 61.7839 229.093 61.753 229.089C61.722 229.084 61.6822 229.08 61.6513 229.08C60.7054 228.947 59.8612 228.912 59.0966 228.952C58.9065 228.961 58.7209 228.978 58.5352 228.996C58.354 229.014 58.1772 229.04 58.0004 229.067C57.828 229.093 57.6557 229.124 57.4921 229.159C57.4789 229.164 57.4568 229.168 57.4435 229.168C57.4435 229.168 57.4037 229.177 57.3905 229.182C57.2579 229.212 57.1297 229.243 57.0103 229.279C56.9264 229.296 56.8424 229.323 56.7584 229.354C56.5684 229.407 56.3827 229.473 56.1971 229.54C56.1043 229.575 56.0114 229.61 55.923 229.646C55.6888 229.738 55.4545 229.845 55.2291 229.959C55.1009 230.017 54.9728 230.083 54.8534 230.149C54.5838 230.291 54.323 230.441 54.0667 230.6C53.3153 231.06 52.5993 231.559 51.8346 232.041C51.786 232.077 51.7329 232.112 51.6843 232.138C51.6401 232.174 51.5959 232.196 51.5517 232.227C51.534 232.236 51.5164 232.245 51.4987 232.258C51.3882 232.329 51.2688 232.395 51.1539 232.466C50.9241 232.603 50.6898 232.731 50.4467 232.859C50.2567 232.952 50.0666 233.049 49.8633 233.137C49.7926 233.168 49.7307 233.195 49.6688 233.221C49.5981 233.257 49.5274 233.283 49.4522 233.314C49.3948 233.345 49.3285 233.367 49.271 233.394C49.134 233.447 48.997 233.495 48.8555 233.544H48.8511C48.776 233.571 48.7097 233.593 48.6345 233.619C48.4622 233.677 48.281 233.725 48.0997 233.774C48.0158 233.8 47.9274 233.818 47.8301 233.845C47.6799 233.88 47.5296 233.915 47.3837 233.942C47.3484 233.951 47.3086 233.955 47.2776 233.968C47.1848 233.986 47.092 234.004 46.9992 234.017C46.9859 234.021 46.9638 234.021 46.9506 234.026C46.8401 234.039 46.7251 234.061 46.6146 234.074C46.5793 234.079 46.5395 234.083 46.5086 234.083C46.3141 234.114 46.1108 234.132 45.9075 234.145C45.85 234.15 45.7969 234.154 45.7351 234.154C45.6864 234.158 45.6334 234.163 45.5804 234.167H45.5362C45.4831 234.172 45.4257 234.172 45.3682 234.172C45.3108 234.172 45.2577 234.176 45.2003 234.176H45.1958C45.0588 234.18 44.9262 234.185 44.7848 234.18C44.7848 234.18 44.7848 234.185 44.7804 234.18C44.7804 234.18 44.7804 234.185 44.7759 234.18C44.7583 234.185 44.7362 234.185 44.7141 234.185H44.6522C44.5196 234.185 44.387 234.185 44.25 234.18C43.8036 234.163 43.335 234.132 42.8444 234.079C42.6765 234.066 42.5129 234.043 42.345 234.021C42.3361 234.021 42.3184 234.017 42.3096 234.017C42.3096 234.017 42.3081 234.017 42.3052 234.017C42.2433 234.008 42.177 233.999 42.1107 233.986H42.1063C41.8941 233.955 41.6864 233.924 41.4654 233.884C41.3328 233.867 41.1958 233.84 41.0588 233.809C40.9969 233.8 40.9306 233.792 40.8643 233.774C40.8068 233.765 40.7405 233.747 40.6786 233.738L40.5328 233.708C40.4002 233.677 40.272 233.655 40.135 233.619C40.051 233.601 39.9626 233.579 39.8742 233.562H39.8698C39.7991 233.548 39.7284 233.531 39.6576 233.517C39.2112 233.416 38.7648 233.323 38.314 233.239C38.3096 233.243 38.3096 233.239 38.3096 233.239C37.7306 233.12 37.1427 233.018 36.5637 232.93C36.4841 232.921 36.409 232.903 36.3294 232.894C36.325 232.894 36.3206 232.894 36.3162 232.89H36.3117C36.0952 232.855 35.883 232.828 35.662 232.797C35.525 232.779 35.388 232.757 35.2465 232.744C35.083 232.717 34.9195 232.695 34.7559 232.673C34.6675 232.664 34.5791 232.656 34.4907 232.642C34.199 232.607 33.9073 232.58 33.6156 232.55C32.7935 232.466 31.9714 232.408 31.1448 232.364C30.8266 232.351 30.5128 232.337 30.1945 232.329C29.0719 232.253 27.9492 232.205 26.8221 232.174C26.3183 232.156 25.8144 232.138 25.3105 232.125C23.074 232.068 20.8331 232.032 18.601 231.962C18.159 231.948 17.7215 231.944 17.2795 231.931H17.275C17.054 231.931 16.8463 231.926 16.6253 231.926C16.4574 231.917 16.2982 231.913 16.1391 231.909C16.0861 231.909 16.0375 231.904 15.9844 231.904C15.6485 231.891 15.3126 231.864 14.9899 231.833C14.8352 231.816 14.6717 231.794 14.5214 231.776C14.5037 231.772 14.4861 231.767 14.4728 231.767C14.3844 231.754 14.296 231.736 14.212 231.723C14.1546 231.714 14.0883 231.696 14.0308 231.683C13.9468 231.666 13.8584 231.643 13.7744 231.626C13.7612 231.621 13.7435 231.617 13.7347 231.617C13.7214 231.617 13.7037 231.612 13.6949 231.612C13.6595 231.604 13.633 231.595 13.6021 231.582C13.5534 231.568 13.5048 231.551 13.4562 231.533C13.0319 231.396 12.6474 231.21 12.3114 230.954C12.2009 230.87 12.0904 230.777 11.9932 230.68C11.8606 230.552 11.7324 230.401 11.6219 230.238C11.6219 230.238 11.6205 230.236 11.6175 230.233C11.6175 230.233 11.5998 230.203 11.5822 230.185L11.4496 229.964C11.4363 229.937 11.423 229.92 11.4098 229.893C11.4009 229.884 11.3965 229.867 11.3921 229.858C11.3788 229.822 11.3567 229.796 11.3435 229.761C11.3435 229.761 11.3346 229.725 11.3258 229.712C11.3214 229.703 11.317 229.694 11.3125 229.677C11.2728 229.593 11.2374 229.504 11.2065 229.416C11.202 229.407 11.202 229.398 11.1976 229.38C11.1799 229.332 11.1578 229.283 11.149 229.235C11.1402 229.199 11.1225 229.164 11.1136 229.133C11.1048 229.102 11.096 229.058 11.0783 229.022C11.0783 229.014 11.0739 229.009 11.0739 228.996C11.0694 228.987 11.0694 228.983 11.0694 228.969C11.0562 228.93 11.0429 228.89 11.0385 228.85C11.0341 228.824 11.0252 228.801 11.0208 228.775C11.0164 228.762 11.0164 228.74 11.012 228.722C11.0031 228.673 10.9987 228.625 10.9855 228.572C10.9501 228.364 10.9236 228.147 10.8971 227.917C10.8573 227.449 10.8573 226.919 10.9015 226.326C10.9103 226.198 10.928 226.061 10.9324 225.924C10.9501 225.712 10.9766 225.5 11.0076 225.274C11.0164 225.204 11.0341 225.137 11.0429 225.062C11.0473 225.014 11.0562 224.96 11.0694 224.907C11.0827 224.784 11.1048 224.669 11.1269 224.541C11.1446 224.421 11.1667 224.302 11.1888 224.178C11.2241 223.993 11.2639 223.807 11.3081 223.608C11.3435 223.44 11.3833 223.276 11.4186 223.104C11.4584 222.932 11.5026 222.755 11.5468 222.574V222.565C10.6849 222.671 9.14235 223.011 7.48045 223.038C7.42299 223.047 7.35227 223.047 7.28597 223.047C7.10475 223.047 6.92353 223.047 6.74232 223.038H6.73789C6.58761 223.033 6.43292 223.029 6.28706 223.011C6.1633 223.002 6.04396 222.985 5.92462 222.967L5.77876 222.954C5.71689 222.949 5.65059 222.941 5.59313 222.927C5.44285 222.901 5.28815 222.874 5.13787 222.834C5.03622 222.808 4.93014 222.786 4.82848 222.755C4.7445 222.737 4.66052 222.706 4.58096 222.68C4.46162 222.644 4.35113 222.6 4.23621 222.556C4.15665 222.525 4.08593 222.499 4.01079 222.459C3.93123 222.423 3.86051 222.388 3.78537 222.353C3.67929 222.295 3.5688 222.233 3.46272 222.171C3.37432 222.118 3.29034 222.065 3.21078 221.999C3.17542 221.981 3.14006 221.955 3.10912 221.928C2.96768 221.818 2.83066 221.699 2.69806 221.57C2.68038 221.544 2.65386 221.526 2.62292 221.495C2.56988 221.442 2.52127 221.385 2.47265 221.327C2.37541 221.208 2.28259 221.097 2.18977 220.965C2.18977 220.965 2.18977 220.96 2.18535 220.96C2.11463 220.859 2.04833 220.753 1.98645 220.642C1.80965 220.342 1.65496 220.006 1.5312 219.63L1.52678 219.617C1.52236 219.612 1.52236 219.608 1.52236 219.604C1.52236 219.59 1.51794 219.577 1.51352 219.564C1.50026 219.511 1.47816 219.453 1.4649 219.387C1.46048 219.378 1.46048 219.36 1.45606 219.352C1.4428 219.281 1.42512 219.219 1.41186 219.144C1.40744 219.126 1.40302 219.104 1.40302 219.086C1.3986 219.06 1.39418 219.047 1.38976 219.029C1.38976 219.024 1.38534 219.02 1.38976 219.011C1.38534 219.002 1.38092 218.994 1.38534 218.98C1.3765 218.923 1.37208 218.861 1.35882 218.799C1.34556 218.702 1.3323 218.605 1.32788 218.499C1.32346 218.459 1.32346 218.423 1.32346 218.392C1.31904 218.335 1.31904 218.269 1.31462 218.211C1.3102 218.194 1.3102 218.167 1.3102 218.149C1.30578 217.986 1.30578 217.822 1.3102 217.654C1.3102 217.641 1.3102 217.623 1.31462 217.606C1.31462 217.548 1.31904 217.482 1.32346 217.416V217.305C1.32346 217.305 1.32788 217.274 1.32788 217.261V217.217C1.32788 217.217 1.3323 217.19 1.3323 217.177C1.33672 217.173 1.33672 217.164 1.33672 217.159C1.34114 217.111 1.34556 217.058 1.34998 217.005V216.987C1.34998 216.96 1.3544 216.938 1.3544 216.912C1.3544 216.872 1.35882 216.832 1.36324 216.788C1.36766 216.753 1.36766 216.717 1.37208 216.686C1.3765 216.673 1.3765 216.655 1.3765 216.642C1.38534 216.545 1.40302 216.448 1.41628 216.35C1.42954 216.249 1.44722 216.152 1.46048 216.045V216.019C1.46932 215.926 1.487 215.838 1.50026 215.745C1.50026 215.727 1.50468 215.71 1.5091 215.692C1.52678 215.581 1.54888 215.471 1.56656 215.356C1.5754 215.276 1.59308 215.201 1.60634 215.122C1.6196 215.047 1.63286 214.971 1.65054 214.896C1.66822 214.812 1.68148 214.733 1.69916 214.658C1.7301 214.507 1.75662 214.353 1.79198 214.202C1.80524 214.14 1.8185 214.074 1.83176 214.012C1.83618 213.981 1.84059 213.959 1.84943 213.928C1.86711 213.822 1.89363 213.716 1.92015 213.61C1.93783 213.535 1.95551 213.464 1.97319 213.385C1.99087 213.292 2.01739 213.199 2.04391 213.106C2.06159 213.013 2.08811 212.921 2.11463 212.823C2.11463 212.814 2.11905 212.806 2.11905 212.792C2.14557 212.691 2.17209 212.585 2.19861 212.479C2.21629 212.403 2.23397 212.333 2.25165 212.258C2.35773 211.829 2.47265 211.391 2.58315 210.967L2.67597 210.618C2.76437 210.286 2.85276 209.95 2.94116 209.623C2.94116 209.614 2.94558 209.597 2.95 209.588C2.96326 209.53 2.97652 209.469 2.98978 209.416C3.00304 209.371 3.0163 209.332 3.02514 209.292C3.03398 209.252 3.05166 209.212 3.0605 209.172C3.06934 209.133 3.07376 209.097 3.08702 209.066C3.12238 208.925 3.15774 208.788 3.18868 208.655C3.25056 208.417 3.31244 208.169 3.3699 207.93L3.38316 207.886C3.38316 207.886 3.38758 207.855 3.392 207.838C3.48482 207.462 3.57763 207.038 3.67929 206.582C3.70581 206.472 3.72791 206.357 3.75443 206.233C3.76327 206.185 3.77211 206.136 3.78537 206.083C3.83841 205.831 3.89145 205.575 3.95333 205.309C3.98427 205.168 4.01079 205.031 4.04173 204.885L4.05499 204.81C4.10803 204.545 4.16107 204.266 4.22295 203.983C4.24063 203.886 4.26272 203.789 4.2804 203.692C4.30692 203.568 4.32902 203.449 4.35554 203.32C4.3688 203.259 4.38207 203.197 4.39533 203.135C4.40859 203.038 4.43068 202.94 4.44836 202.843C4.47488 202.71 4.5014 202.573 4.52792 202.436C4.57654 202.193 4.62074 201.941 4.66936 201.681C4.7224 201.389 4.77986 201.093 4.83732 200.788C4.8771 200.589 4.91246 200.381 4.94782 200.178C4.95224 200.142 4.96108 200.103 4.9655 200.072C4.97876 199.992 4.99644 199.917 5.0097 199.833C5.02738 199.714 5.0539 199.594 5.07158 199.471C5.15114 199.055 5.22185 198.622 5.30141 198.189C5.35003 197.915 5.39865 197.641 5.44727 197.362C5.46053 197.278 5.47821 197.19 5.49147 197.106C5.54009 196.823 5.58871 196.536 5.63733 196.244C5.66385 196.12 5.68152 195.992 5.70804 195.864C5.75224 195.639 5.79203 195.409 5.83181 195.174C5.86717 194.958 5.90695 194.737 5.94231 194.52C6.2075 192.978 6.47712 191.351 6.75999 189.645C6.80419 189.389 6.8484 189.128 6.88818 188.863C7.01635 188.103 7.14453 187.325 7.26829 186.538C7.35669 185.99 7.44508 185.437 7.53348 184.872C7.54232 184.819 7.55117 184.761 7.56443 184.699C7.63956 184.231 7.71028 183.753 7.78984 183.276C7.81636 183.135 7.83846 182.989 7.86498 182.838C7.8694 182.799 7.87824 182.759 7.88266 182.715C7.95338 182.308 8.01526 181.897 8.07713 181.481C8.10365 181.327 8.12576 181.168 8.15228 181.013C8.16554 180.951 8.17879 180.88 8.18763 180.818C8.23625 180.5 8.28487 180.182 8.33349 179.864C8.33791 179.851 8.33791 179.833 8.34233 179.82C8.37769 179.607 8.40421 179.4 8.43957 179.183C8.48377 178.9 8.53239 178.604 8.57659 178.317C8.61637 178.052 8.66057 177.786 8.70035 177.526C8.73129 177.34 8.75781 177.159 8.78875 176.973C8.82411 176.761 8.85063 176.549 8.88599 176.332C8.90367 176.213 8.92577 176.102 8.93903 175.983C8.95671 175.881 8.97439 175.771 8.98765 175.665C9.08047 175.086 9.16445 174.502 9.25727 173.919C9.27053 173.822 9.29263 173.72 9.30589 173.618C9.36776 173.203 9.43406 172.783 9.50036 172.359C9.54898 172.036 9.60202 171.709 9.65064 171.373C9.69926 171.046 9.74787 170.719 9.79649 170.387C9.90699 169.663 10.0219 168.933 10.128 168.2C10.2517 167.417 10.3667 166.622 10.4904 165.83C10.5258 165.587 10.5656 165.34 10.5965 165.097C10.6672 164.646 10.7335 164.195 10.8042 163.74C10.8617 163.36 10.9236 162.98 10.9766 162.604C11.0208 162.317 11.065 162.025 11.1092 161.733C11.1932 161.189 11.2772 160.646 11.3523 160.102C11.37 159.983 11.3921 159.864 11.4054 159.74C11.4407 159.554 11.4628 159.364 11.4938 159.17C11.5247 158.957 11.5556 158.745 11.5866 158.529C11.6043 158.418 11.6219 158.303 11.6396 158.184C11.6882 157.857 11.7368 157.53 11.7855 157.194C12.0286 155.541 12.2761 153.87 12.5236 152.195C12.7402 150.723 12.9612 149.238 13.1778 147.748C13.1822 147.744 13.1822 147.735 13.1822 147.731C13.2352 147.364 13.2883 146.993 13.3457 146.626C13.3546 146.542 13.3722 146.458 13.3811 146.374C13.5181 145.463 13.6507 144.553 13.7833 143.638C13.8805 142.993 13.9733 142.338 14.0662 141.693C14.0971 141.472 14.1236 141.256 14.159 141.043C14.2385 140.54 14.3093 140.036 14.38 139.532C14.517 138.617 14.6496 137.706 14.7778 136.796C14.8397 136.341 14.9104 135.885 14.9723 135.43C15.1667 134.064 15.3656 132.703 15.5601 131.346C15.6131 130.979 15.6662 130.608 15.7236 130.241C15.7325 130.157 15.7502 130.073 15.759 129.989C15.8297 129.538 15.8916 129.087 15.9535 128.637C15.9712 128.508 15.9933 128.38 16.0109 128.256C16.0109 128.256 16.0109 128.23 16.0154 128.221V128.208C16.033 128.053 16.0596 127.894 16.0861 127.739C16.1435 127.315 16.2054 126.891 16.2673 126.466C16.3557 125.848 16.4441 125.229 16.5325 124.61C16.5723 124.34 16.6121 124.071 16.6518 123.797C16.6518 123.788 16.6518 123.779 16.6562 123.77C16.6607 123.735 16.6651 123.7 16.6695 123.673C16.6828 123.567 16.7005 123.461 16.7137 123.359C16.7137 123.328 16.7181 123.302 16.7226 123.275C16.7491 123.094 16.7712 122.913 16.8021 122.732C16.8463 122.404 16.8949 122.082 16.9391 121.759C16.9833 121.467 17.0231 121.176 17.0673 120.884C17.1513 120.292 17.2353 119.699 17.3192 119.112C17.3546 118.851 17.3944 118.594 17.4297 118.334C17.4784 117.967 17.5314 117.6 17.5844 117.229C17.6728 116.628 17.7568 116.022 17.8452 115.425C17.9027 115.01 17.9557 114.594 18.0176 114.179C18.0353 114.055 18.053 113.927 18.0706 113.808C18.1104 113.52 18.1546 113.229 18.1944 112.941C18.1944 112.924 18.1988 112.902 18.1988 112.888C18.2563 112.477 18.3181 112.071 18.3756 111.664C18.3712 111.66 18.3756 111.651 18.3756 111.646C18.3889 111.558 18.4021 111.47 18.4154 111.381C18.4507 111.125 18.4861 110.882 18.517 110.63L18.5303 110.537C18.5347 110.493 18.5436 110.444 18.548 110.395V110.378C18.6054 109.967 18.6673 109.556 18.7248 109.149V109.14C18.7513 108.99 18.769 108.84 18.7867 108.694C18.7911 108.641 18.7999 108.588 18.8132 108.539C18.8441 108.327 18.8706 108.124 18.9016 107.911C18.959 107.505 19.0121 107.098 19.074 106.696C19.127 106.294 19.1845 105.892 19.2463 105.498C19.3568 104.694 19.4629 103.907 19.5778 103.129C19.5955 102.961 19.622 102.793 19.6397 102.625C19.6707 102.404 19.7016 102.183 19.7325 101.971C19.7414 101.9 19.7502 101.838 19.7635 101.777C19.7988 101.52 19.8342 101.277 19.8651 101.025L19.8961 100.817C19.927 100.583 19.958 100.349 19.9933 100.119C19.9933 100.11 19.9933 100.106 19.9977 100.093C20.1436 99.0053 20.2983 97.9489 20.4441 96.9102L20.4574 96.8218C20.4574 96.7865 20.4618 96.7511 20.4707 96.7202C20.4839 96.6008 20.5016 96.4903 20.5149 96.371C20.5591 96.0572 20.6033 95.7434 20.6475 95.434V95.4163C20.6563 95.3588 20.6607 95.2969 20.674 95.2395C20.6917 95.1025 20.7138 94.9655 20.7314 94.8329V94.824C20.7491 94.6826 20.7712 94.5456 20.7889 94.4085C20.7977 94.3246 20.8066 94.2406 20.8243 94.1654V94.1566C20.8419 94.0063 20.8685 93.8516 20.8861 93.7013C20.895 93.6129 20.9127 93.5245 20.9259 93.4361C20.9348 93.3522 20.9436 93.2815 20.9569 93.2107C20.9701 93.1179 20.9834 93.0251 20.9922 92.9323C21.0011 92.9058 21.0011 92.8837 21.0055 92.8571C21.0364 92.6317 21.0629 92.4107 21.0983 92.1897C21.1027 92.1367 21.1116 92.0836 21.116 92.0262C21.1337 91.8936 21.1558 91.7566 21.1734 91.624C21.1734 91.6063 21.1779 91.5886 21.1779 91.5709C21.1955 91.4428 21.2176 91.3146 21.2309 91.1908C21.2486 91.045 21.2707 90.8991 21.2884 90.7532C21.306 90.6295 21.3237 90.519 21.337 90.3996C21.3458 90.3378 21.3547 90.267 21.3679 90.2052C21.3768 90.1521 21.3812 90.0991 21.3856 90.0416C21.3944 90.0019 21.3989 89.9621 21.4033 89.9223C21.4165 89.8162 21.4342 89.7101 21.4475 89.6085C21.5226 89.0604 21.5978 88.5212 21.6729 87.9996C21.6861 87.9024 21.7038 87.8007 21.7171 87.6991C21.7171 87.6814 21.7215 87.6593 21.7215 87.646C21.7392 87.5267 21.7569 87.4118 21.7745 87.2968V87.288C21.7834 87.1908 21.7922 87.0979 21.8099 87.0051C21.8143 86.9653 21.8187 86.9211 21.8232 86.8814C21.832 86.8018 21.8497 86.7267 21.8585 86.6515C21.8585 86.6427 21.8585 86.6339 21.8629 86.6206L21.8762 86.5189C21.8762 86.5189 21.8806 86.4924 21.8806 86.4792C21.8895 86.3775 21.9071 86.267 21.9204 86.1653C21.9248 86.1477 21.9248 86.13 21.9292 86.1123C21.9337 86.0814 21.9337 86.0593 21.9381 86.0327C21.9558 85.8692 21.9823 85.7145 22 85.5598C22.0265 85.383 22.0486 85.215 22.0751 85.0515V85.0383C22.1547 84.4637 22.2298 83.9067 22.3049 83.3631C22.3138 83.288 22.3226 83.2172 22.3359 83.1421C22.3447 83.0846 22.3491 83.0316 22.3624 82.9741C22.3624 82.9476 22.3668 82.9255 22.3668 82.899C22.3712 82.8946 22.3712 82.899 22.3712 82.899C22.3978 82.7266 22.4154 82.5675 22.442 82.3995C22.4508 82.3509 22.4552 82.3023 22.4596 82.2537C22.4994 82.0106 22.5304 81.7719 22.5613 81.5377C22.6453 80.941 22.7248 80.3664 22.7956 79.8183C22.8044 79.7343 22.8221 79.6503 22.8309 79.5664C22.8398 79.5045 22.8486 79.4382 22.8574 79.3807C22.8663 79.3277 22.8751 79.2791 22.884 79.226C22.884 79.2128 22.8884 79.1951 22.8884 79.1818C22.937 78.8371 22.9856 78.5056 23.0298 78.1829V78.1741C23.0784 77.7763 23.1315 77.405 23.1801 77.0426C23.1889 76.9851 23.1934 76.9321 23.2066 76.8702C23.2066 76.8614 23.211 76.8569 23.2066 76.8437H23.211C23.2199 76.7685 23.2287 76.6978 23.2375 76.6271C23.2464 76.5962 23.2464 76.5696 23.2508 76.5387C23.2552 76.5078 23.2596 76.4901 23.2596 76.4636C23.3436 75.858 23.4143 75.2967 23.4895 74.7928C23.4939 74.7398 23.5027 74.6823 23.5072 74.6249C23.5425 74.3818 23.5779 74.1519 23.6044 73.9309C23.7679 73.7364 23.9403 73.5552 24.1171 73.3873C24.3072 73.2061 24.5061 73.0425 24.705 72.8967C24.7094 72.8922 24.7138 72.8922 24.7182 72.8878C24.8287 72.8038 24.9436 72.7199 25.0541 72.6536C25.0983 72.6226 25.1381 72.5961 25.1823 72.5696C25.284 72.5077 25.3901 72.4414 25.4873 72.3928H25.4917C25.9912 72.1055 26.4774 71.9022 26.8973 71.7607C26.9105 71.7563 26.9238 71.7519 26.937 71.7475C27.1625 71.6679 27.3658 71.6105 27.5426 71.5663C27.5735 71.5618 27.6 71.553 27.6266 71.5486C27.6752 71.5353 27.7194 71.5221 27.7592 71.5132H27.768L33.5846 71.637H33.7217L34.3537 71.6502L36.5769 71.6989L43.7063 71.8491L45.1251 71.8801L45.713 71.8889L46.482 71.9066L46.9417 71.9154H47.0434L49.6423 71.9685L49.9429 71.9773H50.1329L50.8489 71.9906H50.9374L51.5738 72.0083H51.6578L52.3738 72.0215L53.4435 72.048H53.523L56.4844 72.1099L59.1275 72.1629H59.1319L60.2988 72.1895H60.4314L61.1784 72.2071H61.4789L62.0093 72.2248H62.0491L62.7828 72.2381L63.5563 72.2514H63.711L64.9442 72.2823H65.2005L65.7618 72.3H65.9917L66.995 72.3265C66.995 72.3265 66.995 72.3221 66.9994 72.3265H67.0038L68.3166 72.3574L69.6779 72.3884L71.2647 72.4193L71.8967 72.4326L72.5465 72.4458H72.7012L74.1244 72.4812L74.7874 72.4944H74.7918L76.8648 72.5386L78.783 72.5784L80.383 72.6138L82.2615 72.6536L83.3842 72.6801H83.3886H83.6891L86.8848 72.7552L88.8958 72.795L90.6638 72.8348H90.6682L91.539 72.848L92.9887 72.879C93.4395 73.3829 93.8683 73.9132 94.2882 74.4657C94.2882 74.4657 94.297 74.4702 94.297 74.4746C94.5799 74.8459 94.8539 75.2304 95.1191 75.6193C95.6318 76.3619 96.1136 77.1442 96.5644 77.9442C96.9313 78.5807 97.2805 79.2437 97.6031 79.9111C97.6739 80.0393 97.7357 80.1675 97.7932 80.2912C97.8551 80.4238 97.9214 80.5564 97.9788 80.6934C98.0098 80.7421 98.0319 80.7951 98.054 80.8481C98.1335 81.0028 98.2042 81.1664 98.275 81.3299C98.6462 82.1609 98.9954 83.0095 99.3136 83.8714C99.3446 83.9509 99.3711 84.0261 99.3976 84.1056C99.4065 84.1145 99.4109 84.1233 99.4109 84.141C99.9103 85.4979 100.348 86.8814 100.715 88.2781C100.98 89.246 101.21 90.2228 101.409 91.1952C101.678 92.508 101.895 93.8163 102.05 95.1025C102.169 96.0174 102.257 96.9235 102.31 97.8163C102.319 97.8959 102.324 97.9799 102.328 98.055C102.527 101.246 102.673 104.415 102.774 107.571C102.805 108.362 102.823 109.158 102.845 109.945C102.85 110.029 102.854 110.108 102.854 110.188C102.863 110.453 102.867 110.718 102.872 110.979C102.881 111.297 102.889 111.615 102.898 111.929C102.903 112.19 102.907 112.442 102.911 112.703C102.916 112.734 102.916 112.756 102.916 112.787V112.968C102.92 113.025 102.92 113.092 102.92 113.149C102.925 113.158 102.925 113.162 102.92 113.176C102.929 113.534 102.938 113.892 102.947 114.25V114.312C102.951 114.413 102.951 114.519 102.951 114.617C102.965 115.372 102.982 116.124 102.991 116.875C103.004 117.98 103.022 119.09 103.035 120.194C103.049 121.653 103.062 123.116 103.071 124.579V124.61C103.075 124.76 103.075 124.915 103.075 125.065C103.088 127.143 103.102 129.216 103.115 131.297C103.115 131.443 103.119 131.589 103.119 131.744V131.757C103.137 134.825 103.163 137.892 103.212 140.973V140.982C103.225 141.817 103.243 142.635 103.256 143.47V143.51C103.353 148.831 103.526 154.175 103.857 159.581L105.042 167.819V167.846L106.324 176.805V176.832L109.241 197.163L109.647 199.988L109.705 200.412V200.43L109.714 200.478L111.199 210.825L111.212 210.905L111.221 210.963L111.212 210.985Z' fill='%232B6B40'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.65'%3E%3Cpath d='M111.208 210.989H111.204C111.208 211.091 111.204 211.184 111.195 211.272C111.186 211.321 111.182 211.365 111.164 211.409C111.164 211.427 111.16 211.444 111.155 211.462C111.151 211.48 111.142 211.506 111.138 211.524C111.133 211.542 111.125 211.564 111.12 211.581C111.107 211.612 111.089 211.643 111.071 211.674C111.018 211.771 111.018 211.776 111.014 211.78C110.983 211.82 110.957 211.86 110.921 211.891C110.89 211.922 110.859 211.953 110.824 211.984C110.784 212.019 110.744 212.054 110.696 212.081C110.656 212.112 110.612 212.134 110.568 212.16C110.563 212.16 110.563 212.165 110.559 212.165C110.488 212.2 110.413 212.227 110.333 212.262H110.329C110.245 212.297 110.157 212.319 110.059 212.346C109.975 212.364 109.891 212.386 109.803 212.403C109.79 212.403 109.772 212.408 109.754 212.412C109.706 212.417 109.653 212.43 109.6 212.439C109.542 212.448 109.489 212.452 109.432 212.465C109.418 212.465 109.401 212.465 109.387 212.47C109.374 212.47 109.357 212.474 109.343 212.474C109.22 212.487 109.1 212.501 108.968 212.509C108.707 212.527 108.428 212.54 108.141 212.554C107.995 212.558 107.849 212.563 107.695 212.567C107.615 212.567 107.531 212.567 107.452 212.571C107.231 212.571 107.005 212.58 106.771 212.598C105.834 211.356 104.574 209.902 103.151 209.115H103.147C102.66 208.845 102.156 208.655 101.639 208.58C101.215 208.518 100.808 208.527 100.419 208.593H100.415C100.008 208.673 99.6283 208.819 99.2658 209.031C98.1166 209.694 97.1884 210.98 96.468 212.598C96.3486 212.872 96.2337 213.155 96.1232 213.447C95.3453 215.497 94.8591 217.95 94.616 220.293C94.616 220.306 94.616 220.324 94.6116 220.333C94.5939 220.554 94.5718 220.775 94.5541 220.987C94.5541 220.987 94.5497 220.987 94.5541 220.991C94.5541 220.996 94.5497 220.996 94.5497 220.996C94.4923 221.769 94.4525 222.53 94.4436 223.25C94.4304 223.944 94.4436 224.611 94.479 225.221C94.479 225.239 94.479 225.261 94.4834 225.279C94.4834 225.372 94.4878 225.456 94.4967 225.544V225.553C94.4967 225.553 94.4923 225.553 94.4923 225.557C94.2624 225.699 94.0414 225.84 93.8116 225.982C93.7807 225.999 93.7541 226.017 93.7232 226.03C93.5243 226.154 93.321 226.264 93.1221 226.379C92.8923 226.507 92.658 226.627 92.4237 226.746C92.4193 226.746 92.4149 226.755 92.4149 226.755C92.4105 226.755 92.4061 226.755 92.4016 226.759C92.3132 226.804 92.2248 226.848 92.1364 226.888C92.1232 226.901 92.1055 226.905 92.0922 226.914C91.9906 226.967 91.8801 227.016 91.7784 227.064C91.7696 227.069 91.7652 227.073 91.7519 227.078C91.7254 227.086 91.7033 227.104 91.6768 227.113C91.4381 227.224 91.195 227.334 90.9563 227.436C90.9165 227.449 90.8812 227.467 90.8458 227.48C90.6381 227.568 90.4348 227.657 90.227 227.741H90.2226C89.9795 227.838 89.7364 227.931 89.4933 228.019C89.343 228.077 89.1883 228.13 89.038 228.183C88.9452 228.222 88.848 228.253 88.7552 228.284C88.7419 228.284 88.7287 228.293 88.7198 228.293C88.4767 228.377 88.2336 228.457 87.9861 228.527C87.8402 228.576 87.6856 228.625 87.5353 228.669C87.4425 228.7 87.3452 228.726 87.2524 228.757C87.2259 228.762 87.2082 228.766 87.1905 228.77C86.9474 228.846 86.6955 228.912 86.4524 228.983C86.2093 229.053 85.9574 229.115 85.7143 229.177C85.6435 228.629 85.5684 228.085 85.4888 227.537C85.312 226.326 85.1131 225.12 84.901 223.913C84.8303 223.524 84.764 223.139 84.6933 222.751C84.4944 221.623 84.2734 220.505 84.0435 219.383C83.8888 218.578 83.7209 217.778 83.5573 216.969C83.4468 216.43 83.3363 215.886 83.2347 215.343C83.2037 215.21 83.1816 215.077 83.1551 214.94V214.932C83.0932 214.627 83.0358 214.322 82.9783 214.012C82.9474 213.862 82.9253 213.712 82.8943 213.561C82.8899 213.526 82.8811 213.486 82.8766 213.455C82.775 212.894 82.6645 212.324 82.5584 211.763C82.5275 211.617 82.5009 211.462 82.4744 211.316C82.2932 210.41 82.112 209.504 81.9131 208.602C81.8954 208.514 81.8733 208.421 81.8556 208.333C81.7054 207.648 81.5418 206.967 81.3694 206.282C81.3385 206.176 81.312 206.065 81.2855 205.959C80.7153 203.771 80.039 201.597 79.1197 199.546C78.6468 198.472 78.1119 197.438 77.4932 196.447C77.3385 196.191 77.1749 195.948 77.0025 195.705C76.9628 195.643 76.9186 195.577 76.8699 195.519C76.7418 195.329 76.6047 195.139 76.4545 194.949C76.1804 194.582 75.8799 194.229 75.5616 193.893C75.208 193.504 74.8324 193.132 74.4301 192.801C74.1782 192.58 73.9263 192.381 73.6611 192.191C72.9804 191.696 72.2157 191.25 71.4157 190.936C71.3318 190.9 71.2434 190.865 71.1594 190.839C70.6555 190.662 70.1428 190.538 69.6168 190.494C69.387 190.467 69.1616 190.458 68.9317 190.476C68.7682 190.48 68.6046 190.494 68.4411 190.52C66.7969 190.763 64.9759 192.089 63.0709 194.136C61.1703 196.182 59.1946 198.949 57.2454 202.101C57.02 202.467 56.7901 202.839 56.5647 203.219C56.5161 203.298 56.4719 203.373 56.4233 203.453C56.4233 203.457 56.4189 203.457 56.4189 203.462C55.9592 204.235 55.4995 205.022 55.0487 205.827C54.8409 206.189 54.642 206.551 54.4431 206.914C53.979 207.749 53.5194 208.602 53.0685 209.464C52.2995 210.918 51.5569 212.39 50.832 213.862C50.3237 214.905 49.8243 215.948 49.3381 216.978C49.1039 217.478 48.874 217.973 48.6486 218.463C48.6486 218.463 48.6442 218.468 48.6486 218.472C48.5248 218.728 48.4099 218.98 48.295 219.237C48.2817 219.263 48.2685 219.29 48.2596 219.316C48.021 219.833 47.7911 220.355 47.5613 220.863C47.5348 220.916 47.5171 220.965 47.4994 221.013C47.495 221.018 47.495 221.022 47.4906 221.027C47.3801 221.283 47.2651 221.535 47.1591 221.787C47.1591 221.791 47.1591 221.8 47.1547 221.805C47.1016 221.924 47.0486 222.034 47 222.154C46.3458 223.657 45.7314 225.098 45.1833 226.441C44.8828 227.17 44.6043 227.869 44.3391 228.536C44.0651 229.23 43.8132 229.889 43.5789 230.503C43.3005 231.25 43.0485 231.944 42.8364 232.558C42.7966 232.682 42.7524 232.797 42.7126 232.916C42.6419 233.115 42.58 233.31 42.5225 233.491H42.5181C42.4783 233.632 42.4341 233.761 42.3944 233.889L42.3634 233.977L42.3502 234.026C42.3502 234.026 42.3237 234.021 42.3148 234.021C42.3148 234.021 42.3133 234.021 42.3104 234.021C42.2485 234.013 42.1822 234.004 42.1159 233.99H42.1115C41.8993 233.96 41.6916 233.929 41.4706 233.889C41.338 233.871 41.201 233.845 41.064 233.818C41.0021 233.805 40.9358 233.792 40.8695 233.778C40.812 233.769 40.7457 233.752 40.6838 233.743L40.538 233.712C40.4054 233.681 40.2772 233.659 40.1402 233.624C40.0562 233.61 39.9722 233.588 39.8838 233.571H39.875C39.8043 233.553 39.7336 233.535 39.6628 233.522C39.2164 233.42 38.77 233.327 38.3192 233.243C38.3148 233.248 38.3148 233.243 38.3148 233.243C37.7357 233.124 37.1479 233.022 36.5689 232.934C36.4849 232.916 36.4009 232.903 36.3169 232.894H36.3125C36.3125 232.894 36.3081 232.894 36.3037 232.89C36.0871 232.855 35.8794 232.828 35.6628 232.801C35.5214 232.771 35.3799 232.753 35.2385 232.74C35.0749 232.713 34.9202 232.695 34.7567 232.682C34.6683 232.669 34.5799 232.656 34.4915 232.647C34.2042 232.607 33.9081 232.576 33.6164 232.554C32.7943 232.466 31.9677 232.404 31.1323 232.364C30.8185 232.351 30.5003 232.333 30.1865 232.324C29.0682 232.253 27.95 232.205 26.8273 232.174C26.3235 232.156 25.8152 232.138 25.3113 232.125C23.0704 232.068 20.825 232.037 18.593 231.962C18.1554 231.953 17.7134 231.948 17.2758 231.944H17.2714C16.8913 231.94 16.5068 231.935 16.1355 231.917C16.0824 231.917 16.0338 231.913 15.9808 231.913C15.6449 231.9 15.3089 231.873 14.9863 231.842C14.8316 231.825 14.6681 231.803 14.5178 231.785C14.5001 231.78 14.4824 231.776 14.4692 231.776C14.3808 231.763 14.2924 231.745 14.2084 231.732C14.1509 231.723 14.0846 231.705 14.0272 231.692C13.9432 231.674 13.8548 231.652 13.7708 231.635C13.7575 231.63 13.7399 231.626 13.731 231.626C13.7178 231.621 13.7001 231.621 13.6912 231.617C13.6603 231.608 13.6294 231.599 13.5984 231.59C13.5498 231.577 13.5012 231.559 13.4526 231.542C13.0283 231.405 12.6437 231.219 12.3078 230.963C12.1973 230.879 12.0868 230.786 11.9896 230.689C11.857 230.561 11.7288 230.41 11.6183 230.247C11.6183 230.247 11.6168 230.245 11.6139 230.242C11.6139 230.242 11.5962 230.211 11.5785 230.194C11.5343 230.123 11.4857 230.048 11.4415 229.973C11.4282 229.946 11.415 229.929 11.4061 229.902C11.3973 229.893 11.3929 229.875 11.3885 229.867C11.3708 229.831 11.3531 229.805 11.3443 229.769H11.3398C11.3398 229.769 11.331 229.734 11.3222 229.721C11.3177 229.712 11.3133 229.703 11.3089 229.685C11.2691 229.601 11.2338 229.513 11.2028 229.425C11.1763 229.367 11.1542 229.305 11.1409 229.243C11.1144 229.173 11.0923 229.102 11.0791 229.027C11.0791 229.018 11.0746 229.014 11.0746 229C11.0658 228.987 11.0614 228.965 11.0614 228.952C11.0481 228.899 11.0304 228.846 11.0216 228.784C11.0083 228.735 10.9951 228.687 10.9907 228.638C10.973 228.532 10.9509 228.426 10.9376 228.32C10.9376 228.306 10.9376 228.289 10.9332 228.275C10.9199 228.174 10.9067 228.059 10.8978 227.953C10.8846 227.829 10.8802 227.71 10.8713 227.577C10.8713 227.484 10.8713 227.383 10.8713 227.285C10.8713 227.215 10.8713 227.14 10.8713 227.064C10.8713 226.963 10.8713 226.87 10.8713 226.768C10.8713 226.689 10.8757 226.614 10.8802 226.53C10.8802 226.468 10.8846 226.397 10.889 226.335H10.8978C11.5255 226.229 12.1443 226.119 12.7719 226.012C13.9785 225.791 15.1808 225.557 16.3697 225.257C16.8736 225.128 17.3775 224.991 17.8769 224.841C18.9024 224.527 19.9101 224.16 20.8825 223.705C20.8869 223.705 20.8913 223.701 20.8958 223.701C22.3057 223.047 23.614 222.202 24.7986 221.173C24.9754 221.022 25.1566 220.859 25.329 220.7C25.5411 220.501 25.7444 220.289 25.9389 220.068C25.9787 220.028 26.0185 219.984 26.045 219.944C26.0583 219.935 26.0715 219.917 26.0759 219.909H26.0804C26.2351 219.727 26.3853 219.542 26.5268 219.356C26.5975 219.259 26.6638 219.162 26.7257 219.064C26.7301 219.064 26.7301 219.06 26.7301 219.06C26.9599 218.711 27.1588 218.344 27.3268 217.959C27.371 217.849 27.4196 217.729 27.4594 217.61C27.6273 217.142 27.7202 216.62 27.729 216.107C27.7378 215.913 27.729 215.718 27.7113 215.528C27.7025 215.418 27.6848 215.312 27.6627 215.206C27.6627 215.197 27.6627 215.188 27.6583 215.17C27.561 214.653 27.3577 214.158 27.0351 213.734C26.7433 213.34 26.3588 213.053 25.9345 212.845C25.4218 212.589 24.8428 212.465 24.2814 212.403C24.14 212.39 24.003 212.377 23.8615 212.377H23.8527C23.5698 212.364 23.2825 212.368 22.9997 212.386C22.2792 212.434 21.5543 212.571 20.8604 212.748C20.7676 212.775 20.6703 212.797 20.5775 212.828C19.4151 213.137 18.288 213.548 17.2095 214.083C17.0725 214.154 16.9355 214.22 16.7985 214.295C15.583 214.936 14.4426 215.714 13.373 216.58C13.1609 216.748 12.9575 216.916 12.7542 217.093C11.5078 218.167 10.3542 219.369 9.31108 220.651C8.78511 221.288 8.28124 221.942 7.7862 222.605C7.68454 222.746 7.57846 222.896 7.47238 223.042C7.47238 223.047 7.46797 223.047 7.46797 223.051C7.41935 223.051 7.36631 223.051 7.31769 223.051C7.30443 223.051 7.29116 223.051 7.2779 223.051C7.09669 223.051 6.91547 223.051 6.73425 223.042H6.72984C6.57956 223.038 6.42486 223.033 6.279 223.016C6.15524 223.007 6.04032 222.989 5.91656 222.976C5.86794 222.971 5.81933 222.967 5.77071 222.958C5.70883 222.954 5.64252 222.945 5.58506 222.932C5.43479 222.905 5.28009 222.879 5.12981 222.839C5.02815 222.821 4.92207 222.79 4.82042 222.764H4.816C4.73202 222.737 4.64804 222.715 4.5729 222.684C4.45356 222.649 4.34306 222.605 4.22814 222.56C4.14859 222.53 4.07787 222.503 4.00273 222.463C3.92317 222.428 3.85245 222.393 3.77731 222.357C3.67123 222.3 3.56073 222.238 3.45465 222.176C3.36626 222.123 3.28227 222.07 3.20271 222.004C3.16735 221.986 3.132 221.955 3.10106 221.928C2.95962 221.822 2.8226 221.703 2.69442 221.57C2.66348 221.553 2.64138 221.526 2.61486 221.495C2.56182 221.447 2.5132 221.389 2.46458 221.332C2.36735 221.212 2.27453 221.097 2.18171 220.969C2.18171 220.969 2.18171 220.965 2.17729 220.965C2.10657 220.863 2.04027 220.757 1.97839 220.647C1.8016 220.346 1.6469 220.01 1.52314 219.634H1.51872V219.621C1.51872 219.621 1.5143 219.612 1.5143 219.608C1.5143 219.595 1.50988 219.581 1.50546 219.568C1.4922 219.515 1.4701 219.458 1.45684 219.391C1.45242 219.383 1.45242 219.365 1.448 219.356C1.43474 219.285 1.41706 219.223 1.4038 219.148C1.39938 219.131 1.39496 219.108 1.39496 219.091C1.38612 219.073 1.3817 219.051 1.3817 219.033C1.3817 219.029 1.37728 219.025 1.3817 219.016C1.37728 219.007 1.37286 218.998 1.37728 218.985C1.36844 218.927 1.36402 218.865 1.35076 218.804C1.3375 218.706 1.32424 218.609 1.31982 218.503C1.31098 218.441 1.30656 218.375 1.30656 218.308C1.30214 218.278 1.30214 218.251 1.30656 218.216C1.30214 218.198 1.30214 218.171 1.30214 218.154C1.29772 217.99 1.29772 217.827 1.30214 217.659C1.30214 217.645 1.30214 217.628 1.30656 217.61C1.30214 217.584 1.30656 217.562 1.30656 217.531C1.30656 217.478 1.31098 217.42 1.3154 217.358V217.332C1.3154 217.305 1.3154 217.283 1.31982 217.257V217.239C1.31982 217.239 1.32424 217.221 1.32424 217.208V217.173C1.32424 217.146 1.32866 217.124 1.32866 217.097C1.33308 217.058 1.33308 217.018 1.3375 216.974C1.34192 216.947 1.34192 216.925 1.34634 216.898C1.34634 216.859 1.35076 216.819 1.35518 216.775C1.3596 216.739 1.3596 216.704 1.36402 216.673C1.36844 216.66 1.36844 216.642 1.36844 216.629C1.3817 216.487 1.4038 216.346 1.42148 216.2C1.4259 216.169 1.43032 216.138 1.43474 216.103C1.43474 216.068 1.43916 216.041 1.448 216.01C1.45684 215.917 1.47452 215.829 1.48778 215.736C1.48778 215.718 1.4922 215.701 1.49662 215.683C1.52755 215.493 1.55849 215.303 1.59385 215.108C1.60711 215.033 1.62038 214.958 1.63806 214.883C1.64248 214.843 1.64689 214.808 1.65573 214.773C1.66457 214.728 1.67342 214.689 1.68668 214.644C1.70436 214.521 1.73529 214.401 1.76181 214.277C1.76623 214.247 1.77065 214.22 1.77949 214.189C1.78391 214.145 1.79276 214.105 1.80602 214.061C1.81044 214.043 1.81486 214.017 1.81928 213.999C1.8237 213.968 1.82811 213.946 1.83695 213.915C1.87673 213.734 1.92093 213.553 1.96071 213.371C1.97839 213.279 2.00491 213.186 2.02259 213.093H2.02701C2.04469 213 2.07121 212.907 2.09773 212.81C2.09773 212.801 2.10215 212.792 2.10215 212.779C2.12867 212.677 2.15519 212.571 2.18171 212.465C2.19939 212.39 2.21707 212.319 2.23475 212.244C2.34083 211.816 2.45575 211.378 2.56625 210.954L2.65906 210.605C2.74746 210.273 2.83586 209.937 2.92426 209.61C2.92426 209.601 2.92868 209.584 2.9331 209.575L3.00824 209.283C3.01708 209.243 3.03476 209.203 3.0436 209.164C3.07896 209.031 3.11432 208.898 3.14526 208.77C3.21598 208.483 3.2867 208.196 3.35741 207.917C3.35741 207.904 3.36184 207.886 3.36626 207.873C3.37068 207.86 3.37067 207.842 3.37509 207.824C3.46791 207.449 3.56073 207.024 3.66239 206.569C3.71985 206.313 3.77289 206.052 3.83477 205.769C3.87455 205.588 3.91433 205.407 3.95411 205.221C4.00715 204.951 4.06461 204.673 4.12649 204.386C4.15301 204.249 4.17952 204.112 4.20604 203.97C4.22372 203.873 4.24583 203.776 4.2635 203.678C4.29002 203.555 4.31212 203.435 4.33864 203.307C4.3519 203.245 4.36516 203.183 4.37842 203.122C4.39168 203.024 4.41378 202.927 4.43146 202.83C4.45798 202.697 4.4845 202.56 4.51102 202.423C4.55964 202.18 4.60384 201.928 4.65246 201.667C4.7055 201.376 4.76296 201.08 4.82042 200.775C4.8602 200.576 4.89555 200.368 4.93091 200.165C4.93533 200.129 4.94418 200.089 4.9486 200.059C4.96186 199.979 4.97953 199.904 4.99279 199.82C5.04141 199.541 5.09445 199.25 5.14749 198.958C5.19169 198.702 5.24031 198.441 5.28451 198.176C5.33313 197.902 5.38175 197.628 5.43037 197.349C5.44363 197.261 5.46131 197.172 5.47899 197.088C5.50551 196.925 5.53203 196.77 5.56297 196.607C5.60275 196.355 5.64695 196.103 5.69115 195.846C5.73534 195.621 5.77512 195.391 5.8149 195.157C5.85026 194.94 5.89004 194.719 5.9254 194.503C6.1906 192.96 6.46022 191.334 6.74309 189.627C6.78729 189.371 6.83149 189.11 6.87127 188.845C6.99945 188.085 7.12763 187.307 7.25139 186.52C7.33978 185.972 7.42819 185.42 7.51658 184.854C7.52542 184.801 7.53426 184.743 7.54752 184.682C7.5652 184.575 7.58289 184.461 7.60056 184.354C7.65802 183.992 7.7199 183.621 7.77736 183.254C7.80388 183.112 7.82156 182.971 7.84808 182.825C7.8525 182.785 7.86134 182.746 7.86576 182.701C7.93648 182.295 7.99836 181.884 8.06024 181.468C8.08676 181.314 8.10885 181.154 8.13537 181C8.19725 180.62 8.25913 180.235 8.31659 179.851C8.32101 179.837 8.32102 179.82 8.32544 179.806C8.3608 179.594 8.38732 179.386 8.42268 179.17C8.46687 178.887 8.51549 178.591 8.55969 178.304C8.59947 178.038 8.64367 177.773 8.68345 177.512C8.71439 177.327 8.74091 177.146 8.77185 176.96C8.80721 176.743 8.84257 176.536 8.86909 176.319C8.88677 176.2 8.90886 176.089 8.92212 175.97C8.99284 175.541 9.05914 175.104 9.12986 174.662C9.1829 174.308 9.23594 173.954 9.2934 173.605C9.35528 173.19 9.42158 172.77 9.48788 172.345C9.5365 172.023 9.58954 171.696 9.63816 171.36C9.79286 170.317 9.96081 169.256 10.1199 168.186C10.2437 167.404 10.3586 166.608 10.4824 165.817C10.531 165.495 10.5796 165.172 10.6282 164.854C10.7387 164.102 10.8536 163.351 10.9641 162.591C11.0083 162.303 11.0525 162.012 11.0967 161.72C11.1807 161.176 11.2647 160.633 11.3398 160.089C11.3575 159.97 11.3796 159.85 11.3929 159.727C11.4238 159.541 11.4459 159.355 11.4769 159.165H11.4813C11.5122 158.949 11.5432 158.736 11.5741 158.52C11.5918 158.409 11.6095 158.294 11.6271 158.175C11.6316 158.122 11.6404 158.069 11.6448 158.012C11.689 157.738 11.7288 157.464 11.773 157.185C12.0161 155.532 12.2636 153.861 12.5111 152.186C12.7277 150.714 12.9487 149.229 13.1653 147.74V147.726C13.2051 147.47 13.2448 147.214 13.2758 146.953C13.2935 146.842 13.3111 146.727 13.3288 146.617C13.3377 146.533 13.3553 146.449 13.3642 146.365C13.5012 145.455 13.6338 144.544 13.7664 143.629C13.7796 143.51 13.8017 143.39 13.815 143.271C13.8636 142.935 13.9122 142.595 13.9609 142.263C14.0183 141.852 14.0846 141.446 14.1421 141.035C14.2216 140.531 14.2924 140.027 14.3631 139.523C14.425 139.068 14.4957 138.612 14.5576 138.157C14.6283 137.702 14.6902 137.247 14.7565 136.787C14.8183 136.332 14.889 135.876 14.9509 135.421C15.1454 134.055 15.3443 132.694 15.5388 131.337C15.5918 130.97 15.6449 130.599 15.7023 130.232C15.7112 130.148 15.7288 130.064 15.7377 129.98C15.8084 129.529 15.8703 129.079 15.9322 128.628C15.9454 128.5 15.9675 128.367 15.9852 128.239C15.9852 128.23 15.9896 128.221 15.9896 128.208V128.195H15.994C16.0073 128.058 16.0294 127.925 16.0471 127.792C16.0515 127.766 16.0515 127.748 16.0559 127.722C16.0869 127.505 16.1134 127.293 16.1487 127.081C16.1797 126.869 16.2062 126.661 16.2416 126.449C16.33 125.83 16.4184 125.211 16.5068 124.592C16.5465 124.323 16.5863 124.053 16.6261 123.779V123.753H16.6305C16.6305 123.717 16.6349 123.682 16.6394 123.651C16.6526 123.549 16.6703 123.443 16.688 123.342C16.688 123.324 16.688 123.297 16.6924 123.28C16.6924 123.271 16.6924 123.266 16.6968 123.262C16.7233 123.081 16.7454 122.9 16.7764 122.718C16.794 122.546 16.8206 122.369 16.8471 122.201C16.8648 122.051 16.8913 121.896 16.9178 121.746L17.0062 121.114C17.0195 121.03 17.0327 120.946 17.046 120.871C17.13 120.279 17.2139 119.686 17.2979 119.098C17.3333 118.838 17.3731 118.581 17.4084 118.32C17.457 117.954 17.5101 117.587 17.5631 117.215C17.5764 117.092 17.5985 116.972 17.6117 116.844C17.709 116.137 17.8062 115.439 17.9123 114.74C17.9432 114.541 17.9698 114.343 17.9963 114.144C18.014 114.024 18.0316 113.914 18.0449 113.794C18.0493 113.759 18.0537 113.733 18.0581 113.697C18.0979 113.436 18.1333 113.185 18.1686 112.928C18.1686 112.91 18.1731 112.888 18.1731 112.875C18.1908 112.738 18.2128 112.597 18.2305 112.455C18.2703 112.181 18.3101 111.907 18.3499 111.633V111.615C18.3631 111.531 18.3764 111.447 18.3852 111.363C18.425 111.112 18.4604 110.868 18.4913 110.621C18.4957 110.586 18.4957 110.563 18.5001 110.533C18.509 110.484 18.5134 110.435 18.5267 110.387V110.369C18.5841 109.958 18.646 109.547 18.7035 109.14V109.131C18.73 108.981 18.7477 108.831 18.7653 108.685C18.8051 108.424 18.8405 108.168 18.8714 107.907C18.9289 107.5 18.9819 107.094 19.0438 106.692C19.0482 106.656 19.0526 106.63 19.0571 106.599C19.2427 105.246 19.4328 103.916 19.614 102.612C19.6449 102.391 19.6759 102.17 19.7068 101.958C19.7156 101.896 19.7245 101.83 19.7333 101.768H19.7377C19.7731 101.507 19.8084 101.264 19.8394 101.012L19.8703 100.804C19.9013 100.57 19.9322 100.336 19.9676 100.106V100.079H19.972C20.1178 98.9921 20.2725 97.9357 20.4184 96.897C20.4184 96.8661 20.4228 96.8351 20.4272 96.8042L20.4405 96.7025C20.4538 96.5832 20.4759 96.4727 20.4891 96.3578C20.5068 96.2119 20.5289 96.0705 20.5466 95.929C20.5731 95.7522 20.5952 95.5799 20.6217 95.4031C20.6306 95.3456 20.635 95.2837 20.6482 95.2263C20.6659 95.0892 20.688 94.9478 20.7057 94.8108C20.7322 94.6163 20.7587 94.4218 20.7853 94.2318C20.7897 94.2008 20.7941 94.1699 20.7985 94.139C20.8162 93.9887 20.8427 93.834 20.8604 93.6837C20.8692 93.5953 20.8869 93.5069 20.9002 93.4185C20.909 93.3345 20.9179 93.2638 20.9311 93.1931C20.94 93.1003 20.9576 93.0074 20.9709 92.9191C20.9709 92.8925 20.9753 92.866 20.9797 92.8395C21.0107 92.6141 21.0372 92.3931 21.0726 92.1721C21.077 92.119 21.0858 92.066 21.0902 92.0085C21.1079 91.8759 21.13 91.7389 21.1477 91.6063C21.1477 91.5886 21.1521 91.571 21.1521 91.5533C21.1698 91.4251 21.1919 91.2969 21.2052 91.1732C21.2228 91.0273 21.2449 90.8815 21.2626 90.7356H21.267C21.2803 90.6163 21.298 90.5013 21.3112 90.382C21.3201 90.3201 21.3289 90.2494 21.3422 90.1875C21.351 90.1345 21.3554 90.0814 21.3687 90.0328C21.3731 89.9886 21.3775 89.9488 21.382 89.9091C21.3952 89.803 21.4129 89.6969 21.4262 89.5952C21.5013 89.0472 21.5764 88.5079 21.6516 87.9864C21.6604 87.8892 21.6781 87.7875 21.6913 87.6858C21.6958 87.6726 21.6958 87.6505 21.6958 87.6372C21.7002 87.6372 21.7002 87.6328 21.7002 87.6328C21.7134 87.5223 21.7311 87.4118 21.7444 87.3013C21.7576 87.1996 21.7753 87.0936 21.7886 86.9919C21.793 86.9521 21.7974 86.9079 21.8018 86.8681C21.8107 86.7886 21.8195 86.7134 21.8328 86.6339C21.8372 86.6295 21.8372 86.6206 21.8372 86.6074L21.8505 86.5057C21.8637 86.3864 21.8858 86.2715 21.8991 86.1521C21.8991 86.1521 21.9035 86.1123 21.9035 86.0991H21.9079C21.9123 86.0681 21.9123 86.046 21.9168 86.0195C21.9344 85.856 21.961 85.7013 21.9786 85.5466C22.0052 85.3698 22.0273 85.2018 22.0538 85.0383V85.025C22.1333 84.4504 22.2085 83.8935 22.2836 83.3499C22.2969 83.257 22.3146 83.1687 22.3234 83.0803L22.3367 82.9609C22.3411 82.9344 22.3411 82.9123 22.3455 82.8858C22.372 82.7134 22.3897 82.5543 22.4162 82.3863C22.4251 82.3377 22.4295 82.2891 22.4339 82.2405C22.4737 81.9974 22.5046 81.7587 22.5356 81.5244C22.6195 80.9277 22.6991 80.3531 22.7698 79.8051C22.7787 79.7211 22.7963 79.6371 22.8052 79.5531C22.814 79.4913 22.8229 79.425 22.8317 79.3675C22.8405 79.3145 22.845 79.2658 22.8494 79.2172C22.8494 79.2172 22.8538 79.2172 22.8538 79.2128C22.8538 79.1995 22.8582 79.1819 22.8582 79.1686C22.9068 78.8238 22.951 78.4968 22.9952 78.1741V78.1653C23.0483 77.7675 23.1013 77.3918 23.1499 77.0293C23.1588 76.9719 23.1632 76.9188 23.1764 76.857C23.1764 76.8481 23.1765 76.8437 23.1809 76.8304C23.1897 76.7553 23.1985 76.689 23.2118 76.6183C23.2118 76.5874 23.2162 76.5564 23.2206 76.5255H23.2251C23.2251 76.4945 23.2295 76.4769 23.2295 76.4503C23.3135 75.8448 23.393 75.2835 23.4593 74.7796C23.4637 74.7266 23.4726 74.6691 23.477 74.6116C23.5124 74.3685 23.5477 74.1387 23.5742 73.9177C23.7378 73.7232 23.9102 73.542 24.087 73.3741H24.0914C24.2814 73.1928 24.4803 73.0293 24.6748 72.8834C24.6792 72.879 24.6836 72.879 24.6881 72.8746C24.7986 72.7906 24.9135 72.7066 25.024 72.6403C25.0682 72.6094 25.108 72.5829 25.1522 72.5564C25.2538 72.4945 25.3599 72.4282 25.4571 72.3796H25.4616C25.961 72.0923 26.4472 71.8889 26.8671 71.7475C26.8804 71.7431 26.8936 71.7387 26.9069 71.7342C27.1323 71.6591 27.3356 71.6017 27.5124 71.553C27.5434 71.5486 27.5699 71.5398 27.5964 71.5354C27.6406 71.5265 27.6848 71.5177 27.7246 71.5044C27.729 71.5044 27.7378 71.5 27.7378 71.5C27.7423 71.5 27.7467 71.4956 27.7511 71.4956L33.5456 71.6149H33.6871L34.3147 71.6282L36.5512 71.6724L43.6761 71.8138L45.095 71.8447L45.6828 71.8536L46.4475 71.8668L46.9116 71.8757H47.0088L49.6033 71.9287L49.926 71.9376H50.0939L50.8099 71.9508H50.8983L51.526 71.9641H51.6144L52.3834 71.9818L53.3824 71.9994H53.4619L56.3835 72.0569L59.1106 72.1099L60.2554 72.1365H60.388L60.9272 72.1497L61.5504 72.1586L62.0322 72.1674H62.072L62.6775 72.1807L64.9759 72.2249H65.1527L65.7936 72.2425H65.9836L67.0356 72.2691C67.0356 72.2691 67.04 72.2646 67.0444 72.2691L68.2732 72.2956L69.7141 72.3265L71.3185 72.3575L71.8975 72.3707L72.6091 72.3796H72.7064L74.0589 72.4105L74.7439 72.4238H74.7528L76.9451 72.468L78.8103 72.5077L80.4103 72.5387L82.2137 72.5785L83.4291 72.605H83.7297L86.6955 72.6669L88.7419 72.7066L90.585 72.7464C90.5983 72.7729 90.6248 72.795 90.6425 72.8171H90.6469C90.7707 72.9586 90.8856 73.1 91.0049 73.2415C91.1022 73.352 91.195 73.4713 91.2834 73.5906C91.2834 73.5906 91.2849 73.5906 91.2878 73.5906C92.9409 75.6415 94.2271 77.962 95.2216 80.4415C95.2481 80.5034 95.2702 80.5697 95.2967 80.636C95.3232 80.6979 95.3497 80.7686 95.3718 80.8305C95.4337 80.994 95.5 81.1532 95.5531 81.3167C95.5884 81.4007 95.6149 81.4802 95.6459 81.5598C96.0039 82.5543 96.3177 83.5664 96.5873 84.5963C96.6006 84.6361 96.6138 84.6803 96.6227 84.72C96.6271 84.7245 96.6271 84.7289 96.6271 84.7333C97.1619 86.7576 97.542 88.8394 97.8205 90.9389C98.0061 92.3798 98.1476 93.8251 98.2448 95.2528C98.2492 95.3014 98.2492 95.3456 98.2536 95.3942C98.1166 95.6373 97.9796 95.8893 97.847 96.1368C96.9365 97.8561 96.1276 99.686 95.4205 101.626C94.9917 102.789 94.5984 103.987 94.2403 105.22C93.8956 106.409 93.5862 107.633 93.3033 108.884C93.3033 108.884 93.2989 108.897 93.2989 108.902C92.9674 110.365 92.6801 111.863 92.437 113.401C92.437 113.401 92.437 113.428 92.4326 113.432C92.3309 114.077 92.2381 114.731 92.1541 115.386C92.1409 115.47 92.1276 115.558 92.1143 115.642C92.1055 115.735 92.0878 115.832 92.079 115.925C92.0701 116.013 92.0525 116.106 92.0436 116.199C92.0127 116.42 91.9906 116.645 91.9641 116.871C91.9552 116.946 91.9464 117.012 91.9375 117.087C91.774 118.506 91.6502 119.947 91.5574 121.41C91.3629 124.451 91.3011 127.585 91.3718 130.78C91.3718 130.917 91.3762 131.05 91.3806 131.183V131.262C91.6989 143.466 93.8956 156.566 97.5509 168.982C98.7664 173.101 100.141 177.146 101.666 181.053C102.74 183.815 103.885 186.507 105.1 189.11C106.095 191.25 107.138 193.331 108.225 195.342C108.252 195.387 108.274 195.435 108.3 195.479C108.605 196.041 108.91 196.602 109.22 197.15L109.622 199.957L109.684 200.403H109.688V200.474L111.182 210.821L111.191 210.901C111.191 210.901 111.195 210.945 111.2 210.963L111.208 210.989Z' fill='%23949984'/%3E%3C/g%3E%3Cpath d='M111.208 210.989C111.208 210.989 111.199 210.945 111.199 210.927C110.969 209.5 109.731 206.286 103.221 205.557C103.185 205.553 103.15 205.548 103.119 205.548H103.115C102.257 205.455 101.303 205.407 100.246 205.407C99.7468 205.407 99.2208 205.42 98.6727 205.451C98.0009 205.486 97.5898 205.172 97.3909 204.669C97.2716 204.377 97.2274 204.019 97.2495 203.621C97.2495 203.612 97.2539 203.608 97.2495 203.603C97.2495 203.546 97.2539 203.48 97.2583 203.422C97.2628 203.391 97.2628 203.365 97.2716 203.329C97.3733 202.388 97.8727 200.978 98.6064 200.275C98.7832 200.107 98.9733 199.975 99.1766 199.908L100.127 196.655L100.79 194.392H100.794L101.223 192.907L101.674 181.088L103.026 145.41L103.243 143.496L103.371 142.365L104.609 131.337V131.328L104.653 130.908L104.976 128.044L105.174 130.705L105.205 131.099L105.471 134.648L111.203 210.936V210.998L111.208 210.989Z' fill='%233B754B'/%3E%3Cpath d='M109.834 200.509C109.79 200.483 109.745 200.465 109.697 200.439C109.683 200.43 109.666 200.425 109.648 200.412C109.608 200.394 109.564 200.372 109.515 200.359C109.498 200.35 109.471 200.341 109.454 200.328C109.051 200.165 108.592 200.041 108.088 199.939C107.991 199.926 107.893 199.904 107.796 199.891C107.168 199.798 106.488 199.749 105.785 199.749C105.613 199.749 105.436 199.754 105.272 199.762H105.246C105.1 199.762 104.945 199.771 104.799 199.78C104.76 199.78 104.724 199.78 104.689 199.784C104.216 199.82 103.734 199.868 103.261 199.939H103.257C102.497 200.05 101.75 200.213 101.06 200.425C99.9817 200.748 99.0314 201.186 98.3551 201.716C97.7275 202.215 97.3297 202.799 97.2811 203.457C97.2767 203.466 97.2767 203.471 97.2767 203.484C97.2767 203.449 97.2767 203.391 97.2811 203.307C97.2899 202.724 97.3253 200.987 97.3651 198.317V198.304C97.3827 197.3 97.4004 196.16 97.4137 194.9C97.4225 194.489 97.4269 194.069 97.4314 193.632C97.4358 193.406 97.4358 193.181 97.4402 192.951C97.4402 192.69 97.4446 192.434 97.449 192.169C97.449 191.837 97.4535 191.501 97.4579 191.161C97.5286 185.252 97.5861 177.596 97.564 169C97.5507 157.689 97.4137 144.738 97.0203 131.987L97.007 131.532C96.9805 130.794 96.9628 130.051 96.9363 129.313C96.8965 128.164 96.8523 127.014 96.8126 125.874C96.7684 124.756 96.7242 123.651 96.6755 122.546C96.6004 120.809 96.5253 119.085 96.4369 117.379C96.3927 116.442 96.3441 115.514 96.2954 114.59C96.2954 114.572 96.2954 114.555 96.291 114.541C96.291 114.497 96.2866 114.457 96.2866 114.413C96.2601 114.046 96.2424 113.675 96.2247 113.308C96.2115 112.99 96.1893 112.672 96.1761 112.354C96.1717 112.318 96.1717 112.292 96.1717 112.265C96.1673 112.203 96.1628 112.141 96.1584 112.084C96.1584 112.031 96.154 111.978 96.154 111.92H96.1496C96.1496 111.92 96.1452 111.894 96.1496 111.885C96.1496 111.885 96.154 111.881 96.1496 111.876C96.1186 111.377 96.0921 110.882 96.0612 110.387C96.0479 110.144 96.0302 109.896 96.0126 109.657C95.986 109.242 95.9639 108.831 95.933 108.42C95.9065 108.031 95.8844 107.651 95.8534 107.271C95.8269 106.873 95.8004 106.484 95.7695 106.09C95.7385 105.666 95.712 105.237 95.6811 104.818C95.6766 104.769 95.6722 104.72 95.6722 104.667C95.6457 104.362 95.6236 104.066 95.5971 103.761C95.544 103.05 95.491 102.347 95.4291 101.653C95.4247 101.595 95.4203 101.542 95.4159 101.48C95.3717 100.977 95.3319 100.477 95.2877 99.9821C95.2346 99.3589 95.1816 98.7489 95.1197 98.139L95.0181 97.0517C94.9739 96.5787 94.9252 96.1014 94.881 95.6373C94.8192 95.0406 94.7573 94.4527 94.6954 93.8737C94.6556 93.5246 94.6203 93.1842 94.5849 92.8439C94.5451 92.4991 94.5054 92.1632 94.4656 91.8317C94.2092 89.6483 93.9352 87.5709 93.6435 85.6305C93.639 85.6261 93.639 85.6305 93.639 85.6305V85.604C93.639 85.604 93.6346 85.5908 93.6346 85.5863C93.5241 84.857 93.4092 84.1454 93.2899 83.4603C93.2412 83.1775 93.1926 82.899 93.144 82.625L93.1308 82.5233C93.1308 82.5233 93.1263 82.4968 93.1219 82.4879C93.0777 82.2272 93.0291 81.9752 92.9849 81.7189C92.9805 81.6879 92.9716 81.6614 92.9716 81.6305C92.9318 81.436 92.8921 81.2415 92.8611 81.0515C92.8567 81.0382 92.8567 81.0205 92.8523 81.0073L93.2633 80.9498L95.3142 80.6581L97.7938 80.3045L100.817 79.8758C100.835 80.0216 100.857 80.1631 100.874 80.3045C100.91 80.5653 100.95 80.8216 100.981 81.078C101.02 81.3874 101.065 81.7012 101.104 82.0062C101.175 82.5145 101.241 83.0183 101.303 83.5222C101.316 83.6062 101.33 83.6902 101.339 83.7742C101.343 83.7874 101.343 83.8007 101.343 83.8139C101.511 85.0604 101.666 86.2979 101.812 87.5267C101.94 88.5389 102.063 89.5422 102.178 90.5411C102.183 90.572 102.183 90.5985 102.187 90.6295C102.329 91.8361 102.466 93.0339 102.594 94.2185C102.775 95.8273 102.943 97.4274 103.102 99.0009C103.407 102.046 103.681 105.03 103.92 107.938C103.973 108.588 104.026 109.229 104.075 109.874C104.105 110.232 104.132 110.59 104.159 110.948C104.22 111.726 104.282 112.504 104.335 113.273C104.335 113.299 104.34 113.321 104.34 113.348C104.353 113.534 104.366 113.719 104.38 113.9C104.517 115.801 104.64 117.666 104.751 119.501C104.751 119.532 104.755 119.558 104.755 119.589V119.598C104.786 120.102 104.813 120.606 104.848 121.105C104.879 121.609 104.901 122.108 104.932 122.603C104.972 123.333 105.012 124.058 105.043 124.778C105.056 124.986 105.069 125.185 105.078 125.384C105.082 125.445 105.082 125.507 105.087 125.569C105.096 125.755 105.104 125.94 105.118 126.126C105.18 127.403 105.241 128.663 105.294 129.91C105.303 130.139 105.312 130.369 105.325 130.599C105.33 130.74 105.339 130.873 105.343 131.01C105.356 131.47 105.378 131.925 105.392 132.38C105.423 133.127 105.449 133.879 105.476 134.617C105.586 137.759 105.67 140.8 105.741 143.735C105.767 144.69 105.785 145.631 105.803 146.555C105.812 147.236 105.829 147.912 105.838 148.579C105.856 149.406 105.869 150.224 105.882 151.037C105.882 151.121 105.882 151.209 105.887 151.293C105.896 152.018 105.904 152.734 105.918 153.441C105.949 155.762 105.975 158.007 106.002 160.182C106.006 160.602 106.01 161.03 106.015 161.446C106.024 162.18 106.028 162.904 106.041 163.62C106.05 164.266 106.059 164.902 106.068 165.53C106.108 168.261 106.152 170.874 106.218 173.353C106.236 174.091 106.258 174.825 106.276 175.541C106.289 175.97 106.307 176.403 106.324 176.827C106.404 178.86 106.492 180.796 106.616 182.653C106.656 183.289 106.7 183.917 106.749 184.531C106.833 185.504 106.917 186.454 107.014 187.378C107.014 187.422 107.018 187.466 107.027 187.515C107.129 188.474 107.244 189.415 107.372 190.321C107.372 190.335 107.372 190.357 107.376 190.379C107.637 192.191 107.938 193.893 108.313 195.484C108.649 196.951 109.047 198.33 109.507 199.612C109.546 199.731 109.591 199.842 109.635 199.961C109.639 199.966 109.639 199.97 109.644 199.979C109.701 200.142 109.767 200.297 109.829 200.461C109.834 200.47 109.834 200.474 109.838 200.487L109.834 200.509Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.65' d='M109.834 200.509C109.79 200.483 109.745 200.465 109.697 200.447C109.639 200.416 109.577 200.39 109.515 200.363C109.502 200.359 109.48 200.35 109.467 200.346C109.462 200.341 109.458 200.337 109.454 200.337C109.051 200.173 108.592 200.05 108.088 199.948C107.991 199.935 107.893 199.913 107.796 199.899C107.168 199.806 106.488 199.758 105.785 199.758C105.613 199.758 105.436 199.762 105.272 199.771H105.246C105.1 199.771 104.945 199.78 104.799 199.789C104.76 199.789 104.724 199.789 104.689 199.793C104.813 199.002 105.003 194.976 105.113 189.137C105.215 183.36 105.241 175.802 105.038 167.859C104.813 159.223 104.322 150.122 103.372 142.352C103.319 141.892 103.261 141.441 103.199 140.995V140.986C102.771 137.711 102.249 134.692 101.626 132.093C101.617 132.049 101.608 132.005 101.591 131.965C101.564 131.854 101.542 131.739 101.511 131.633C100.609 127.991 99.4999 125.193 98.1341 123.655C97.6789 123.143 97.1883 122.762 96.6755 122.55C96.6004 120.813 96.5253 119.089 96.4369 117.383C96.3927 116.446 96.3441 115.518 96.2954 114.594C96.2954 114.577 96.2954 114.559 96.291 114.546C96.291 114.502 96.2866 114.462 96.2866 114.418C96.2601 114.051 96.2424 113.679 96.2247 113.313C96.207 112.994 96.1894 112.676 96.1717 112.358C96.1717 112.327 96.1673 112.3 96.1673 112.269C96.1628 112.212 96.1584 112.15 96.1584 112.088C96.154 112.035 96.1496 111.978 96.1496 111.92C96.1496 111.911 96.1452 111.903 96.1496 111.889C96.1496 111.889 96.1452 111.881 96.1452 111.876C96.101 111.134 96.0568 110.395 96.0126 109.662C95.986 109.246 95.9639 108.835 95.933 108.424H95.9286C95.9021 108.035 95.88 107.655 95.8534 107.275C95.8269 106.877 95.8004 106.488 95.7695 106.095C95.7385 105.671 95.7076 105.242 95.6766 104.822C95.6722 104.773 95.6722 104.72 95.6678 104.672C95.6413 104.367 95.6236 104.07 95.5971 103.766C95.544 103.054 95.491 102.351 95.4291 101.657C95.4247 101.6 95.4203 101.547 95.4159 101.485C95.3717 100.981 95.3319 100.481 95.2877 99.9865C95.2346 99.3632 95.1816 98.7533 95.1197 98.1433C95.0888 97.7809 95.0578 97.4185 95.0181 97.056C94.9739 96.5831 94.9252 96.1057 94.881 95.6417C94.8192 95.045 94.7573 94.4571 94.6954 93.8781C94.6601 93.5333 94.6203 93.193 94.5849 92.8482C94.5451 92.5123 94.5054 92.172 94.4656 91.8361C94.2092 89.6526 93.9352 87.5753 93.6435 85.6349C93.639 85.6261 93.639 85.6216 93.639 85.6084C93.6346 85.604 93.6346 85.5951 93.6346 85.5907C93.5241 84.8614 93.4092 84.1498 93.2899 83.4647C93.2412 83.1818 93.1926 82.9034 93.144 82.6293C93.1396 82.594 93.1352 82.5586 93.1263 82.5277C93.1263 82.5188 93.1263 82.51 93.1219 82.4967C93.0777 82.2315 93.0291 81.9796 92.9849 81.7232C92.9805 81.6923 92.9761 81.6702 92.9672 81.6393C92.9319 81.4448 92.8921 81.2459 92.8611 81.0558C92.8567 81.0426 92.8567 81.0249 92.8523 81.0116L93.2633 80.9542L95.3142 80.6625L97.7938 80.3089L100.817 79.8801C100.835 80.026 100.857 80.1674 100.874 80.3089C100.91 80.5696 100.95 80.826 100.981 81.0824C101.02 81.3917 101.065 81.7056 101.104 82.0105C101.175 82.5188 101.241 83.0227 101.303 83.5266C101.316 83.6106 101.33 83.6945 101.339 83.7785C101.343 83.7918 101.343 83.805 101.343 83.8183C101.511 85.0647 101.666 86.3023 101.812 87.5311C101.94 88.5432 102.063 89.5465 102.178 90.5455C102.183 90.5764 102.183 90.6029 102.187 90.6339C102.329 91.8405 102.466 93.0383 102.594 94.2228C102.775 95.8317 102.943 97.4317 103.102 99.0052C103.407 102.051 103.681 105.034 103.92 107.942C103.973 108.592 104.026 109.233 104.075 109.878C104.105 110.236 104.132 110.594 104.159 110.952C104.22 111.73 104.282 112.508 104.335 113.277C104.335 113.304 104.34 113.326 104.34 113.352C104.353 113.538 104.366 113.724 104.38 113.905C104.517 115.805 104.64 117.671 104.751 119.505C104.751 119.536 104.755 119.562 104.755 119.593V119.602C104.786 120.106 104.813 120.61 104.848 121.109C104.879 121.613 104.901 122.113 104.932 122.608C104.972 123.337 105.012 124.062 105.043 124.782C105.056 124.99 105.069 125.189 105.078 125.388C105.082 125.45 105.082 125.512 105.087 125.574C105.096 125.759 105.104 125.945 105.118 126.13C105.18 127.408 105.241 128.667 105.294 129.914C105.303 130.144 105.312 130.374 105.325 130.603C105.33 130.745 105.334 130.877 105.339 131.014C105.356 131.474 105.378 131.929 105.392 132.385C105.423 133.132 105.449 133.883 105.476 134.621C105.586 137.764 105.67 140.805 105.741 143.739C105.767 144.694 105.785 145.636 105.803 146.559C105.812 147.24 105.829 147.916 105.838 148.584C105.856 149.41 105.869 150.228 105.882 151.041C105.882 151.125 105.882 151.214 105.887 151.298C105.896 152.022 105.904 152.739 105.918 153.446C105.949 155.766 105.975 158.011 106.002 160.186C106.006 160.606 106.01 161.035 106.015 161.45C106.024 162.184 106.028 162.909 106.041 163.625C106.05 164.27 106.059 164.907 106.068 165.534C106.108 168.266 106.152 170.878 106.218 173.358C106.236 174.096 106.258 174.829 106.276 175.545C106.289 175.974 106.307 176.407 106.324 176.832C106.404 178.865 106.492 180.801 106.616 182.657C106.656 183.294 106.7 183.921 106.749 184.536C106.833 185.508 106.917 186.458 107.014 187.382C107.014 187.426 107.018 187.47 107.027 187.519C107.129 188.478 107.244 189.42 107.372 190.326C107.372 190.339 107.372 190.361 107.376 190.383C107.584 192.098 107.862 193.747 108.238 195.351C108.574 196.801 108.994 198.215 109.507 199.616C109.546 199.736 109.591 199.846 109.635 199.966C109.639 199.97 109.639 199.974 109.644 199.983C109.701 200.147 109.767 200.302 109.829 200.465C109.834 200.474 109.834 200.478 109.838 200.492L109.834 200.509Z' fill='%233B754B'/%3E%3Cpath opacity='0.65' d='M104.75 119.598C103.526 117.627 102.222 115.708 100.724 113.958C99.6851 112.743 98.5359 111.585 97.2586 110.639C97.1569 110.568 96.684 110.484 96.0519 110.4C95.3359 98.8684 94.306 88.5213 92.8386 81.0206L100.799 79.8847C101.307 83.5577 101.767 87.1467 102.174 90.6473C103.389 100.999 104.193 110.612 104.742 119.518C104.742 119.549 104.742 119.576 104.742 119.607L104.75 119.598Z' fill='%233B754B'/%3E%3Cpath d='M33.5318 88.9057C33.4965 89.5775 33.4744 90.2803 33.4302 91.0582C33.4302 91.0582 33.4346 91.0582 33.4302 91.0626C31.2644 128.022 27.8566 176.036 23.6665 208.204C23.6621 208.209 23.6665 208.213 23.6665 208.213C23.1096 210.989 23.1229 213.712 21.8632 215.939H21.8588C16.4399 218.733 5.86741 213.583 1.71708 218.357C1.71708 218.366 1.71266 218.37 1.71266 218.384C1.53144 218.773 1.47398 219.201 1.48282 219.639H1.4784C1.24415 218.852 1.23088 218.017 1.28834 217.203C1.46072 215.1 2.01321 213.018 2.54803 210.98C3.80771 206.436 4.62983 201.773 5.45194 197.124H5.45635C8.2807 180.743 10.7161 164.204 13.1471 147.748H13.1515C14.3404 139.594 15.5162 131.43 16.6874 123.284C17.2355 119.408 17.7792 115.536 18.3361 111.664C18.5659 110.015 18.7957 108.336 19.0344 106.696C19.83 100.968 20.63 95.3146 21.4212 89.6129C21.5096 88.9455 21.6113 88.3046 21.6908 87.6548C21.7439 87.3278 21.7836 86.983 21.8278 86.6515C22.0311 85.2371 22.2212 83.8095 22.4157 82.4084C25.5583 83.0581 30.8578 84.0968 33.5584 84.7288C33.6512 84.7686 33.6379 86.267 33.5274 88.9101L33.5318 88.9057Z' fill='%23702B2B'/%3E%3Cpath d='M33.5318 88.9057C33.4965 89.5775 33.4744 90.2803 33.4302 91.0582C33.4302 91.0582 33.4346 91.0582 33.4302 91.0626C31.2644 128.022 27.8566 176.036 23.6665 208.204C23.6621 208.209 23.6665 208.213 23.6665 208.213C23.1096 210.989 23.1229 213.712 21.8632 215.939H21.8588C16.4399 218.733 5.86741 213.583 1.71708 218.357C1.71708 218.366 1.71266 218.37 1.71266 218.384C1.53144 218.773 1.47398 219.201 1.48282 219.639H1.4784C1.24415 218.852 1.23088 218.017 1.28834 217.203C1.46072 215.1 2.01321 213.018 2.54803 210.98C3.80771 206.436 4.62983 201.773 5.45194 197.124H5.45635C8.2807 180.743 10.7161 164.204 13.1471 147.748H13.1515C14.3404 139.594 15.5162 131.43 16.6874 123.284C17.2355 119.408 17.7792 115.536 18.3361 111.664C18.5659 110.015 18.7957 108.336 19.0344 106.696C19.83 100.968 20.63 95.3146 21.4212 89.6129C21.5096 88.9455 21.6113 88.3046 21.6908 87.6548C21.7439 87.3278 21.7836 86.983 21.8278 86.6515C22.0311 85.2371 22.2212 83.8095 22.4157 82.4084C25.5583 83.0581 30.8578 84.0968 33.5584 84.7288C33.6512 84.7686 33.6379 86.267 33.5274 88.9101L33.5318 88.9057Z' fill='%233B754B'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M22.376 214.918C22.1948 215.497 22.0224 215.847 21.8633 215.944C20.0776 217.018 16.4047 216.797 12.661 216.558C12.2632 210.357 12.0466 197.115 17.492 180.894C17.9384 179.563 18.4202 178.215 18.9461 176.849C19.1716 178.591 19.5605 180.31 20.0511 181.985C19.9892 183.674 19.9495 185.261 19.9406 186.719C19.9318 187.895 19.9053 188.991 19.8566 190.043C19.8522 190.056 19.8434 190.069 19.839 190.078C19.6489 190.503 19.5163 190.949 19.3704 191.387C19.0743 192.293 18.7959 193.208 18.5616 194.131C18.0887 195.997 17.8411 197.893 17.819 199.82C17.8014 201.787 17.9958 203.754 18.3273 205.69C18.4953 206.68 18.703 207.661 18.9329 208.638C19.0566 209.159 19.1804 209.676 19.3307 210.189C19.4235 210.503 19.5251 210.817 19.6401 211.122C19.9274 211.886 20.3252 212.607 20.8379 213.234C21.218 213.703 21.6114 214.154 22.0357 214.582C22.1462 214.697 22.2611 214.803 22.376 214.914V214.918Z' fill='%23949984'/%3E%3C/g%3E%3Cpath d='M23.618 85.33C23.6047 85.5819 23.5561 86.0548 23.4765 86.7355C23.4765 86.762 23.4721 86.7886 23.4721 86.8195C23.4588 86.9212 23.4456 87.0317 23.4323 87.1422L23.4191 87.2615C23.4191 87.2615 23.4191 87.2969 23.4146 87.3145C23.3174 88.1676 23.1848 89.2549 23.0257 90.5499C23.0213 90.5853 23.0168 90.6251 23.0124 90.656C22.955 91.1422 22.8887 91.6505 22.8224 92.1897C22.6588 93.4583 22.4864 94.8726 22.2831 96.4152C22.2389 96.76 22.1947 97.1047 22.1505 97.4627C22.1461 97.4937 22.1417 97.5246 22.1417 97.56C22.0577 98.1788 21.9737 98.8152 21.8898 99.465C21.5317 102.201 21.1339 105.242 20.7052 108.521V108.53C20.6654 108.822 20.6256 109.123 20.5859 109.423C20.5726 109.525 20.5594 109.631 20.5461 109.728C20.4975 110.086 20.4533 110.444 20.4046 110.807C20.3737 111.019 20.3516 111.231 20.3207 111.447C20.2367 112.053 20.1571 112.667 20.0776 113.291C20.0732 113.326 20.0687 113.361 20.0643 113.397C20.0555 113.472 20.0466 113.542 20.0334 113.618C19.9406 114.325 19.8477 115.032 19.7549 115.752C19.7151 116.031 19.6798 116.309 19.6444 116.597C19.6444 116.597 19.64 116.597 19.64 116.601C19.3173 119.067 18.977 121.622 18.6278 124.23C18.6278 124.27 18.6234 124.305 18.619 124.332C18.6102 124.389 18.6057 124.451 18.5925 124.508C18.4245 125.777 18.2566 127.054 18.0842 128.349L18.009 128.893V128.902C18.009 128.902 18.0046 128.919 18.0046 128.933C13.7836 160.61 8.65202 198.392 8.20119 201.659C7.32604 208.014 8.4266 211.453 8.64318 212.753C8.82882 213.88 9.08517 214.989 9.26639 216.116C9.27965 216.205 9.29733 216.289 9.30617 216.377C9.00562 216.368 8.7139 216.359 8.41776 216.359C7.77687 216.346 7.15366 216.355 6.5658 216.386C6.42878 216.39 6.29177 216.395 6.15917 216.412C6.02215 216.417 5.88955 216.43 5.75695 216.448C5.49176 216.465 5.24424 216.501 4.99673 216.54C4.87297 216.554 4.75804 216.58 4.63871 216.602C4.40445 216.642 4.18345 216.695 3.9713 216.753C3.8608 216.788 3.7503 216.815 3.64864 216.854C3.54698 216.885 3.44974 216.925 3.35692 216.96C3.26411 216.996 3.1757 217.036 3.09173 217.08C3.08731 217.08 3.08289 217.084 3.07847 217.084C2.99891 217.124 2.92819 217.164 2.85305 217.208C2.83979 217.212 2.82211 217.221 2.80885 217.234C2.74697 217.27 2.68509 217.305 2.63205 217.34C2.4641 217.451 2.31382 217.575 2.18122 217.712C2.1326 217.76 2.0884 217.809 2.0442 217.862C2.01768 217.893 2 217.915 1.98232 217.946C1.9558 217.973 1.93812 217.999 1.92044 218.03C1.90276 218.057 1.88509 218.083 1.86741 218.11C1.85857 218.136 1.84088 218.154 1.82762 218.171C1.8011 218.216 1.78343 218.26 1.75691 218.304C1.74807 218.322 1.73923 218.348 1.72155 218.366C1.72155 218.375 1.71712 218.379 1.71712 218.392C1.70386 218.419 1.69061 218.441 1.68177 218.468C1.65525 218.525 1.63315 218.591 1.61105 218.658C1.55801 218.826 1.52265 219.002 1.50497 219.188C1.48729 219.334 1.47845 219.489 1.48729 219.648L1.47403 219.604C1.46077 219.55 1.43867 219.493 1.42541 219.427C1.42099 219.418 1.42099 219.4 1.41657 219.391C1.40331 219.321 1.38563 219.259 1.37237 219.184C1.36795 219.166 1.36353 219.144 1.36353 219.126C1.34585 219.029 1.32817 218.936 1.31933 218.839C1.30607 218.742 1.29281 218.644 1.28839 218.538C1.28397 218.499 1.28397 218.463 1.28397 218.432C1.27955 218.401 1.27955 218.375 1.27513 218.344C1.27513 218.295 1.27071 218.242 1.27071 218.189C1.26629 218.026 1.26629 217.862 1.27071 217.694C1.27071 217.65 1.27513 217.61 1.27513 217.566C1.27513 217.504 1.27955 217.438 1.28397 217.371V217.34C1.28397 217.34 1.28839 217.31 1.28839 217.296V217.279C1.28839 217.279 1.29281 217.261 1.29281 217.248V217.212C1.29281 217.212 1.29723 217.199 1.29723 217.195V217.142C1.30165 217.102 1.30165 217.062 1.30607 217.018C1.31049 216.991 1.31049 216.969 1.31491 216.943C1.31491 216.903 1.31933 216.863 1.32375 216.819C1.32817 216.788 1.32817 216.761 1.33259 216.731V216.717C1.33259 216.717 1.33701 216.686 1.33701 216.673C1.34585 216.576 1.36353 216.479 1.37679 216.381C1.38121 216.337 1.38563 216.293 1.39005 216.244C1.39447 216.213 1.39889 216.182 1.40331 216.147C1.40331 216.112 1.40773 216.09 1.41215 216.054C1.42541 215.961 1.44309 215.873 1.45635 215.78C1.45635 215.763 1.46077 215.745 1.46519 215.727C1.49613 215.537 1.52707 215.347 1.56243 215.153C1.57569 215.077 1.58894 215.002 1.60662 214.927C1.61104 214.887 1.61547 214.852 1.62431 214.817C1.65525 214.653 1.68618 214.49 1.72596 214.322C1.73038 214.291 1.73481 214.264 1.74365 214.233C1.74807 214.189 1.75691 214.149 1.77017 214.105C1.77459 214.087 1.77901 214.061 1.78343 214.043C1.78785 214.012 1.79226 213.99 1.8011 213.959C1.81878 213.853 1.8453 213.747 1.87182 213.641C1.8895 213.566 1.90718 213.495 1.92486 213.416C1.94254 213.323 1.96906 213.23 1.98674 213.137C2.01326 213.044 2.03536 212.951 2.06188 212.854C2.06188 212.845 2.0663 212.837 2.0663 212.823C2.09282 212.722 2.11934 212.616 2.14586 212.509C2.16354 212.434 2.18122 212.364 2.1989 212.288C2.30498 211.86 2.4199 211.422 2.5304 210.998C2.5304 210.998 2.53039 210.993 2.53481 210.993C2.56575 210.883 2.59227 210.764 2.62321 210.649C2.71161 210.317 2.80001 209.981 2.88841 209.654C2.88841 209.645 2.89283 209.628 2.89725 209.619L2.97239 209.327C2.98123 209.287 2.99891 209.248 3.00775 209.208C3.01659 209.168 3.02101 209.133 3.03427 209.102C3.06079 209.004 3.08289 208.912 3.11383 208.819C3.18455 208.532 3.25526 208.244 3.32598 207.966C3.32598 207.953 3.3304 207.935 3.33482 207.922C3.33924 207.908 3.33925 207.891 3.34367 207.873C3.43648 207.497 3.5293 207.073 3.63096 206.618C3.65748 206.507 3.67958 206.392 3.7061 206.269C3.74146 206.123 3.76798 205.968 3.80334 205.818C3.84312 205.636 3.8829 205.455 3.92268 205.27C3.94036 205.15 3.96688 205.035 3.9934 204.916L4.00666 204.841C4.0376 204.708 4.06412 204.571 4.09505 204.43C4.12157 204.293 4.1481 204.156 4.17462 204.014C4.1923 203.917 4.21439 203.82 4.23207 203.723C4.25859 203.599 4.28069 203.48 4.30721 203.351C4.32047 203.289 4.33373 203.228 4.34699 203.166C4.36025 203.068 4.38235 202.971 4.40003 202.874C4.42655 202.741 4.45307 202.604 4.47959 202.467C4.52821 202.224 4.57241 201.972 4.62103 201.712C4.67407 201.42 4.73153 201.124 4.78899 200.819C4.82877 200.62 4.86413 200.412 4.89949 200.209C4.90391 200.173 4.91274 200.134 4.91716 200.103C4.93042 200.023 4.94811 199.948 4.96137 199.864C4.97905 199.745 5.00557 199.625 5.02325 199.502C5.05419 199.334 5.08512 199.175 5.11606 199.002C5.16026 198.746 5.20888 198.485 5.25308 198.22C5.3017 197.946 5.35032 197.672 5.39894 197.393C5.4122 197.309 5.42988 197.221 5.44314 197.137H5.44756C5.47408 196.969 5.5006 196.814 5.53154 196.651C5.61552 196.178 5.6995 195.696 5.78348 195.201C5.81884 194.984 5.85862 194.763 5.89398 194.547C6.15917 193.004 6.42878 191.378 6.71166 189.672C6.75586 189.411 6.80006 189.154 6.83984 188.889C6.96802 188.129 7.0962 187.351 7.21996 186.564C7.30836 186.016 7.39675 185.464 7.48515 184.898C7.49399 184.845 7.50283 184.788 7.51609 184.726C7.53377 184.62 7.55145 184.505 7.56913 184.399C7.62659 184.036 7.68847 183.669 7.74593 183.298C7.77245 183.157 7.79013 183.015 7.81665 182.869C7.82107 182.83 7.82991 182.79 7.83433 182.746C7.89621 182.339 7.96692 181.928 8.0288 181.512C8.06416 181.291 8.09952 181.07 8.13488 180.845C8.1835 180.518 8.23655 180.182 8.28959 179.846C8.32494 179.634 8.35146 179.426 8.38682 179.21C8.43102 178.927 8.47964 178.631 8.52384 178.343C8.56362 178.078 8.60782 177.813 8.6476 177.552C8.67854 177.366 8.70506 177.185 8.736 177C8.77136 176.783 8.80672 176.575 8.83324 176.359C8.85092 176.239 8.87301 176.129 8.88627 176.01C8.90395 175.908 8.92163 175.797 8.93489 175.691C8.98793 175.364 9.03655 175.037 9.08959 174.701C9.14263 174.348 9.19567 173.994 9.25313 173.645C9.31501 173.229 9.38131 172.81 9.44761 172.385C9.54485 171.735 9.64651 171.077 9.74817 170.418C9.85867 169.693 9.97359 168.964 10.0797 168.23C10.2034 167.448 10.3183 166.653 10.4421 165.861C10.4907 165.539 10.5393 165.216 10.588 164.898C10.641 164.522 10.6985 164.142 10.7559 163.771C10.8134 163.391 10.8753 163.011 10.9283 162.635C10.9725 162.348 11.0167 162.056 11.0609 161.764C11.1449 161.22 11.2288 160.677 11.304 160.133C11.3217 160.014 11.3438 159.894 11.357 159.771C11.388 159.585 11.4101 159.399 11.441 159.209C11.4764 158.993 11.5029 158.781 11.5382 158.564C11.5648 158.396 11.5869 158.228 11.6134 158.06C11.6576 157.786 11.6974 157.512 11.7416 157.234C11.9847 155.581 12.2322 153.91 12.4797 152.235C12.6963 150.763 12.9173 149.278 13.1338 147.788V147.775H13.1383C13.1736 147.514 13.2134 147.262 13.2443 147.001L13.3327 146.414C13.483 145.384 13.6333 144.354 13.7836 143.32C13.8322 142.984 13.8808 142.643 13.9294 142.312C13.9604 142.117 13.9869 141.923 14.0178 141.733C14.0488 141.512 14.0753 141.295 14.1107 141.083C14.1902 140.579 14.2609 140.075 14.3316 139.572C14.3935 139.116 14.4642 138.661 14.5261 138.206C14.6587 137.291 14.7913 136.38 14.9239 135.47C15.1184 134.104 15.3173 132.743 15.5118 131.386C15.5648 131.019 15.6179 130.648 15.6753 130.281C15.6841 130.197 15.7018 130.113 15.7107 130.029C15.7814 129.578 15.8433 129.127 15.9051 128.676C15.9184 128.548 15.9405 128.416 15.9582 128.287C15.9582 128.279 15.9626 128.27 15.9626 128.256V128.243C15.9803 128.111 16.0024 127.974 16.0201 127.841C16.0245 127.814 16.0245 127.797 16.0289 127.77C16.0598 127.554 16.0864 127.342 16.1217 127.129C16.2411 126.298 16.356 125.463 16.4797 124.641C16.5151 124.367 16.5549 124.097 16.5902 123.828C16.5902 123.819 16.5947 123.814 16.5947 123.801L16.6079 123.7C16.6212 123.593 16.6389 123.487 16.6521 123.386C16.6565 123.368 16.6565 123.346 16.661 123.328C16.661 123.319 16.661 123.315 16.6654 123.311C16.714 122.953 16.7626 122.599 16.8112 122.25C16.8289 122.1 16.8554 121.945 16.882 121.795L16.9704 121.162C17.0632 120.491 17.1604 119.819 17.2532 119.156C17.293 118.891 17.3328 118.63 17.3637 118.369C17.4345 117.874 17.5052 117.379 17.5759 116.888C17.6731 116.181 17.7704 115.483 17.8764 114.784C17.903 114.594 17.9295 114.404 17.9604 114.21V114.183C17.9781 114.064 17.9958 113.954 18.009 113.834C18.0135 113.799 18.0179 113.772 18.0223 113.737C18.0621 113.463 18.1019 113.189 18.1416 112.915C18.1593 112.778 18.1814 112.636 18.1991 112.495C18.2389 112.225 18.2742 111.96 18.3184 111.691C18.314 111.686 18.3184 111.677 18.3184 111.673V111.655C18.3317 111.571 18.345 111.492 18.3582 111.412C18.3936 111.156 18.4289 110.913 18.4599 110.661C18.4643 110.625 18.4643 110.603 18.4687 110.572C18.4776 110.524 18.482 110.475 18.4952 110.426V110.409C18.5527 109.998 18.6146 109.587 18.672 109.18V109.171C18.6986 109.021 18.7162 108.871 18.7339 108.725C18.7383 108.672 18.7472 108.619 18.7604 108.57C18.787 108.358 18.8135 108.155 18.8444 107.947C18.9019 107.54 18.9549 107.134 19.0168 106.731C19.0168 106.727 19.0212 106.727 19.0212 106.727C19.0212 106.696 19.0256 106.669 19.0301 106.639C19.2157 105.286 19.4057 103.956 19.587 102.652C19.6179 102.431 19.6488 102.21 19.6798 101.998C19.6886 101.936 19.6975 101.869 19.7063 101.808C19.7461 101.551 19.7814 101.304 19.8124 101.052L19.8433 100.844C19.8743 100.61 19.9052 100.375 19.9406 100.146C19.9406 100.137 19.9406 100.132 19.945 100.119C20.0908 99.0318 20.2455 97.9754 20.3914 96.9368C20.3914 96.9058 20.3958 96.8749 20.4002 96.8439L20.4135 96.7423C20.4268 96.6229 20.4489 96.5124 20.4621 96.3975C20.4798 96.2517 20.5019 96.1102 20.5196 95.9688C20.5461 95.7964 20.5682 95.6329 20.5947 95.4649V95.4472C20.6035 95.3898 20.608 95.3279 20.6212 95.2704C20.6389 95.1334 20.661 94.9964 20.6787 94.8638V94.855C20.6964 94.7135 20.7185 94.5765 20.7361 94.4395C20.7406 94.3864 20.7494 94.3334 20.7538 94.2759C20.7582 94.245 20.7627 94.2229 20.7671 94.192V94.1831C20.7848 94.0329 20.8113 93.8782 20.829 93.7279C20.8378 93.6395 20.8555 93.5511 20.8687 93.4627C20.8776 93.3787 20.8864 93.308 20.8997 93.2373C20.9085 93.1444 20.9262 93.0516 20.9395 92.9632C20.9395 92.9367 20.9439 92.9102 20.9483 92.8837C20.9792 92.6582 21.0058 92.4373 21.0411 92.2163C21.0455 92.1632 21.0544 92.1102 21.0588 92.0527C21.0765 91.9201 21.0986 91.7831 21.1163 91.6505C21.1163 91.6328 21.1207 91.6151 21.1207 91.5975C21.1384 91.4693 21.1605 91.3411 21.1737 91.2173C21.1914 91.0715 21.2135 90.9256 21.2312 90.7798C21.2489 90.656 21.2665 90.5455 21.2798 90.4262C21.2886 90.3643 21.2975 90.2936 21.3107 90.2317C21.3196 90.1787 21.324 90.1256 21.3284 90.0682C21.3373 90.0284 21.3417 89.9886 21.3461 89.9488C21.3594 89.8427 21.377 89.7367 21.3903 89.635C21.4654 89.0869 21.5406 88.5477 21.6157 88.0261C21.6246 87.9289 21.6422 87.8272 21.6555 87.7256C21.6599 87.7123 21.6599 87.6902 21.6599 87.677C21.6643 87.677 21.6643 87.6726 21.6643 87.6726C21.6776 87.5621 21.6953 87.4516 21.7085 87.3411C21.713 87.3366 21.713 87.3322 21.7174 87.3278C21.8411 87.1289 21.9516 86.9344 22.0666 86.7532C22.0842 86.7178 22.1063 86.6913 22.124 86.6604C22.1638 86.5985 22.2036 86.5366 22.2345 86.4792C22.2434 86.4659 22.2522 86.4482 22.261 86.4394H22.2654C22.3406 86.32 22.4069 86.214 22.4776 86.1123C22.6721 85.8118 22.8489 85.5687 23.0036 85.383C23.1362 85.2151 23.2555 85.0957 23.3395 85.0338C23.5207 84.9101 23.6091 84.9985 23.5826 85.3565L23.618 85.33Z' fill='%233E8E5B'/%3E%3Cpath d='M19.1446 199.015C18.8087 202.733 18.959 206.551 20.117 210.114C19.8739 210.136 19.6087 210.162 19.3347 210.193C16.9921 210.441 13.6904 210.976 13.3722 212.505L17.4872 180.894L23.6176 133.803C23.6176 133.803 27.2066 124.853 25.4607 133.803C22.99 146.445 19.4231 196.01 19.1491 199.02L19.1446 199.015Z' fill='%233E8E5B'/%3E%3Cpath d='M29.5143 56.8426C29.5978 57.549 30.8968 57.1616 30.3954 57.663C27.9494 60.1242 24.5615 61.2256 22.0927 64.8718C21.6445 65.5327 21.1963 66.2088 20.7634 66.8773C20.0645 67.9635 19.2593 69.1561 17.9983 69.46C17.1551 69.6651 16.2739 69.4144 15.4763 69.0878C15.3624 69.0422 15.2332 68.9814 15.1573 68.8827C15.0813 68.7763 15.0585 68.6396 15.0509 68.5105C14.7623 65.4871 16.0992 62.5246 17.8312 60.033C18.8643 58.5517 20.1177 57.1312 21.7889 56.4551C22.2598 56.2652 22.746 56.1361 23.2398 56.0222C24.2045 55.8019 25.1768 55.612 26.1491 55.46C26.8252 55.3537 27.5165 55.2701 28.1773 55.46C28.8306 55.6423 29.4383 56.1665 29.5219 56.8426H29.5143Z' fill='%2334381B'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M97.7364 78.3712C97.7136 78.3102 97.6983 78.2492 97.6907 78.2034C97.6907 78.2263 97.7136 78.2873 97.7364 78.3712Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M49.6061 62.3043C49.6061 62.3043 47.669 62.1372 47.4943 64.2718C47.3272 66.4063 49.6061 67.0064 49.72 67.0368C49.8339 67.0672 49.6061 62.3043 49.6061 62.3043Z' fill='%23B4B296'/%3E%3Cpath d='M48.52 62.5093C48.52 62.5093 47.6844 62.3346 47.5097 64.4616C47.3426 66.5885 48.558 67.371 48.5428 67.257C48.0414 63.7247 48.5124 62.5169 48.5124 62.5169L48.52 62.5093Z' fill='%23BBB99D'/%3E%3Cpath d='M102.606 85.2908C102.606 85.2908 102.59 85.2832 102.59 85.2756C102.142 84.7439 101.702 84.2197 101.284 83.7411C100.19 82.465 99.2861 81.4623 98.9974 81.3027C98.215 80.8773 98.2074 79.7911 97.387 79.4492C96.4223 79.039 95.4196 78.7504 94.3865 78.5833C93.3306 78.4085 92.2367 78.3402 91.1657 78.4997C90.2389 78.6288 89.2818 78.9707 88.6513 79.6999C87.8841 80.5963 87.8385 81.9028 88.1575 82.9891C88.4006 83.8171 88.8184 84.5767 89.145 85.3667C89.4717 86.172 89.6312 87.0075 89.5856 87.8735C89.5477 88.5876 89.297 89.2333 88.9703 89.8638C88.788 90.2208 88.5753 90.5702 88.393 90.9272C88.2259 91.2539 88.1044 91.6033 88.0132 91.9527C87.6106 93.4948 87.7473 95.1736 88.0208 96.7232H88.0284C88.2031 97.7107 88.507 98.6603 88.8944 99.587C88.7728 99.4199 88.6513 99.2528 88.5221 99.0857C86.2888 96.1079 83.7517 93.3353 81.7766 90.1752C80.8879 88.7547 78.7989 86.7721 76.8011 84.6755C76.7707 84.6527 76.7479 84.6223 76.7251 84.5995C76.5124 84.3716 76.2997 84.1513 76.1022 83.931C73.9069 81.5762 72.0078 79.153 72.1673 77.2995C72.3648 75.0054 73.7853 72.8177 72.1445 71.2073C73.7246 70.0602 77.0366 69.7792 80.4169 69.9463C80.4169 69.9463 80.422 69.9463 80.4321 69.9463H80.4549C83.8428 70.1134 87.2991 70.7211 89.145 71.3516C91.8189 72.2631 94.0826 74.0559 96.2932 75.8106C98.2682 77.3906 99.0506 78.0971 100.691 80.0266C100.897 80.2696 101.079 80.5203 101.254 80.7862C101.276 80.8014 101.284 80.8242 101.292 80.847C101.345 80.9077 101.383 80.9761 101.428 81.0369C101.687 81.6294 101.876 82.2447 101.975 82.8752C102.211 83.6804 102.423 84.4856 102.606 85.2908Z' fill='%23BBBBA5'/%3E%3Cpath d='M88.4006 87.9268C88.788 84.6755 85.6279 81.3256 87.5726 79.4797C89.8818 77.2919 95.6854 77.3831 99.8634 79.3505C99.9545 79.3961 100.061 79.3961 100.152 79.4189C98.8455 77.93 98.0327 77.2084 96.2779 75.8107C94.0674 74.0483 91.8037 72.2632 89.1298 71.3516C85.4304 70.0907 75.297 68.9208 72.1217 71.2073C73.7625 72.8177 72.342 75.0055 72.1445 77.2995C71.8254 81.0141 79.7712 87.0152 81.7462 90.1753C83.3035 92.6592 85.2025 94.9078 87.0332 97.2094C86.0837 91.2691 88.1271 90.0841 88.3778 87.9344L88.4006 87.9268Z' fill='%23BBB99D'/%3E%3Cpath d='M93.4896 190.742C93.3909 190.256 93.1478 189.77 92.7452 189.443C92.5781 189.299 92.335 189.178 92.259 188.965C92.1527 188.661 92.1906 188.57 92.1071 188.258C91.9324 187.62 91.8716 186.732 91.7805 186.071C91.6817 185.387 91.6665 184.688 91.6665 183.997C91.6665 182.576 91.5754 181.156 91.4386 179.735C91.431 179.644 90.0029 166.184 89.3344 166.419C83.2042 168.531 67.8066 170.931 68.042 172.147C68.1636 172.747 69.4777 177.616 69.7208 178.178C69.9943 178.824 70.1386 179.538 70.3513 180.199C70.564 180.844 70.8147 181.475 71.0198 182.121C71.2021 182.728 71.2857 183.336 71.5819 183.913C71.8554 184.453 72.2808 184.901 72.5163 185.455C72.7897 186.109 72.9037 187.567 72.9417 188.251C73.0024 189.413 72.9417 189.846 73.1088 191.001C73.3974 192.991 74.1571 194.958 75.5472 196.523C77.0361 198.202 79.3453 199 81.609 199.288C84.0398 199.6 86.5694 199.334 88.8787 198.589C89.9497 198.24 90.9525 197.761 91.8336 197.101C92.2514 196.789 92.6084 196.417 92.8895 195.992C93.2313 195.483 93.2997 194.89 93.3301 194.313C93.3985 193.12 93.7479 191.935 93.4972 190.742H93.4896Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.3' d='M93.4895 190.742C93.3907 190.256 93.1476 189.77 92.745 189.443C92.5779 189.299 92.3348 189.178 92.2589 188.965C92.1525 188.661 92.1905 188.57 92.1069 188.258C91.9322 187.62 91.8715 186.732 91.7803 186.071C91.6816 185.387 91.6664 184.688 91.6664 183.997C91.6664 182.576 91.5752 181.156 91.4385 179.735C91.4309 179.644 90.0028 166.184 89.3343 166.419C86.7516 167.308 82.5356 168.25 78.5248 169.131C78.7907 169.389 79.0413 169.648 79.2844 169.913C80.4391 171.182 81.5101 172.595 82.3305 174.091C84.1764 177.426 84.8753 181.346 83.9181 185.045C83.0446 188.41 81.3734 191.548 79.1249 194.252C78.2437 195.308 77.279 196.295 76.2535 197.214C77.712 198.43 79.6794 199.053 81.6013 199.296C84.0321 199.607 86.5617 199.341 88.8709 198.597C89.942 198.248 90.9447 197.769 91.8259 197.108C92.2437 196.797 92.6007 196.424 92.8818 195.999C93.2236 195.49 93.292 194.898 93.3223 194.32C93.3907 193.128 93.7401 191.943 93.4895 190.75V190.742Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M69.714 178.178C69.8583 178.512 69.9646 178.862 70.0634 179.211C74.5832 178.961 84.071 178.338 91.6824 185.053C91.6673 184.703 91.6597 184.346 91.6597 183.997C91.6597 182.576 91.5685 181.156 91.4318 179.735C91.4242 179.652 89.9961 166.184 89.3276 166.419C83.1974 168.531 67.7997 170.931 68.0352 172.147C68.1567 172.747 69.4709 177.616 69.714 178.178Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M69.7132 178.178C69.7664 178.292 69.8044 178.414 69.85 178.535H69.8651C77.7957 176.742 87.0024 177.821 91.3399 178.854C91.0056 175.846 89.9042 166.229 89.3344 166.419C83.2042 168.531 67.8066 170.931 68.042 172.147C68.1636 172.747 69.4777 177.616 69.7208 178.178H69.7132Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M92.6848 192.634C91.0364 193.447 89.2892 194.001 87.4737 194.335C84.0022 194.974 80.2269 194.723 77.1048 193.014C75.7906 192.3 74.5296 191.441 73.5269 190.347C73.3294 190.135 73.1471 189.907 72.9724 189.679C72.9876 190.059 73.0104 190.454 73.0939 191.008C73.3826 192.999 74.1422 194.966 75.5324 196.531C77.0212 198.21 79.3305 199.007 81.5942 199.296C84.025 199.607 86.5546 199.341 88.8638 198.597C89.9349 198.248 90.9376 197.769 91.8188 197.108C92.2366 196.797 92.5936 196.424 92.8747 195.999C93.2165 195.49 93.2849 194.898 93.3153 194.32C93.3609 193.606 93.4976 192.892 93.5508 192.178C93.2621 192.338 92.9734 192.49 92.6772 192.642L92.6848 192.634Z' fill='%233B754B'/%3E%3Cpath d='M49.6365 188.259C49.2566 186.884 50.039 185.486 50.1682 184.073C50.2973 182.698 51.7558 177.183 51.6723 175.808C51.5051 173.127 50.9278 174.638 50.5252 171.98C50.1758 169.724 48.535 167.756 46.4612 166.639C44.395 165.523 41.949 165.189 39.5942 165.333C37.2317 165.477 34.9376 166.07 32.6739 166.723C32.2941 166.829 31.9143 166.943 31.5877 167.164C30.5925 167.824 30.4558 169.169 30.4178 170.339L30.2887 174.312L30.1975 177.176C30.1595 178.262 30.1823 179.31 30.1747 180.396C30.1747 181.034 30.1064 181.673 29.9392 182.288C29.7114 183.116 29.4835 183.837 29.3847 184.688C29.324 185.19 29.1948 185.828 29.0049 186.306C28.7922 186.83 28.2757 188.069 27.987 188.555C27.8807 188.729 27.7819 188.904 27.7059 189.094C27.5768 190.021 27.63 190.97 27.7743 191.897C27.9414 192.991 28.2377 194.077 28.7618 195.065C29.719 196.88 31.3977 198.278 33.2968 199.167C35.1959 200.048 37.3077 200.443 39.4042 200.572C42.0098 200.732 44.6989 200.481 47.0689 199.425C47.6918 199.152 48.3071 198.802 48.7173 198.278C49.0667 197.83 49.2414 197.275 49.4009 196.736C49.8491 195.217 50.2138 193.675 50.4872 192.11C50.586 191.533 50.6771 190.932 50.548 190.355C50.3809 189.618 49.8719 188.995 49.6744 188.274L49.6365 188.259Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.3' d='M49.636 188.258C49.2562 186.883 50.0386 185.486 50.1677 184.073C50.2969 182.698 51.7554 177.183 51.6718 175.808C51.5047 173.127 50.9274 174.638 50.5248 171.98C50.1753 169.723 48.5345 167.756 46.4607 166.639C44.8959 165.796 43.1184 165.401 41.3257 165.318C41.4472 165.705 41.5688 166.092 41.6599 166.495C41.827 167.171 41.9486 167.855 42.0397 168.546C42.2068 169.746 42.2828 170.954 42.3436 172.169C42.4043 173.339 42.4803 174.509 42.5031 175.679C42.5335 178.019 42.4195 180.366 42.0701 182.683C41.7207 184.984 41.1509 187.256 40.2698 189.413C39.5025 191.289 38.2947 192.938 36.8363 194.335C35.3626 195.748 33.6762 196.926 31.929 197.959C31.7999 198.035 31.6784 198.111 31.5568 198.187C32.0962 198.567 32.6735 198.893 33.266 199.167C35.1651 200.048 37.2768 200.443 39.3734 200.572C41.9789 200.732 44.6604 200.481 47.0305 199.425C47.6534 199.152 48.2687 198.81 48.6789 198.278C49.0283 197.83 49.203 197.275 49.3625 196.736C49.8107 195.217 50.1753 193.675 50.4488 192.11C50.5476 191.532 50.6387 190.932 50.5096 190.355C50.3425 189.618 49.8335 188.995 49.636 188.274V188.258Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M49.6365 188.258C49.401 187.415 49.6061 186.565 49.834 185.699C38.9561 195.331 27.7212 194.153 28.9897 186.291C28.7619 186.83 28.1542 188.236 27.9718 188.547C27.8655 188.722 27.7667 188.897 27.6832 189.086C27.554 190.013 27.6072 190.963 27.7515 191.89C27.9187 192.983 28.2149 194.07 28.7391 195.057C29.6962 196.873 31.375 198.27 33.2741 199.159C35.1731 200.04 37.2849 200.435 39.3815 200.564C41.987 200.724 44.6685 200.473 47.0385 199.417C47.6614 199.144 48.2767 198.795 48.6869 198.27C49.0364 197.822 49.2111 197.268 49.3706 196.728C49.8188 195.209 50.1834 193.667 50.4569 192.102C50.5556 191.525 50.6468 190.925 50.5176 190.347C50.3505 189.611 49.8416 188.988 49.6441 188.266L49.6365 188.258Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M49.6365 188.259C49.5985 188.114 49.5681 187.977 49.5529 187.833C48.2463 191.267 45.6864 196.007 38.1737 195.202C29.5595 194.275 27.9491 189.444 28.9822 186.299C28.7543 186.838 28.1466 188.243 27.9643 188.555C27.8579 188.73 27.7591 188.904 27.6832 189.094C27.554 190.021 27.6072 190.97 27.7515 191.897C27.9187 192.991 28.2149 194.077 28.7391 195.065C29.6962 196.88 31.375 198.278 33.2741 199.167C35.1731 200.048 37.2849 200.443 39.3815 200.572C41.987 200.732 44.6761 200.481 47.0461 199.425C47.669 199.152 48.2843 198.802 48.6945 198.278C49.044 197.83 49.2187 197.275 49.3782 196.736C49.8264 195.217 50.191 193.675 50.4645 192.11C50.5632 191.525 50.6544 190.932 50.5252 190.355C50.3581 189.618 49.8492 188.995 49.6517 188.274L49.6365 188.259Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M49.6365 188.259C49.2567 186.884 50.0391 185.486 50.1683 184.073C50.2974 182.698 51.7559 177.183 51.6647 175.808C51.4976 173.127 50.9203 174.638 50.5177 171.98C50.1683 169.724 48.5275 167.756 46.4537 166.639C44.3875 165.523 41.9415 165.189 39.5866 165.333C37.2242 165.477 34.9301 166.07 32.6664 166.723C32.2866 166.829 31.9068 166.943 31.5801 167.164C30.585 167.824 30.4483 169.169 30.4103 170.339L30.2204 176.066C31.5422 176.446 32.8183 176.993 34.0489 177.609C34.7858 177.981 35.5074 178.376 36.2215 178.786C36.8976 179.173 37.5736 179.561 38.2117 180.001C40.9616 181.9 43.0505 184.65 44.3495 187.719C44.9952 189.246 45.4662 190.849 45.7396 192.482C45.8764 193.318 45.9447 194.153 46.0207 194.996C46.1043 195.916 46.1802 196.835 46.241 197.761C46.2866 198.407 46.3169 199.053 46.3473 199.699C46.5752 199.615 46.8031 199.516 47.031 199.417C47.6539 199.144 48.2692 198.795 48.6794 198.27C49.0288 197.822 49.2035 197.268 49.3631 196.728C49.8112 195.209 50.1759 193.667 50.4493 192.102C50.5481 191.517 50.6392 190.925 50.5101 190.348C50.343 189.611 49.834 188.988 49.6365 188.266V188.259Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M50.0551 184.795C50.1083 184.552 50.1463 184.308 50.1691 184.073C50.2982 182.698 51.7567 177.183 51.6655 175.808C51.4984 173.127 50.9211 174.638 50.5185 171.98C50.1767 169.724 48.5283 167.756 46.4545 166.639C44.3883 165.523 41.9423 165.189 39.5874 165.333C37.225 165.477 34.9309 166.07 32.6672 166.723C32.2874 166.829 31.9076 166.943 31.5809 167.164C30.5858 167.824 30.4491 169.169 30.4111 170.339L30.2516 175.261C36.4046 175.732 45.7632 180.427 50.0551 184.795Z' fill='%233B754B'/%3E%3Cpath d='M49.705 188.433C49.705 188.433 48.3832 196.554 38.6676 195.786C35.8113 195.559 35.1201 194.176 33.9502 195.103C33.8971 195.148 33.8515 195.194 33.8211 195.247C27.3795 192.968 28.5341 189.064 28.9747 186.321C28.8379 186.23 27.3263 187.955 24.8955 190.287C23.2167 191.905 22.2747 193.454 21.6822 195.186C21.5531 195.315 21.4316 195.452 21.3176 195.597C19.5553 198.027 18.3475 203.884 19.2438 207.667C19.297 207.88 19.3502 208.108 19.3806 208.328C18.3854 213.425 20.1706 216.813 21.7202 215.522C21.8114 215.924 21.9101 216.319 22.0241 216.707C22.2292 217.406 22.609 218.91 23.5889 218.94C24.1282 218.955 24.3941 218.575 24.5157 218.104C25.8298 219.692 32.1499 223.733 33.578 222.974C33.578 222.928 33.578 222.875 33.578 222.829C33.4945 219.669 34.8238 216.304 36.4798 213.592C36.5026 213.554 36.571 213.577 36.5634 213.623C36.4874 214.99 36.6165 216.365 36.8748 217.717C37.6952 216.494 39.0094 215.696 40.1412 214.762C41.463 213.668 42.7392 212.513 43.9166 211.26C43.9546 211.222 44.0001 211.268 43.9925 211.306C43.4608 213.433 43.0962 215.605 42.3062 217.671C42.967 217.086 43.5064 216.198 44.4104 215.985C44.4331 215.985 44.4559 215.985 44.4635 216.008C44.9573 216.995 44.9649 218.158 44.8509 219.221C44.7446 220.148 44.5395 221.059 44.228 221.941C44.1673 222.108 44.1065 222.267 44.0457 222.434C45.2839 221.28 46.7728 219.251 47.5324 216.448C49.4239 219.077 55.5465 189.17 49.6974 188.441L49.705 188.433Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.5' d='M28.9747 186.314C28.8987 186.261 28.3594 186.815 27.4402 187.749C27.3719 187.947 27.3111 188.152 27.2579 188.357C27.0452 189.102 26.8553 189.861 26.7565 190.628C26.673 191.305 26.6198 192.057 26.8857 192.702C26.992 192.528 27.1819 192.414 27.3035 192.246C27.3187 192.224 27.3567 192.224 27.3643 192.246C28.0783 194.366 27.4706 196.736 28.367 198.802C28.9595 197.944 29.4684 197.025 29.9394 196.09C29.947 196.067 29.985 196.067 29.9926 196.09C30.6079 197.328 30.9345 198.711 31.6789 199.888C31.7701 200.025 31.8613 200.169 31.9676 200.291C31.9828 200.306 32.0132 200.375 32.036 200.337C32.0815 200.283 32.1195 200.23 32.1651 200.169C32.2183 200.101 32.2715 200.025 32.3246 199.949C32.5601 199.622 32.7728 199.281 32.9855 198.939C33.3957 198.278 33.8059 197.617 34.3149 197.025C34.3376 197.002 34.368 197.025 34.368 197.047C34.4136 197.602 34.368 198.179 34.5276 198.711C34.5959 198.954 34.7175 199.227 34.9681 199.334C35.2036 199.433 35.4087 199.364 35.6214 199.25C36.1456 198.969 36.6165 198.589 37.1331 198.286C37.4293 198.111 37.7484 197.966 38.0598 197.822C38.4548 197.64 38.8574 197.48 39.2828 197.404C39.3056 197.404 39.3284 197.42 39.3208 197.442C39.2221 197.693 39.1157 197.974 39.1157 198.255C39.1157 198.316 39.0929 198.437 39.1689 198.437C39.1993 198.437 39.2373 198.437 39.2752 198.437C39.3588 198.437 39.4348 198.437 39.5183 198.422C39.8905 198.377 40.24 198.225 40.5666 198.042C41.2047 197.67 41.7592 197.169 42.253 196.622C42.61 196.235 42.9442 195.809 43.2329 195.369C41.9719 195.726 40.4679 195.885 38.6903 195.741C35.8341 195.513 35.1428 194.13 33.973 195.057C33.9198 195.103 33.8743 195.148 33.8439 195.201C27.4022 192.923 28.5569 189.018 28.9975 186.276L28.9747 186.314Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.5' d='M49.705 188.433C49.705 188.433 49.1504 191.806 46.1651 193.994C45.6865 196.219 44.6914 198.331 43.0354 199.942C43.0126 199.964 42.9746 199.942 42.9822 199.911C43.0354 199.539 43.0886 199.167 43.1418 198.795C42.3669 200.458 40.9692 201.871 39.4272 202.843C39.3968 202.859 39.374 202.828 39.3816 202.805C39.5031 202.114 39.5031 201.408 39.336 200.724C38.8574 201.712 38.2574 202.631 37.5965 203.497C37.0268 204.249 36.4114 204.978 35.7809 205.684C35.2188 206.315 34.6567 206.945 34.0338 207.515C32.8868 208.548 31.5042 209.543 30.9497 211.047C30.9421 211.078 30.8813 211.078 30.8889 211.04C30.9497 209.285 31.4131 207.568 31.4207 205.806C31.4283 204.142 30.9953 202.509 31.0105 200.846C30.7522 201.757 30.2205 202.585 29.6887 203.36C29.0886 204.234 28.4202 205.077 27.8656 205.988C27.858 206.003 27.8276 206.011 27.8124 205.988C27.5466 205.753 27.3567 205.434 27.2123 205.115C26.6578 203.899 26.4907 202.524 26.3084 201.21C26.2552 200.815 26.1717 200.42 26.1337 200.025C26.0805 199.516 26.0653 199.007 26.0729 198.498C26.0881 197.503 26.164 196.516 26.1413 195.521C25.1006 196.82 24.151 198.21 23.6345 199.805C23.6345 199.828 23.5889 199.843 23.5737 199.805C23.1331 198.833 23.3838 197.693 23.4294 196.675C23.4902 195.452 23.5129 194.229 23.7332 193.021C23.8624 192.292 24.0523 191.578 24.303 190.887C22.9888 192.292 22.2064 193.667 21.6822 195.179C21.5531 195.308 21.4316 195.445 21.3176 195.589C19.5553 198.02 18.3475 203.876 19.2438 207.659C19.297 207.872 19.3502 208.1 19.3806 208.32C18.3854 213.417 20.1706 216.805 21.7202 215.514C21.8114 215.917 21.9101 216.312 22.0241 216.699C22.2292 217.398 22.609 218.902 23.5889 218.932C24.1282 218.948 24.3941 218.568 24.5157 218.097C25.8298 219.684 32.1499 223.726 33.578 222.966C33.578 222.92 33.578 222.867 33.578 222.822C33.4945 219.662 34.8238 216.296 36.4798 213.585C36.5026 213.547 36.571 213.569 36.5634 213.615C36.4874 214.982 36.6165 216.357 36.8748 217.709C37.6952 216.486 39.0094 215.689 40.1412 214.754C41.463 213.661 42.7392 212.506 43.9166 211.252C43.9546 211.215 44.0001 211.26 43.9925 211.306C43.4608 213.433 43.0962 215.605 42.3062 217.664C42.967 217.079 43.5064 216.19 44.4104 215.977C44.4331 215.977 44.4559 215.977 44.4635 216C44.9573 216.988 44.9649 218.15 44.8509 219.213C44.7446 220.14 44.5395 221.052 44.228 221.933C44.1673 222.1 44.1065 222.26 44.0457 222.427C45.2839 221.272 46.7728 219.244 47.5324 216.441C49.4239 219.069 55.5465 189.162 49.6974 188.433H49.705Z' fill='%23C2C2AC'/%3E%3Cpath d='M28.9745 186.314C28.9061 186.268 28.4351 186.732 27.6451 187.537C27.5084 188.532 27.554 189.557 27.7515 190.537C27.873 191.137 28.0477 191.715 28.3288 192.254C28.6858 192.938 29.1568 193.561 29.7265 194.085C30.8963 195.156 32.4156 195.771 34.0108 195.703C34.026 195.703 34.0412 195.718 34.0412 195.733C34.1172 196.546 34.8236 196.979 35.5605 197.161C36.5252 197.404 37.5583 197.359 38.5458 197.268C39.5941 197.169 40.6424 196.979 41.6679 196.728C42.5946 196.5 43.4834 196.219 44.3266 195.756C45.6559 195.027 46.8182 193.986 47.6462 192.702C47.7221 192.581 47.7981 192.459 47.8741 192.33C46.3396 194.282 43.5746 196.159 38.6674 195.771C35.8111 195.543 35.1199 194.161 33.95 195.088C33.8969 195.133 33.8513 195.179 33.8209 195.232C27.3793 192.953 28.5339 189.049 28.9745 186.306V186.314Z' fill='%23C2C2AC'/%3E%3Cpath d='M49.7052 188.433C49.7052 188.433 49.6368 188.874 49.4013 189.535C49.5381 190.211 49.6444 190.894 49.7128 191.578C49.8571 192.953 49.8647 194.336 49.7508 195.71C49.6292 197.161 49.3558 198.605 48.8316 199.964C47.7681 202.729 45.7247 204.879 43.4611 206.718C43.4383 206.74 43.4003 206.718 43.4079 206.687C43.5902 205.608 44.0384 204.537 43.8181 203.436C43.6586 203.846 43.4534 204.241 43.218 204.613C41.5164 207.234 38.5007 208.518 36.3357 210.675C36.3129 210.698 36.2749 210.675 36.2825 210.645C36.4497 209.452 36.2598 208.244 36.3889 207.052C36.3053 207.318 36.2142 207.591 36.1002 207.849C34.7633 211.093 32.0666 213.493 30.2663 216.456C30.2511 216.479 30.2207 216.479 30.2131 216.456C29.8865 215.977 29.5978 215.476 29.3319 214.967C28.5343 213.402 27.9874 211.716 27.5696 210.022C27.167 208.396 26.8783 206.74 26.6581 205.084C25.9668 206.406 24.8805 207.53 24.5843 209.034C24.5843 209.065 24.5387 209.065 24.5235 209.034C23.0118 206.368 21.9028 203.459 21.3027 200.451C21.0444 199.152 20.8697 197.822 20.7937 196.485C19.3428 199.25 18.454 204.294 19.2592 207.675C19.3124 207.887 19.3656 208.115 19.396 208.336C18.4009 213.433 20.186 216.828 21.7356 215.529C21.8268 215.932 21.9256 216.327 22.0395 216.722C22.2446 217.421 22.6244 218.925 23.6043 218.955C24.1437 218.97 24.4095 218.591 24.5311 218.12C25.8452 219.7 32.1653 223.748 33.5935 222.989C33.5935 222.943 33.5935 222.89 33.5935 222.844C33.5099 219.684 34.8392 216.319 36.4952 213.607C36.518 213.569 36.5864 213.592 36.5788 213.638C36.5636 213.911 36.556 214.185 36.556 214.458C36.7383 214.215 36.9282 213.987 37.1257 213.767C37.6803 213.144 38.3032 212.567 39.002 212.103C39.0248 212.088 39.0476 212.103 39.0476 212.134C39.116 212.65 38.9868 213.174 38.8045 213.653C38.5766 214.238 38.2728 214.792 37.931 215.324C37.5739 215.886 37.1789 216.418 36.7611 216.935C36.7991 217.2 36.8447 217.466 36.8978 217.725C37.7182 216.502 39.0324 215.704 40.1643 214.77C41.486 213.676 42.7622 212.521 43.9396 211.268C43.9776 211.23 44.0232 211.275 44.0156 211.321C43.894 211.815 43.7801 212.308 43.6661 212.802C43.7345 212.719 43.8105 212.635 43.8864 212.559C44.3802 212.027 44.9955 211.48 45.7399 211.359C45.7551 211.359 45.7703 211.359 45.7779 211.382C45.9298 211.845 45.6944 212.362 45.4741 212.757C45.1702 213.303 44.7828 213.805 44.3802 214.283C43.9776 214.77 43.5902 215.256 43.18 215.727C43.0736 215.856 42.9597 215.985 42.8458 216.114C42.6938 216.646 42.5191 217.17 42.3216 217.687C42.9825 217.102 43.5218 216.213 44.4258 216C44.4486 216 44.4714 216 44.479 216.023C44.9727 217.01 44.9803 218.173 44.8664 219.236C44.76 220.163 44.5549 221.075 44.2435 221.956C44.1827 222.123 44.1219 222.282 44.0611 222.449C45.2993 221.295 46.7882 219.267 47.5479 216.464C49.4393 219.092 55.5619 189.185 49.7128 188.456L49.7052 188.433Z' fill='%23C2C2AC'/%3E%3Cpath d='M49.7049 188.433C49.7049 188.433 49.0972 191.487 46.8714 193.5C46.9474 193.492 47.0158 193.477 47.0917 193.47C48.0793 193.318 49.2491 193.09 49.8112 192.201C49.834 192.163 49.9024 192.186 49.8948 192.231C49.8796 195.878 50.2138 199.531 49.9707 203.178C49.7884 205.829 49.4086 208.571 48.3527 211.04C47.464 213.129 46.1726 215.058 44.7825 216.881C44.9572 217.641 44.942 218.454 44.8584 219.221C44.7521 220.148 44.547 221.059 44.2355 221.94C44.1748 222.108 44.114 222.267 44.0532 222.434C45.2914 221.28 46.7803 219.251 47.5399 216.448C49.4314 219.077 55.554 189.17 49.7049 188.441V188.433Z' fill='%23BBB99D'/%3E%3Cpath d='M92.107 188.258C92.0158 188.35 91.2638 195.262 83.5611 195.201C82.8015 195.201 82.1027 194.928 81.3962 194.7C80.6822 194.472 79.9833 194.389 79.2313 194.465C74.757 194.913 73.253 190.735 72.9339 188.258C70.4044 190.818 68.4521 199.63 69.3029 203.724C69.4852 204.613 70.4575 203.231 70.8677 202.767C70.8829 202.828 70.8905 202.889 70.8981 202.934C71.0045 203.405 71.0348 203.899 71.05 204.378C71.1716 207.621 71.1716 215.218 72.6073 217.026C73.4277 218.059 74.1417 212.825 73.9974 211.131C73.967 210.804 73.9366 210.478 73.8987 210.151C74.6431 211.192 75.4939 212.141 76.7093 212.756C76.96 212.886 77.2714 212.726 77.279 212.453C77.279 211.913 77.2486 211.366 77.1727 210.827C77.6133 211.526 78.1222 212.217 78.8211 212.696C79.4136 213.098 79.5731 211.974 79.4971 211.275C80.6594 212.316 81.7608 212.248 81.7456 210.356C81.7456 210.121 81.7304 209.885 81.7001 209.65C88.6583 212.924 88.5063 212.794 90.3598 219.586C90.451 219.92 90.9979 219.927 91.0891 219.586C91.636 217.474 91.5752 215.218 91.5069 213.053C91.7272 213.607 91.8943 214.162 92.0082 214.648C92.3501 216.053 94.3023 212.521 94.4694 209.148C95.7076 211.89 95.5481 212.361 95.6772 214.883C95.7836 216.942 100.136 211.533 98.3511 199.744C98.579 199.881 98.9209 199.759 98.936 199.455C99.3159 192.573 92.3729 187.985 92.0994 188.251L92.107 188.258Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.5' d='M84.9971 211.23C85.0426 211.161 85.0958 211.101 85.1414 211.04C85.6883 210.303 86.1441 209.536 86.5011 208.692C87.238 206.953 87.8685 205.137 87.8988 203.246C87.6937 203.641 87.3975 203.975 87.0556 204.279C86.691 204.598 86.3036 204.887 85.9618 205.236C85.939 205.259 85.901 205.236 85.9086 205.206C86.0226 204.712 86.0149 204.195 85.9618 203.694C85.9162 203.216 85.8174 202.737 85.6275 202.289C85.3996 203.55 84.5337 204.53 83.9715 205.662C83.9564 205.692 83.9032 205.669 83.9108 205.639C84.1767 204.37 84.1159 203.018 83.7437 201.772C83.379 200.557 82.6954 199.395 81.6091 198.65C81.7838 199.782 81.5939 200.937 81.404 202.061C81.404 202.091 81.3508 202.091 81.3432 202.061C81.2217 201.567 80.9862 201.127 80.6292 200.762C80.4621 202.319 79.4214 203.626 79.1555 205.153C79.1555 205.168 79.1327 205.183 79.1175 205.175C78.563 204.985 78.0388 204.712 77.5603 204.393C76.2765 203.542 75.2206 202.395 74.3471 201.165C73.5039 199.98 72.7974 198.696 72.3037 197.344C72.0302 197.685 71.9011 198.096 71.8327 198.529C71.8327 198.559 71.7795 198.551 71.7719 198.529C71.5668 198.042 71.3921 197.541 71.263 197.032C71.0351 196.136 70.9211 195.224 70.8831 194.305C70.8452 193.454 70.8148 192.581 70.9591 191.738C69.5158 195.475 68.703 200.8 69.3031 203.724C69.4854 204.613 70.4577 203.231 70.8679 202.767C70.8831 202.828 70.8907 202.889 70.8983 202.934C71.0047 203.405 71.0351 203.899 71.0502 204.378C71.1718 207.621 71.1718 215.218 72.6075 217.026C73.4279 218.059 74.1419 212.825 73.9976 211.131C73.9672 210.804 73.9368 210.478 73.8989 210.151C74.6433 211.192 75.4941 212.141 76.7095 212.756C76.9602 212.886 77.2716 212.726 77.2792 212.453C77.2792 211.913 77.2488 211.366 77.1729 210.827C77.6135 211.526 78.1224 212.217 78.8213 212.696C79.4138 213.098 79.5733 211.974 79.4973 211.275C80.6672 212.316 81.761 212.248 81.7458 210.356C81.7458 210.121 81.7306 209.885 81.7003 209.65C83.0372 210.28 84.1083 210.781 84.9894 211.237L84.9971 211.23Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.5' d='M92.1073 188.258C92.0162 188.349 91.2641 195.262 83.5615 195.201C82.8019 195.201 82.103 194.928 81.3966 194.7C80.6825 194.472 79.9836 194.389 79.2316 194.464C74.7574 194.913 73.2533 190.735 72.9343 188.258C72.714 188.479 72.5089 188.744 72.2962 189.048C71.7569 190.97 71.7417 192.619 72.4405 194.533C72.8659 195.703 73.5876 196.804 74.6434 197.503L74.5675 195.855C74.5979 196.531 75.555 197.579 76.064 197.966C75.593 197.609 77.8947 197.009 78.039 197.009C79.1177 196.956 80.2115 196.895 81.2902 197.161C82.1942 197.389 83.1057 197.792 83.6451 198.521C84.1844 199.258 84.2376 200.374 83.5539 200.997C85.0808 200.154 86.4405 199.022 87.5116 197.67C88.3548 198.149 88.727 199.174 88.6662 200.116C88.6054 201.058 88.1876 201.939 87.7774 202.798C88.4991 202.418 89.0916 201.818 89.441 201.104C89.3879 201.21 90.1627 202.517 90.231 202.737C90.4513 203.367 90.5653 204.005 90.6337 204.666C90.74 205.692 91.0438 206.695 90.9223 207.728C90.6564 209.915 89.5398 211.944 88.294 213.751C89.122 214.944 89.5474 216.592 90.3678 219.593C90.4589 219.927 91.0059 219.935 91.097 219.593C91.644 217.481 91.5832 215.225 91.5148 213.06C91.7351 213.615 91.8946 214.169 92.0162 214.655C92.358 216.061 94.3103 212.528 94.4774 209.156C95.7156 211.898 95.5561 212.369 95.6852 214.891C95.7915 216.95 100.144 211.541 98.3591 199.752C98.587 199.888 98.9288 199.767 98.944 199.463C99.3238 192.581 92.3808 187.992 92.1073 188.258Z' fill='%23C2C2AC'/%3E%3Cpath d='M72.7974 188.395C72.3796 190.347 72.9569 192.611 74.5446 193.91C75.213 194.457 76.041 194.844 76.9146 194.943C77.8262 195.042 78.677 194.799 79.5126 194.465C79.5353 194.457 79.5581 194.449 79.5809 194.434C79.467 194.434 79.3454 194.442 79.2239 194.457C74.7497 194.905 73.2456 190.727 72.9266 188.251C72.881 188.296 72.8354 188.342 72.7974 188.395Z' fill='%23BBB99D'/%3E%3Cpath d='M92.1078 188.258C92.1078 188.258 92.0699 188.418 92.0167 188.661C92.0471 188.707 92.0774 188.752 92.1078 188.805C96.7112 196.341 92.7991 202.236 92.085 204.454C92.0699 204.492 92.0167 204.476 92.0243 204.438C92.4041 202.349 92.237 200.587 91.7356 198.529C91.2267 201.559 86.9879 206.922 84.6559 209.277C84.6407 209.292 84.6255 209.285 84.6103 209.277C82.0427 207.553 81.7921 202.547 81.7693 202.479C80.9413 203.785 80.1969 206.406 80.4627 207.986C80.4627 208.009 80.4399 208.024 80.4172 208.016C76.3455 205.92 74.0287 203.443 73.0108 201.476C72.7069 200.883 72.4562 200.23 72.4486 199.562C72.0536 200.253 71.8637 200.99 71.8561 201.787C71.8561 201.825 71.803 201.825 71.7954 201.795C70.7623 199.265 70.0634 196.09 70.3749 193.507C69.3266 197.017 68.81 201.233 69.3266 203.724C69.5089 204.613 70.4812 203.231 70.8914 202.767C70.9066 202.828 70.9142 202.889 70.9218 202.934C71.0281 203.405 71.0585 203.899 71.0737 204.378C71.1953 207.621 71.1953 215.218 72.631 217.026C73.4514 218.059 74.1654 212.825 74.0211 211.131C73.9907 210.804 73.9603 210.477 73.9223 210.151C74.6668 211.192 75.5175 212.141 76.7329 212.756C76.9836 212.886 77.2951 212.726 77.3027 212.453C77.3027 211.913 77.2723 211.366 77.1963 210.827C77.6369 211.526 78.1459 212.217 78.8447 212.696C79.4372 213.098 79.5968 211.974 79.5208 211.275C80.6906 212.316 81.7845 212.247 81.7693 210.356C81.7693 210.12 81.7541 209.885 81.7237 209.649C83.7519 210.607 85.1724 211.268 86.2207 211.898C88.7275 210.295 89.0541 207.606 89.1301 208.259C89.1985 208.913 89.434 209.551 87.9679 213.288C89.0389 214.511 89.4643 216.175 90.3987 219.578C90.4898 219.912 91.0368 219.92 91.1279 219.578C91.6749 217.466 91.6141 215.21 91.5457 213.045C91.766 213.6 91.9255 214.154 92.0471 214.64C92.3889 216.046 94.3411 212.513 94.5083 209.141C95.7465 211.883 95.5869 212.354 95.7161 214.876C95.8224 216.934 100.175 211.526 98.39 199.736C98.6179 199.873 98.9597 199.752 98.9749 199.448C99.3547 192.565 92.4117 187.977 92.1382 188.243L92.1078 188.258Z' fill='%23C2C2AC'/%3E%3Cpath d='M92.8519 188.593C92.7532 188.524 92.1986 188.182 92.1151 188.258C92.1151 188.258 92.1151 188.258 92.1151 188.274C92.1151 188.274 91.9632 189.056 91.6897 189.808L91.6669 189.861C91.2567 190.986 90.4819 192.474 88.993 193.599C89.4716 193.416 89.9426 193.204 90.3907 192.976C91.553 192.383 92.7152 191.654 93.5356 190.666C93.5584 190.636 93.604 190.636 93.6192 190.674C93.7863 191.16 94.1357 191.548 94.4548 191.958C94.7662 192.36 95.0397 192.801 95.2751 193.242C95.7765 194.191 96.1259 195.201 96.3614 196.227C96.8552 198.422 96.8476 200.633 96.5361 202.859C96.5361 202.904 96.4526 202.927 96.445 202.874C96.369 202.517 96.2551 202.167 96.0803 201.848C95.465 205.494 94.1585 209.057 92.3886 212.354C92.3658 212.392 92.2974 212.377 92.2974 212.331C92.2974 211.602 92.4417 210.759 91.986 210.121C91.2415 211.655 90.3376 213.121 89.1981 214.435C89.0918 214.557 88.993 214.671 88.8867 214.785C89.388 215.886 89.7754 217.367 90.3831 219.593C90.4743 219.927 91.0212 219.935 91.1124 219.593C91.6593 217.481 91.5985 215.225 91.5302 213.06C91.7505 213.615 91.91 214.169 92.0315 214.656C92.3734 216.061 94.3256 212.529 94.4927 209.156C95.7309 211.898 95.5714 212.369 95.7005 214.891C95.8069 216.95 100.16 211.541 98.3744 199.752C98.6023 199.888 98.9442 199.767 98.9593 199.463C99.2708 193.849 94.7054 189.763 92.8671 188.593H92.8519Z' fill='%23BBB99D'/%3E%3Cpath d='M79.0116 130.154L81.1842 130.83C81.1842 130.83 80.1738 132.745 79.1559 132.509C78.1304 132.274 79.0192 130.154 79.0192 130.154H79.0116Z' fill='%2306B253'/%3E%3Cpath d='M38.3633 131.286L37.7024 131.598L37.7556 132.107C37.7556 132.107 38.1886 133.254 38.9558 132.882C39.7154 132.509 38.3633 131.286 38.3633 131.286Z' fill='%2306B253'/%3E%3Cpath d='M60.9018 179.675C61.7374 179.659 62.5578 179.5 63.3782 179.348C66.9485 178.702 70.5643 178.239 74.2029 177.973C78.6619 177.646 87.8155 177.16 91.568 174.98C91.7959 174.843 92.039 174.691 92.153 174.471C92.2897 174.205 92.2289 173.894 92.1681 173.598C91.7959 171.911 90.7097 165.979 90.2919 164.307C87.3521 164.399 80.6749 169.123 77.7352 169.215C61.9197 169.716 45.6712 169.359 29.8937 168.257C29.8405 169.959 29.2556 172.344 29.2025 174.046C29.2025 174.19 29.2025 174.35 29.2936 174.464C29.3848 174.578 30.4635 174.79 30.6154 174.828C32.1574 175.254 33.7147 175.679 35.3175 175.877C36.4341 176.021 37.566 176.051 38.6598 176.287C39.7537 176.53 40.7792 176.97 41.8275 177.335C45.3598 178.55 49.2111 178.847 52.9941 178.702C54.3386 178.649 55.7211 178.543 57.0201 178.869C57.6354 179.021 58.2203 179.272 58.8356 179.432C59.5041 179.614 60.2029 179.697 60.9018 179.682V179.675Z' fill='%2300C55E'/%3E%3Cpath opacity='0.5' d='M92.1682 173.605C91.796 171.919 90.7097 165.986 90.2919 164.307C87.3522 164.399 80.675 169.123 77.7353 169.215C61.9198 169.716 45.6713 169.359 29.8938 168.257C29.8482 169.617 29.4684 171.418 29.2937 172.96C29.59 172.853 29.8938 172.762 30.1901 172.663C30.9801 172.42 31.8081 172.268 32.6361 172.223C33.3273 172.185 34.0186 172.223 34.6871 172.42C36.1683 172.876 37.5205 173.886 38.4852 175.087C38.827 175.512 39.1309 175.968 39.3588 176.469C40.0273 176.667 40.6729 176.917 41.3262 177.153C41.7592 176.553 42.2606 175.998 42.8607 175.58C43.3772 175.223 43.9697 174.973 44.6002 174.927C45.2991 174.881 46.0131 175.079 46.6208 175.428C47.8666 176.142 48.1325 177.32 48.0869 178.596C49.7125 178.733 51.3609 178.756 52.9865 178.695C54.3083 178.642 55.6604 178.543 56.9366 178.839C57.1189 178.376 57.3772 177.928 57.757 177.601C58.1444 177.251 58.661 177.054 59.1775 177.191C59.7548 177.343 60.2182 177.783 60.4385 178.338C60.6132 178.771 60.6816 179.219 60.6968 179.675H60.8943C61.7299 179.659 62.5503 179.5 63.3707 179.348C66.8346 178.718 70.3441 178.269 73.8687 177.996C74.2713 177.213 75.0993 176.499 75.7526 176.165C76.2388 175.922 76.7325 175.793 77.2719 175.861C77.8796 175.945 78.4265 176.211 78.8519 176.651C79.095 176.902 79.3001 177.191 79.4748 177.495C85.4075 176.879 88.8106 176.568 91.5529 174.98C91.7808 174.843 92.0239 174.691 92.1378 174.471C92.2746 174.205 92.2138 173.894 92.153 173.598L92.1682 173.605Z' fill='%2306B253'/%3E%3Cpath opacity='0.4' d='M86.3418 176.583C86.6456 175.998 87.0406 175.466 87.4888 174.98C88.5143 173.879 85.1947 174.031 86.6001 173.56C87.4356 173.286 88.2864 173.058 89.1448 172.846C90.0564 172.618 90.9679 172.405 91.8947 172.253C91.4161 169.83 90.6337 165.66 90.2995 164.3C87.3597 164.391 80.6826 169.116 77.7428 169.207C61.9273 169.708 45.6788 169.351 29.9013 168.25C29.8558 169.678 29.362 172.086 29.1949 173.666C29.2633 173.62 31.5194 171.197 35.0592 173.362C36.3126 174.129 37.1786 174.676 37.4824 176.089C37.8774 176.135 38.2724 176.196 38.6599 176.279C38.9789 176.348 39.2903 176.439 39.6018 176.53C39.6398 176.507 39.6702 176.477 39.7005 176.454C44.98 172.359 50.229 175.307 51.2849 177.973C51.3836 178.216 51.4596 178.467 51.5356 178.718C52.0217 178.718 52.5079 178.702 52.9941 178.687C53.2523 178.68 53.5106 178.664 53.7689 178.657C55.478 175.983 60.7347 174.881 63.0591 179.401C63.1655 179.378 63.2719 179.363 63.3782 179.34C65.9533 178.877 68.5513 178.505 71.1644 178.231C72.5393 176.644 77.1047 173.4 83.8806 176.978C84.6858 176.872 85.4986 176.765 86.2962 176.644C86.3114 176.613 86.3266 176.591 86.3342 176.568L86.3418 176.583Z' fill='%2306B253'/%3E%3Cpath d='M91.0136 165.538C90.8161 164.9 90.7477 164.224 90.6642 163.563C90.3071 160.866 90.2388 158.147 89.8286 155.45C89.4184 152.776 88.6967 150.117 88.5676 147.413C88.5068 146.091 87.3218 144.473 87.2079 143.152C86.6913 137.409 79.209 132.129 77.948 125.954C78.0087 125.756 78.0239 125.551 78.0087 125.354C77.9935 125.194 77.9632 125.042 77.9252 124.89L40.0273 127.481C39.8905 127.8 39.7994 128.134 39.7082 128.468C39.5335 129.114 39.2828 129.691 38.941 130.284C38.2649 131.431 39.6778 133.436 38.9562 134.56C37.5889 136.687 35.2948 137.925 34.7479 140.326C34.1629 142.931 33.1071 145.818 32.7272 148.454C30.5319 163.517 29.3393 165.173 29.3241 170.665C29.3241 170.665 30.4408 170.916 31.489 171.44C33.3729 172.382 35.3556 172.709 37.5205 172.777C38.1738 172.8 38.7815 172.815 39.4196 172.975C40.0045 173.119 40.5666 173.332 41.1363 173.499C42.4581 173.879 43.909 173.932 45.2839 174.023C46.7956 174.129 48.2996 174.228 49.7885 174.479C51.2546 174.722 52.6979 175.056 54.1564 175.345C56.9518 175.907 59.8308 176.173 62.6718 176.461C64.024 176.598 65.3913 176.674 66.751 176.598C68.1791 176.522 69.5085 176.036 70.9442 176.021C74.8715 175.983 75.4184 176.211 77.0744 174.137C77.8416 173.18 79.2925 173.21 80.4775 173.225C83.4705 173.263 90.5122 171.326 92.1834 168.865C92.0467 168.235 91.8036 167.619 91.5605 167.027C91.363 166.533 91.1655 166.039 91.0136 165.53V165.538Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.1' d='M36.6086 167.133C36.6465 166.852 36.6769 166.579 36.7073 166.298C36.7985 165.416 36.8592 164.52 36.7985 163.631C36.7681 163.236 36.7225 162.826 36.5858 162.446C36.487 162.188 36.3199 161.899 36.0313 161.846C35.659 161.778 35.264 162.044 34.9981 162.272C34.4664 162.72 34.1398 163.358 33.9195 164.004C33.684 164.695 33.5397 165.416 33.4105 166.138C33.289 166.799 33.1902 167.483 32.9775 168.121C32.7117 168.941 32.3774 169.739 32.104 170.559C31.99 170.901 31.8913 171.243 31.8001 171.592C33.1674 172.223 34.5879 172.549 36.092 172.694C36.1756 171.759 36.2363 170.817 36.3047 169.883C36.3731 168.964 36.487 168.052 36.6086 167.141V167.133Z' fill='%2300C55E'/%3E%3Cpath opacity='0.1' d='M48.9151 173.203C48.467 171.706 48.4518 170.118 48.0644 168.607C47.8744 167.847 47.5858 167.095 47.0996 166.472C46.8489 166.161 46.4843 165.69 46.0286 165.72C45.6791 165.743 45.4436 166.077 45.2917 166.358C45.079 166.776 44.9499 167.232 44.8511 167.688C44.6688 168.554 44.5852 169.442 44.6384 170.324C44.7068 171.379 44.9119 172.413 45.117 173.446C45.155 173.636 45.1929 173.825 45.2233 174.008C45.2461 174.008 45.2689 174.008 45.2841 174.008C46.659 174.099 48.0264 174.198 49.3785 174.403C49.1886 174.008 49.0291 173.598 48.9075 173.18L48.9151 173.203Z' fill='%2300C55E'/%3E%3Cpath opacity='0.1' d='M69.2196 175.421C68.9538 174.95 68.7183 174.479 68.5208 173.977C68.3005 173.423 68.0954 172.868 67.8523 172.321C67.6092 171.767 67.3357 171.212 66.9787 170.726C66.6977 170.354 66.3102 169.921 65.8089 169.883C65.1252 169.83 64.9429 170.605 64.8897 171.144C64.791 172.094 64.9353 173.073 65.1404 174.008C65.3303 174.904 65.5962 175.793 65.9836 176.629C66.2419 176.629 66.5001 176.621 66.766 176.606C67.7687 176.553 68.7183 176.302 69.6982 176.142C69.5311 175.914 69.3792 175.671 69.2424 175.421H69.2196Z' fill='%2300C55E'/%3E%3Cpath opacity='0.1' d='M85.3774 171.288C85.1267 170.308 84.7697 169.351 84.3291 168.447C84.162 168.113 83.9873 167.779 83.8353 167.437C83.6986 167.126 83.5695 166.814 83.4327 166.503C83.1669 165.903 82.8858 165.211 82.3996 164.756C82.2249 164.588 81.8831 164.345 81.6248 164.444C81.3969 164.535 81.3665 164.862 81.3514 165.067C81.3362 165.356 81.3514 165.637 81.3514 165.925C81.3514 166.389 81.3514 166.852 81.3741 167.316C81.4197 168.288 81.5185 169.253 81.7615 170.195C81.9514 170.947 82.1945 171.676 82.4984 172.39C82.5895 172.603 82.6807 172.815 82.7794 173.02C83.6834 172.868 84.6861 172.641 85.6888 172.352C85.5825 172.002 85.4685 171.645 85.3774 171.296V171.288Z' fill='%2300C55E'/%3E%3Cpath opacity='0.4' d='M91.5682 167.034C91.3707 166.541 91.1731 166.047 91.0212 165.538C90.8237 164.9 90.7554 164.224 90.6718 163.563C90.3148 160.866 90.2464 158.147 89.8362 155.45C89.426 152.776 88.7043 150.117 88.5752 147.413C88.5144 146.091 87.3294 144.473 87.2155 143.152C86.6989 137.409 79.2166 132.129 77.9556 125.954C78.0164 125.756 78.0316 125.551 78.0164 125.354C78.0012 125.194 77.9708 125.042 77.9328 124.89L40.0349 127.481C39.8982 127.8 39.807 128.134 39.7158 128.468C39.5411 129.114 39.2905 129.691 38.9486 130.284C38.2726 131.431 39.6855 133.436 38.9638 134.56C37.5965 136.695 35.3024 137.925 34.7555 140.326C34.1706 142.931 33.1147 145.818 32.7349 148.454C30.5395 163.517 29.3469 165.173 29.3317 170.665C29.3317 170.665 30.4484 170.916 31.4967 171.44C31.5119 171.44 31.5195 171.455 31.5346 171.455C32.5753 167.847 33.1147 160.19 34.839 157.418C36.0393 155.48 38.4777 154.219 39.0246 157.562C39.5791 160.95 38.1282 169.435 37.4294 172.77C37.4598 172.77 37.4977 172.77 37.5357 172.77C38.189 172.792 38.7967 172.808 39.4348 172.967C40.0197 173.111 40.5818 173.324 41.1516 173.491C41.782 173.674 42.4505 173.78 43.119 173.856C42.762 169.313 41.7289 157.433 46.2259 158.147C50.0164 158.747 49.5986 165.66 56.1694 175.702C58.3268 176.036 60.5221 176.241 62.6871 176.461C62.801 176.477 62.9225 176.484 63.0441 176.492C62.7174 173.514 60.7576 160.973 63.1124 159.142C63.8797 158.549 64.852 158.481 65.7788 158.648C70.534 159.522 71.6127 172.633 74.6588 175.884C75.6235 175.702 76.1933 175.261 77.0896 174.137C77.5834 173.514 78.3734 173.309 79.1862 173.248C78.6697 167.429 74.9703 158.549 78.9507 156.833C82.9084 155.116 83.5161 161.816 88.4992 171.364C90.1628 170.658 91.5682 169.799 92.1987 168.873C92.0619 168.242 91.8188 167.627 91.5758 167.034H91.5682Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M91.568 167.034C91.3705 166.541 91.173 166.047 91.0211 165.538C90.8236 164.9 90.7552 164.224 90.6717 163.563C90.3146 160.866 90.2539 158.147 89.8361 155.45C89.4259 152.776 88.7042 150.117 88.5751 147.413C88.5143 146.091 87.3293 144.473 87.2154 143.152C86.6912 137.409 79.2165 132.129 77.9555 125.954C78.0163 125.756 78.0314 125.551 78.0162 125.354C78.001 125.194 77.9707 125.042 77.9327 124.89L40.0348 127.481C39.898 127.8 39.8069 128.134 39.7157 128.468C39.541 129.114 39.2903 129.691 38.9485 130.284C38.2724 131.431 39.6853 133.436 38.9637 134.56C37.8167 136.353 36.0087 137.508 35.1428 139.255C35.4162 139.376 35.6821 139.498 35.9556 139.619C38.1813 140.615 40.4222 141.572 42.6479 142.559C43.8557 143.091 45.0711 143.592 46.2865 144.109C46.8866 144.367 47.4791 144.625 48.0716 144.899C48.6034 145.142 49.1351 145.377 49.5605 145.795C49.5757 145.81 49.5757 145.826 49.5605 145.833C49.401 146.167 49.2795 146.517 49.1959 146.866C50.0087 146.995 50.8443 147.033 51.6647 147.041C53.427 147.071 55.1894 147.041 56.9517 147.041C56.9669 147.041 56.9821 147.056 56.9821 147.071C56.9593 147.33 56.9365 147.588 56.9137 147.846C57.8861 147.747 58.8964 147.801 59.8459 147.937C60.6587 148.051 61.4487 148.256 62.2084 148.56C63.0515 148.902 63.8568 149.343 64.6164 149.836C66.0521 150.771 67.3358 151.872 68.3765 153.24C69.3793 154.554 70.1693 156.02 70.8149 157.531C71.4758 159.074 72.0152 160.669 72.5469 162.256C73.1622 164.087 73.8155 165.91 74.408 167.748C75.1752 170.119 75.8741 172.557 76.2463 175.033C76.497 174.798 76.7628 174.494 77.0591 174.129C77.5529 173.506 78.3429 173.301 79.1557 173.241C78.6315 167.422 74.9397 158.542 78.9202 156.825C82.8779 155.108 83.4856 161.808 88.4687 171.357C90.1323 170.65 91.5377 169.792 92.1757 168.865C92.039 168.235 91.7883 167.619 91.5528 167.027L91.568 167.034Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M60.4086 172.625C59.0641 169.207 58.2209 165.576 57.6132 161.96C56.9144 157.805 56.5649 153.566 56.7624 149.343C56.7852 148.872 56.8156 148.401 56.8536 147.937C56.6941 147.952 56.5269 147.975 56.3674 148.006C55.8129 148.097 55.19 148.241 54.757 148.636C54.7266 148.666 54.681 148.621 54.7114 148.591C55.0533 148.279 55.5242 148.12 55.9648 148.021C56.2535 147.952 56.5573 147.907 56.8536 147.876C56.8536 147.846 56.8536 147.816 56.8536 147.785C56.8612 147.641 56.8764 147.497 56.8916 147.345C56.8916 147.284 56.9067 147.216 56.9067 147.155C56.9067 147.102 56.77 147.124 56.7472 147.124H52.7592C51.6881 147.124 50.6094 147.124 49.5384 146.988C49.4168 146.972 49.2953 146.957 49.1737 146.935C49.0142 147.618 48.9914 148.332 49.0978 149.039C49.2573 150.095 49.6295 151.097 50.0625 152.07C50.5259 153.095 51.05 154.09 51.4982 155.116C51.9995 156.255 52.4097 157.44 52.8579 158.595C53.8151 161.064 54.7798 163.525 55.6914 166.009C56.5345 168.303 57.3701 170.605 58.4108 172.823C58.9198 173.917 59.4819 174.98 60.1124 176.006C60.158 176.081 60.2036 176.157 60.2491 176.226C60.9024 176.294 61.5481 176.355 62.2014 176.423C62.1786 176.393 62.1634 176.355 62.1406 176.325C61.4645 175.14 60.8872 173.901 60.3934 172.64L60.4086 172.625Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M34.7476 140.326C34.5273 141.291 34.2462 142.293 33.9576 143.311C34.3906 144.101 34.7096 144.967 34.9679 145.826C35.2717 146.836 35.4996 147.839 35.492 148.902C35.492 150.467 35.2186 152.138 34.4665 153.528C34.3754 153.688 34.1323 153.931 34.3374 154.06C34.5045 154.166 34.6716 154.265 34.8464 154.356C35.2414 154.561 35.6439 154.736 36.0617 154.88C36.8973 155.184 37.7557 155.412 38.6141 155.648C39.5029 155.898 40.384 156.21 41.2728 156.453C42.2451 156.726 43.2326 156.962 44.2278 157.159C48.3449 157.98 52.5457 158.39 56.7389 158.428C58.881 158.451 61.0232 158.39 63.1653 158.291C65.3075 158.192 67.4496 158.101 69.569 157.759C71.6048 157.433 73.6178 156.985 75.6384 156.62C77.4767 156.286 79.3986 155.929 81.2825 156.005C82.5966 156.058 83.9184 156.354 85.0654 157.023C86.1669 157.668 87.0708 158.587 87.7621 159.658C88.704 161.109 89.2814 162.773 89.9043 164.376C90.5424 166.032 91.1577 167.703 91.7654 169.374C91.9325 169.207 92.0692 169.04 92.1832 168.873C92.0464 168.242 91.8033 167.627 91.5679 167.034C91.3704 166.541 91.1728 166.047 91.0209 165.538C90.8234 164.9 90.7551 164.224 90.6715 163.563C90.3145 160.866 90.2461 158.147 89.8359 155.45C89.4257 152.776 88.7041 150.117 88.5749 147.413C88.5141 146.091 87.3367 144.473 87.2152 143.152C86.6986 137.409 79.2163 132.129 77.9553 125.954C78.0161 125.756 78.0313 125.551 78.0161 125.354C78.0009 125.194 77.9705 125.042 77.9325 124.89L40.0346 127.481C39.8979 127.8 39.8067 128.134 39.7156 128.468C39.5408 129.114 39.2902 129.691 38.9483 130.284C38.2723 131.431 39.6852 133.436 38.9635 134.56C37.5962 136.695 35.3021 137.925 34.7552 140.326H34.7476Z' fill='%233B754B'/%3E%3Cpath d='M43.4609 88.6331C42.0556 88.7015 40.6199 89.0661 39.4121 89.7194C37.6269 90.6917 36.6242 92.5452 36.2064 94.3227C35.7431 96.2826 35.8874 98.4019 36.7306 100.271C37.1636 99.944 37.6118 99.6325 38.0524 99.3135C40.3236 97.6499 42.5797 95.918 44.5396 93.9581C45.4131 93.0845 46.3171 92.1274 46.8337 91.0335C47.0312 90.6233 47.1603 90.16 47.0919 89.7346C47.0919 89.7346 47.0919 89.7346 47.0767 89.7346C46.1956 88.8078 44.7447 88.5723 43.4533 88.6331H43.4609Z' fill='%23CCD1C0'/%3E%3Cpath d='M79.1563 127.951C79.1259 127.594 79.0043 127.253 78.8904 126.911C78.8904 126.812 78.8904 126.713 78.8904 126.622C78.8904 126.47 78.8144 126.379 78.7081 126.333C78.0396 123.834 79.3994 121.054 79.6424 118.562C79.8931 116.018 82.3467 114.035 82.3999 111.445C82.4227 110.396 83.8432 107.214 84.1622 106.515C85.765 103.005 86.6158 96.8143 86.7905 93.1377C86.2132 90.3802 86.5702 76.4562 86.555 76.3954C86.3575 75.2028 82.4606 77.9755 82.7113 76.7905C82.9468 75.6586 83.5013 79.282 84.109 78.2413C83.8736 77.816 83.5773 77.4134 83.1975 77.0867C82.4455 76.4334 81.4124 76.1144 80.4173 75.8257C77.5914 75.0205 74.3554 74.3217 70.9143 73.7899C70.9447 73.2658 70.9143 72.7416 70.8459 72.2251C70.6408 70.5235 70.1395 68.7536 69.1671 67.2647C69.0836 67.1356 68.9013 67.0672 68.7418 67.1128C55.1444 70.9793 49.1129 65.51 48.5964 64.0971C48.0494 62.593 48.6419 66.0341 42.5649 67.7053C42.3674 67.7585 42.2915 67.9104 42.2991 68.0547C42.2839 68.1003 42.2839 68.1535 42.2991 68.2066C42.8004 70.4324 42.0864 72.81 43.0663 74.9598C43.0891 75.0053 43.1118 75.0585 43.1346 75.1041C40.4152 76.0688 38.0147 77.3754 36.0929 79.0845C34.5508 80.4519 33.3126 82.0623 31.9453 83.5739C33.381 87.2809 33.3506 91.307 33.0924 95.2267C32.9328 97.6347 32.7353 100.217 34.133 102.276C34.5812 102.937 35.1889 103.522 35.5839 104.213C36.0701 105.049 36.1309 105.474 36.2752 106.408C36.298 106.56 36.2144 106.712 36.2372 106.864C36.4803 108.429 36.0625 109.812 36.2828 111.475C36.3891 112.25 37.2247 113.367 37.2551 114.073C37.3463 116.405 38.4933 118.464 39.2757 120.644C40.0202 122.718 40.3468 124.905 40.2557 127.07C40.005 127.518 39.8606 127.989 39.7315 128.476C39.6176 128.893 39.4732 129.281 39.2985 129.661C39.3061 129.653 39.3213 129.645 39.3289 129.638C39.3669 129.607 39.4277 129.645 39.4049 129.691C38.8959 130.633 38.5465 131.636 38.1743 132.631C37.9464 133.239 37.7185 133.846 37.445 134.439C37.1716 135.031 36.8525 135.609 36.5487 136.193C35.8954 137.432 35.2421 138.662 34.604 139.9C34.323 140.447 34.0495 140.994 33.7684 141.541C33.7001 141.906 33.6317 142.27 33.5709 142.635C33.5785 142.886 33.5937 143.144 33.6165 143.395C33.7532 144.891 33.9431 146.388 34.0799 147.884C34.2166 149.373 34.2926 150.869 34.2014 152.358C34.1862 152.571 34.171 152.791 34.1558 153.004C34.1558 153.05 34.0951 153.24 34.1938 153.262C34.2926 153.285 34.3913 153.3 34.4901 153.323C34.8775 153.407 35.2725 153.49 35.6599 153.566C36.4727 153.733 37.2779 153.893 38.0907 154.052C41.3343 154.675 44.6007 155.199 47.8975 155.518C51.2703 155.845 54.6658 155.944 58.0614 155.815C61.4797 155.678 64.8828 155.344 68.2784 154.926C69.9723 154.721 71.6587 154.485 73.3527 154.257C75.0315 154.03 76.7027 153.832 78.3815 153.635C79.2702 153.528 80.1514 153.414 81.0326 153.27C81.5035 153.194 84.8611 152.343 85.2637 152.092C85.8942 151.705 85.7271 150.907 85.7043 150.315C85.6891 149.646 85.7422 148.986 85.7726 148.317C85.8106 147.558 85.8486 146.798 85.9018 146.038C86.0233 144.344 86.2056 142.612 86.7298 140.979C86.7374 140.949 86.7526 140.918 86.7602 140.888C86.7298 140.812 86.707 140.744 86.6766 140.668C85.5675 137.865 79.3006 129.638 79.1639 127.959L79.1563 127.951Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M79.1563 127.951C79.1259 127.594 79.0043 127.253 78.8904 126.911C78.8904 126.812 78.8904 126.713 78.8904 126.622C78.8904 126.47 78.8144 126.379 78.7081 126.333C78.0396 123.834 79.3994 121.054 79.6424 118.562C79.8931 116.018 82.3467 114.035 82.3999 111.445C82.4227 110.396 83.8432 107.214 84.1622 106.515C85.765 103.005 86.6158 96.8143 86.7905 93.1377C86.2132 90.3802 86.5702 76.4562 86.555 76.3954C86.3575 75.2028 82.4606 77.9755 82.7113 76.7905C82.9468 75.6586 83.5013 79.282 84.109 78.2413C83.8736 77.816 83.5773 77.4134 83.1975 77.0867C82.4455 76.4334 81.4124 76.1144 80.4173 75.8257C77.5914 75.0205 74.3554 74.3217 70.9143 73.7899C70.9447 73.2658 70.9143 72.7416 70.8459 72.2251C70.6408 70.5235 70.1395 68.7536 69.1671 67.2647C69.0836 67.1356 68.9013 67.0672 68.7418 67.1128C55.1444 70.9793 49.1129 65.51 48.5964 64.0971C48.0494 62.593 48.6419 66.0341 42.5649 67.7053C42.3674 67.7585 42.2915 67.9104 42.2991 68.0547C42.2839 68.1003 42.2839 68.1535 42.2991 68.2066C42.8004 70.4324 42.0864 72.81 43.0663 74.9598C43.0891 75.0053 43.1118 75.0585 43.1346 75.1041C40.4152 76.0688 38.0147 77.3754 36.0929 79.0845C34.5508 80.4519 33.3126 82.0623 31.9453 83.5739C33.381 87.2809 33.3506 91.307 33.0924 95.2267C32.9328 97.6347 32.7353 100.217 34.133 102.276C34.5812 102.937 35.1889 103.522 35.5839 104.213C36.0701 105.049 36.1309 105.474 36.2752 106.408C36.298 106.56 36.2144 106.712 36.2372 106.864C36.4803 108.429 36.0625 109.812 36.2828 111.475C36.3891 112.25 37.2247 113.367 37.2551 114.073C37.3463 116.405 38.4933 118.464 39.2757 120.644C40.0202 122.718 40.3468 124.905 40.2557 127.07C40.005 127.518 39.8606 127.989 39.7315 128.476C39.6176 128.893 39.4732 129.281 39.2985 129.661C39.3061 129.653 39.3213 129.645 39.3289 129.638C39.3669 129.607 39.4277 129.645 39.4049 129.691C38.8959 130.633 38.5465 131.636 38.1743 132.631C37.9464 133.239 37.7185 133.846 37.445 134.439C37.1716 135.031 36.8525 135.609 36.5487 136.193C35.8954 137.432 35.2421 138.662 34.604 139.9C34.323 140.447 34.0495 140.994 33.7684 141.541C33.7001 141.906 33.6317 142.27 33.5709 142.635C33.5785 142.886 33.5937 143.144 33.6165 143.395C33.7532 144.891 33.9431 146.388 34.0799 147.884C34.2166 149.373 34.2926 150.869 34.2014 152.358C34.1862 152.571 34.171 152.791 34.1558 153.004C34.1558 153.05 34.0951 153.24 34.1938 153.262C34.2926 153.285 34.3913 153.3 34.4901 153.323C34.8775 153.407 35.2725 153.49 35.6599 153.566C36.4727 153.733 37.2779 153.893 38.0907 154.052C41.3343 154.675 44.6007 155.199 47.8975 155.518C51.2703 155.845 54.6658 155.944 58.0614 155.815C61.4797 155.678 64.8828 155.344 68.2784 154.926C69.9723 154.721 71.6587 154.485 73.3527 154.257C75.0315 154.03 76.7027 153.832 78.3815 153.635C79.2702 153.528 80.1514 153.414 81.0326 153.27C81.5035 153.194 84.8611 152.343 85.2637 152.092C85.8942 151.705 85.7271 150.907 85.7043 150.315C85.6891 149.646 85.7422 148.986 85.7726 148.317C85.8106 147.558 85.8486 146.798 85.9018 146.038C86.0233 144.344 86.2056 142.612 86.7298 140.979C86.7374 140.949 86.7526 140.918 86.7602 140.888C86.7298 140.812 86.707 140.744 86.6766 140.668C85.5675 137.865 79.3006 129.638 79.1639 127.959L79.1563 127.951Z' fill='%23C2C2AC'/%3E%3Cpath d='M42.298 68.2067C42.7993 70.4324 42.0853 72.81 43.0652 74.9598C43.088 75.0129 43.1108 75.0585 43.1336 75.1041C42.5411 75.3168 41.9637 75.5447 41.4016 75.7878C41.6903 76.0688 41.9941 76.3271 42.3132 76.555C43.2627 77.2539 44.311 77.7856 45.3897 78.2566C46.2784 78.644 47.2432 78.8111 48.2079 78.7731C49.1498 78.7275 50.069 78.53 50.9805 78.2945C51.8161 78.0743 52.6593 77.8692 53.4645 77.5577C54.1634 77.2918 54.8394 76.9576 55.4775 76.5626C56.7081 75.803 57.7944 74.8003 58.6072 73.6076C59.3137 72.5745 59.8074 71.4199 60.1037 70.2045C59.7315 70.4476 59.3593 70.6907 58.9794 70.9261C57.4222 71.8605 55.7054 72.6885 53.8747 72.886C52.2415 73.0607 50.4944 72.7417 49.1878 71.6934C48.0408 70.7818 47.1748 69.5208 46.5519 68.2067C46.2708 67.6066 46.0202 66.9761 45.8454 66.3304C45.0478 66.8317 43.992 67.3255 42.5563 67.7129C42.3588 67.7661 42.2828 67.918 42.2904 68.0623C42.2752 68.1079 42.2752 68.1611 42.2904 68.2143L42.298 68.2067Z' fill='%23C2C2AC'/%3E%3Cpath d='M45.1321 66.7178C44.4408 67.0748 43.5976 67.4167 42.5569 67.6977C42.3594 67.7509 42.2835 67.9028 42.2911 68.0472C42.2759 68.0927 42.2759 68.1459 42.2911 68.1991C42.7924 70.4248 42.0784 72.8024 43.0583 74.9522C43.0811 74.9978 43.1039 75.0509 43.1267 75.0965C42.5342 75.3092 41.9568 75.5371 41.3947 75.7802C41.6834 76.0612 41.9872 76.3195 42.3063 76.5474C43.2558 77.2463 44.3041 77.778 45.3828 78.249C46.2715 78.6364 47.2363 78.8035 48.201 78.7655C48.3681 78.7655 48.5352 78.7427 48.7023 78.7275C48.7707 74.7091 46.2183 68.3586 45.1321 66.7178Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.4' d='M79.1563 127.951C79.1259 127.594 79.0043 127.253 78.8904 126.911C78.8904 126.812 78.8904 126.713 78.8904 126.622C78.8904 126.47 78.8144 126.379 78.7081 126.333C78.0396 123.834 79.3994 121.054 79.6424 118.562C79.8931 116.018 82.3467 114.035 82.3999 111.445C82.4227 110.389 83.8432 107.214 84.1622 106.515C85.765 103.005 86.6158 96.8143 86.7905 93.1377C86.2132 90.3802 86.5702 76.4562 86.555 76.3954C86.4107 75.4991 84.1774 76.8436 83.1747 77.0639C83.1443 77.0411 83.1139 77.0107 83.0836 76.9879C83.0988 77.0183 83.1063 77.0411 83.1139 77.0791C82.8177 77.1323 82.6506 77.0791 82.7113 76.7904C82.7113 76.7676 82.7189 76.7525 82.7265 76.7373C82.0429 76.3119 81.2225 76.0536 80.4173 75.8257C77.5914 75.0205 74.3554 74.3216 70.9143 73.7899C70.9447 73.2658 70.9143 72.7416 70.8459 72.2251C70.6408 70.5235 70.1395 68.7536 69.1671 67.2647C69.0836 67.1356 68.9013 67.0672 68.7418 67.1128C66.4857 67.7509 64.4347 68.1383 62.5888 68.3206C62.3457 68.5637 62.0874 68.7991 61.8139 69.0194C61.3961 69.3537 60.9556 69.6575 60.5074 69.9462C60.401 70.0146 60.3023 70.0753 60.1959 70.1437C59.6794 72.339 58.4792 74.3216 56.7244 75.7573C55.6078 76.6689 54.3088 77.3602 52.9415 77.8083C52.0755 78.097 51.1791 78.3249 50.2904 78.5224C49.4168 78.7199 48.528 78.8718 47.6317 78.8262C47.1911 78.8035 46.7505 78.7503 46.3175 78.6363C45.8693 78.5148 45.4515 78.3401 45.0261 78.1578C44.3273 77.8539 43.6436 77.5045 42.9979 77.0943C42.4206 76.7297 41.8433 76.2967 41.3419 75.8105C39.3593 76.6765 37.5818 77.7552 36.0929 79.0845C34.5508 80.4519 33.3126 82.0623 31.9453 83.5739C33.381 87.2809 33.3506 91.307 33.0924 95.2266C32.9328 97.6271 32.7277 100.217 34.133 102.276C34.5812 102.937 35.1889 103.522 35.5839 104.213C36.0701 105.049 36.1309 105.474 36.2752 106.408C36.298 106.56 36.2144 106.712 36.2372 106.864C36.4879 108.429 36.0625 109.812 36.2828 111.475C36.3891 112.25 37.2247 113.367 37.2551 114.073C37.3463 116.398 38.4933 118.464 39.2757 120.644C40.0202 122.718 40.3468 124.898 40.2557 127.07C40.005 127.518 39.8606 127.989 39.7315 128.476C39.6176 128.893 39.4732 129.281 39.2985 129.661C39.3061 129.653 39.3213 129.645 39.3289 129.638C39.3669 129.607 39.4277 129.645 39.4049 129.691C38.8959 130.633 38.5465 131.636 38.1819 132.631C37.954 133.238 37.7261 133.846 37.4526 134.439C37.1792 135.031 36.8601 135.609 36.5563 136.193C35.903 137.432 35.2497 138.662 34.6116 139.9C34.3306 140.447 34.0571 140.994 33.776 141.541C33.7077 141.906 33.6393 142.27 33.5785 142.635C33.5937 142.886 33.6013 143.144 33.6241 143.395C33.7608 144.891 33.9507 146.388 34.0875 147.884C34.2242 149.373 34.3001 150.869 34.209 152.358C34.1938 152.571 34.1786 152.791 34.1634 153.004C34.1634 153.05 34.1027 153.24 34.2014 153.262C34.3002 153.285 34.3989 153.3 34.4977 153.323C34.8851 153.407 35.2801 153.49 35.6675 153.566C36.4803 153.733 37.2855 153.893 38.0983 154.052C41.3419 154.675 44.6083 155.199 47.9051 155.518C51.2779 155.845 54.6734 155.944 58.069 155.815C61.4873 155.678 64.8904 155.344 68.286 154.926C69.9799 154.721 71.6663 154.485 73.3603 154.257C75.0391 154.03 76.7103 153.832 78.389 153.635C79.2778 153.528 80.159 153.414 81.0402 153.27C81.5111 153.194 84.8687 152.343 85.2713 152.092C85.9018 151.705 85.7271 150.907 85.7119 150.315C85.6967 149.646 85.7498 148.986 85.7802 148.325C85.8182 147.565 85.8562 146.805 85.9094 146.046C86.0309 144.352 86.2132 142.62 86.745 140.987C86.7526 140.956 86.7677 140.926 86.7753 140.896C86.745 140.82 86.7222 140.751 86.6918 140.675C85.5827 137.872 79.3158 129.645 79.1791 127.967H79.1942L79.1563 127.951Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.4' d='M66.7209 67.6597C67.5793 67.5761 68.4377 67.5154 69.296 67.4698C69.2505 67.4014 69.2125 67.3255 69.1669 67.2571C69.0834 67.128 68.901 67.0596 68.7415 67.1052C67.9363 67.3331 67.1539 67.5306 66.4019 67.6977C66.5082 67.6825 66.6222 67.6749 66.7285 67.6597H66.7209Z' fill='%23C2C2AC'/%3E%3Cpath d='M70.8379 72.2251C70.648 70.6223 70.1923 68.9663 69.3263 67.5306C68.2324 67.5762 67.131 67.6522 66.0523 67.8041C65.4902 67.8877 64.8825 67.9712 64.3659 68.2143C63.8721 68.4422 63.6291 68.7992 63.743 69.3613C64.0013 70.5312 64.966 71.5415 65.7104 72.4378C66.6448 73.5545 67.4348 74.8003 68.2172 76.0309C69.144 77.4818 70.0252 78.9707 70.7848 80.5203C72.2433 83.4829 73.3143 86.6809 73.4663 90.0081C73.5954 92.8415 73.1016 95.7509 72.1065 98.402C70.5341 102.603 67.5791 106.105 63.7962 108.497C59.9373 110.943 55.4555 112.28 50.9433 112.797C46.3019 113.336 41.5466 113.063 37.0041 111.984C36.7838 111.931 36.5635 111.878 36.3508 111.825C36.5939 112.561 37.2092 113.465 37.2395 114.073C37.3307 116.405 38.4777 118.464 39.2602 120.644C39.6628 121.761 39.9362 122.908 40.0957 124.07C46.8488 125.035 53.6855 125.399 60.4994 125.513C63.9101 125.566 67.3209 125.612 70.7316 125.536C73.3295 125.483 75.9351 125.338 78.5178 125.004C78.4722 122.877 79.4294 120.629 79.6345 118.57C79.8851 116.025 82.3387 114.043 82.3919 111.452C82.4147 110.404 83.8352 107.221 84.1542 106.522C85.7571 103.013 86.6079 96.8219 86.7826 93.1453C86.2053 90.3879 86.5623 76.4639 86.5471 76.4031C86.4028 75.5067 84.1618 76.8513 83.1667 77.0716C83.1363 77.0488 83.106 77.026 83.0756 76.9956C83.0832 77.026 83.0984 77.0488 83.106 77.0868C82.8097 77.14 82.6426 77.0868 82.7034 76.7981C82.7034 76.7753 82.711 76.7601 82.7185 76.7449C82.0349 76.3195 81.2145 76.0613 80.4093 75.8334C77.5834 75.0282 74.3474 74.3293 70.9063 73.7976C70.9367 73.2734 70.9063 72.7493 70.8379 72.2327V72.2251Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.68' d='M86.7821 93.1377C86.7061 94.5507 86.5466 96.3358 86.2808 98.1969C86.2656 98.2576 86.258 98.3184 86.2504 98.3792C86.182 98.8198 86.1136 99.2679 86.0377 99.7085H86.0301C85.9845 99.982 85.9389 100.255 85.8781 100.529C85.4528 102.755 84.883 104.904 84.1538 106.507C83.8347 107.206 82.4142 110.381 82.3915 111.43C82.3915 111.673 82.3611 111.916 82.3079 112.151C81.8977 114.407 79.8619 116.253 79.634 118.555C79.5201 119.786 79.125 121.085 78.8364 122.383C78.3046 122.376 77.7653 122.361 77.226 122.33C75.1826 122.239 73.1468 122.026 71.1186 121.806C69.0448 121.578 66.9786 121.335 64.92 120.986C63.9097 120.811 62.907 120.614 61.9043 120.37C61.4333 120.264 60.9547 120.143 60.4913 120.006C60.1951 119.915 59.8988 119.808 59.595 119.732C59.876 119.603 60.1571 119.451 60.423 119.307C61.4713 118.737 62.4512 118.054 63.4159 117.355C68.1788 113.906 81.0773 105.937 78.5477 89.6586C78.4566 89.0661 78.3502 88.4736 78.2135 87.8583C78.2135 87.8583 78.2135 87.8583 78.2135 87.8507C77.7121 85.5339 76.8993 83.0575 75.7219 80.414C75.7143 80.3836 75.6991 80.3532 75.6839 80.3228C75.6611 80.2772 75.6459 80.2316 75.6308 80.1861C75.5472 79.981 75.4864 79.7683 75.4332 79.5556V79.5404C75.3269 79.1606 75.2509 78.7807 75.1142 78.4161C74.8711 77.7856 74.5977 77.1703 74.4153 76.5171C74.3774 76.3803 74.3546 76.2436 74.3242 76.1069C74.3014 75.9853 74.6356 75.8562 74.7116 75.8106C74.9699 75.6511 75.2433 75.5219 75.5168 75.3928C75.7903 75.2713 76.0637 75.1497 76.3372 75.0358C76.3448 75.0282 76.3524 75.0282 76.3676 75.0206C76.3676 75.0206 76.3752 75.0206 76.3828 75.0206C76.4891 74.975 76.6031 74.9294 76.717 74.8839C78.0084 75.1725 79.2466 75.4916 80.4088 75.8182C81.214 76.0461 82.0344 76.3044 82.7181 76.7297C82.7181 76.7449 82.7029 76.7601 82.7029 76.7829C82.6421 77.064 82.8092 77.1248 83.1055 77.0716C83.0979 77.0412 83.0827 77.0108 83.0751 76.9804C83.1055 77.0108 83.1359 77.0336 83.1663 77.0564C84.1614 76.8437 86.4023 75.4991 86.5466 76.3879C86.5542 76.4563 86.2048 90.3803 86.7821 93.1377Z' fill='%23BBB99D'/%3E%3Cpath d='M34.1171 102.268C34.1475 102.314 34.1855 102.367 34.2234 102.42C34.2386 102.436 34.2462 102.451 34.2538 102.466C34.2766 102.496 34.307 102.534 34.3298 102.565C34.345 102.58 34.3526 102.595 34.3678 102.618C34.3982 102.656 34.4209 102.686 34.4513 102.724C34.4741 102.755 34.4969 102.785 34.5273 102.815C34.5425 102.838 34.5653 102.861 34.5805 102.884C34.7552 103.104 34.9375 103.317 35.1046 103.537C36.1757 101.41 40.6879 100.719 39.161 100.863C37.1252 101.053 36.0997 92.887 36.1833 91.945L41.4551 91.3601C41.9489 90.8512 42.4654 90.2738 42.9971 89.6509C43.8707 90.3726 44.7823 91.0563 45.785 91.5956C46.0888 91.7551 46.3927 91.907 46.6586 92.1273C47.1903 92.5603 47.4866 93.2136 47.7676 93.8441C47.9651 94.2847 48.1626 94.7632 48.0715 95.2342C47.9271 95.9938 47.1675 96.7687 46.6662 97.3232C46.0205 98.0221 45.3292 98.6829 44.6228 99.321C43.5289 100.309 42.3895 101.243 41.3184 102.253C40.2473 103.271 39.2066 104.312 38.1203 105.315C37.4443 105.937 36.7986 106.651 36.2896 107.441C36.2896 107.525 36.2972 107.601 36.3048 107.685V107.7C36.3048 107.776 36.3048 107.859 36.3048 107.935V107.95C36.3048 108.459 36.2668 108.961 36.2365 109.477C36.2365 109.53 36.2364 109.576 36.2288 109.629C36.2288 109.652 36.2288 109.675 36.2288 109.705C36.2288 109.774 36.2289 109.834 36.2213 109.903V109.963C36.2213 110.032 36.2213 110.108 36.2213 110.176V110.214C36.2213 110.282 36.2213 110.358 36.2213 110.434V110.45C36.2213 110.526 36.2213 110.602 36.2213 110.677V110.715C36.2213 110.791 36.2213 110.867 36.2288 110.943C36.2288 110.959 36.2288 110.974 36.2288 110.989C36.2288 111.065 36.2441 111.141 36.2441 111.224C36.2441 111.232 36.2441 111.247 36.2441 111.262C36.2517 111.346 36.2592 111.43 36.2744 111.513C36.2744 111.543 36.282 111.574 36.2896 111.597C36.2896 111.597 36.2896 111.612 36.2896 111.619C36.2896 111.65 36.2972 111.673 36.3048 111.695C36.3276 111.771 36.3428 111.832 36.3656 111.9C36.6163 112.63 37.2164 113.511 37.2392 114.103C37.2847 115.243 37.581 116.322 37.9684 117.385C38.1963 118.008 38.447 118.616 38.6976 119.239L38.7129 119.284C38.7432 119.352 38.766 119.413 38.7964 119.482C38.842 119.588 38.8876 119.702 38.9255 119.816C38.9255 119.831 38.9407 119.846 38.9483 119.869C39.0015 119.998 39.0471 120.127 39.1002 120.256V120.272C39.161 120.408 39.2066 120.545 39.2598 120.682C40.0042 122.756 40.3308 124.943 40.2397 127.108C40.2093 127.161 40.1865 127.215 40.1561 127.268C40.1485 127.283 40.1409 127.306 40.1257 127.321C40.1106 127.359 40.0954 127.389 40.0802 127.427C40.0726 127.45 40.0574 127.473 40.0498 127.496C40.0346 127.526 40.0194 127.556 40.0118 127.594C40.0042 127.617 39.989 127.64 39.9814 127.663C39.9662 127.693 39.9586 127.724 39.951 127.754C39.9435 127.777 39.9359 127.807 39.9207 127.83C39.9131 127.86 39.8979 127.883 39.8903 127.913C39.8827 127.944 39.8751 127.967 39.8599 127.997C39.8599 128.012 39.8523 128.027 39.8447 128.043C39.8143 128.134 39.7915 128.217 39.7687 128.308H79.2239C79.2239 128.308 79.2087 128.255 79.2011 128.233V128.21C79.2011 128.21 79.1859 128.172 79.1783 128.149C79.1783 128.134 79.1783 128.126 79.1707 128.111C79.1707 128.096 79.1707 128.081 79.1631 128.065C79.1631 128.035 79.1555 128.012 79.1555 127.989C79.1251 127.632 79.0036 127.291 78.8896 126.949C78.8896 126.85 78.8896 126.751 78.8896 126.66C78.8896 126.508 78.8137 126.417 78.7073 126.371C78.0389 123.872 79.3986 121.092 79.6417 118.6C79.6417 118.524 79.6569 118.448 79.672 118.38C79.672 118.38 79.672 118.365 79.672 118.357C79.6872 118.289 79.6948 118.221 79.71 118.152C79.71 118.145 79.71 118.129 79.71 118.122C79.7252 118.053 79.7404 117.985 79.7556 117.917C79.7556 117.902 79.7556 117.894 79.7632 117.886C79.7784 117.818 79.8012 117.75 79.8164 117.681C79.8164 117.674 79.8164 117.666 79.824 117.651C79.8468 117.583 79.8696 117.514 79.8923 117.446V117.431C79.9455 117.286 79.9987 117.142 80.0595 117.005V116.99C80.0899 116.922 80.1202 116.853 80.1506 116.785V116.77C80.1886 116.701 80.219 116.633 80.257 116.565V116.549C80.5608 115.934 80.9254 115.334 81.2673 114.726C80.8115 113.845 80.3557 112.964 79.7708 112.159C79.429 111.68 79.0416 111.232 78.6086 110.837C78.13 110.396 77.5907 110.047 77.0589 109.667C76.0106 108.908 75.0839 108.004 74.1192 107.138C73.0861 106.211 72.015 105.39 70.754 104.79C69.4626 104.175 68.1333 103.659 66.8799 102.975C65.6797 102.322 64.4567 101.706 63.264 101.038C62.0942 100.385 60.932 99.6932 59.8761 98.8728C58.6987 97.9613 57.5744 96.989 56.3818 96.1002C55.3411 95.3254 54.27 94.5961 53.199 93.8593C52.6748 93.5023 52.1963 93.1908 51.5886 93.0389C50.9733 92.8794 50.6998 92.4844 50.3124 91.9906C48.8007 90.1067 46.7877 88.709 44.7747 87.3645C46.8485 84.4931 48.702 81.1887 49.2185 78.7579C49.1501 78.7655 49.0894 78.7807 49.0286 78.7882H49.0134C48.9527 78.7958 48.8919 78.8034 48.8235 78.811H48.8083C48.6792 78.8262 48.5424 78.8414 48.4133 78.849H48.3905C48.3373 78.849 48.2842 78.849 48.2234 78.8566H48.1702C48.1246 78.8566 48.0791 78.8566 48.0335 78.8566H47.7828C47.7221 78.8566 47.6613 78.8566 47.5929 78.8566C47.1523 78.8338 46.7117 78.7806 46.2788 78.6667C45.8306 78.5452 45.4128 78.3705 44.9874 78.1881C44.2885 77.8843 43.6049 77.5349 42.9592 77.1247C42.3819 76.76 41.8045 76.327 41.3032 75.8409C39.3206 76.7069 37.543 77.7855 36.0541 79.1149C34.5121 80.4822 33.2739 82.0926 31.9066 83.6043C33.3423 87.3113 33.3119 91.3373 33.0536 95.257C32.8941 97.665 32.689 100.248 34.0943 102.306L34.1171 102.268ZM51.429 95.4849C51.429 95.4849 51.3987 95.4697 51.3835 95.4621C51.3455 95.4393 51.3835 95.3862 51.4139 95.4089C51.4366 95.4241 51.4518 95.4317 51.4746 95.4393C51.4822 95.4317 51.4974 95.4241 51.505 95.4089C51.5354 95.3786 51.581 95.4241 51.5506 95.4545L51.5354 95.4697C51.6038 95.5001 62.9678 102.686 66.8951 104.327C66.9407 104.236 66.9938 104.152 67.0546 104.061C67.0774 104.031 67.1382 104.061 67.1078 104.091C67.047 104.175 66.9938 104.259 66.9559 104.35C66.9862 104.365 67.0166 104.38 67.047 104.388C67.085 104.403 67.0698 104.464 67.0318 104.449C67.0014 104.433 66.9635 104.418 66.9331 104.403C66.3785 105.694 68.0193 107.73 70.6553 107.358C70.8528 107.328 71.0503 107.305 71.2478 107.297C71.3921 107.297 71.4529 107.335 71.5668 107.419C74.7117 109.599 74.4686 112.523 74.4686 112.523C74.5369 112.561 79.0492 114.103 77.6438 115.995C77.1577 116.648 76.2157 116.846 75.4561 116.975C75.0459 117.043 74.6357 117.089 74.2255 117.142C73.595 117.218 72.9721 117.309 72.3416 117.347C70.9515 117.431 69.5538 117.385 68.1637 117.324C66.7584 117.263 65.3682 117.218 63.9629 117.218C61.1371 117.21 58.3113 117.157 55.4931 117.013C54.0877 116.944 52.6824 116.808 51.2771 116.777C50.5858 116.762 49.9022 116.762 49.2109 116.732C48.5576 116.701 47.9347 116.603 47.2967 116.466C42.9668 115.547 42.6553 117.689 39.5484 112.326C37.224 108.307 42.9972 103.119 51.4366 95.4849H51.429Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M82.7191 76.7373C82.8406 76.8132 82.9621 76.8968 83.0761 76.988C82.9242 76.6157 82.8026 76.3955 82.7191 76.7373Z' fill='%239EA58E'/%3E%3Cpath d='M82.7191 76.7373C82.8406 76.8132 82.9621 76.8968 83.0761 76.988C82.9242 76.6157 82.8026 76.3955 82.7191 76.7373Z' fill='%23CCD1C0'/%3E%3Cpath d='M47.7452 64.5756C47.7148 64.6819 47.692 64.7958 47.6768 64.9098C47.5097 65.9353 47.6768 66.9988 48.125 67.9331C48.6795 69.1029 49.6291 70.0829 50.7989 70.645C51.399 70.9337 52.0371 71.1236 52.7055 71.1388C53.374 71.1615 54.0425 71.0476 54.6806 70.8501C56.0631 70.4247 57.3469 69.6271 58.3724 68.6016C58.4332 68.5408 58.4863 68.4876 58.5471 68.4269C52.6296 66.7785 49.6822 65.0845 48.596 64.0894C48.0338 63.5728 48.3301 63.7779 47.7528 64.568L47.7452 64.5756Z' fill='%23CCD1C0'/%3E%3Cpath d='M56.3969 102.39C55.9563 101.896 55.4777 101.433 55.0599 100.924C54.2851 99.9744 53.4799 98.7741 52.2113 98.4703C50.9731 98.174 49.6362 98.5766 48.717 100.005C48.2309 100.757 47.889 101.592 47.4637 102.382C46.9167 103.408 46.0507 104.205 45.3215 105.102C44.5239 106.089 43.8478 107.305 43.9921 108.619C44.1365 109.979 45.2531 111.111 46.4761 111.604C47.1598 111.878 47.8891 111.954 48.6107 111.84C49.4159 111.718 50.1831 111.43 50.9807 111.293C51.8011 111.148 52.6139 111.232 53.4419 111.285C54.2168 111.331 54.9916 111.331 55.6905 110.966C56.8147 110.381 57.5667 109.204 57.9162 108.011C58.3036 106.705 58.1972 105.299 57.5819 104.076C57.2705 103.453 56.8451 102.899 56.3893 102.382L56.3969 102.39Z' fill='%23CCD1C0'/%3E%3Cpath d='M39.6324 92.3325C39.4273 92.3021 39.2146 92.2869 39.0095 92.2489C38.6296 92.1805 38.1891 92.0438 37.8168 92.2337C37.6421 92.3173 37.4826 92.4616 37.3839 92.6363C37.3991 92.6135 37.4218 92.5907 37.4446 92.5679C37.4522 92.5679 37.4674 92.5679 37.4598 92.5831C37.2547 92.7654 37.2547 93.0693 37.2851 93.32C37.3231 93.601 37.4066 93.8745 37.4674 94.1556C37.5434 94.5202 37.4902 94.8848 37.4978 95.2494C37.4978 95.652 37.589 96.085 37.8928 96.3737C38.2043 96.6775 38.7056 96.7231 39.1082 96.594C39.3285 96.5256 39.526 96.3889 39.6779 96.2142C39.8451 96.0243 39.9742 95.7964 40.1413 95.5989C40.3084 95.3938 40.5287 95.2494 40.7414 95.0975C40.9389 94.9532 41.1288 94.7937 41.22 94.5658C41.3719 94.1935 41.3187 93.753 41.1592 93.3959C40.9921 93.0009 40.6731 92.6819 40.2781 92.5072C40.073 92.416 39.8603 92.3704 39.64 92.34L39.6324 92.3325Z' fill='%23CCD1C0'/%3E%3Cpath d='M68.3989 153.528C68.0191 148.15 64.6767 143.106 59.6935 141.579C56.6018 140.63 53.3354 141.169 50.1678 141.04C43.3387 140.759 43.2248 136.991 38.0365 134.621C37.8466 134.53 37.6491 134.454 37.4516 134.378C37.4516 134.393 37.4364 134.408 37.4288 134.423C37.1553 135.016 36.8363 135.593 36.5324 136.178C35.8792 137.416 35.2259 138.647 34.5878 139.885C34.3067 140.432 34.0333 140.979 33.7522 141.526C33.6838 141.891 33.6155 142.255 33.5547 142.62C33.5623 142.871 33.5775 143.129 33.6003 143.379C33.737 144.876 33.9269 146.372 34.0636 147.869C34.2004 149.358 34.2763 150.854 34.1852 152.343C34.17 152.556 34.1548 152.776 34.1396 152.989C34.1396 153.034 34.0788 153.224 34.1776 153.247C34.2763 153.27 34.3751 153.285 34.4738 153.308C34.8612 153.391 35.2563 153.475 35.6437 153.551C36.4565 153.718 37.2617 153.878 38.0745 154.037C38.5531 154.128 39.0316 154.219 39.5102 154.303C39.5785 154.121 39.6697 153.946 39.7761 153.779C41.4472 151.097 50.5932 146.228 56.1081 155.572C56.1613 155.663 56.2144 155.754 56.2676 155.853C56.8601 155.845 57.4526 155.83 58.0451 155.807C61.4635 155.67 64.8666 155.336 68.2622 154.918C68.3153 154.918 68.3761 154.903 68.4293 154.895C68.4445 154.44 68.4293 153.976 68.3989 153.528Z' fill='%23CCD1C0'/%3E%3Cpath d='M69.4402 87.0835C68.3007 86.5594 66.9866 86.5594 65.756 86.5822C65.1103 86.5898 64.4722 86.6125 63.8265 86.5822C62.9985 86.5518 62.1705 86.4682 61.3425 86.3695C60.5145 86.2783 59.6866 86.172 58.8586 86.1036C58.3192 86.058 57.7723 86.0352 57.233 85.9972C56.7468 85.9593 56.253 85.9061 55.7972 85.7466C55.4402 85.625 55.0604 85.4199 54.9237 85.0477C54.711 84.911 54.4907 84.7818 54.2628 84.6603C53.8906 84.4628 52.9182 83.9766 52.7283 84.6603C52.4549 85.6554 53.4804 86.2555 54.2172 86.6277C54.673 86.8632 55.144 87.0607 55.5997 87.2962C56.0555 87.5317 56.4657 87.8279 56.8607 88.147C57.438 88.6104 57.9774 89.1117 58.5471 89.5827C59.1168 90.0613 59.7169 90.4639 60.3702 90.8133C61.7072 91.5349 63.1277 92.1199 64.3887 92.9858C64.9584 93.3732 65.4749 93.8214 66.075 94.1633C66.5992 94.4671 67.1841 94.7178 67.7918 94.771C68.3919 94.8241 68.9768 94.6798 69.4706 94.338C69.9795 93.9885 70.3897 93.5024 70.6784 92.9554C71.1873 91.9679 71.3924 90.7829 71.2405 89.689C71.1645 89.1573 71.005 88.6256 70.7088 88.1698C70.3973 87.6836 69.9567 87.319 69.4402 87.0835Z' fill='%23CCD1C0'/%3E%3Cpath d='M79.1558 127.951C79.1254 127.594 79.0039 127.253 78.8899 126.911C78.8899 126.812 78.8899 126.713 78.8899 126.622C78.8899 126.47 78.814 126.379 78.7076 126.333C78.5481 125.726 78.5025 125.103 78.5405 124.472C76.8238 124.837 75.0994 125.148 73.3674 125.407C66.3713 126.463 59.2383 126.706 52.1738 126.03C48.6947 125.695 45.2384 125.148 41.8656 124.305C41.2655 124.153 40.6654 123.994 40.0729 123.827C40.2324 124.898 40.2932 125.984 40.2476 127.07C39.9969 127.518 39.8526 127.989 39.7235 128.476C39.6095 128.893 39.4652 129.281 39.2905 129.661C39.2981 129.653 39.3133 129.645 39.3209 129.638C39.3588 129.607 39.4196 129.645 39.3968 129.691C38.9562 130.504 38.6372 131.362 38.3257 132.221C38.7815 132.19 39.2373 132.198 39.6855 132.266C40.749 132.433 41.4858 133.041 42.1847 133.732C42.8455 134.393 43.5368 135.062 44.5167 135.343C45.1472 135.525 45.8385 135.571 46.4994 135.586C47.183 135.601 47.8667 135.571 48.5503 135.502C49.9709 135.365 51.3686 135.107 52.7663 134.879C54.1184 134.667 55.4782 134.545 56.8379 134.393C59.8005 134.059 62.8162 133.641 65.8091 133.937C67.9741 134.158 70.1086 134.689 72.0989 135.472C75.4792 136.809 85.9469 145.453 85.9621 145.499C85.9621 145.408 85.9773 145.332 85.9849 145.248V145.187C86.1216 143.721 86.3191 142.278 86.7825 140.88C86.7521 140.804 86.7293 140.736 86.6989 140.66C85.5899 137.857 79.3229 129.63 79.1862 127.951H79.1558Z' fill='%23BBB99D'/%3E%3Cpath d='M42.709 76.9121C42.671 76.8893 42.6331 76.8665 42.5951 76.8361C42.5571 76.8133 42.5267 76.7905 42.4887 76.7602C42.4584 76.745 42.4356 76.7222 42.4052 76.707C42.3596 76.6766 42.3216 76.6462 42.2836 76.6158C42.2684 76.6082 42.2532 76.593 42.238 76.5778C42.0102 76.4107 41.7975 76.236 41.5848 76.0461C43.7801 84.2501 65.1485 87.2126 78.6547 83.9614C81.1615 83.3537 85.1419 81.9788 86.57 91.2311C86.2966 86.5214 86.5472 76.4563 86.5396 76.4031C85.6964 76.7374 84.1544 76.8513 83.1593 77.0716C83.1289 77.0488 83.0985 77.026 83.0681 76.9956C83.0833 77.026 83.0909 77.0488 83.0985 77.0868C82.8023 77.14 82.6351 77.0868 82.6959 76.7981C82.6959 76.7753 82.7035 76.7601 82.7111 76.745C82.0274 76.3196 81.207 76.0613 80.4018 75.8334C77.576 75.0282 74.34 74.3293 70.8989 73.7976C70.9293 73.2735 70.8989 72.7493 70.8305 72.2328C70.6254 70.5312 70.124 68.7613 69.1517 67.2724C69.0681 67.1432 68.8858 67.0749 68.7263 67.1205C66.4702 67.7585 64.4192 68.146 62.5733 68.3283C62.3303 68.5713 62.072 68.8068 61.7985 69.0271C61.3807 69.3614 60.9401 69.6652 60.4919 69.9539C60.3856 70.0222 60.2868 70.083 60.1805 70.1514C59.6639 72.3467 58.4637 74.3293 56.709 75.765C55.5923 76.6766 54.2934 77.3679 52.926 77.816C52.0601 78.1047 51.1637 78.3326 50.2749 78.5301C49.4014 78.7276 48.5126 78.8795 47.6162 78.8339C47.1757 78.8111 46.7351 78.758 46.3021 78.644C45.8539 78.5225 45.4361 78.3478 45.0107 78.1655C44.3118 77.8616 43.6282 77.5122 42.9825 77.102C42.9141 77.0564 42.8533 77.0184 42.785 76.9728L42.7014 76.9197L42.709 76.9121Z' fill='%23BBB99D'/%3E%3Cpath d='M81.8454 68.7687C80.6224 69.9158 79.1335 70.7514 77.9789 71.982C77.394 72.6049 76.9078 73.3265 76.6799 74.1621C76.4824 74.861 76.4368 75.7042 76.961 76.2815C77.4016 76.7676 78.0852 76.9576 78.7233 77.0031C79.5741 77.0563 80.3793 76.8588 81.1845 76.6461C83.4254 76.046 85.6131 75.2712 87.8616 74.7015C89.624 74.2533 91.4395 73.8886 93.255 73.8127C93.7791 73.7899 94.3185 73.7899 94.8578 73.8279C93.5285 72.8404 92.0776 71.9668 90.5963 71.2603C89.3505 70.6754 87.9224 70.5995 86.6614 70.0677C85.5296 69.5891 84.5725 68.7687 83.4862 68.199C83.2051 68.0547 82.9088 67.9256 82.6126 67.8116C82.4227 68.1762 82.134 68.5029 81.8378 68.7763L81.8454 68.7687Z' fill='%233B754B'/%3E%3Cpath d='M65.9916 70.5995C63.5532 71.6174 57.8864 74.7319 59.5499 77.231C63.5228 83.1941 76.6796 66.9912 76.7479 66.9305C76.1782 66.9077 75.6161 66.8849 75.054 66.8469C74.7273 66.8241 74.3931 66.7937 74.0664 66.7558C72.9042 66.619 71.7192 66.262 70.6557 65.8518C70.6709 68.2978 68.1565 69.6955 65.9916 70.5995Z' fill='%233B754B'/%3E%3Cpath d='M84.3512 68.708C84.5335 69.3461 84.4955 69.9842 84.5335 70.6375C84.5639 71.2148 84.6323 71.8073 84.8677 72.339C85.0804 72.8176 85.4299 73.2278 85.9008 73.4709C86.5541 73.8127 87.3062 73.8735 88.0278 73.8735C89.9952 73.8659 91.9095 73.3569 93.8542 73.1139C92.8135 72.415 91.7196 71.7921 90.6105 71.268C89.3647 70.683 87.9366 70.6071 86.6757 70.0753C85.8477 69.7259 85.1184 69.1942 84.3588 68.708V68.7232L84.3512 68.708Z' fill='%232B6B40'/%3E%3Cpath d='M49.0291 64.7731C48.7481 64.4617 48.6417 64.3629 48.4746 63.8312C48.2088 62.9728 47.9429 62.7297 48.5202 62.5094C47.9201 62.4031 47.5934 63.3526 47.4567 65.001C47.2896 67.128 48.1556 67.3103 48.2695 67.3407C48.3075 67.3483 48.3075 66.8469 48.2923 66.1632C48.0492 66.0721 49.2039 64.9706 49.0291 64.7731Z' fill='%23CCD1C0'/%3E%3Cpath d='M9.9547 83.1183C9.82556 83.2778 6.45282 86.2784 6.45282 86.2784C6.45282 86.2784 12.8945 93.9354 16.723 90.2133C20.5515 86.4911 9.9547 83.1183 9.9547 83.1183Z' fill='%239EA58E'/%3E%3Cpath d='M12.7351 83.103L6.62769 85.9288C6.62769 85.9288 12.1046 91.8616 15.014 89.727C17.9234 87.5924 12.7275 83.103 12.7275 83.103H12.7351Z' fill='%23676D54'/%3E%3Cpath d='M14.3741 73.0526C14.1235 73.1134 8.5174 73.554 8.5174 73.554C8.5174 73.554 9.14028 86.0043 15.7415 85.1915C22.3426 84.3787 14.3741 73.0526 14.3741 73.0526Z' fill='%239EA58E'/%3E%3Cpath d='M14.7079 72.9617C14.4572 73.0224 8.85114 73.463 8.85114 73.463C8.85114 73.463 9.47402 85.9133 16.0752 85.1005C22.6764 84.2877 14.7079 72.9617 14.7079 72.9617Z' fill='%23676D54'/%3E%3Cpath d='M19.4263 67.1281L13.0758 67.6902C13.0758 67.6902 11.9288 70.3337 11.6325 73.5545H17.3601V83.8095H17.0562C23.9689 86.2023 19.4187 67.1356 19.4187 67.1356L19.4263 67.1281Z' fill='%239EA58E'/%3E%3Cpath d='M19.8134 67.1278L13.4629 67.6899C13.4629 67.6899 8.47977 79.1755 16.5926 83.4294C24.7055 87.6833 19.8058 67.1278 19.8058 67.1278H19.8134Z' fill='%23676D54'/%3E%3Cpath d='M81.2751 130.078C81.1156 128.909 80.8193 127.837 80.1509 126.804C79.8318 126.303 79.4748 125.817 79.2393 125.277C78.9583 124.639 79.0266 123.979 79.2089 123.325C79.3684 122.748 79.5507 122.216 79.5811 121.624C79.6191 120.963 79.5659 120.325 79.8698 119.709C80.2496 118.95 80.8801 118.312 81.1688 117.514C81.9056 115.516 79.0418 116.944 76.7401 117.468C76.0944 117.613 75.5247 117.605 74.8714 117.484C74.2486 117.362 73.6484 117.241 73.0027 117.294C72.3798 117.347 71.7645 117.506 71.1568 117.613C70.4276 117.742 69.7135 117.772 68.9691 117.742C67.4878 117.689 66.0142 117.681 64.5633 117.962C63.9024 118.091 63.2263 118.296 62.5427 118.304C61.8514 118.312 61.1601 118.061 60.5069 117.901C59.1395 117.56 57.643 117.613 56.2301 117.62C54.4526 117.62 52.6827 117.658 50.9051 117.605C49.986 117.575 49.082 117.59 48.1705 117.674C47.2741 117.757 46.4005 117.848 45.5345 117.598C44.7901 117.385 44.0685 116.99 43.4228 116.603C42.8682 116.276 42.3593 115.98 41.6832 115.919C40.992 115.858 40.3539 116.238 39.7386 116.451C38.9714 116.716 38.2573 116.489 37.6496 116.04C37.1938 115.699 35.9328 116.458 37.1862 119.041C37.4673 119.618 37.642 120.089 37.6724 120.735C37.6876 121.153 37.68 121.578 37.7559 121.996C37.8395 122.459 38.0218 122.885 38.2421 123.31C38.6827 124.153 39.2372 124.958 39.374 125.908C39.5183 126.873 38.827 127.693 38.5839 128.597C38.4776 129 38.5384 129.41 38.47 129.812C38.3105 130.754 36.4874 131.073 37.7408 132.091C37.7408 132.091 39.4195 131.028 40.9084 132.198C41.8503 132.935 42.0023 133.269 43.681 133.307C46.0663 133.36 48.8465 133.96 52.2421 133.755C53.6094 133.671 54.9312 133.375 56.3137 133.383C57.6354 133.383 58.904 133.816 60.2258 133.785C61.5703 133.755 62.8617 133.254 64.1759 133.048C71.4683 131.894 67.7841 133.451 73.0863 132.251C74.3701 131.962 75.5247 131.324 76.892 131.4C77.5225 131.438 78.0923 131.552 78.7076 131.37C78.981 131.286 79.2241 131.165 79.5128 131.134C80.0673 131.081 81.4574 131.544 81.2599 130.063L81.2751 130.078Z' fill='%233E8E5B'/%3E%3Cpath d='M80.158 126.812C79.839 126.311 79.482 125.824 79.2465 125.285C78.9654 124.647 79.0338 123.986 79.2161 123.333C79.3756 122.756 79.5579 122.224 79.5883 121.631C79.6263 120.97 79.5731 120.332 79.877 119.717C80.2568 118.957 80.8873 118.319 81.1759 117.522C81.9128 115.524 79.049 116.952 76.7473 117.476C76.6713 117.491 76.5878 117.507 76.5118 117.522C76.3979 117.894 76.2308 118.251 76.0029 118.57C75.5547 119.208 74.7799 119.793 73.8835 119.702C73.177 119.633 72.7517 119.041 72.5997 118.471C72.5086 118.114 72.4782 117.734 72.5314 117.362C72.068 117.431 71.6122 117.544 71.1564 117.628C70.5411 117.734 69.941 117.772 69.3181 117.765C69.3181 117.902 69.3029 118.038 69.2802 118.183C69.0751 119.368 68.2471 120.408 67.2899 121.213C66.4391 121.928 65.4364 122.55 64.335 122.93C63.0512 123.371 61.6839 123.546 60.3165 123.591C58.9188 123.637 57.5211 123.576 56.1234 123.622C55.3789 123.644 54.6269 123.599 53.8825 123.584C53.1153 123.568 52.3632 123.599 51.6112 123.72C50.1679 123.948 50.4034 125.24 45.3442 124.191C36.0919 122.277 38.6595 123.485 38.6595 123.485C38.5228 123.454 38.386 123.416 38.2569 123.371C38.6975 124.206 39.2368 125.004 39.3736 125.938C39.5179 126.903 38.8266 127.724 38.5835 128.627C38.4772 129.03 38.538 129.44 38.4696 129.843C38.3936 130.283 37.953 130.587 37.6416 130.891C39.3356 130.511 41.1663 130.663 42.8754 130.846C43.6503 130.929 44.4327 131.036 45.2075 131.111C46.4761 131.241 47.7371 131.377 48.9905 131.605C51.239 132.008 53.4267 132.623 55.5157 133.451C55.7815 133.436 56.0474 133.421 56.3209 133.421C56.6779 133.421 57.0273 133.451 57.3844 133.497C57.635 133.056 57.9845 132.654 58.3947 132.342C59.0404 131.841 59.9291 131.453 60.8027 131.674C61.6459 131.894 62.3903 132.486 62.8917 133.109C62.9448 133.178 62.998 133.246 63.0512 133.314C63.431 133.223 63.8108 133.14 64.1906 133.079C71.4831 131.924 67.7989 133.482 73.1011 132.281C74.3849 131.993 75.5395 131.355 76.9068 131.431C77.5373 131.468 78.107 131.582 78.7223 131.4C78.9958 131.317 79.2389 131.195 79.5275 131.165C80.0821 131.111 81.4722 131.575 81.2747 130.094C81.1152 128.924 80.8189 127.853 80.1504 126.827L80.158 126.812Z' fill='%233B754B'/%3E%3Cpath d='M15.9472 88.9673L10.0829 91.2462L8.96625 93.1756C8.96625 93.1756 12.9999 100.757 15.8789 98.1968C18.7579 95.6368 15.9472 88.9597 15.9472 88.9597V88.9673Z' fill='%239EA58E'/%3E%3Cpath d='M16.1373 88.7698L10.273 91.0487L9.15631 92.9857C9.15631 92.9857 13.1975 100.567 16.0689 98.0069C18.9479 95.4469 16.1373 88.7698 16.1373 88.7698Z' fill='%23676D54'/%3E%3Cpath d='M37.02 90.1599C37.02 90.1599 36.9896 90.2358 36.9668 90.2738C36.9668 90.2738 36.9618 90.2738 36.9516 90.2738C36.8833 90.4106 36.8225 90.5549 36.7541 90.6916C36.6098 91.0107 36.4731 91.3297 36.3515 91.6639L36.23 91.9602C36.0856 92.3248 35.9489 92.697 35.8122 93.0769C35.7286 93.3199 35.6375 93.5782 35.5539 93.8289L35.5311 93.8897L35.1665 94.8848C35.0601 95.1962 34.9386 95.5153 34.8171 95.8191C34.7335 96.0318 34.6423 96.2445 34.5436 96.4496C34.6044 96.3053 34.6651 96.161 34.7259 96.0242C33.8903 97.8549 32.8648 99.5869 31.8925 101.349C31.1253 102.724 30.3884 104.137 29.8035 105.596C29.8339 105.611 29.8643 105.634 29.8871 105.664C29.6972 106.15 29.53 106.636 29.3705 107.13C29.3553 107.183 29.3325 107.236 29.3098 107.29C29.1578 107.753 29.0287 108.216 28.8768 108.672C28.8236 108.839 28.7628 109.006 28.7096 109.173C28.6261 109.401 28.5425 109.644 28.4362 109.865C28.4362 109.895 28.421 109.933 28.3982 109.956C28.3298 110.115 28.2691 110.26 28.1855 110.412C28.1399 110.518 28.0868 110.624 28.026 110.723C27.9804 110.807 27.9424 110.883 27.8893 110.959L27.6766 111.293C27.5854 111.429 27.4866 111.551 27.3879 111.688C27.0992 112.075 26.7802 112.447 26.4688 112.82C26.408 112.888 26.3472 112.964 26.294 113.04C25.9902 113.405 25.7015 113.777 25.4508 114.179C25.3749 114.301 25.2989 114.43 25.2381 114.559C25.2153 114.574 25.2078 114.605 25.2002 114.635C25.1926 114.65 25.185 114.658 25.1774 114.666C25.1774 114.666 25.1622 114.696 25.1622 114.711C24.676 115.569 24.1899 116.443 23.6809 117.294C23.6733 117.309 23.6657 117.317 23.6581 117.324C23.6353 117.37 23.5973 117.431 23.567 117.476C23.567 117.476 23.5644 117.481 23.5594 117.491C23.2783 117.924 22.9896 118.388 22.6782 118.851C22.549 119.064 22.4047 119.269 22.2604 119.466C21.6831 120.287 21.0526 121.077 20.3537 121.806C20.2322 121.935 20.1106 122.057 19.9739 122.171C19.2371 122.854 18.4167 122.915 17.5659 122.763C16.5252 122.588 15.4465 122.072 14.4438 121.988L14.3375 121.966C14.3375 121.966 14.3223 121.966 14.3071 121.966C14.3071 121.966 14.2843 121.966 14.2691 121.95C12.2105 121.472 10.1671 120.894 8.3288 119.915C7.78947 119.633 7.27291 119.307 6.77915 118.95C6.63482 118.783 6.51328 118.631 6.39173 118.433C6.36135 118.388 6.33857 118.335 6.30819 118.289C6.22463 118.137 6.14865 117.978 6.08028 117.826C6.00432 117.666 5.92836 117.514 5.86759 117.347C4.24198 113.8 4.53066 110.465 5.60174 107.191C6.53608 104.319 8.07813 101.478 9.46825 98.5538C9.87845 97.6802 10.2886 96.799 10.6608 95.9027V95.8875C10.7064 95.7963 10.7444 95.7052 10.7824 95.6064C10.79 95.5912 10.7976 95.5836 10.7976 95.5684C11.6636 93.4415 12.4308 91.2158 13.1828 88.9673L13.8285 87.0074C14.1855 85.9211 14.5426 84.8349 14.9148 83.7486L15.5756 81.8267C15.5756 81.8267 15.5832 81.8267 15.5756 81.8267C15.644 81.614 15.72 81.4089 15.8112 81.2038C15.8871 80.9987 15.9783 80.8012 16.0618 80.5885C16.4113 79.7909 16.8367 79.0237 17.3304 78.2945C17.338 78.2793 17.3532 78.2793 17.3532 78.2641C17.5963 77.8995 17.8622 77.5348 18.1356 77.1854C18.2116 77.1018 18.2723 77.0183 18.3407 76.9347C18.4015 76.8588 18.4698 76.7676 18.5458 76.6916C18.6825 76.5321 18.8193 76.3802 18.956 76.2283C19.4118 75.7269 19.898 75.2559 20.4069 74.8154C20.5133 74.7166 20.6272 74.6179 20.7563 74.5191C20.9083 74.3824 21.083 74.2532 21.2425 74.1317C21.3261 74.0557 21.4248 73.995 21.516 73.9266C21.7059 73.7823 21.8958 73.6455 22.1009 73.5088C22.1389 73.4632 22.1996 73.4252 22.2604 73.3949C22.4883 73.2353 22.7238 73.091 22.9592 72.9543C23.2555 72.772 23.5518 72.5972 23.8632 72.4377C23.886 72.4301 23.9164 72.4073 23.9392 72.3997C23.9468 72.3845 23.9544 72.3845 23.9696 72.377C23.9696 72.377 24.0227 72.3542 24.0455 72.339C24.243 72.2326 24.4405 72.1339 24.638 72.0427C24.714 72.0047 24.79 71.9668 24.8659 71.9364C25.1318 71.8072 25.4129 71.6933 25.6939 71.5793C25.7623 71.5566 25.8307 71.5262 25.899 71.5034C26.1649 71.397 26.4308 71.3135 26.7042 71.2147C26.7802 71.1919 26.8485 71.1691 26.9245 71.1464C27.0157 71.0628 27.1448 71.002 27.3043 70.9489C28.6489 71.397 29.9782 71.9744 31.2316 72.6884C31.7937 72.9923 32.3331 73.3341 32.8648 73.6911C33.389 74.0481 33.8979 74.4507 34.3613 74.8685C34.4752 74.9597 34.5816 75.066 34.6879 75.1648C34.7031 75.1724 34.7107 75.1876 34.7259 75.2028C35.2273 75.6586 35.6982 76.1371 36.1008 76.6613C36.1312 76.6992 36.154 76.7296 36.1844 76.7752C36.2072 76.7904 36.2148 76.8056 36.23 76.8284C38.0151 79.2212 38.7899 82.2293 38.5316 85.1919C38.5316 85.2147 38.5316 85.2299 38.5316 85.2451C38.3797 86.9466 37.886 88.6254 37.0504 90.1599H37.02Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M38.4707 85.397C38.4859 85.3286 38.4935 85.2603 38.5011 85.1919C38.5163 85.1083 38.5315 85.0172 38.5315 84.9336C38.5846 84.531 38.6074 84.136 38.615 83.7258C38.615 83.665 38.615 83.6043 38.615 83.5359C38.615 83.3536 38.615 83.1789 38.5922 82.9966V82.8371C38.577 82.6699 38.5619 82.4952 38.5467 82.3281C38.5087 82.0318 38.4631 81.7356 38.4023 81.4393C38.3795 81.3026 38.3492 81.1583 38.3036 81.0139C38.296 80.9532 38.2808 80.8924 38.2656 80.8316V80.824C38.2428 80.7253 38.2124 80.6341 38.1896 80.543C38.1592 80.4442 38.1213 80.3531 38.0985 80.2543C38.0985 80.2543 38.0909 80.2239 38.0833 80.2087C38.0073 79.9884 37.9238 79.7757 37.8326 79.5706C37.4224 78.5831 36.8679 77.6564 36.1994 76.8208C36.1918 76.798 36.1766 76.7752 36.1538 76.7676C36.1234 76.722 36.1006 76.6917 36.0703 76.6537C35.7816 76.3042 35.4777 75.9624 35.1587 75.6358C34.9992 75.4762 34.8321 75.3091 34.6649 75.1572C34.4978 75.0053 34.3307 74.8533 34.156 74.709C34.08 74.6406 33.9965 74.5723 33.9205 74.5115C33.29 73.995 32.6216 73.5316 31.9227 73.1062C31.7328 72.9847 31.5277 72.8707 31.3378 72.7568C31.1403 72.6428 30.9352 72.5365 30.7301 72.4301C30.449 72.2858 30.168 72.1415 29.8869 72.0123C29.3248 71.7389 28.7474 71.4958 28.1625 71.2679C27.8663 71.154 27.5776 71.0552 27.2813 70.9489C27.1218 71.002 26.9927 71.0628 26.9015 71.1464C26.8256 71.1691 26.7572 71.1919 26.6813 71.2147C26.4078 71.3059 26.1419 71.397 25.876 71.5034C25.8077 71.5262 25.7393 71.5566 25.6709 71.5793C25.4203 71.6781 25.1848 71.7844 24.9417 71.8832C24.9037 71.8984 24.8809 71.9136 24.8429 71.9288C24.767 71.9592 24.6986 71.9971 24.6151 72.0351C24.4935 72.0883 24.372 72.1415 24.258 72.2022C24.1821 72.2402 24.0985 72.2858 24.0226 72.3314C23.9998 72.339 23.9694 72.3542 23.9466 72.3694C23.9314 72.3694 23.9238 72.377 23.9086 72.3921C23.8858 72.3997 23.8554 72.4225 23.8326 72.4301C23.5288 72.5896 23.2325 72.7644 22.9287 72.9467C22.6932 73.091 22.4577 73.2353 22.2298 73.3873C22.169 73.4176 22.1159 73.4556 22.0703 73.5012C21.9184 73.5924 21.7816 73.6911 21.6449 73.7975C21.5917 73.843 21.5309 73.8734 21.4854 73.919C21.3942 73.9874 21.3031 74.0481 21.2119 74.1241C21.0524 74.2532 20.8853 74.3748 20.7257 74.5115C20.6042 74.6103 20.4903 74.709 20.3763 74.8078C19.8674 75.2484 19.3812 75.7193 18.9254 76.2207C18.7811 76.365 18.6444 76.5245 18.5152 76.6841C18.4469 76.76 18.3785 76.8512 18.3101 76.9271C18.2418 77.0107 18.181 77.0943 18.105 77.1778C17.8316 77.5272 17.5657 77.8919 17.3226 78.2565C17.3226 78.2717 17.3074 78.2793 17.2998 78.2869C16.8213 79.0237 16.3883 79.7833 16.0312 80.581C15.9477 80.7861 15.8565 80.9836 15.7806 81.1962C15.697 81.4014 15.6211 81.614 15.5451 81.8191L14.8842 83.741C14.5196 84.8273 14.1625 85.9135 13.7979 86.9998L13.1523 88.9597C13.0535 89.3775 12.9471 89.7953 12.8256 90.2131C12.3015 92.1349 11.5191 94.0036 10.6303 95.8723V95.8875C10.3796 96.4116 10.1213 96.9282 9.86305 97.4523C9.74911 97.6878 9.63517 97.9309 9.51363 98.1588C8.02476 101.129 6.47511 104.099 5.57115 107.176C4.88749 109.492 4.57603 111.87 4.91786 114.369H4.94065C5.13055 115.258 5.39643 116.124 5.70788 116.982C5.74586 117.096 5.79144 117.218 5.82942 117.332C5.89779 117.499 5.96616 117.658 6.04212 117.818C6.11808 117.978 6.19404 118.129 6.2776 118.281C6.30799 118.327 6.33079 118.38 6.36117 118.426C6.94609 119.018 7.59936 119.504 8.29822 119.907C8.85275 120.234 9.43765 120.515 10.0454 120.75C11.4127 121.289 12.8484 121.639 14.2765 121.966C14.2917 121.966 14.2993 121.981 14.3069 121.966C15.4767 122.079 16.6769 122.649 17.8012 122.763C18.5456 122.847 19.2673 122.725 19.9357 122.163C20.0269 122.087 20.1256 122.011 20.2168 121.92C20.2548 121.897 20.27 121.874 20.3004 121.852C20.3307 121.821 20.3687 121.791 20.3915 121.753C20.5207 121.639 20.6346 121.517 20.7561 121.388C20.9384 121.191 21.1207 120.978 21.2955 120.75C21.6221 120.332 21.926 119.892 22.2222 119.444C22.7008 118.714 23.149 117.97 23.6199 117.301C23.6275 117.286 23.6351 117.279 23.6427 117.271C23.6731 117.598 23.7339 117.924 23.8099 118.236C23.8858 118.555 23.977 118.874 24.0757 119.185C24.1593 118.373 24.258 117.545 24.4403 116.747C24.4783 116.572 24.5239 116.39 24.5771 116.208C24.6226 116.033 24.6682 115.858 24.7366 115.683C24.7898 115.509 24.8505 115.334 24.9189 115.167C24.9873 115.007 25.048 114.855 25.124 114.696C25.124 114.681 25.1392 114.673 25.1392 114.658C25.1392 114.658 25.1544 114.628 25.162 114.62C25.162 114.59 25.1848 114.559 25.2 114.544C25.2607 114.407 25.3291 114.286 25.4127 114.164C25.5114 113.974 25.6254 113.792 25.7545 113.617C25.99 113.298 26.2559 112.987 26.5141 112.683C26.7952 112.349 27.0914 112.014 27.3573 111.673C27.4561 111.536 27.5548 111.414 27.646 111.278L27.8587 110.943C27.9118 110.867 27.9574 110.791 27.9954 110.708C28.0562 110.602 28.1094 110.503 28.1549 110.396C28.2385 110.244 28.2993 110.093 28.3676 109.941C28.3676 109.941 28.3701 109.936 28.3752 109.925C28.3752 109.925 28.3904 109.872 28.398 109.842C28.5043 109.614 28.5879 109.379 28.6715 109.151C28.7247 109.006 28.7778 108.862 28.8234 108.725L28.8386 108.649C28.8538 108.535 28.8842 108.421 28.907 108.315C28.9449 108.14 28.9905 107.95 29.0437 107.776C29.0437 107.776 29.0513 107.776 29.0437 107.76C29.2336 107.016 29.4767 106.294 29.7653 105.58C30.3427 104.122 31.0871 102.717 31.8543 101.334C32.8267 99.5717 33.8521 97.8397 34.6877 96.009C34.7029 95.9786 34.7105 95.9407 34.7257 95.9179C34.7485 95.8875 34.7637 95.8419 34.7789 95.8039C34.8017 95.7431 34.8093 95.69 34.8321 95.6292C35.1055 94.7632 35.4246 93.9124 35.7664 93.0693C35.7968 92.9933 35.8348 92.9021 35.8652 92.8262L35.888 92.7578C36.2526 91.8918 36.6324 91.0259 36.9818 90.1523C37.0958 89.894 37.1869 89.6357 37.2933 89.3775C37.3085 89.3395 37.3237 89.3167 37.3312 89.2787C37.7035 88.2912 38.0377 87.2885 38.2656 86.2478C38.3264 85.9667 38.3871 85.6781 38.4327 85.3818L38.4707 85.397ZM15.5375 99.2982C23.149 91.8235 26.2786 100.141 22.64 106.302C22.245 106.978 21.7664 107.631 21.1891 108.231C19.2597 110.305 16.3047 111.787 12.2331 111.703C8.81476 106.819 12.3394 102.398 15.5375 99.2982Z' fill='%23C2C2AC'/%3E%3Cpath d='M37.3697 89.2937C37.3697 89.2937 37.3469 89.3621 37.3317 89.3925C37.2102 89.6887 37.0734 89.9926 36.9443 90.2812C36.8759 90.418 36.8152 90.5623 36.7468 90.699C36.6025 91.0181 36.4733 91.3371 36.3442 91.6713L36.2227 91.9676C36.1239 92.2335 36.0251 92.5069 35.9264 92.7728L35.9036 92.8412C35.7745 93.1678 35.6529 93.502 35.539 93.8363L35.5162 93.8971L35.1516 94.8922C35.0604 95.1428 34.9617 95.4011 34.8553 95.6518C34.8173 95.743 34.7793 95.8417 34.7414 95.9405C34.7262 95.9708 34.7186 96.0088 34.7034 96.0316C33.8678 97.8623 32.8423 99.5943 31.87 101.357C31.1027 102.732 30.3659 104.144 29.781 105.603C29.8114 105.618 29.8418 105.641 29.8646 105.671C29.6747 106.157 29.5075 106.644 29.348 107.137C29.3328 107.191 29.31 107.244 29.2872 107.297C29.0517 108.398 28.7479 109.242 28.3985 109.956C28.3985 109.956 28.3959 109.961 28.3909 109.971C27.8743 111.012 27.2362 111.802 26.5374 112.721C26.5146 112.759 26.4842 112.797 26.4538 112.842C26.393 112.911 26.3323 112.987 26.2791 113.062C25.9221 113.533 25.5575 114.058 25.1852 114.665C25.1776 114.681 25.17 114.688 25.1625 114.696C25.1625 114.696 25.1472 114.726 25.1472 114.741C25.0713 114.893 25.0105 115.053 24.9422 115.212C24.8738 115.387 24.813 115.554 24.7599 115.729C24.6991 115.904 24.6535 116.078 24.6003 116.253C24.5471 116.435 24.5016 116.61 24.4636 116.792C24.2889 117.59 24.1825 118.418 24.099 119.231C24.0078 118.919 23.9091 118.608 23.8331 118.281C23.7647 117.97 23.704 117.643 23.666 117.324C23.6204 117.385 23.5824 117.438 23.552 117.499C23.552 117.499 23.5495 117.504 23.5444 117.514C23.2634 117.947 22.9747 118.41 22.6633 118.874C22.2455 119.527 21.8049 120.195 21.3187 120.796C21.144 121.023 20.9617 121.229 20.7794 121.434C20.6654 121.563 20.5439 121.684 20.4148 121.798C20.354 121.851 20.2932 121.912 20.24 121.958C20.1489 122.049 20.0577 122.125 19.959 122.201C19.2601 122.626 18.5461 122.786 17.8244 122.801C17.7333 122.801 17.6421 122.801 17.551 122.801C16.4799 122.748 15.4012 122.383 14.3301 122.003C14.3225 122.003 14.3149 122.003 14.2997 122.003C14.2997 122.003 14.277 122.003 14.2618 121.988C13.3578 121.677 12.4539 121.365 11.5575 121.236C12.5906 119.094 13.7376 115.63 15.6595 114.24C16.1077 114.042 15.6291 113.458 16.0849 113.602C19.0702 114.43 21.6681 118.198 22.5569 114.901C22.9139 112.219 25.565 110.822 26.431 108.444C26.6589 107.456 26.8184 106.233 26.8716 104.919C27.1451 97.8851 24.1293 88.2074 9.4533 98.5916C9.40013 98.6295 9.35457 98.6599 9.30139 98.6979C9.38495 98.5384 9.46091 98.3713 9.53687 98.2117C9.65842 97.9839 9.77235 97.7408 9.8863 97.5053C10.1826 96.8976 10.4788 96.2747 10.7675 95.6442C10.7751 95.629 10.7827 95.6214 10.7827 95.6062C11.5803 93.8591 12.3171 92.0739 12.8413 90.2584C12.9552 89.8406 13.0616 89.4304 13.1679 89.005L13.8136 87.0452C14.1706 85.9589 14.5276 84.8727 14.8999 83.7864L15.5607 81.8645C15.5607 81.8645 15.5683 81.8645 15.5607 81.8645C15.6291 81.6518 15.7051 81.4467 15.7962 81.2416V81.2264C16.7609 78.7045 18.4701 76.4484 20.6123 74.6632C20.6578 74.6253 20.6882 74.5949 20.7338 74.5569C20.8857 74.4202 21.0605 74.291 21.22 74.1695C21.3567 74.0479 21.4934 73.9492 21.6529 73.8428C21.7821 73.7365 21.9264 73.6377 22.0784 73.5466C22.1163 73.501 22.1771 73.463 22.2379 73.4326C22.4658 73.2731 22.7012 73.1288 22.9367 72.9921C23.233 72.8097 23.5292 72.635 23.8407 72.4755C23.8787 72.4527 23.9091 72.4375 23.947 72.4147L24.2661 72.2552C24.38 72.1945 24.5016 72.1337 24.6231 72.0881C24.6991 72.0501 24.775 72.0121 24.851 71.9818C24.889 71.9666 24.9118 71.9514 24.9498 71.9362C25.1928 71.8374 25.4283 71.7311 25.679 71.6323C25.7474 71.6095 25.8157 71.5791 25.8841 71.5564C26.15 71.45 26.4158 71.3665 26.6893 71.2677C26.7653 71.2449 26.8336 71.2221 26.9096 71.1993C27.0007 71.1158 27.1299 71.055 27.2894 71.0018C27.5857 71.1082 27.8743 71.2069 28.1706 71.3209C28.7555 71.5488 29.3328 71.7918 29.8949 72.0653C30.176 72.1945 30.4571 72.3388 30.7381 72.4831C30.8976 72.5667 31.0572 72.6578 31.2167 72.7414L31.3382 72.8173C31.5281 72.9313 31.7332 73.0452 31.9231 73.1668C32.622 73.5846 33.2905 74.0555 33.921 74.5721C33.9969 74.6329 34.0805 74.7012 34.1565 74.7696C34.2248 74.8152 34.2856 74.8683 34.3388 74.9215C34.4527 75.0127 34.559 75.119 34.6654 75.2178C34.8325 75.3697 34.9996 75.5368 35.1592 75.6963C35.4782 76.023 35.7821 76.3648 36.0707 76.7142C36.1011 76.7522 36.1239 76.7826 36.1543 76.8282C36.1771 76.8434 36.1847 76.8586 36.1999 76.8814C36.8683 77.7245 37.4229 78.6513 37.8331 79.6312C37.9166 79.8363 38.0078 80.049 38.0837 80.2693C38.0837 80.2769 38.0913 80.2921 38.0989 80.3073C38.1217 80.406 38.1597 80.4972 38.1901 80.6035C38.2129 80.6947 38.2508 80.7935 38.2736 80.8846C38.2888 80.953 38.304 81.0061 38.3116 81.0745C38.3572 81.2188 38.3876 81.3632 38.4104 81.4999C38.4712 81.7962 38.5167 82.0924 38.5547 82.3887C38.5775 82.609 38.5927 82.8369 38.6003 83.0496C38.6155 83.2319 38.6231 83.4142 38.6231 83.5889V83.7788C38.6231 84.189 38.5927 84.584 38.5395 84.9866C38.5395 85.0702 38.5243 85.1613 38.5091 85.2449C38.5091 85.2677 38.5091 85.2829 38.5091 85.2981C38.5091 85.3512 38.5091 85.3968 38.4863 85.45C38.2964 86.7945 37.9014 88.0935 37.3773 89.3469L37.3697 89.2937Z' fill='%23C2C2AC'/%3E%3Cpath d='M29.8872 105.649C29.6973 106.135 29.5302 106.621 29.3707 107.115C29.3555 107.168 29.3327 107.221 29.3099 107.274C29.2416 107.419 29.1656 107.593 29.082 107.768C29.082 107.776 29.082 107.768 29.082 107.783C28.8389 108.345 28.5807 109.037 28.3908 109.492C27.9198 109.561 27.7603 108.368 27.1981 108.383C26.9627 108.391 26.712 108.398 26.4461 108.414C24.8205 108.444 22.7543 108.345 21.2047 108.231C20.7565 108.201 20.3539 108.171 20.0121 108.14C20.0121 108.14 16.7304 111.855 15.8417 110.966C14.9605 110.077 18.8194 106.963 21.6453 106.613C21.8731 106.591 22.2378 106.461 22.648 106.309C23.795 105.854 25.3371 105.079 25.5573 105.033C25.9448 104.957 26.4005 104.904 26.8867 104.897C27.9806 104.859 29.158 105.033 29.8037 105.603C29.8341 105.618 29.8645 105.641 29.8872 105.671V105.649Z' fill='%23BBB99D'/%3E%3Cpath d='M80.1889 126.812C80.394 126.615 80.9181 126.432 79.809 125.855C79.7255 125.817 79.8774 125.635 79.885 125.589C79.923 125.407 79.9078 125.247 79.8698 125.065C79.8394 124.928 79.7711 124.822 79.6799 124.738C79.6267 124.579 79.4596 124.45 79.2241 124.48C65.2241 126.447 43.6127 125.338 40.4147 123.546C39.7766 123.189 38.9486 122.847 38.2117 123.151C37.4597 123.462 37.8395 124.298 38.3029 124.685C38.3561 125.012 38.3637 125.361 38.3257 125.756C38.0294 128.787 73.694 130.314 80.2876 127.412C80.6218 127.26 80.4699 126.888 80.1889 126.812Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M38.3029 124.685C38.3485 124.966 38.3561 125.27 38.3333 125.612C38.3637 125.582 38.3941 125.544 38.4321 125.513C38.6372 125.331 38.8802 125.247 39.1233 125.141C39.3436 125.035 39.6247 124.867 39.3816 124.609C38.979 124.191 38.2649 124.191 37.9535 123.667C37.9155 123.606 37.8775 123.531 37.8471 123.455C37.642 123.842 37.9459 124.396 38.2953 124.685H38.3029Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M80.189 126.812C80.3941 126.614 80.9183 126.432 79.8092 125.855C79.7256 125.817 79.8775 125.635 79.8851 125.589C79.9231 125.407 79.9079 125.247 79.87 125.065C79.8396 124.928 79.7712 124.822 79.68 124.738C79.6269 124.579 79.4597 124.45 79.2243 124.48C70.3594 125.726 58.4408 125.733 50.0849 125.126C49.0366 125.475 47.9655 125.733 46.8793 125.938C45.0258 126.295 43.1419 126.417 41.258 126.318C40.3009 126.265 39.3437 126.181 38.4018 126.03C39.8679 128.331 62.2238 129.653 74.074 128.582C74.4082 128.05 74.9248 127.617 75.5021 127.329C76.3301 126.911 77.3328 126.706 78.2443 126.934C78.7609 127.055 79.1863 127.329 79.4901 127.701C79.7864 127.61 80.0598 127.518 80.2877 127.412C80.622 127.268 80.4777 126.888 80.189 126.812Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M80.3867 127.351C80.5766 127.177 80.4323 126.88 80.1892 126.812C80.3943 126.614 80.9185 126.432 79.8094 125.855C79.7258 125.817 79.8777 125.635 79.8853 125.589C79.9233 125.407 79.9081 125.247 79.8702 125.065C79.8398 124.928 79.7714 124.822 79.6802 124.738C79.6271 124.579 79.4599 124.45 79.2245 124.48C72.9575 125.361 65.1561 125.627 58.1751 125.483C56.8078 125.969 55.3949 126.333 53.9896 126.683C51.2701 127.359 48.4595 127.913 45.6489 127.944C53.2224 128.893 65.0346 129.258 72.9727 128.665C74.3932 126.888 78.5104 125.589 80.4019 127.336L80.3867 127.351Z' fill='%23A05A07'/%3E%3Cpath d='M79.2162 124.48C76.2612 124.898 72.9569 125.171 69.5689 125.338C69.4778 125.422 69.3942 125.506 69.3031 125.582C68.7333 126.06 68.1028 126.478 67.4572 126.865C66.7431 127.291 65.9987 127.663 65.2162 127.99C64.8516 128.141 64.4718 128.293 64.0844 128.407C63.9401 128.453 63.8033 128.491 63.659 128.529C63.6286 128.673 63.6134 128.825 63.6058 128.969C66.181 128.969 68.6802 128.924 70.9515 128.81C71.9314 128.453 72.8961 128.043 73.838 127.617C74.9319 127.124 76.0334 126.645 77.0893 126.09C77.6362 125.802 78.1983 125.506 78.6921 125.149C78.9656 124.951 79.2238 124.738 79.4897 124.541C79.4137 124.503 79.3226 124.48 79.2238 124.495L79.2162 124.48Z' fill='%23A05A07'/%3E%3Cpath d='M39.2756 126.372C38.9717 126.303 38.6527 126.463 38.4628 126.683C38.1665 127.04 38.1438 127.807 38.0298 128.24C37.9083 128.704 38.2349 129.182 38.6831 129.44C39.1313 129.699 39.6706 129.782 40.1947 129.858C54.2783 131.841 71.3775 128.559 78.7839 124.586C79.498 124.207 80.2956 123.561 80.0373 122.854C79.9917 122.725 79.9082 122.604 79.9082 122.467C79.9082 122.125 80.4171 121.882 80.3715 121.54C80.3412 121.297 80.0221 121.16 79.7562 121.191C79.4904 121.221 79.2625 121.373 79.0422 121.51C73.9375 124.723 52.7362 129.387 39.2832 126.372H39.2756Z' fill='%23D58500'/%3E%3Cpath d='M79.9079 122.475C79.9079 122.125 80.4168 121.89 80.3712 121.548C80.3409 121.305 80.0218 121.168 79.7559 121.198C79.4901 121.229 79.2622 121.381 79.0419 121.517C77.0061 122.801 72.4103 124.313 66.7663 125.475C66.5004 125.893 66.2269 126.311 65.9307 126.706C65.4065 127.405 64.8064 128.02 64.1152 128.567C63.8037 128.81 63.4923 129.045 63.1656 129.281C69.6377 128.195 75.2893 126.478 78.7836 124.602C79.4977 124.222 80.2953 123.576 80.037 122.87C79.9914 122.74 79.9079 122.619 79.9079 122.482V122.475Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M79.9079 122.475C79.9079 122.125 80.4169 121.89 80.3713 121.548C80.3409 121.305 80.0295 121.168 79.756 121.198C79.4901 121.229 79.2622 121.381 79.0419 121.517C78.2443 122.019 77.0517 122.558 75.5628 123.097C75.5476 123.097 75.5173 123.401 75.5097 123.439C75.4793 123.553 75.4413 123.66 75.4033 123.766C75.3122 123.979 75.183 124.169 75.0235 124.336C74.8716 124.495 74.6513 124.685 74.431 124.738C74.2259 124.784 73.9828 124.791 73.8764 125.019C73.8461 125.088 73.8385 125.164 73.8309 125.247C73.8081 125.414 73.7625 125.589 73.641 125.703C73.5878 125.756 73.5194 125.794 73.4435 125.787C73.3827 125.787 73.3295 125.756 73.2764 125.726C73.0865 125.604 73.0029 125.369 72.9649 125.148C72.9269 124.928 72.9117 124.7 72.8358 124.488C72.775 124.336 72.6155 124.085 72.4256 124.085C72.3496 124.085 72.266 124.146 72.1977 124.169C72.1065 124.199 72.0078 124.222 71.909 124.252C70.4429 124.655 68.9541 125.019 67.4652 125.338C65.8092 125.695 64.1532 125.999 62.482 126.265C56.9823 129.866 43.4913 131.583 39.5108 126.599C39.4653 126.539 39.4121 126.478 39.3589 126.409C39.3361 126.409 39.3133 126.402 39.283 126.394C39.169 126.364 39.0475 126.379 38.9335 126.409L38.8727 126.432C38.8727 126.432 38.8348 126.447 38.812 126.463C38.812 126.463 38.8044 126.463 38.7968 126.463C38.7816 126.463 38.7664 126.478 38.7512 126.485C38.7512 126.485 38.736 126.485 38.736 126.493C38.7208 126.501 38.7056 126.508 38.6904 126.523C38.6828 126.523 38.6753 126.531 38.6677 126.539L38.6449 126.554L38.6145 126.577C38.6145 126.577 38.6069 126.584 38.5993 126.592C38.5537 126.63 38.5157 126.668 38.4777 126.713C38.1815 127.07 38.1587 127.838 38.0448 128.271C37.9764 128.544 38.0599 128.825 38.2347 129.061C38.2499 129.083 38.2651 129.106 38.2878 129.129C38.2878 129.129 38.3182 129.175 38.341 129.19L38.3562 129.205C38.3562 129.205 38.3866 129.235 38.4018 129.25C38.4018 129.25 38.417 129.258 38.417 129.266C38.4322 129.281 38.4473 129.296 38.4625 129.311C38.4701 129.311 38.4777 129.326 38.4929 129.334C38.5081 129.342 38.5233 129.357 38.5385 129.364C38.5537 129.372 38.5689 129.387 38.5765 129.395C38.5841 129.395 38.5993 129.41 38.6069 129.418C38.6297 129.433 38.66 129.448 38.6828 129.463C40.6047 130.572 59.6258 131.567 73.3827 126.911C73.246 126.691 73.3143 126.288 73.5954 126.242C73.8613 126.204 73.9752 126.44 74.036 126.683C75.7148 126.083 77.31 125.392 78.7761 124.609C79.4901 124.229 80.2877 123.584 80.0295 122.877C79.9839 122.748 79.9003 122.627 79.9003 122.49L79.9079 122.475Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M72.8053 126.432C72.6458 126.28 72.4862 126.03 72.4483 125.809C72.4331 125.711 72.4331 125.627 72.4862 125.544C72.5546 125.43 72.5014 125.224 72.4407 125.103C72.2659 124.905 72.2128 124.647 72.2811 124.381C72.3039 124.298 72.3343 124.199 72.3799 124.1C72.1292 124.169 71.8709 124.245 71.6127 124.313C71.5291 124.434 71.4531 124.571 71.4076 124.708C71.248 125.209 71.4076 125.756 71.6431 126.204C71.8709 126.63 72.1824 126.934 72.6458 127.101C72.6609 127.101 72.6761 127.108 72.6913 127.116C73.1167 126.979 73.5269 126.842 73.9447 126.691C73.5345 126.713 73.1015 126.698 72.8129 126.417L72.8053 126.432Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M79.9072 122.475C79.9072 122.125 80.4162 121.89 80.3706 121.548C80.3402 121.305 80.0212 121.168 79.7553 121.198C79.4895 121.229 79.2616 121.381 79.0413 121.517C78.3576 121.943 77.3853 122.399 76.1851 122.862C76.3142 123.029 76.413 123.211 76.4585 123.424C76.5041 123.652 76.4813 123.872 76.4281 124.1C76.3598 124.396 76.3218 124.655 76.375 124.951C76.4205 125.194 76.4661 125.437 76.4281 125.688C76.4281 125.703 76.4281 125.711 76.4281 125.718C77.2409 125.369 78.031 124.989 78.783 124.586C79.4971 124.207 80.2947 123.561 80.0364 122.854C79.9908 122.725 79.9072 122.604 79.9072 122.467V122.475Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M38.1437 128.886C38.1437 128.407 38.5159 128.24 38.8729 128.012C39.1464 127.837 39.3743 127.549 39.2603 127.199C39.1692 126.941 38.9565 126.744 38.8729 126.485C38.8653 126.455 38.8577 126.432 38.8501 126.409C38.8349 126.409 38.8197 126.425 38.8045 126.432C38.8045 126.432 38.7969 126.432 38.7893 126.432C38.7742 126.432 38.7589 126.447 38.7437 126.455C38.7437 126.455 38.7362 126.455 38.7286 126.463C38.7134 126.47 38.6982 126.478 38.683 126.493C38.6754 126.493 38.6678 126.508 38.6602 126.508C38.6526 126.508 38.645 126.516 38.6374 126.523L38.607 126.546C38.607 126.546 38.5994 126.554 38.5918 126.561C38.5463 126.599 38.5083 126.637 38.4703 126.683C38.174 127.04 38.1512 127.807 38.0373 128.24C37.9765 128.468 38.0373 128.711 38.1512 128.924V128.878L38.1437 128.886Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M72.7291 125.08C72.5468 124.883 72.2201 124.867 71.9846 124.974C71.7947 125.057 71.696 125.232 71.6884 125.407C71.6352 125.612 71.734 125.847 71.9011 125.999C72.1366 126.212 72.5392 126.28 72.7974 126.052C73.0861 125.787 72.9721 125.338 72.7367 125.08H72.7291Z' fill='%23A05A07'/%3E%3Cpath d='M72.6452 125.171C72.5009 125.019 72.2426 125.004 72.0527 125.088C71.9008 125.156 71.8173 125.293 71.8173 125.437C71.7717 125.604 71.8552 125.787 71.9844 125.908C72.1743 126.075 72.4933 126.128 72.6984 125.946C72.9339 125.733 72.8428 125.376 72.6529 125.171H72.6452Z' fill='%23A05A07'/%3E%3Cpath d='M73.3755 126.827C73.3755 126.827 73.3907 126.873 73.3983 126.888C72.1145 127.389 70.5953 125.004 72.3044 124.062C72.312 124.085 72.3196 124.1 72.3348 124.123C72.5551 124.062 72.7754 124.001 72.9881 123.933C72.859 123.584 72.6615 123.28 72.4184 123.363C69.2355 124.472 71.7119 128.673 73.9225 127.306C74.1655 127.154 74.1352 126.964 74.0136 126.614C73.8085 126.683 73.5958 126.759 73.3831 126.827H73.3755Z' fill='%23CCD1C0'/%3E%3Cpath d='M72.4107 123.363C72.0689 123.485 71.7878 123.637 71.5751 123.819C71.7802 123.887 71.9625 124.039 72.0537 124.229C72.1297 124.168 72.2132 124.115 72.3044 124.062C72.312 124.085 72.3196 124.1 72.3348 124.123C72.5551 124.062 72.7754 124.001 72.9881 123.933C72.8589 123.584 72.6614 123.28 72.4183 123.363H72.4107Z' fill='%23C2C2AC'/%3E%3Cpath d='M71.6734 126.987C71.7797 126.789 71.9468 126.615 72.1292 126.539C71.7645 126.189 71.5214 125.673 71.5518 125.171C71.4683 125.186 71.3923 125.186 71.3239 125.171C71.172 125.149 71.0277 125.088 70.9213 124.989C70.8302 125.703 71.1568 126.47 71.681 126.972L71.6734 126.987Z' fill='%23C2C2AC'/%3E%3Cpath d='M24.9185 88.975C24.7666 89.5372 24.5539 90.0917 24.3488 90.6158C24.1513 91.1248 23.9234 91.6261 23.6803 92.1123L22.8827 91.8768L22.6397 92.7048L21.8192 92.4617L21.7205 92.8112L20.7102 96.2751L20.5962 96.3207C16.9348 94.5127 10.554 91.7097 9.11066 93.3581C9.11825 93.2517 9.12583 93.1378 9.14103 93.0163C9.29295 91.3451 9.8171 87.79 10.6603 84.8427C10.6831 84.7591 10.7059 84.6831 10.7287 84.5996C11.4047 82.2979 12.2935 80.414 13.357 80.1785L24.9185 88.975Z' fill='%239EA58E'/%3E%3Cpath d='M24.9338 88.9219C24.9338 88.9219 24.9262 88.9599 24.9186 88.9751C24.7667 89.5372 24.554 90.0917 24.3489 90.6159C24.1514 91.1248 23.9235 91.6262 23.6804 92.1123C23.6653 92.1427 23.6501 92.1731 23.6349 92.2111C23.369 92.7276 23.0803 93.229 22.7689 93.7152C22.7157 93.7987 22.655 93.8899 22.5942 93.9734C22.07 94.7786 21.4699 95.5307 20.7863 96.2067C20.7635 96.2295 20.7331 96.2523 20.7103 96.2751C19.8063 95.8269 18.7049 95.3028 17.5427 94.7938C14.2383 93.3429 10.4401 92.044 9.14113 93.0163C9.08036 93.0619 9.0196 93.115 8.96643 93.1758C9.07278 91.7249 9.58931 87.942 10.4705 84.7971C10.4933 84.7135 10.5161 84.63 10.5464 84.554C10.6528 84.1742 10.7668 83.8096 10.8883 83.4602C10.9263 83.331 10.9718 83.2095 11.0174 83.0879C11.025 83.0727 11.0326 83.0576 11.0326 83.0424C11.0554 82.9816 11.0782 82.9284 11.101 82.8752C11.1086 82.8449 11.1238 82.8145 11.1314 82.7841C11.1694 82.6929 11.1997 82.6094 11.2301 82.5258C11.2453 82.5106 11.2529 82.4878 11.2605 82.465C11.3061 82.3511 11.3517 82.2447 11.4048 82.1384L11.496 81.9333C11.6251 81.6674 11.7543 81.4244 11.8834 81.2041C11.9366 81.1281 11.9822 81.0521 12.0353 80.9762C12.0809 80.9154 12.1265 80.847 12.1721 80.7863C12.1949 80.7559 12.2176 80.7179 12.248 80.6875C12.2632 80.6647 12.2784 80.6495 12.2936 80.6343C12.324 80.5964 12.362 80.5508 12.4076 80.5128C12.4455 80.4672 12.4911 80.4216 12.5367 80.3837C12.5367 80.3837 12.5418 80.3786 12.5519 80.3685C12.6127 80.3153 12.6658 80.2697 12.7266 80.2241C12.7342 80.2165 12.7418 80.2165 12.7418 80.2165H12.7494C12.8177 80.1634 12.8861 80.1254 12.9545 80.095C13.038 80.0494 13.1216 80.019 13.2052 80.0038L24.9338 88.9219Z' fill='%239EA58E'/%3E%3Cpath d='M14.0406 87.0912C11.8149 85.8226 10.1589 87.8432 10.7818 89.089C11.1464 89.8182 12.0883 90.0841 12.848 90.0461C15.5143 89.9094 15.3548 87.8356 14.0482 87.0912H14.0406Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M24.934 88.9296C24.934 88.9296 24.9265 88.9599 24.9189 88.9751C24.7669 89.5373 24.5542 90.0918 24.3491 90.6159C24.1516 91.1249 23.9237 91.6262 23.6807 92.1124C23.6655 92.1428 23.6503 92.1732 23.6351 92.2111C23.3692 92.7277 23.0805 93.2291 22.7691 93.7152C22.7159 93.7988 22.6552 93.8899 22.5944 93.9735C22.0703 94.7787 21.4701 95.5307 20.7865 96.2068C20.7637 96.2296 20.7333 96.2524 20.7105 96.2752C19.8066 95.827 18.7051 95.3028 17.5429 94.7939C18.462 90.2741 15.2108 85.9518 10.6606 84.8427C10.5998 84.8276 10.5315 84.8124 10.4707 84.7972C10.4935 84.7136 10.5163 84.63 10.5467 84.5541C10.653 84.1743 10.767 83.8097 10.8885 83.4602C10.9265 83.3311 10.9721 83.2095 11.0176 83.088C11.0252 83.0728 11.0328 83.0576 11.0328 83.0424C11.0632 82.9589 11.1012 82.8677 11.1316 82.7842C11.1696 82.693 11.1999 82.6094 11.2303 82.5259C11.2455 82.5107 11.2531 82.4879 11.2607 82.4651C11.3063 82.3512 11.3519 82.2448 11.4051 82.1385L11.4962 81.9334C11.6253 81.6675 11.7545 81.4244 11.8836 81.2041C11.9368 81.1282 11.9824 81.0522 12.0356 80.9762C12.0811 80.9155 12.1267 80.8471 12.1723 80.7863C12.1951 80.7559 12.2179 80.718 12.2483 80.6876C12.2634 80.6648 12.2786 80.6496 12.2938 80.6344C12.3242 80.5964 12.3622 80.5508 12.4078 80.5129C12.4458 80.4673 12.4913 80.4217 12.5369 80.3837C12.5369 80.3837 12.542 80.3787 12.5521 80.3685C12.6129 80.3078 12.6736 80.2622 12.7268 80.2242C12.7344 80.2166 12.742 80.2166 12.742 80.2166H12.7496C12.7496 80.2166 12.78 80.1862 12.7952 80.1786C12.8484 80.1406 12.9015 80.1103 12.9547 80.0951C13.0383 80.0495 13.1218 80.0191 13.2054 80.0039L24.934 88.9296Z' fill='%23949984'/%3E%3Cpath d='M24.9333 88.9296C24.9333 88.9296 24.9258 88.9599 24.9182 88.9751C24.7662 89.5373 24.5535 90.0918 24.3484 90.6159C24.1509 91.1249 23.923 91.6262 23.68 92.1124C23.6648 92.1428 23.6496 92.1732 23.6344 92.2111C23.3685 92.7277 23.0798 93.229 22.776 93.7228C22.7152 93.8064 22.662 93.8975 22.6013 93.9811C22.6013 93.9811 22.6013 93.9735 22.5937 93.9735C22.3278 93.6013 22.0316 93.2139 21.7201 92.8113C19.1374 89.5752 15.0582 85.6859 10.7283 84.5997L10.546 84.5541C10.6523 84.1743 10.7663 83.8097 10.8878 83.4602C10.9562 83.2551 11.0245 83.0652 11.1005 82.8753C11.1081 82.8449 11.1233 82.8145 11.1309 82.7842C11.1689 82.7006 11.1992 82.6094 11.2296 82.5259C11.2448 82.5107 11.2524 82.4879 11.26 82.4651C11.3056 82.3512 11.3512 82.2448 11.4043 82.1385L11.4955 81.9334C11.6246 81.6675 11.7538 81.4244 11.8829 81.2041C11.9361 81.1282 11.9817 81.0522 12.0348 80.9762C12.0804 80.9155 12.126 80.8471 12.1716 80.7863C12.1944 80.7559 12.2172 80.718 12.2475 80.6876C12.2627 80.6648 12.2779 80.6496 12.2931 80.6344C12.3235 80.5964 12.3615 80.5508 12.4071 80.5129C12.445 80.4673 12.4906 80.4217 12.5362 80.3837C12.5362 80.3837 12.5413 80.3787 12.5514 80.3685C12.6122 80.3078 12.6729 80.2622 12.7261 80.2242C12.7337 80.2166 12.7413 80.2166 12.7413 80.2166C12.7641 80.1938 12.7793 80.1862 12.7945 80.1786C12.8477 80.1406 12.9008 80.1103 12.954 80.0951C13.0376 80.0495 13.1211 80.0191 13.2047 80.0039L24.9333 88.9296Z' fill='%23949984'/%3E%3Cpath d='M74.0054 126.615C73.8003 126.683 73.5876 126.759 73.3749 126.827C73.3825 126.85 73.3901 126.873 73.3977 126.888C73.2154 126.956 73.0255 126.972 72.8431 126.934C72.8735 127.04 72.8887 127.146 72.8887 127.237C72.8887 127.329 72.8887 127.458 72.8431 127.564C73.1926 127.602 73.5572 127.526 73.9142 127.298C74.1573 127.146 74.1269 126.956 74.0054 126.607V126.615Z' fill='%23C2C2AC'/%3E%3Cpath d='M72.3792 124.108C72.5843 124.047 72.7818 123.994 72.9793 123.933C72.8502 123.584 72.6527 123.28 72.4096 123.363C72.2956 123.401 72.1893 123.447 72.0829 123.5C72.2501 123.652 72.364 123.88 72.3792 124.108Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M72.4103 123.363C72.3267 123.394 72.2507 123.424 72.1748 123.454C72.1064 123.515 72.0456 123.584 71.9773 123.644C71.7418 123.872 71.4911 124.108 71.362 124.412C71.0885 125.057 71.2632 125.862 71.6127 126.447C71.9317 126.987 72.4331 127.344 73.0787 127.283C73.4054 127.253 73.6333 127.116 73.8688 126.896C73.9219 126.85 73.9827 126.797 74.0359 126.744C74.0207 126.706 74.0055 126.66 73.9903 126.614C73.7852 126.683 73.5725 126.759 73.3598 126.827C73.3674 126.85 73.375 126.873 73.3826 126.888C72.0988 127.389 70.5796 125.004 72.2887 124.062C72.2963 124.085 72.3039 124.1 72.3191 124.123C72.5394 124.062 72.7597 123.994 72.9724 123.933C72.8433 123.584 72.6458 123.28 72.4027 123.363H72.4103Z' fill='%23C2C2AC'/%3E%3Cpath d='M71.8634 126.242C71.7646 126.098 71.681 125.938 71.6279 125.771C71.4228 125.817 71.2177 125.878 71.0126 125.946C71.0809 126.151 71.1721 126.349 71.2936 126.531C71.4152 126.371 71.6431 126.273 71.871 126.242H71.8634Z' fill='%23BBB99D'/%3E%3Cpath d='M73.9982 126.615C73.7931 126.683 73.5804 126.759 73.3677 126.827C73.3753 126.85 73.3829 126.873 73.3905 126.888C73.4816 127.025 73.5196 127.207 73.5424 127.351C73.5424 127.389 73.55 127.435 73.55 127.473C73.6639 127.427 73.7855 127.374 73.8994 127.306C74.1425 127.154 74.1121 126.964 73.983 126.615H73.9982Z' fill='%23BBB99D'/%3E%3Cpath d='M72.8276 125.635C72.8276 125.468 72.7516 125.293 72.6453 125.171C72.6149 125.141 72.5845 125.118 72.5465 125.095C72.0072 125.278 71.0197 125.46 70.5639 125.726C70.2904 125.885 70.4728 126.197 70.731 126.235C70.8222 126.25 71.9616 125.946 72.82 125.635H72.8276Z' fill='%23CCD1C0'/%3E%3Cpath d='M72.6453 125.171C72.6453 125.171 72.5846 125.118 72.5466 125.095C72.3795 125.149 72.1744 125.209 71.9541 125.262C71.8781 125.506 71.6502 125.726 71.4527 125.832C71.1565 125.999 70.7918 126.098 70.45 126.022C70.4956 126.121 70.6019 126.204 70.7311 126.22C70.8222 126.235 71.9617 125.939 72.8201 125.619H72.8277C72.8277 125.452 72.7517 125.278 72.6377 125.156L72.6453 125.171Z' fill='%23C2C2AC'/%3E%3Cpath d='M72.6457 125.171C72.6457 125.171 72.5849 125.118 72.5469 125.095C72.471 125.118 72.3874 125.149 72.3039 125.171C72.3418 125.392 72.1975 125.619 72.0608 125.787C72.0152 125.84 71.9696 125.885 71.9164 125.931C72.2203 125.84 72.5393 125.733 72.828 125.627H72.8356C72.8356 125.46 72.7596 125.285 72.6533 125.164L72.6457 125.171Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M75.3878 123.956C75.0687 123.865 74.7117 124.184 74.6965 124.495C74.6813 124.776 74.9092 125.057 75.1979 125.148C75.3802 125.209 75.5701 125.156 75.7068 125.057C76.1246 124.784 75.8815 124.1 75.3878 123.963V123.956Z' fill='%23A05A07'/%3E%3Cpath d='M75.3651 124.115C75.1296 124.047 74.8638 124.283 74.8638 124.51C74.8638 124.716 75.0157 124.921 75.2284 124.989C75.3651 125.035 75.5019 124.997 75.6006 124.921C75.9045 124.723 75.7222 124.222 75.3651 124.115Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M78.5938 122.93C78.5026 122.748 78.3279 122.611 78.0772 122.619C77.3404 122.634 77.272 123.591 77.8038 123.842C77.8493 123.872 77.9025 123.887 77.9557 123.903C78.4798 124.024 78.89 123.432 78.5938 122.93Z' fill='%23A05A07'/%3E%3Cpath d='M78.4494 123.021C78.381 122.892 78.2595 122.794 78.0771 122.794C77.5378 122.809 77.4922 123.5 77.8797 123.682C77.91 123.698 77.948 123.713 77.986 123.728C78.3658 123.819 78.6621 123.386 78.4494 123.021Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M68.9765 125.984C68.7714 125.855 68.5055 125.863 68.2777 125.946C68.0118 126.052 67.9206 126.349 67.989 126.584C68.1561 127.2 69.0069 127.268 69.2424 126.668C69.3487 126.402 69.212 126.144 68.9765 125.984Z' fill='%23A05A07'/%3E%3Cpath d='M68.8931 126.106C68.7336 126.007 68.5285 126.014 68.3614 126.075C68.1563 126.159 68.0879 126.379 68.1335 126.561C68.2626 127.032 68.9083 127.086 69.0982 126.622C69.1742 126.425 69.0754 126.22 68.8931 126.098V126.106Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M64.7989 126.759C64.7989 126.759 64.7838 126.759 64.7762 126.759C64.5103 126.698 64.2216 126.729 64.0545 126.964C64.0013 127.04 63.9785 127.124 63.971 127.207C63.895 127.511 64.0317 127.815 64.3128 127.997C64.4799 128.103 64.6774 128.119 64.8749 128.096C65.1028 128.065 65.2623 127.86 65.3383 127.686C65.5434 127.222 65.1712 126.812 64.7989 126.766V126.759Z' fill='%23A05A07'/%3E%3Cpath d='M64.7683 126.934H64.7531C64.5556 126.888 64.3505 126.911 64.2213 127.078C64.1834 127.131 64.1606 127.192 64.1606 127.26C64.1074 127.488 64.2061 127.708 64.4112 127.838C64.5328 127.914 64.6771 127.929 64.8214 127.906C64.9886 127.883 65.1025 127.731 65.1633 127.602C65.3152 127.26 65.0341 126.964 64.7683 126.926V126.934Z' fill='%23A05A07'/%3E%3Cpath d='M53.4802 91.9071C53.1991 91.6792 52.9636 91.4893 52.7509 91.3146V91.4817H49.4921V88.071C49.3934 88.033 49.2946 88.0406 49.211 88.0862C49.0743 87.9723 48.8844 87.9495 48.7249 88.1166C45.1394 92.0059 41.6603 96.0471 37.5128 99.3743C36.6468 100.073 35.7656 100.749 35.006 101.562C33.8817 102.77 33.2057 104.342 33.2513 105.998C33.2664 106.56 33.4108 107.13 33.7526 107.571C34.0261 107.92 34.4211 108.178 34.649 108.566C34.8769 108.953 34.9148 109.424 34.9908 109.865C35.1123 110.51 35.5225 111.369 36.2594 111.468C35.6061 107.472 38.4623 108.672 51.4975 94.5127C52.1736 93.7834 52.9332 93.1605 53.5333 92.3553C53.6245 92.2338 53.5941 91.9907 53.4726 91.8995L53.4802 91.9071Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M53.4806 91.9071C53.1996 91.6792 52.9641 91.4893 52.7514 91.3146V91.4817H49.4926V88.071C49.3938 88.033 49.2951 88.0406 49.2115 88.0862C49.0748 87.9723 48.8849 87.9495 48.7254 88.1166C47.6923 89.2332 46.6744 90.3651 45.6413 91.4817C46.0591 91.8464 46.3249 92.4541 46.4085 92.9554C46.5072 93.5631 46.3401 94.186 46.0743 94.733C45.778 95.3483 45.383 95.9104 44.9424 96.4269C44.3575 97.1182 43.6966 97.7411 43.0433 98.364C42.3597 99.0173 41.714 99.6933 41.0607 100.369C40.377 101.076 39.663 101.752 38.9261 102.405C38.3488 102.914 37.7715 103.453 37.0878 103.818C36.4801 104.145 35.7281 104.357 35.0748 104.016C34.5127 103.727 34.2468 103.127 34.2468 102.512C33.5783 103.545 33.2061 104.745 33.2441 105.991C33.2593 106.553 33.4036 107.123 33.7455 107.563C34.0189 107.913 34.4139 108.171 34.6418 108.558C34.8697 108.946 34.9077 109.417 34.9913 109.857C35.1128 110.503 35.523 111.361 36.2598 111.46C35.6066 107.464 38.4628 108.665 51.498 94.5051C52.1741 93.7758 52.9337 93.1529 53.5338 92.3553C53.625 92.2338 53.5946 91.9907 53.473 91.8995L53.4806 91.9071Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M53.4803 91.9071C53.1992 91.6792 52.9637 91.4893 52.751 91.3146V91.4817H49.4922V88.071C49.3935 88.033 49.2947 88.0406 49.2112 88.0862C49.0744 87.9723 48.8845 87.9495 48.725 88.1166C47.7983 89.1193 46.8867 90.1296 45.96 91.1323C46.279 91.383 46.5069 91.7476 46.6664 92.1198C46.9171 92.6971 47.1222 93.4112 46.9855 94.0417C46.8107 94.8241 46.1955 95.4622 45.6941 96.0547C45.056 96.7915 44.3951 97.5056 43.7039 98.1893C43.005 98.8805 42.2682 99.5338 41.5617 100.217C40.8856 100.871 40.2475 101.577 39.5563 102.223C38.9562 102.777 38.2877 103.271 37.6344 103.765C37.0343 104.213 36.3658 104.707 35.5986 104.821C35.158 104.882 34.6187 104.806 34.3072 104.449C34.0262 104.13 33.9578 103.681 33.9806 103.271C33.9806 103.157 33.9958 103.043 34.011 102.937C33.4945 103.871 33.221 104.92 33.2514 106.006C33.2666 106.568 33.4109 107.138 33.7527 107.578C34.0262 107.928 34.4212 108.186 34.6491 108.573C34.877 108.961 34.915 109.432 34.9909 109.872C35.1125 110.518 35.5227 111.376 36.2595 111.475C36.024 110.039 36.2443 109.28 37.2166 108.239C37.0951 108.042 37.0039 107.829 36.9508 107.601C36.5482 105.983 37.7863 104.555 38.9562 103.621C39.3132 103.34 39.6778 103.066 40.0273 102.77C40.4147 102.436 40.7869 102.086 41.1591 101.737C41.8808 101.045 42.6176 100.362 43.3544 99.6857C44.7521 98.3944 45.9372 96.8675 47.5248 95.7812C48.2541 95.2799 49.082 94.8773 49.9632 94.7633C50.3886 94.7102 50.814 94.733 51.2242 94.8165C51.3154 94.7178 51.4065 94.619 51.4977 94.5203C52.1737 93.791 52.9334 93.1681 53.5335 92.3629C53.6246 92.2414 53.5942 91.9983 53.4727 91.9071H53.4803Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M53.4797 91.9071C53.1987 91.6792 52.9632 91.4893 52.7505 91.3146V91.4817H49.4917V88.071C49.3929 88.033 49.2942 88.0406 49.2106 88.0862C49.0739 87.9723 48.884 87.9495 48.732 88.1166C47.9648 88.9446 47.2052 89.7802 46.4456 90.6158C46.5443 90.7069 46.6355 90.7981 46.719 90.9044C47.1444 91.4286 47.3799 92.0667 47.7369 92.6288C47.9268 92.9326 48.1547 93.2213 48.451 93.434C48.8004 93.6847 49.2182 93.8062 49.6284 93.9126C50.2437 94.0645 50.9122 94.224 51.3604 94.6798C51.4135 94.6266 51.4591 94.5658 51.5123 94.5127C52.1884 93.7834 52.948 93.1605 53.5481 92.3629C53.6393 92.2414 53.6089 91.9983 53.4873 91.9071H53.4797Z' fill='%23A05A07'/%3E%3Cpath opacity='0.58' d='M36.6545 108.938C36.5937 108.87 36.5405 108.801 36.495 108.725C36.2291 108.308 36.1531 107.837 36.1759 107.35C36.1987 106.75 36.343 106.089 36.1303 105.512C36.0696 105.353 35.1352 105.862 35.0289 105.922C34.7174 106.089 34.3908 106.279 34.0414 106.363C33.7831 106.431 33.5172 106.431 33.2817 106.317C33.3349 106.765 33.4792 107.214 33.7603 107.563C34.0338 107.913 34.4288 108.171 34.6567 108.558C34.8846 108.946 34.9225 109.417 34.9985 109.857C35.12 110.503 35.5302 111.361 36.2671 111.46C36.0924 110.366 36.1759 109.667 36.6469 108.938H36.6545Z' fill='%23A05A07'/%3E%3Cpath d='M71.1118 99.1159L70.7092 98.7361C70.7092 98.7361 70.3902 98.5918 70.1319 98.7893C69.8736 98.9868 66.5769 103.552 66.5313 103.97C66.4857 104.388 66.8503 104.836 66.8503 104.836L68.1797 104.646L71.2106 102.337L71.1042 99.1235L71.1118 99.1159Z' fill='%23A05A07'/%3E%3Cpath d='M79.0115 112.379H82.8249C82.5362 111.346 82.1868 110.336 81.6246 109.416C77.196 102.154 51.475 86.3845 48.5656 83.9993C48.1098 83.627 43.271 80.5809 42.6633 80.5809C42.5265 80.5809 42.4278 80.6417 42.367 80.7253C42.2075 80.7177 42.0404 80.786 41.972 80.9835C41.6681 81.9027 41.1516 82.8294 40.6047 83.627C40.2476 84.1512 39.7615 84.6525 39.5716 85.2602C39.1994 85.283 39.0854 85.8831 39.5032 85.9971C40.7946 86.3541 46.1424 89.9775 47.1527 90.7979C55.7441 97.8321 75.0539 107.229 79.0115 113.807V112.371V112.379ZM52.4549 89.9244C52.2346 90.76 50.5102 91.0334 50.7381 89.6357C50.7913 89.3015 51.0344 88.952 51.3838 88.8609C51.8092 88.7545 52.3182 88.9672 52.4625 89.4002C52.5233 89.5749 52.5081 89.7572 52.4549 89.9244ZM58.5319 95.7203C58.4028 95.5608 58.304 95.3709 58.2661 95.1734C57.9014 93.6162 60.1044 93.8744 60.1044 95.0671C60.1044 95.7963 59.0333 96.3584 58.5319 95.7203ZM65.794 100.954C65.3686 100.422 65.718 99.5109 66.4321 99.4197C66.8195 99.3666 67.4196 99.5565 67.5867 99.9515C68.0729 101.076 66.4549 101.79 65.794 100.954Z' fill='%23D58500'/%3E%3Cpath d='M44.4028 88.4355C44.6991 87.5619 45.0713 86.7187 45.4815 85.8983C45.9449 84.9868 46.4386 84.0752 47.0463 83.2548C47.0919 83.1941 47.1375 83.1333 47.1831 83.0725C45.5651 82.047 43.0887 80.5733 42.6633 80.5733C42.5265 80.5733 42.4278 80.6341 42.367 80.7253C42.2075 80.7101 42.0404 80.786 41.972 80.9835C41.6681 81.9027 41.1516 82.8294 40.6047 83.6346C40.2476 84.1588 39.7615 84.6601 39.5716 85.2678C39.1994 85.2906 39.0854 85.8907 39.5032 86.0047C40.2628 86.2098 42.4278 87.5543 44.2813 88.7849C44.3193 88.671 44.3572 88.5494 44.3952 88.4355H44.4028Z' fill='%23C77500'/%3E%3Cpath d='M81.6246 109.409C80.394 107.388 77.5075 104.707 73.922 101.835C73.7625 102.063 73.6182 102.299 73.4662 102.534C73.0181 103.256 72.5471 103.955 72.0837 104.669C71.6887 105.277 71.3317 105.915 71.0506 106.591C74.826 109.234 77.8417 111.756 79.0951 113.959C79.8243 115.235 80.2725 116.671 80.4928 118.122C80.7131 119.588 79.9838 120.454 79.604 121.1H80.1586C80.2573 120.963 80.3561 120.826 80.432 120.674C80.5612 120.424 80.6144 120.165 80.6371 119.884C80.6523 119.679 80.6675 119.474 80.7359 119.277C80.8802 118.844 81.1309 118.464 81.3056 118.046C81.5107 117.56 81.7006 117.066 81.8677 116.565C82.0197 116.117 82.1792 115.676 82.3691 115.235C82.559 114.795 82.7565 114.339 82.8628 113.868C82.9312 113.549 82.9616 113.23 82.9692 112.903C82.6577 111.68 82.2855 110.488 81.6246 109.401V109.409Z' fill='%23D58500'/%3E%3Cpath d='M82.3915 114.491C81.4496 114.802 80.7811 114.088 80.4392 113.275C79.9531 112.106 79.9531 110.769 80.1202 109.538C80.1658 109.211 80.2265 108.892 80.2645 108.566C80.2873 108.353 80.3101 108.14 80.3633 107.935C80.3785 107.882 80.3861 107.829 80.4013 107.776C78.7985 105.915 76.2917 103.704 73.3671 101.395C73.2152 102.724 72.8657 104.038 72.3492 105.277C72.1137 105.846 71.8402 106.401 71.5516 106.94C75.099 109.462 77.9021 111.855 79.1023 113.959C79.8315 115.235 79.4593 116.253 79.6872 117.704C79.9303 119.322 79.634 120.522 79.4745 121.274C79.6037 121.214 79.9151 121.191 80.0822 121.244C80.2114 121.077 80.3481 120.872 80.4392 120.682C80.5684 120.431 80.6215 120.173 80.6443 119.892C80.6595 119.687 80.6747 119.482 80.7431 119.284C80.8874 118.851 81.1381 118.471 81.3128 118.053C81.5179 117.567 81.7078 117.074 81.8749 116.572C82.0269 116.124 82.1864 115.683 82.3763 115.243C82.5054 114.939 82.6422 114.643 82.7409 114.331C82.6346 114.4 82.5206 114.453 82.3991 114.491H82.3915Z' fill='%23C77500'/%3E%3Cpath d='M79.5805 108.224C79.5577 107.707 77.0433 103.461 72.5387 100.681L69.1584 105.337C71.6804 106.56 73.5035 108.885 74.1112 111.619C75.4405 111.513 76.7015 111.977 77.7574 112.789C79.3906 110.222 79.5881 108.421 79.5805 108.224ZM74.5062 107.236C74.5062 107.236 74.4682 107.236 74.4454 107.236C73.4199 107.32 73.2756 106.105 73.7314 105.565C74.02 105.223 74.5518 105.185 74.9088 105.451C75.8811 106.173 75.2126 107.214 74.5062 107.236Z' fill='%23D58500'/%3E%3Cpath d='M71.5588 105.421C72.1133 104.069 72.9717 102.732 74.1112 101.767C73.6174 101.387 73.0933 101.023 72.5387 100.681L69.1584 105.337C69.8952 105.694 70.5637 106.143 71.1638 106.667C71.2702 106.241 71.3993 105.824 71.5588 105.421Z' fill='%23C77500'/%3E%3Cpath d='M73.3982 100.567C73.3375 100.476 71.7118 98.9185 71.1573 98.7058C70.8231 98.5766 70.4129 98.5842 70.1318 98.7969C70.2609 98.721 70.4736 98.7893 70.5572 98.9261C71.1877 99.9667 66.9338 104.509 66.759 104.449C66.5843 104.388 66.5464 104.16 66.5388 103.97C66.3944 104.433 66.6755 104.92 67.0021 105.277C67.7314 106.082 68.6809 106.484 68.8936 106.492C69.9647 106.522 73.2159 102.276 73.4514 101.045C73.4818 100.878 73.4894 100.696 73.3982 100.559V100.567Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M73.3975 100.567C73.3367 100.476 71.7111 98.9185 71.1565 98.7058C70.8223 98.5766 70.4121 98.5842 70.131 98.7969C70.2602 98.721 70.4729 98.7893 70.5564 98.9261C70.6628 99.1084 70.6248 99.397 70.4881 99.7465C70.9742 99.7692 71.2933 100.157 71.3541 100.62C71.4528 101.357 71.0958 102.071 70.6552 102.641C70.2906 103.112 69.7132 103.757 69.0372 103.56C68.6877 103.461 68.3991 103.241 68.2472 102.937C67.4875 103.81 66.8191 104.464 66.7507 104.441C66.576 104.38 66.538 104.152 66.5304 103.962C66.3861 104.426 66.6671 104.912 66.9938 105.269C67.723 106.074 68.6726 106.477 68.8853 106.484C69.9563 106.515 73.2076 102.268 73.443 101.038C73.4734 100.871 73.481 100.688 73.3899 100.552L73.3975 100.567Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M73.3975 100.567C73.3367 100.476 71.7111 98.9185 71.1565 98.7058C70.8223 98.5766 70.4121 98.5842 70.131 98.7969C70.2602 98.721 70.4729 98.7893 70.5564 98.9261C70.5944 98.9868 70.6172 99.0704 70.6172 99.1539C71.0654 99.1767 71.5819 99.3059 71.8782 99.6629C72.1669 100.012 72.3188 100.506 72.372 100.947C72.4251 101.448 72.3416 101.942 72.1289 102.398C71.9542 102.785 71.7187 103.134 71.4528 103.469C71.2021 103.78 70.9287 104.092 70.6248 104.365C70.3513 104.608 70.0323 104.851 69.6677 104.942C69.4854 104.988 69.3258 104.965 69.1511 104.92C68.9232 104.859 68.7409 104.889 68.5206 104.973C68.1788 105.109 67.8294 105.087 67.5331 104.859C67.3204 104.692 67.1381 104.464 67.0697 104.205C66.895 104.373 66.7811 104.464 66.7507 104.456C66.576 104.395 66.538 104.168 66.5304 103.978C66.3861 104.441 66.6671 104.927 66.9938 105.284C67.723 106.089 68.6726 106.492 68.8853 106.5C69.9563 106.53 73.2076 102.284 73.443 101.053C73.4734 100.886 73.481 100.704 73.3899 100.567H73.3975Z' fill='%23C77500'/%3E%3Cpath d='M25.5182 86.9012L11.7309 81.7053C10.7585 82.2447 10.4623 84.364 10.4775 86.8252C15.5442 86.5138 21.363 89.8258 24.7281 92.4161C24.7585 92.3173 24.7889 92.2186 24.8193 92.1122C25.1307 90.9956 25.3434 89.8485 25.4422 88.6863C25.4878 88.1014 25.5409 87.5013 25.5257 86.9012H25.5182Z' fill='%23949984'/%3E%3Cpath opacity='0.5' d='M40.3461 65.6771C40.2777 65.5176 40.3005 65.3504 40.3157 65.1833C40.2625 65.2517 40.2018 65.3277 40.141 65.3884L39.0699 66.5886C39.0091 66.7558 39.1003 66.9533 39.2674 67.014C39.7688 67.1887 40.2929 66.6418 40.6727 66.0569C40.536 65.9581 40.4069 65.8442 40.3385 65.6847L40.3461 65.6771Z' fill='%2334381B'/%3E%3Cpath d='M111.492 114.392C111.492 114.392 111.499 114.453 111.492 114.483C111.492 117.058 110.261 119.565 108.742 122.247L108.719 122.292H108.742C105.931 126.888 98.7756 123.644 96.5955 119.831C96.5803 119.816 96.5727 119.801 96.5727 119.785C96.5651 119.785 96.5651 119.778 96.5575 119.77C96.5119 119.702 96.4739 119.626 96.436 119.558L96.3676 119.444C96.3676 119.444 96.36 119.428 96.36 119.421H96.3524C96.3296 119.368 96.2992 119.322 96.2764 119.269C96.2309 119.193 96.1929 119.109 96.1625 119.033C96.1549 119.026 96.1473 119.018 96.1473 119.011C96.1397 118.995 96.1321 118.98 96.1245 118.957C96.1093 118.935 96.1017 118.912 96.0941 118.889C96.0865 118.882 96.0789 118.866 96.0789 118.851C96.0789 118.851 96.0637 118.851 96.0713 118.836C96.0637 118.828 96.0561 118.821 96.0561 118.813C96.0258 118.76 96.003 118.699 95.9802 118.646C95.9574 118.585 95.927 118.532 95.9118 118.471C95.8738 118.388 95.8434 118.312 95.8131 118.228C95.7371 118 95.6535 117.78 95.5776 117.552C95.5624 117.537 95.5624 117.522 95.5548 117.507C95.5168 117.37 95.4712 117.226 95.4332 117.089C95.4256 117.058 95.4105 117.02 95.4029 116.99C95.3877 116.929 95.3649 116.861 95.3497 116.8C95.3117 116.663 95.2737 116.534 95.2433 116.398C95.1294 115.949 95.0155 115.501 94.9015 115.045C94.8483 114.848 94.8027 114.643 94.7496 114.438C94.7192 114.339 94.6964 114.24 94.6736 114.141C94.6204 113.944 94.5673 113.746 94.5065 113.549C94.4989 113.511 94.4913 113.473 94.4761 113.435C94.4685 113.397 94.4609 113.351 94.4381 113.313C94.4305 113.283 94.4229 113.26 94.4153 113.23C94.385 113.139 94.3622 113.048 94.3318 112.964C93.8684 111.521 93.2455 110.176 92.1744 109.143H92.1668C91.9314 108.9 91.6807 108.695 91.3996 108.497H91.392C91.2629 108.376 91.1338 108.247 91.0122 108.118C90.9059 108.004 90.7919 107.882 90.6856 107.761C90.6476 107.715 90.602 107.662 90.564 107.616C90.4805 107.517 90.3969 107.419 90.3209 107.32C90.207 107.183 90.1006 107.039 90.0019 106.895C89.9867 106.887 89.9791 106.879 89.9791 106.872C89.8804 106.735 89.7892 106.606 89.698 106.469C88.627 104.866 87.8446 103.043 87.0166 101.304C86.8874 101.076 86.7583 100.848 86.614 100.62C86.4772 100.392 86.3329 100.172 86.1886 99.944C85.8999 99.5034 85.5884 99.0704 85.277 98.6526C84.6769 97.8398 84.0464 97.0498 83.4235 96.2522C83.0513 95.7736 82.6791 95.295 82.3296 94.8013C82.0866 94.4594 81.8435 94.11 81.6156 93.7606C81.5244 93.6162 81.4409 93.4719 81.3497 93.3276C80.2862 91.5424 79.1848 89.7269 78.2352 87.9114C78.0757 87.6076 77.9238 87.2885 77.7719 86.9771C77.3844 86.1871 77.0274 85.3895 76.7236 84.5994C75.6297 81.728 75.1588 78.8718 76.0095 76.0688C76.0475 75.9321 76.0855 75.7953 76.1387 75.6586C76.754 73.8811 77.9162 72.1263 79.7925 70.4172C79.8532 70.3564 79.9064 70.3032 79.9672 70.25C80.0128 70.2121 80.0659 70.1665 80.1191 70.1209H80.1267L80.1343 70.1057H80.1419C80.1419 70.1057 80.2027 70.0525 80.2407 70.0449C80.2407 70.0297 80.2635 70.0221 80.2786 70.0221C80.3242 69.9994 80.3698 69.969 80.4154 69.9462C81.6004 69.2321 82.7778 68.8295 83.9325 68.6852C84.7681 68.5713 85.596 68.594 86.4088 68.7308H86.4164C86.971 68.8219 87.5255 68.9587 88.0572 69.1486C88.1636 69.179 88.2699 69.2245 88.3763 69.2701C89.4474 69.6803 90.4729 70.2728 91.4452 70.9869C91.5211 71.0325 91.5895 71.0932 91.6579 71.1464C91.6807 71.1692 91.7111 71.1844 91.7338 71.2148C92.3415 71.6705 92.9265 72.1795 93.481 72.7188C93.4962 72.7416 93.519 72.7644 93.5418 72.7796C93.6785 72.9087 93.8076 73.0379 93.9368 73.1822C93.9444 73.1898 93.952 73.1974 93.9596 73.1974L94.1647 73.3569L94.2026 73.3949C95.4864 74.4052 96.8006 75.4383 98.0084 76.5777H98.016L98.0312 76.6005C98.1071 76.6689 98.1831 76.7373 98.2515 76.8056C98.2515 76.8132 98.2591 76.8132 98.2591 76.8132C98.2743 76.8208 98.2895 76.836 98.2971 76.8512C99.1478 77.6792 99.9378 78.568 100.614 79.5403C100.629 79.5631 100.637 79.5783 100.652 79.6011C100.682 79.6391 100.713 79.6846 100.735 79.7226C100.789 79.791 100.834 79.8669 100.872 79.9353C100.948 80.0417 101.009 80.148 101.077 80.2544C101.1 80.3075 101.115 80.3531 101.13 80.4063C101.13 80.4139 101.13 80.4215 101.146 80.4291C101.199 80.5658 101.252 80.7025 101.29 80.8469C101.32 80.9 101.343 80.9532 101.351 81.014L101.533 81.5153C101.601 81.6901 101.655 81.8572 101.708 82.0395C101.723 82.0851 101.738 82.1306 101.753 82.1838C101.837 82.4117 101.905 82.6396 101.974 82.8751C102.209 83.6803 102.422 84.4855 102.604 85.2907C102.627 85.3667 102.642 85.4502 102.657 85.5262C102.68 85.6097 102.695 85.6933 102.71 85.7769C102.999 87.0378 103.235 88.3064 103.47 89.5826C103.979 92.4084 104.45 95.257 105.248 98.0221C105.529 99.3362 105.954 100.612 106.463 101.858C107.443 104.297 108.704 106.636 109.745 109.022C110.519 110.769 111.165 112.539 111.492 114.392Z' fill='%23C5CAB9'/%3E%3Cpath opacity='0.4' d='M111.492 114.392C111.644 116.329 110.223 121.077 107.587 123.591C105.194 125.012 101.465 123.112 98.9654 122.155H98.9503C98.8667 122.102 98.7832 122.057 98.6996 122.003C97.826 121.494 97.1196 120.674 96.5954 119.831C96.5802 119.816 96.5802 119.793 96.5574 119.77C96.5498 119.77 96.5498 119.763 96.5498 119.755C96.4131 119.535 96.284 119.307 96.1852 119.071C96.17 119.064 96.1624 119.048 96.1624 119.033C96.1472 119.018 96.1396 118.995 96.1244 118.973V118.957C96.1244 118.957 96.0865 118.889 96.0789 118.851C96.0561 118.828 96.0561 118.805 96.0409 118.783C95.8054 118.236 95.5927 117.666 95.4332 117.089H95.4256C94.6508 114.43 94.3469 111.414 92.3795 109.302C92.3719 109.302 92.3719 109.295 92.3643 109.295C92.0225 109.052 91.7034 108.778 91.3995 108.497H91.392C89.3182 106.53 88.2243 103.833 87.0165 101.304C85.5352 98.5841 83.3019 96.3432 81.6155 93.7604C77.0046 86.3464 71.596 77.1094 80.1266 70.1284H80.1343C80.1343 70.1284 80.2026 70.0676 80.2406 70.0448C80.2406 70.0296 80.2634 70.022 80.2786 70.022C88.2623 65.4794 92.6605 72.8174 98.259 76.8131C98.3046 76.8511 98.3502 76.8891 98.3881 76.927C98.3957 76.927 98.4033 76.9346 98.4033 76.9422C99.3832 77.7854 100.059 78.5451 100.614 79.5402C101.776 81.4392 102.103 83.6574 102.726 85.7767H102.718C88.4826 92.5906 91.6274 108.923 108.127 105.732C109.623 109.059 111.233 111.194 111.492 114.392Z' fill='%23C2C2AC'/%3E%3Cpath d='M109.396 119.041L109.381 119.049C109.1 119.246 108.818 119.436 108.53 119.618C108.241 119.808 107.945 119.983 107.649 120.158C107.352 120.325 107.056 120.492 106.752 120.651C106.486 120.788 106.221 120.917 105.947 121.046C105.894 121.077 105.841 121.1 105.788 121.122C104.998 121.487 104.2 121.814 103.38 122.087C103.357 122.102 103.326 122.11 103.304 122.117C103.19 122.163 103.076 122.201 102.969 122.239C102.643 122.345 102.316 122.444 101.989 122.535C101.951 122.55 101.921 122.558 101.891 122.558C101.853 122.566 101.822 122.573 101.792 122.581C101.769 122.588 101.754 122.588 101.739 122.588C101.617 122.619 101.496 122.634 101.374 122.649H101.366C101.23 122.664 101.093 122.672 100.956 122.672C100.873 122.672 100.789 122.664 100.698 122.657C100.409 122.642 100.121 122.581 99.8397 122.505C99.8245 122.505 99.8169 122.505 99.8093 122.505C99.513 122.376 99.2319 122.269 98.9661 122.163C98.8749 122.11 98.7838 122.064 98.7002 122.011C98.6015 121.958 98.5103 121.897 98.4192 121.836C98.3356 121.768 98.252 121.707 98.1685 121.646C98.1229 121.616 98.0849 121.586 98.0469 121.548C98.0317 121.54 98.0241 121.533 98.0089 121.517C97.933 121.457 97.857 121.388 97.7886 121.32C97.7583 121.297 97.7279 121.267 97.6975 121.236C97.6367 121.175 97.5759 121.115 97.5228 121.054C97.4772 121.001 97.424 120.948 97.3784 120.894C97.3405 120.856 97.3101 120.818 97.2721 120.78C97.2341 120.735 97.1961 120.682 97.1582 120.636C97.1126 120.591 97.0822 120.545 97.0518 120.499C97.0366 120.492 97.029 120.484 97.0366 120.477C97.0366 120.477 97.0341 120.472 97.029 120.461C97.029 120.461 96.991 120.408 96.9607 120.378C96.8239 120.203 96.7024 120.021 96.596 119.839C96.5808 119.823 96.5732 119.808 96.5732 119.793C96.5732 119.793 96.5581 119.785 96.5581 119.778C96.5125 119.709 96.4745 119.633 96.4365 119.565L96.3681 119.451C96.3681 119.451 96.3605 119.436 96.3605 119.428H96.353C96.353 119.428 96.3302 119.375 96.3226 119.345H96.315C96.2694 119.254 96.2238 119.162 96.1858 119.079C96.1706 119.071 96.1631 119.056 96.1631 119.041C96.1479 118.995 96.1251 118.95 96.1023 118.904H96.0947C96.0871 118.897 96.0795 118.881 96.0795 118.866C96.0795 118.866 96.0643 118.866 96.0719 118.851C96.0643 118.843 96.0567 118.836 96.0567 118.828C96.0111 118.714 95.9655 118.6 95.9124 118.486C95.8744 118.403 95.844 118.327 95.8136 118.243C95.7376 118.015 95.6541 117.795 95.5781 117.567C95.525 117.415 95.4794 117.263 95.4338 117.104C95.4262 117.073 95.411 117.036 95.4034 117.005C95.3882 116.944 95.3654 116.876 95.3502 116.815C95.3123 116.678 95.2743 116.549 95.2439 116.413C95.2135 116.306 95.1831 116.192 95.1527 116.086C95.0692 115.744 94.9856 115.402 94.9021 115.06C94.8489 114.863 94.8033 114.658 94.7501 114.453C94.7197 114.354 94.697 114.255 94.6742 114.157C94.621 113.959 94.5678 113.762 94.507 113.564C94.4994 113.526 94.4919 113.488 94.4767 113.45C94.4691 113.412 94.4615 113.367 94.4387 113.329C94.4311 113.298 94.4235 113.275 94.4159 113.245C94.3931 113.161 94.3703 113.078 94.3475 113.002C94.3399 112.994 94.3399 112.987 94.3323 112.979C94.3247 112.934 94.3171 112.903 94.302 112.865C94.264 112.744 94.226 112.622 94.1804 112.501C94.1804 112.485 94.1728 112.463 94.1652 112.447C94.1196 112.295 94.0665 112.151 94.0057 112.007C93.9449 111.84 93.8766 111.68 93.8082 111.521C93.7398 111.361 93.6639 111.202 93.5803 111.05C93.5043 110.898 93.4208 110.746 93.3296 110.594C93.1701 110.32 92.9878 110.047 92.7903 109.796C92.7523 109.743 92.7143 109.697 92.6763 109.652C92.5852 109.538 92.4864 109.424 92.3877 109.318C92.3801 109.318 92.3801 109.31 92.3725 109.31C92.3117 109.264 92.2434 109.211 92.1826 109.158H92.175C92.0762 109.082 91.9775 109.006 91.8787 108.923C91.7116 108.794 91.5597 108.664 91.4078 108.512H91.4002C91.271 108.391 91.1419 108.262 91.0203 108.133C90.914 108.019 90.8001 107.897 90.6937 107.776C90.6557 107.73 90.6102 107.677 90.5722 107.631H90.5646C90.481 107.533 90.405 107.434 90.3291 107.335C90.2151 107.198 90.1088 107.054 90.0101 106.91C89.9949 106.902 89.9873 106.894 89.9873 106.887C89.296 105.983 88.6655 105.003 88.0502 104C87.3285 102.846 86.6297 101.661 85.8853 100.552C85.4523 99.8907 85.0041 99.2602 84.5255 98.6677C84.4724 98.5993 84.4268 98.5309 84.3736 98.4626C82.4669 95.8418 80.2868 92.8337 78.5548 89.6813C77.5293 87.805 76.6634 85.8755 76.1088 83.9461C75.691 82.4876 75.4404 81.0215 75.4404 79.5782V79.563C75.4404 78.0285 75.7138 76.5245 76.3443 75.0584C76.4355 74.8305 76.5342 74.6026 76.6558 74.3823C76.7317 74.2304 76.8153 74.0785 76.8912 73.9265C76.9748 73.7822 77.0584 73.6379 77.1495 73.4936C77.6357 72.7187 78.2282 71.9591 78.9499 71.2223C79.0714 71.1083 79.1853 70.9868 79.3145 70.8728C79.3904 70.7969 79.4664 70.7209 79.5424 70.6525C79.6791 70.5234 79.8234 70.3943 79.9753 70.2651C80.0209 70.2272 80.0741 70.1816 80.1273 70.136H80.1349L80.1425 70.1208H80.1501C80.1501 70.1208 80.1729 70.1056 80.1881 70.098C80.2032 70.0828 80.226 70.0676 80.2488 70.06C80.2488 70.0448 80.2716 70.0372 80.2868 70.0372C80.3476 70.0069 80.4083 69.9841 80.4615 69.9613C82.8316 68.8978 84.761 68.5712 86.417 68.7459H86.4246C86.5993 68.7611 86.7664 68.7839 86.9335 68.8142C86.9639 68.8142 86.9867 68.8142 87.0095 68.8294C88.6807 69.1257 90.0936 69.9385 91.4533 71.002C91.5293 71.0476 91.5977 71.1083 91.666 71.1615C91.6888 71.1843 91.7192 71.1995 91.742 71.2299C92.3269 71.6932 92.8966 72.2022 93.4891 72.7339C93.5043 72.7567 93.5271 72.7795 93.5499 72.7947C93.755 72.9846 93.9677 73.1745 94.1728 73.372L94.2108 73.41C94.6286 73.7898 95.054 74.1772 95.4946 74.5722C95.5174 74.5798 95.5325 74.6026 95.5477 74.6178C96.315 75.2863 97.1278 75.9624 98.0089 76.6004H98.0241L98.0393 76.6156C98.1685 76.7144 98.2824 76.8283 98.3963 76.9423C98.4039 76.9423 98.4116 76.9499 98.4116 76.9575C99.042 77.5424 99.6194 78.1653 100.121 78.8262C100.121 78.8262 100.123 78.8287 100.128 78.8338C100.257 79.0009 100.379 79.1756 100.501 79.3503C100.508 79.3579 100.516 79.3655 100.523 79.3807C100.599 79.4946 100.675 79.6162 100.744 79.7377C100.797 79.8061 100.842 79.882 100.88 79.9504C100.972 80.1023 101.063 80.2619 101.139 80.4214C101.139 80.429 101.139 80.4366 101.154 80.4442C101.253 80.6417 101.351 80.8468 101.435 81.0519C101.693 81.6444 101.883 82.2597 101.982 82.8902C101.982 82.8902 101.989 82.9433 101.989 82.9737V82.9889C102.02 83.1484 102.035 83.308 102.05 83.4751C101.792 83.5586 101.541 83.6498 101.291 83.7562C91.2634 87.6834 85.4523 101.524 95.1299 108.839C97.576 108.406 102.483 105.687 104.565 110.389C105.263 111.422 105.939 112.47 106.578 113.534C106.593 113.556 106.608 113.587 106.623 113.61C107.223 114.605 107.785 115.623 108.31 116.671C108.454 116.975 108.598 117.271 108.743 117.575C108.978 118.061 109.198 118.555 109.403 119.056L109.396 119.041Z' fill='%23BBBBA5'/%3E%3Cpath d='M95.3503 116.8C95.5706 115.911 95.8213 115.023 96.1859 114.179C96.5505 113.321 97.0519 112.531 97.6216 111.794C98.047 111.24 98.5104 110.708 98.9737 110.184C99.5966 109.606 100.204 108.976 100.964 108.596C101.382 108.391 101.86 108.269 102.324 108.399C102.931 108.573 103.342 108.999 103.699 109.492C104.101 110.047 104.542 110.579 104.944 111.133C105.355 111.695 105.757 112.273 106.145 112.858C107.406 114.802 108.484 116.899 109.373 119.041C107.877 120.112 106.236 120.993 104.496 121.654C102.688 122.338 101.139 123.166 99.2244 122.292C97.6748 121.586 96.6189 120.165 95.9656 118.646C95.7833 118.228 95.6314 117.803 95.4946 117.362C95.4339 117.172 95.3807 116.99 95.3275 116.8H95.3503Z' fill='%23BBB99D'/%3E%3Cpath d='M106.464 101.858C91.8941 93.5781 101.048 90.2586 103.471 89.5825C103.98 92.4083 104.451 95.2569 105.248 98.022C105.529 99.3361 105.955 100.612 106.464 101.858Z' fill='%23CCD1C0'/%3E%3Cpath d='M86.362 72.4124C86.362 72.6511 86.3045 72.8146 86.1808 72.8986C85.5133 73.3495 84.5409 73.208 83.7851 73.3097C83.1221 73.4025 82.4636 73.4997 81.8006 73.5926H81.7918C81.3807 73.6544 80.974 73.7163 80.563 73.7738C80.1387 73.8312 79.7099 73.8931 79.2856 73.9462C79.2724 73.9462 79.2591 73.9506 79.2459 73.9506C78.6226 74.0301 78.0083 74.1009 77.3851 74.1672H77.3718C77.3718 74.1672 77.363 74.1716 77.3585 74.1716C77.0712 74.2069 76.7795 74.2334 76.4922 74.2644H76.4878C76.3508 74.2821 76.2138 74.2998 76.0768 74.3086C75.8513 74.3351 75.6259 74.3528 75.4049 74.3705C75.4005 74.3749 75.4005 74.3705 75.4005 74.3705C75.3828 74.3749 75.3651 74.3749 75.3519 74.3749C75.1132 74.4014 74.8657 74.4235 74.627 74.4456C74.1762 74.4854 73.7253 74.5207 73.2745 74.5517H73.2701C73.1065 74.5649 72.9474 74.5826 72.7839 74.5915H72.7751C72.7751 74.5915 72.7353 74.5959 72.7176 74.5959C72.6822 74.6003 72.6557 74.6003 72.6204 74.6047C72.4436 74.6136 72.2712 74.6224 72.0944 74.6357C72.0502 74.6445 72.0016 74.6445 71.9574 74.6445C71.9574 74.6445 71.9574 74.6489 71.9529 74.6489C71.9529 74.6533 71.9485 74.6489 71.9485 74.6489H71.9441C71.8071 74.6578 71.6745 74.6666 71.5375 74.6754C71.2546 74.6931 70.9673 74.7108 70.6844 74.7241C69.8977 74.7683 69.1021 74.8036 68.3109 74.8213C68.2932 74.8257 68.2711 74.8257 68.2535 74.8257C67.5728 74.8434 66.8921 74.8611 66.2114 74.8699H66.0435C64.8899 74.8832 63.7319 74.8743 62.5782 74.8434H62.5517C62.26 74.839 61.9683 74.8301 61.681 74.8169C61.3981 74.808 61.1108 74.7992 60.8279 74.7859C60.8103 74.7859 60.7926 74.7815 60.7705 74.7815H60.7661C60.7263 74.7815 60.6865 74.7815 60.6467 74.7771C60.6025 74.7771 60.5583 74.7727 60.5141 74.7727H60.5053C60.2357 74.7594 59.966 74.7462 59.6964 74.7285C59.6655 74.7285 59.639 74.7241 59.608 74.7241C58.976 74.6887 58.3528 74.6445 57.7296 74.5915C57.6323 74.587 57.5395 74.5826 57.4423 74.5738H57.4378C57.4069 74.5694 57.3848 74.5694 57.3539 74.5649H57.3273C57.1992 74.5561 57.071 74.5473 56.9517 74.5296C56.7086 74.5119 56.4654 74.4854 56.2268 74.4677C56.0721 74.4544 55.913 74.4368 55.7583 74.4191C55.4312 74.3881 55.1085 74.3484 54.7726 74.3174H54.7682C54.7682 74.3174 54.7328 74.313 54.7152 74.313H54.7063C54.3704 74.2732 54.0301 74.2335 53.6942 74.1848H53.6897C53.6897 74.1848 53.6544 74.1848 53.6411 74.1804C53.6279 74.1804 53.6102 74.176 53.5969 74.176C53.1284 74.1185 52.6555 74.0655 52.1869 73.9948C50.914 73.818 49.6366 73.6147 48.3858 73.3229C48.3549 73.3185 48.3283 73.3097 48.2974 73.3053C47.8819 73.2124 47.462 73.1064 47.0421 72.9914H47.0333C46.8211 72.934 46.6178 72.8721 46.4057 72.8102H46.4012C45.8399 72.6379 45.2741 72.4478 44.7217 72.2312C44.0852 71.9881 43.4708 71.692 42.8741 71.3737C42.8388 71.3561 42.8122 71.3384 42.7769 71.3207C42.7769 71.3207 42.7725 71.3207 42.7725 71.3163C42.4144 71.1262 42.0741 70.9185 41.7338 70.6975L41.4818 70.534C41.2918 70.4058 41.084 70.2732 40.8807 70.1273C40.2575 69.6809 39.6387 69.1284 39.4884 68.4035C39.4752 68.3284 39.4619 68.2621 39.4575 68.187V68.1604C39.4398 67.4886 39.8686 66.8521 40.3238 66.3306C40.4608 66.167 40.5978 66.0168 40.7304 65.8798C40.7791 65.8267 40.8321 65.7737 40.8763 65.7118C40.9382 65.6411 41.0001 65.5704 41.0575 65.4952C41.0929 65.4554 41.1194 65.4112 41.1459 65.3715C41.1945 65.3184 41.2387 65.261 41.2741 65.1991C41.4686 64.9295 41.6454 64.6422 41.8133 64.3372C41.8752 64.2179 41.9371 64.1118 41.9901 63.9924C42.22 63.5372 42.4277 63.0421 42.6089 62.5294C42.6664 62.3836 42.715 62.2289 42.7636 62.0786C42.768 62.0786 42.768 62.0742 42.768 62.0698C43.0377 61.2609 43.2631 60.399 43.4487 59.5327C43.7095 58.3482 43.8995 57.1459 44.0587 56.0321V56.0233C44.2222 54.8741 44.346 53.8045 44.4653 52.9337C44.5183 52.558 44.567 52.1602 44.6156 51.7492V51.7359C44.6288 51.6033 44.6465 51.4707 44.6598 51.3337C44.7217 50.7591 44.7835 50.1624 44.8322 49.5525C44.8454 49.4066 44.8587 49.2696 44.8719 49.1237C44.8985 48.7878 44.9206 48.4563 44.9427 48.1204C44.9427 48.1204 44.9427 48.0806 44.9471 48.0674C44.9515 48.0099 44.9515 47.9613 44.9559 47.9038V47.8906C44.9603 47.8508 44.9603 47.8154 44.9648 47.7801C45.0045 47.011 45.0399 46.2375 45.0532 45.4596C45.0576 45.0928 45.062 44.7303 45.062 44.3679C45.062 44.2618 45.062 44.1601 45.0576 44.0585C45.0576 43.8861 45.0576 43.7093 45.0532 43.5325C45.0487 43.1612 45.0355 42.7811 45.0178 42.4098C45.0134 42.2596 45.009 42.1093 45.0001 41.9634C45.0001 41.9016 44.9957 41.8308 44.9913 41.769C44.9824 41.5612 44.9736 41.3623 44.9603 41.1767V41.106V41.1015C44.9294 40.5446 44.9206 40.0673 44.9161 39.6385C44.9161 39.4706 44.9161 39.3159 44.9206 39.1656C44.925 38.7059 44.9515 38.3126 44.9913 37.9236C45.009 37.7689 45.0311 37.6142 45.0487 37.4639V37.4551C45.0532 37.4109 45.062 37.3667 45.0664 37.3225V37.3136C45.0753 37.2518 45.0841 37.181 45.1018 37.1192C45.1637 36.6993 45.2476 36.2705 45.3537 35.7711C45.5747 34.7147 45.9283 33.7114 46.4145 32.7699C46.8698 31.8904 47.4399 31.0594 48.1073 30.3125C48.1825 30.2329 48.2488 30.1578 48.3239 30.0826C48.3681 30.034 48.4212 29.9854 48.4698 29.9368L48.5228 29.8837C49.6411 28.7876 51.0554 27.9787 52.7792 27.5588C52.819 27.5456 52.8588 27.5323 52.8986 27.5279C53.2787 27.4395 53.6765 27.3643 54.0875 27.3157C54.1759 27.3069 54.3527 27.2892 54.6002 27.276H54.6047C54.6047 27.276 54.6489 27.276 54.6798 27.2715C54.9052 27.2583 55.1748 27.2406 55.4621 27.2273C55.8511 27.2008 56.2666 27.1831 56.6467 27.1655C56.8544 27.1522 57.0533 27.1478 57.2301 27.1345H57.2389C57.4997 27.1213 57.7119 27.108 57.8445 27.1036H58.008C58.1936 27.0947 58.397 27.0992 58.6003 27.108C58.6799 27.108 58.7638 27.1124 58.8434 27.1168C58.945 27.1257 59.0511 27.1345 59.1572 27.1478L59.2765 27.161C59.3252 27.1655 59.3738 27.1699 59.4224 27.1787C59.502 27.1831 59.5683 27.1964 59.6478 27.2097H59.6522C59.6832 27.2141 59.7141 27.2185 59.7495 27.2229C59.8202 27.2362 59.8865 27.2494 59.9572 27.2627H59.9661C59.9926 27.2671 60.0191 27.2715 60.0456 27.276C60.05 27.276 60.0589 27.276 60.0633 27.2804C60.0766 27.2848 60.0898 27.2848 60.0986 27.2848C60.1605 27.2981 60.2224 27.3157 60.2843 27.3246C60.2976 27.329 60.3152 27.329 60.3285 27.3334C60.355 27.3378 60.3727 27.3422 60.3992 27.3467C60.4964 27.3732 60.5981 27.3953 60.6998 27.4262C60.7882 27.4439 60.8721 27.4704 60.965 27.4969H60.9694C61.0047 27.5058 61.0401 27.5146 61.0666 27.5279C61.1462 27.5544 61.2346 27.5765 61.3097 27.6074C61.323 27.6119 61.3407 27.6163 61.3583 27.6207C61.4025 27.634 61.4467 27.6516 61.4954 27.6693C61.6059 27.7091 61.7208 27.7489 61.8268 27.7887C61.902 27.8196 61.9683 27.8461 62.039 27.8726C62.1142 27.908 62.1849 27.9345 62.26 27.9655C62.2998 27.9831 62.344 28.0008 62.3882 28.0229C62.4368 28.0406 62.4943 28.0671 62.5429 28.0936C62.6534 28.1467 62.7683 28.2041 62.8876 28.266C62.9672 28.3058 63.0423 28.3456 63.1219 28.3942H63.1263C63.1882 28.4296 63.2501 28.4649 63.3119 28.5003C63.3871 28.5401 63.4534 28.5843 63.5329 28.624C63.6037 28.6682 63.6744 28.7124 63.7451 28.7611C63.7584 28.7655 63.7716 28.7743 63.7849 28.7876C63.7893 28.792 63.7981 28.7964 63.8114 28.8008C63.8954 28.8539 63.9749 28.9069 64.0633 28.9688C64.0678 28.9776 64.081 28.9821 64.0943 28.9865C64.165 29.0395 64.2357 29.0837 64.3064 29.1412C64.3153 29.1456 64.333 29.1544 64.3418 29.1677C64.4523 29.2472 64.5584 29.3312 64.6645 29.4196C64.7131 29.455 64.7573 29.4948 64.8059 29.539C64.8678 29.5876 64.9296 29.6362 64.9871 29.6892C65.0578 29.7467 65.1197 29.8086 65.1948 29.8749H65.1993C65.3319 29.9942 65.46 30.1136 65.5882 30.2417C65.6899 30.3478 65.796 30.4583 65.8976 30.5688C66.0833 30.7677 66.2601 30.9843 66.428 31.2141C66.4899 31.2981 66.5518 31.3821 66.6092 31.4705C66.6225 31.4882 66.6446 31.5235 66.6623 31.5545C66.9893 32.0407 67.2811 32.5666 67.5286 33.128C67.533 33.1324 67.5374 33.1412 67.5374 33.1412C67.8999 33.9412 68.1872 34.7854 68.3993 35.6208C68.5098 36.0407 68.5938 36.4562 68.6689 36.8628C68.7087 37.0838 68.7485 37.3092 68.7927 37.5346C68.828 37.7203 68.8634 37.9015 68.8988 38.0871C68.8988 38.1137 68.9076 38.1358 68.912 38.1579C68.9916 38.5822 69.0844 39.0021 69.1772 39.4131C69.2037 39.5236 69.2258 39.6341 69.2524 39.7358C69.3496 40.1645 69.4513 40.5844 69.5618 40.9955C69.5883 41.0883 69.6059 41.1723 69.6236 41.2607C69.6767 41.4507 69.7253 41.6319 69.7783 41.8132C69.8314 42.0209 69.8888 42.2198 69.9463 42.4143C69.9728 42.4761 69.9861 42.5469 70.0037 42.6087C70.0082 42.6087 70.0082 42.6132 70.0082 42.6176C70.0435 42.7413 70.0789 42.8563 70.1142 42.9756C70.1142 42.98 70.1187 42.98 70.1187 42.9844C70.1806 43.2187 70.2601 43.453 70.3308 43.674C70.3485 43.7181 70.2557 43.78 70.1363 43.8552C70.0082 43.9259 69.8535 44.001 69.7253 44.0762H69.7209C69.5927 44.1513 69.4999 44.2132 69.5131 44.253C69.6855 44.7524 69.8402 45.2209 69.9993 45.6718C70.0303 45.7513 70.0524 45.822 70.0833 45.9016C70.0789 45.906 70.0833 45.906 70.0833 45.906C70.154 46.1049 70.2203 46.3038 70.2955 46.4983C70.4236 46.874 70.5562 47.2408 70.6888 47.59C70.7861 47.8508 70.8833 48.1027 70.9806 48.3547C71.2723 49.1149 71.5817 49.8398 71.9264 50.5735C75.0955 57.3758 76.4303 61.6101 79.1309 65.6322C79.1486 65.6588 79.1663 65.6853 79.184 65.7118C79.3608 65.9814 79.5508 66.251 79.7542 66.5206C80.0238 66.8963 80.4613 67.2146 80.9696 67.5019H80.9741C81.1509 67.6035 81.3409 67.6964 81.531 67.7848C81.5398 67.7936 81.5486 67.798 81.5619 67.798C81.6238 67.8334 81.6857 67.8599 81.7475 67.8864C82.7067 68.324 83.7763 68.6908 84.5365 69.0754L84.6691 69.1505C84.9564 69.3052 85.1951 69.4688 85.3454 69.6411H85.3498C85.4117 69.7163 85.4691 69.7826 85.5001 69.8577C85.5885 70.0301 85.668 70.2025 85.7388 70.3572H85.7432C85.8669 70.6312 85.9686 70.8831 86.057 71.113C86.0968 71.2058 86.1277 71.2942 86.1542 71.3782C86.1896 71.4798 86.2161 71.5771 86.2471 71.6699C86.278 71.7804 86.3001 71.8909 86.3266 71.9925C86.3399 72.0721 86.3576 72.1428 86.362 72.2135C86.3708 72.2931 86.3752 72.3594 86.3752 72.4257L86.362 72.4124Z' fill='%23CE8000'/%3E%3Cpath d='M86.1808 72.8987C85.5134 73.3451 84.541 73.2037 83.7852 73.3097C82.2736 73.5175 80.762 73.7606 79.2503 73.9506C74.9055 74.4987 70.5342 74.8214 66.1585 74.87C65.3054 74.8567 64.4479 74.8346 63.5949 74.7948C60.6998 74.6755 57.8136 74.397 54.9451 73.9992C52.3859 73.6456 49.8268 73.1595 47.4135 72.2092C46.2996 71.7716 45.2521 71.2147 44.2576 70.5517C43.493 70.0434 42.4499 69.3848 42.2554 68.4124C42.0609 67.4445 42.8919 66.5295 43.4974 65.8842C46.5427 62.6444 48.7174 54.5294 48.4566 51.263C48.3107 49.4111 48.4168 46.8696 48.156 45.6674L51.3737 46.8917V40.4872C51.5726 40.5756 51.776 40.6552 51.9837 40.7303C52.5716 40.9469 53.0666 41.2607 53.566 41.6364C54.0478 41.9988 54.5163 42.3878 55.0246 42.7149C55.5506 43.0552 56.1075 43.3116 56.7042 43.5016C58.0434 43.9304 59.4711 44.1955 60.8855 44.1027C61.491 44.0629 62.0302 43.8508 62.5827 43.6033C62.9982 43.4176 63.4225 43.2011 63.8734 43.0906C63.7584 43.2055 63.6524 43.3337 63.5551 43.4751C63.5198 43.5281 63.5993 43.5723 63.6347 43.5193C63.7584 43.3381 63.8999 43.1834 64.0501 43.0508C64.1606 43.0331 64.2711 43.0198 64.3816 43.0198C64.4435 43.0198 64.4435 42.9226 64.3816 42.9226C64.3198 42.9226 64.2535 42.927 64.196 42.9359C64.6778 42.5823 65.2789 42.4497 65.9154 42.5823C66.7861 42.7591 67.5861 43.2674 68.2314 43.8685C68.8635 44.4563 69.4513 45.0044 69.4955 45.884C69.5441 46.9403 69.7475 47.9437 69.8845 48.9735C70.0436 50.1846 69.9419 51.2277 70.4635 52.3901C70.9895 53.5614 71.8425 54.5515 72.5983 55.5902C73.3541 56.6289 74.0481 57.778 74.1718 59.0554C73.7873 58.7018 73.3188 58.4366 72.8105 58.2996C72.7486 58.2819 73.2923 60.8499 73.3939 61.093C73.7475 61.9416 74.2249 62.7151 74.9497 63.2765C75.7542 63.8997 76.4525 64.6864 77.2437 65.3406C78.0967 66.0433 78.9807 66.7108 79.8735 67.3649C80.7089 67.9793 81.5575 68.5892 82.499 69.0356C83.2062 69.3716 83.9576 69.6102 84.7267 69.7605C84.9742 69.8091 85.2305 69.8312 85.4869 69.8445C86.3311 71.5196 86.5698 72.6379 86.1808 72.8987Z' fill='%23C07500'/%3E%3Cpath opacity='0.6' d='M55.7979 66.7506C56.0144 69.5484 57.1592 72.5628 57.9239 75.2457C62.8477 75.3916 74.397 74.9319 79.2943 74.4148C79.312 74.0833 79.281 73.7429 79.2412 73.4335C79.144 72.6645 78.9319 71.9131 78.7109 71.1705C78.4987 70.4545 78.3086 69.734 78.0346 69.0357C77.7473 68.3064 77.3495 67.6257 76.8235 67.0423C75.6523 65.7384 76.2578 64.9561 74.7859 64.0191C70.5826 61.345 71.3295 58.0123 71.3384 57.4333C71.3649 55.4444 69.8931 54.7195 68.8146 50.4808C68.5848 49.5791 68.408 48.6642 68.3151 47.736C68.2046 46.6443 68.2312 45.5437 68.4433 44.4829C68.2975 44.3326 68.1428 44.1912 67.9836 44.0409C67.3383 43.4398 66.5427 42.9359 65.6676 42.7547C65.4289 42.7061 65.1991 42.6928 64.9737 42.7149C64.6996 43.4663 64.5007 44.2442 64.3239 45.0221C64.1295 45.8884 63.9748 46.7592 63.7935 47.6299C63.5504 48.81 63.2941 49.9813 63.1261 51.1791C62.388 56.346 55.8023 66.7462 55.8023 66.7462L55.7979 66.7506Z' fill='%23A05A07'/%3E%3Cpath d='M44.1782 55.4398C44.1782 55.4398 43.1351 61.3361 41.5219 62.6002C41.5219 62.6002 44.9429 61.5217 45.1108 59.4664C45.2788 57.4111 44.1782 55.4398 44.1782 55.4398Z' fill='%23CE8000'/%3E%3Cpath d='M47.184 53.1195C47.1353 54.0388 47.0425 54.8874 46.9099 55.6653H46.9055C46.4105 58.6488 45.3762 60.6599 44.2712 62.0168C43.8204 62.5693 43.3563 63.0157 42.9099 63.3693C42.5872 63.6301 42.2778 63.8378 41.9905 64.0058C41.8182 64.1074 41.659 64.1958 41.5043 64.271H41.4999C41.2657 64.3947 41.0535 64.4831 40.8767 64.5406C40.7972 64.5715 40.7309 64.5936 40.669 64.6157C40.6601 64.6202 40.6513 64.6246 40.638 64.6246C40.6248 64.629 40.6071 64.6334 40.5983 64.6334H40.5938C40.5408 64.6511 40.4966 64.6688 40.4612 64.6776H40.448C40.364 64.7041 40.3154 64.713 40.3154 64.713C40.3154 64.713 40.3419 64.6334 40.3905 64.4831C40.3994 64.4522 40.417 64.4213 40.4303 64.3815C40.4436 64.3329 40.4612 64.2754 40.4833 64.2091C40.4922 64.1782 40.501 64.1472 40.5187 64.1119V64.103C40.5187 64.103 40.5187 64.0986 40.5231 64.0942C40.5806 63.9041 40.6557 63.6787 40.7397 63.4223C40.8016 63.2367 40.8679 63.0334 40.9386 62.8212C40.9916 62.6489 41.0491 62.4676 41.1154 62.282C42.1585 59.0864 43.9441 53.6498 44.6116 51.7625H44.616V51.7493C44.6513 51.6653 44.6734 51.5857 44.7044 51.5194C44.7486 51.3868 44.7884 51.2808 44.8149 51.21C44.8193 51.1968 44.8237 51.1835 44.8281 51.1747C45.0094 50.7459 45.3983 50.9316 45.8094 51.3294H45.8138C46.0348 51.546 46.2646 51.8244 46.4768 52.094C46.5873 52.2443 46.6934 52.3857 46.7818 52.5183C47.0204 52.8631 47.184 53.1195 47.184 53.1195Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M51.3608 47.7498L47.4487 55.8855C47.4487 55.8855 47.1828 55.4221 46.8486 55.0423C46.6207 54.784 46.3624 54.5713 46.1345 54.5713C45.5724 54.5713 44.395 57.4503 44.395 57.4503C44.7216 56.5843 44 55.4449 44 55.4449L43.4302 56.2729L43.5138 54.9435C43.5138 54.9435 43.2479 55.2094 42.9517 55.4297C43.0656 54.7536 43.2327 54.1687 43.3923 53.675C43.5974 53.2344 43.7341 52.7634 43.7797 52.2772C43.7797 52.2772 43.7797 52.262 43.7797 52.2544C43.8252 51.7835 43.8708 51.2973 43.9088 50.8036C43.924 50.5833 43.9468 50.3706 43.962 50.1503C43.9772 49.9604 43.9848 49.7629 44 49.573C44.0151 49.3831 44.0227 49.1855 44.0379 48.988C44.0835 48.2132 44.1139 47.4308 44.1291 46.6408C44.1291 46.4965 44.1291 46.3521 44.1291 46.2154C44.1291 45.9495 44.1291 45.6837 44.1291 45.4178C46.294 43.6251 49.5377 46.1166 50.8138 47.2409C51.1481 47.5372 51.3456 47.7422 51.3456 47.7422L51.3608 47.7498Z' fill='%23C77500'/%3E%3Cpath d='M36.2675 71.5664C30.9653 69.5686 29.2409 66.9099 29.2409 66.9099C29.2409 66.9099 30.6158 65.6337 33.0694 64.3196C35.6066 62.9598 39.306 61.5545 43.8182 61.4785C44.8817 61.4558 45.9907 61.5165 47.1378 61.6685C57.9017 63.0586 41.5697 73.5643 36.2675 71.5664Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.4' d='M36.2675 71.5664C30.9653 69.5686 29.2409 66.9099 29.2409 66.9099C29.2409 66.9099 30.6158 65.6337 33.0694 64.3196C35.6066 62.9598 39.306 61.5545 43.8182 61.4785C44.8817 61.4558 45.9907 61.5165 47.1378 61.6685C57.9017 63.0586 41.5697 73.5643 36.2675 71.5664Z' fill='%233B754B'/%3E%3Cpath d='M43.8181 61.4787C42.428 61.7977 40.4453 62.7397 37.7487 64.3653C34.976 66.0364 33.4871 64.7831 33.0693 64.3197C35.6065 62.9599 39.3059 61.5546 43.8181 61.4787Z' fill='%23459562'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.4'%3E%3Cpath d='M84.7343 271.808L84.6963 271.892C83.2378 271.71 81.6426 271.466 81.0728 271.36C76.743 270.555 77.966 262.913 79.189 260.277C79.3409 259.943 79.4472 259.616 79.508 259.282C79.2801 259.282 79.0522 259.13 79.1358 258.872C79.4093 257.975 80.3512 256.031 80.1917 255.127C80.1385 254.846 80.1233 254.299 80.1157 253.592C79.6903 253.418 79.4548 252.962 79.5612 252.544C79.6372 252.255 79.8423 252.012 80.1081 251.838C80.1157 249.893 80.1157 247.546 79.9334 245.943L79.865 245.897C79.7967 245.844 79.7435 245.776 79.7055 245.7C79.5612 245.48 79.4169 245.259 79.3713 245.001C79.3333 244.75 79.4017 244.462 79.622 244.317C79.6295 244.325 79.6447 244.325 79.6523 244.332C79.6068 244.143 79.5536 243.953 79.4928 243.763C78.9535 242.069 79.4852 240.504 78.8395 238.802C78.7332 238.536 78.6117 238.263 78.5661 237.974C78.4749 237.367 78.7484 236.767 78.7864 236.151C78.8091 235.771 78.7408 235.384 78.6496 235.012C78.3154 233.644 77.6773 232.383 77.4114 230.993C77.3734 230.788 77.3507 230.583 77.3355 230.378C77.2443 230.317 77.1684 230.257 77.1076 230.181C76.705 229.71 76.6366 229.003 76.8189 228.418C76.7505 228.289 76.6898 228.16 76.6214 228.038C76.5455 227.894 76.4695 227.735 76.4011 227.567C74.4261 227.636 72.8916 227.773 71.6686 227.932L69.7088 212.033L66.7462 188.621L58.7701 125.625L58.8309 92.87L64.7484 90.4164C64.7484 90.4164 69.6632 89.9454 69.5645 92.5509C69.4657 95.1489 65.6448 94.8146 65.6448 94.8146L65.66 95.3844V96.6681C65.66 96.6681 67.7717 113.585 65.6676 115.659C64.794 116.525 67.3767 118.135 67.9465 120.976C68.7061 124.774 68.7061 130.092 68.7061 130.092C68.7061 130.092 75.9529 130.905 78.5813 132.371C81.2096 133.829 82.2579 134.536 82.3186 137.255C82.3794 139.967 79.5004 141.912 77.5254 141.699L77.2139 153.967C77.2139 153.967 77.8672 155.957 78.2242 158.221C78.5813 160.477 80.0094 172.517 81.954 173.33C81.954 173.33 83.0175 175.502 82.3186 177.485L80.7918 177.667L80.1917 194.569C80.1917 194.569 82.2883 198.633 83.2682 203.092C83.686 204.991 83.8987 206.959 83.6632 208.713C83.6024 209.177 83.5113 209.625 83.3821 210.05C83.329 210.225 83.2834 210.4 83.2378 210.582C82.0376 215.558 83.8075 223.496 84.4304 226.018C84.4684 226.193 84.5064 226.337 84.5368 226.451C84.5975 226.686 84.6355 226.815 84.6355 226.815C84.6355 226.815 84.2633 227.864 84.4152 228.859C84.4836 229.299 84.6583 229.732 85.0153 230.059C85.0153 230.059 84.9849 230.234 84.9621 230.507C84.8938 231.183 84.8558 232.452 85.4103 232.847L85.4331 233.113L86.413 244.279V244.34C86.413 244.34 85.2204 245.571 85.98 246.292C86.0028 246.323 86.0256 246.338 86.0484 246.361L86.4206 252.893C86.4206 252.893 86.4055 252.939 86.3751 253.023C86.2459 253.418 85.9041 254.595 86.3751 254.975C86.3751 254.975 86.3827 255.058 86.3979 255.21C86.5802 257.018 87.5981 268.701 84.7343 271.808Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M71.0883 117.127C70.8452 117.043 66.0747 115.288 63.6059 114.195C63.0058 113.921 62.55 113.701 62.3145 113.549L62.2158 113.473C61.8056 113.161 61.6005 112.782 61.4865 112.356C61.4865 112.356 61.4865 112.333 61.479 112.326C61.3118 111.726 61.2815 111.019 61.0308 110.222C60.9928 110.1 60.9472 109.986 60.9016 109.865C60.3319 108.421 62.2538 108.361 62.6412 108.368C62.6868 108.368 62.7095 108.368 62.7095 108.368C62.7095 108.368 62.7399 108.421 62.7855 108.52C63.0058 108.946 63.6591 110.146 64.5099 111.148C65.4518 112.258 66.9787 112.941 67.594 113.617C68.5207 114.612 70.9363 116.982 71.0807 117.134L71.0883 117.127Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M71.0883 117.127C70.8452 117.043 66.0747 115.288 63.6059 114.195C63.0058 113.921 62.55 113.701 62.3145 113.549L62.2158 113.473C61.8056 113.161 61.6005 112.782 61.4865 112.356C61.4865 112.356 61.4865 112.333 61.479 112.326C61.3118 111.726 61.2815 111.019 61.0308 110.222C60.9928 110.1 60.9472 109.986 60.9016 109.865C60.3319 108.421 62.2538 108.361 62.6412 108.368C62.6868 108.368 62.7095 108.368 62.7095 108.368C62.7095 108.368 62.7399 108.421 62.7855 108.52C63.0058 108.946 63.6591 110.146 64.5099 111.148C65.4518 112.258 66.9787 112.941 67.594 113.617C68.5207 114.612 70.9363 116.982 71.0807 117.134L71.0883 117.127Z' fill='%23CEB79B'/%3E%3Cpath d='M63.6059 114.195C63.0058 113.921 62.55 113.701 62.3145 113.549L62.2158 113.473C61.9499 113.245 61.7144 112.842 61.4865 112.356C61.4865 112.356 61.4865 112.333 61.479 112.326C61.3118 111.726 61.2815 111.019 61.0308 110.222C60.9928 110.1 60.9472 109.986 60.9016 109.865C60.3319 108.421 62.2538 108.361 62.6412 108.368C62.6944 108.414 62.7475 108.459 62.7931 108.52C63.0134 108.946 63.6667 110.146 64.5175 111.148C64.4035 111.293 63.3628 112.675 65.3151 113.64C65.7253 113.845 64.7985 114.103 63.6059 114.21V114.195Z' fill='%23CEB79B'/%3E%3Cpath d='M67.2296 91.7096C67.2296 92.6212 63.4315 93.3884 58.7294 93.4264C55.6529 93.4492 52.9182 93.1529 51.4217 92.6895C50.6317 92.4465 50.1835 92.1578 50.2063 91.8388C50.2291 91.5425 50.4722 91.2918 50.9963 91.0715C51.4521 90.8816 52.1282 90.7145 53.0701 90.5778C53.0853 90.5778 53.1081 90.5778 53.1233 90.5702C53.4196 90.5246 53.7462 90.4866 54.0956 90.4486C55.2958 90.3119 56.8151 90.2055 58.7066 90.122C63.4011 89.9093 67.222 90.7069 67.2296 91.7096Z' fill='%239EA58E'/%3E%3Cpath d='M67.2296 91.7096C67.2296 92.6212 63.4315 93.3884 58.7294 93.4264C55.6529 93.4492 52.9182 93.1529 51.4217 92.6895C50.6317 92.4465 50.1835 92.1578 50.2063 91.8388C50.2291 91.5425 50.4722 91.2918 50.9963 91.0715C51.4521 90.8816 52.1282 90.7145 53.0701 90.5778C53.0853 90.5778 53.1081 90.5778 53.1233 90.5702C53.4196 90.5246 53.7462 90.4866 54.0956 90.4486C55.2958 90.3119 56.8151 90.2055 58.7066 90.122C63.4011 89.9093 67.222 90.7069 67.2296 91.7096Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M67.2296 91.7096C67.2296 91.9906 66.865 92.2641 66.2269 92.4996C65.6496 92.7123 64.8444 92.9022 63.8721 93.0541C62.444 93.2744 60.6664 93.4187 58.7294 93.4263C55.6529 93.4491 52.9182 93.1529 51.4217 92.6895C50.6317 92.4464 50.1835 92.1578 50.2063 91.8387C50.2291 91.5425 50.4722 91.2918 50.9963 91.0715C51.4521 90.8816 52.1282 90.7145 53.0701 90.5777C53.0853 90.5777 53.1081 90.5777 53.1233 90.5701C53.4196 90.5246 53.7462 90.4866 54.0956 90.4486C55.2958 90.3119 56.8151 90.2055 58.7066 90.122C60.2714 90.0536 61.7375 90.0916 62.9909 90.2207C65.1406 90.4334 66.6979 90.8816 67.1157 91.4209C67.184 91.5197 67.222 91.6184 67.222 91.7096H67.2296Z' fill='%23474C2F'/%3E%3Cpath d='M45.1091 137.865L47.0234 137.849H48.2691L48.8009 137.834L50.9431 137.819L52.4927 137.804H53.1839L59.0939 137.751L65.0038 137.705H65.6874L66.8877 137.69H68.0043L69.2881 137.675H70.8605L73.0482 137.644L73.0634 140.128L73.0862 142.764L73.147 151.151L73.2609 165.584L73.4433 189.405L73.4736 193.523L73.4964 196.873L73.6104 211.306L73.7471 228.754L73.8155 237.315L73.8914 246.803C72.4406 248.224 70.7618 249.401 70.2072 249.766C70.1541 249.804 70.1465 249.864 70.1693 249.91V249.933H70.1844C70.1844 249.933 70.192 249.948 70.1996 249.948C70.23 249.963 70.268 249.978 70.2984 249.994C71.6125 250.472 72.8659 250.495 73.9142 250.343V250.654L73.937 252.911L74.0054 261.472L74.0282 264.434C74.0282 264.859 73.9066 265.285 73.6635 265.687L67.3966 275.988L61.5475 285.597C61.4031 285.833 61.1525 286 60.8486 286.099C60.6511 286.159 60.4308 286.197 60.2181 286.197C59.6712 286.197 59.1242 286.008 58.8812 285.62L56.9213 282.513L51.8622 274.484L47.7678 267.982L46.4612 265.908C46.2105 265.513 46.0814 265.087 46.0814 264.662L45.9979 253.625L45.9295 244.782L45.8687 236.442V236.221C46.4916 235.675 47.2133 235.112 47.9653 234.657C48.4515 234.368 48.5578 234.11 48.3679 233.973C48.064 233.768 46.8866 233.289 45.8459 233.168L45.8003 227.615L45.6864 212.901L45.6636 209.832L45.6256 205.434L45.4433 181.893L45.3294 167.179L45.2686 159.073L45.1167 139.802V139.665L45.1015 137.88L45.1091 137.865Z' fill='%23CCD1C0'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.32'%3E%3Cpath d='M59.0711 137.758L64.981 137.713H65.6647L66.8649 137.698H67.9816L69.2729 137.682H70.8454L73.0331 137.652L73.0483 140.136L73.0711 142.772L73.1319 151.158L73.2458 165.591L73.4281 189.413L73.4585 193.53L73.4813 196.88L73.5952 211.313L73.732 228.762L73.8003 237.323L73.8763 246.811C72.4254 248.231 70.7466 249.409 70.1921 249.773C70.1389 249.811 70.1313 249.872 70.1541 249.918V249.94H70.1693C70.1693 249.94 70.1769 249.956 70.1845 249.956C70.2149 249.971 70.2529 249.986 70.2832 250.001C71.5974 250.48 72.8508 250.502 73.8991 250.351V250.662L73.9219 252.918L73.9902 261.479L74.013 264.442C74.013 264.867 73.8915 265.292 73.6484 265.695L67.3815 275.996L61.5323 285.605C61.388 285.84 61.1373 286.008 60.8335 286.106L60.2029 286.205L60.1346 277.538L60.1194 275.358V274.271L59.0711 138.45V137.766V137.758Z' fill='%23C5CAB9'/%3E%3C/g%3E%3Cpath d='M45.3295 167.164L51.1331 163.829L51.2394 178.482L45.4435 181.878L45.3295 167.164Z' fill='%23C5CAB9'/%3E%3Cpath d='M73.1473 151.151L73.2612 165.583L67.4577 168.979L67.3438 154.493L73.1473 151.151Z' fill='%23C5CAB9'/%3E%3Cpath d='M73.443 189.406L73.4734 193.523L67.6699 196.918L67.6395 192.748L73.443 189.406Z' fill='%23C5CAB9'/%3E%3Cpath d='M45.1174 139.65L50.921 136.307L51.0653 155.663L45.2694 159.058L45.1174 139.65Z' fill='%23C5CAB9'/%3E%3Cpath d='M73.0181 134.796L73.0788 142.764L67.2829 146.16L67.2221 138.131L73.0181 134.796Z' fill='%23C5CAB9'/%3E%3Cpath opacity='0.78' d='M67.2074 136.186L68.1949 264.7C68.1949 264.951 68.1265 265.201 67.9822 265.437L61.0544 276.953L60.9252 277.165C60.6442 277.629 59.6567 277.636 59.368 277.181L59.1249 276.793L52.1287 265.558C51.9844 265.323 51.9084 265.072 51.9084 264.821L50.9209 136.307L67.2074 136.186Z' fill='%239EA58E'/%3E%3Cpath opacity='0.14' d='M65.6726 137.538L66.6525 264.958C66.6525 265.163 66.5917 265.368 66.4778 265.558L60.8641 274.887L60.7578 275.061C60.5299 275.434 59.7323 275.441 59.4968 275.069L59.2993 274.758L53.6324 265.657C53.5109 265.467 53.4501 265.262 53.4501 265.065L52.4702 137.644H53.1539L54.1338 265.049C54.1338 265.232 54.1946 265.414 54.2933 265.581L59.3677 273.74L59.5424 274.021C59.7475 274.355 60.4691 274.347 60.6666 274.013L60.7578 273.854L65.7865 265.49C65.8929 265.315 65.946 265.141 65.9385 264.951L64.9585 137.546H65.6422L65.6726 137.538Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M64.9746 136.533L53.1552 136.624L53.1629 137.634L64.9824 137.543L64.9746 136.533Z' fill='%23474C2F'/%3E%3Cpath d='M55.1287 94.0721L62.3451 94.0189L62.3603 95.7965L62.4211 103.742L62.6566 134.37L55.4401 134.424L55.2502 109.242L55.1439 96.0623L55.1287 94.0721Z' fill='%23474C2F'/%3E%3Cpath d='M56.785 87.9266C57.3015 87.6911 57.8788 87.5544 58.4865 87.5392H58.7372C60.7502 87.4936 62.4822 88.8306 63.0139 90.6765C63.0291 90.7373 63.0519 90.8056 63.0671 90.8664C63.1355 91.1627 63.181 91.4665 63.181 91.7855L54.2326 91.9755C54.2174 91.3753 54.3314 90.8056 54.5365 90.2891C54.5896 90.1599 54.6428 90.0308 54.7112 89.9017C55.1594 89.0281 55.8962 88.3216 56.7926 87.919L56.785 87.9266Z' fill='%239EA58E'/%3E%3Cpath d='M56.7854 87.9267C57.3019 87.6913 57.8792 87.5545 58.4869 87.5393H58.7376C61.138 87.4862 63.1283 89.3928 63.1814 91.7932H62.794C62.7864 91.459 62.7029 91.1096 62.5585 90.7829C61.9053 89.3472 60.1353 88.7471 58.5933 89.446C57.5298 89.9246 56.8537 90.9045 56.755 91.93L54.2406 91.9832C54.2026 90.1828 55.2585 88.618 56.8006 87.9267H56.7854Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M56.7846 87.9266C57.3011 87.6911 57.8785 87.5544 58.4862 87.5392H58.7369C59.4889 87.5164 60.1954 87.6911 60.8183 88.0102C60.2181 88.0254 59.5876 88.1621 58.9648 88.4432C57.3316 89.18 56.3592 90.6461 56.5415 91.9299L54.2323 91.9755C54.1943 90.1751 55.2502 88.6103 56.7922 87.919L56.7846 87.9266Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M54.7039 89.9094C54.7039 89.9094 58.7223 91.8996 63.0142 90.6766C63.113 91.0336 63.1737 91.4058 63.1813 91.7856L54.2329 91.9756C54.2177 91.2311 54.3924 90.5247 54.7115 89.9018L54.7039 89.9094Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M54.5288 90.2967C55.5239 90.6841 59.1854 91.9299 63.0595 90.874C63.1278 91.1702 63.1734 91.4741 63.1734 91.7931L54.225 91.983C54.2098 91.3829 54.3237 90.8132 54.5288 90.2967Z' fill='%23474C2F'/%3E%3Cpath d='M67.5795 92.5528C67.5795 93.0769 67.3592 93.5631 66.9642 93.8821C62.9458 95.9331 56.9447 95.8647 52.7212 94.8696C51.9463 94.6721 51.3462 94.4518 50.8905 94.2619C49.5991 93.7226 49.6371 92.1502 50.4423 91.3981C50.4499 91.3905 50.465 91.3753 50.4726 91.3677L50.4954 91.3525C50.8601 91.0411 51.369 90.8816 51.9691 91.0411C52.0147 91.0563 52.0603 91.0639 52.1059 91.0791C52.7212 91.2386 53.3896 91.3677 54.0961 91.4665C54.2328 91.4893 54.3695 91.5045 54.5139 91.5273C55.4254 91.6412 56.3902 91.7172 57.3701 91.7476C57.5068 91.7476 57.6436 91.7476 57.7803 91.7551C57.8866 91.7551 57.993 91.7551 58.0993 91.7551C59.8617 91.7703 61.6316 91.6564 63.1889 91.4209C64.4802 91.3601 65.9767 90.3498 67.0402 91.3525H67.0478C67.0478 91.3525 67.0933 91.4057 67.1161 91.4285C67.4048 91.7324 67.5643 92.1426 67.5719 92.5604L67.5795 92.5528Z' fill='%239EA58E'/%3E%3Cpath d='M67.579 92.5528C67.5866 93.0769 67.3511 93.5631 66.9637 93.8822C66.356 94.3151 65.604 94.4823 64.8823 94.7253C65.3077 93.0997 64.6924 91.4589 63.1959 91.421C63.1959 91.421 63.1504 91.421 63.12 91.421C64.4266 91.421 66.0294 90.2739 67.1232 91.421C67.4119 91.7248 67.5714 92.135 67.579 92.5528Z' fill='%23949984'/%3E%3Cpath d='M52.7212 94.8696C52.1287 94.7177 51.6349 94.5506 51.2323 94.3986C51.2095 94.391 51.1867 94.3835 51.1639 94.3759C51.1336 94.3607 51.1032 94.3531 51.0728 94.3379C51.012 94.3151 50.9512 94.2923 50.8981 94.2619C50.2752 94.0036 49.8726 93.3959 49.865 92.7199V92.6895C49.865 91.7779 50.5563 91.0639 51.407 90.9879C51.5893 90.9727 51.7869 90.9879 51.9768 91.0335C52.2198 91.0943 52.4781 91.155 52.7592 91.2158C53.0023 91.269 53.9594 91.4285 54.2329 91.4817C52.311 92.1653 52.4021 94.2391 52.7288 94.8696H52.7212Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M67.0854 91.3905C66.6676 91.5045 66.1966 91.6108 65.6649 91.7172C64.0165 92.0438 61.8212 92.3097 59.003 92.3325C55.2656 92.3629 52.5841 91.9147 50.8294 91.4589C50.7002 91.4209 50.5711 91.4057 50.442 91.3981C50.442 91.3981 50.4647 91.3753 50.4799 91.3677L50.5027 91.3525C50.8977 91.0411 51.4295 90.8968 51.9764 91.0411C52.022 91.0563 52.0675 91.0639 52.1131 91.0791C52.6677 91.2158 53.3285 91.3525 54.1034 91.4665C54.2401 91.4893 54.3768 91.5045 54.5212 91.5273C55.3492 91.6336 56.2987 91.7172 57.3773 91.7476C57.5141 91.7476 57.6508 91.7551 57.7876 91.7551C57.8939 91.7551 58.0003 91.7551 58.1066 91.7551C59.8689 91.7703 61.6389 91.6564 63.1961 91.4209C64.4875 91.3601 65.984 90.3498 67.0474 91.3525H67.055L67.093 91.3981L67.0854 91.3905Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M54.1037 90.4487C53.6859 90.5854 52.1287 90.8285 51.3842 92.2566C51.1488 92.7124 51.0272 93.5783 51.1032 93.9506V93.9885C51.1412 94.1253 51.1791 94.262 51.2323 94.3911C51.2095 94.3835 51.1867 94.376 51.1639 94.3684C51.1336 94.3532 51.1032 94.3456 51.0728 94.3304C51.012 94.3076 50.9512 94.2848 50.8981 94.2544C50.2752 93.9961 49.8726 93.3884 49.865 92.7124V92.682C49.865 91.9224 50.3512 91.2995 51.0044 91.0716C51.4602 90.8817 52.1363 90.7145 53.0782 90.5778C53.0934 90.5778 53.1162 90.5778 53.1314 90.5702C53.4276 90.5246 53.7543 90.4867 54.1037 90.4487Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M67.5797 92.5604C67.5873 93.3048 67.1011 93.9505 66.4099 94.1936C66.6226 91.3601 64.9438 91.2082 62.9991 90.2207C65.1489 90.4334 66.7061 90.8816 67.1239 91.4209C67.405 91.7172 67.5797 92.1426 67.5797 92.568V92.5604Z' fill='%23474C2F'/%3E%3Cpath d='M58.107 92.8719C60.5378 92.7199 62.5736 93.6163 62.6572 94.8773C62.6572 94.9912 62.6572 95.1052 62.6344 95.2191C61.5329 95.3938 60.2416 95.5154 58.7527 95.5306C56.7776 95.5457 55.1596 95.371 53.8759 95.1279C54.0961 93.9961 55.8813 93.0162 58.1146 92.8719H58.107Z' fill='%23B1B7A5'/%3E%3Cpath d='M42.4582 133.087C45.8386 131.765 49.576 130.975 53.4273 130.618C56.2455 130.36 59.1245 130.337 61.9731 130.519C64.8749 130.701 67.7463 131.104 70.4809 131.674C73.4055 132.509 75.2362 132.699 77.0593 134.591C79.2395 136.968 76.7479 140.949 73.6866 140.288C72.9421 140.09 72.2205 139.916 71.5141 139.756C70.1619 139.452 68.8477 139.209 67.4956 139.012C65.0268 138.662 62.4137 138.48 59.1093 138.427C55.5315 138.389 51.7865 138.586 48.3378 139.141C47.8668 139.217 47.3958 139.3 46.9324 139.392C46.1804 139.536 45.4436 139.695 44.7371 139.878C40.4908 140.972 38.4246 134.758 42.4582 133.087Z' fill='%239EA58E'/%3E%3Cpath d='M42.4583 133.087C45.8386 131.765 49.576 130.975 53.4273 130.618C48.6037 133.117 46.8185 135.966 46.9401 139.392C46.188 139.536 45.4512 139.695 44.7448 139.878C40.4984 140.972 38.4322 134.758 42.4659 133.087H42.4583Z' fill='%23949984'/%3E%3Cpath d='M61.9652 130.527C64.867 130.709 67.7384 131.112 70.4731 131.681C73.3977 132.517 75.2284 132.707 77.0515 134.598C79.2316 136.976 76.74 140.956 73.6787 140.296C72.9343 140.098 72.2126 139.923 71.5062 139.764C70.6554 135.692 67.822 132.616 61.9576 130.527H61.9652Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M42.4659 133.079H42.4735C43.6129 132.608 45.1929 132.061 47.2515 131.583C47.7681 131.484 48.3074 131.37 48.8619 131.241C49.0974 131.195 49.3405 131.15 49.5836 131.112C48.1327 131.491 46.9401 131.909 45.9905 132.297H45.9754C44.2358 133.026 43.2179 135.016 43.3926 137.371C43.461 138.298 43.7041 139.179 44.0687 139.984C42.0329 140.121 40.2174 138.495 40.2401 136.361C40.2553 134.917 41.1289 133.634 42.4583 133.079H42.4659Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M42.4583 133.087H42.4811C42.5267 133.056 42.5647 133.041 42.6178 133.026C42.6634 133.011 42.7014 132.988 42.747 132.973C42.7926 132.95 42.8381 132.935 42.8913 132.919C42.9825 132.882 43.0736 132.851 43.1648 132.813C43.2483 132.783 43.3319 132.752 43.4155 132.722C43.5446 132.676 43.6737 132.623 43.8105 132.578H43.8181C43.8712 132.555 43.9244 132.54 43.9776 132.517C44.1371 132.464 44.3042 132.403 44.4789 132.35C44.9727 132.19 45.5044 132.031 46.0893 131.879C46.1425 131.864 46.1881 131.848 46.2413 131.833C46.5679 131.75 46.9098 131.666 47.2592 131.583C48.4746 131.301 49.8495 131.043 51.3916 130.846C53.6173 130.557 56.1924 130.375 59.1322 130.405C61.1376 130.428 62.9683 130.534 64.6243 130.709C69.5391 131.218 72.9726 132.259 75.1148 133.132C76.0947 133.649 76.8619 134.249 77.3329 134.948C73.8994 133.634 68.0426 132.091 59.3145 132.008C50.1382 131.917 44.008 133.55 40.6124 134.849C40.9846 134.067 41.6379 133.436 42.4659 133.087H42.4583Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M70.4811 131.681C73.4057 132.517 75.2364 132.707 77.0595 134.598C79.2397 136.976 76.7405 140.956 73.6868 140.296C74.53 136.946 73.1322 133.55 70.4811 131.689V131.681Z' fill='%23474C2F'/%3E%3Cpath d='M52.4929 136.163C53.2525 136.482 53.3741 137.333 57.6356 134.689C61.8971 132.046 67.3512 137.219 67.4956 139.019C65.0268 138.67 62.4137 138.495 59.1093 138.434C55.5314 138.396 51.7864 138.594 48.3377 139.148C48.6947 137.242 50.3735 135.282 52.4929 136.163Z' fill='%23B1B7A5'/%3E%3Cpath d='M63.1661 130.511C63.1661 131.142 61.3126 131.674 59.0185 131.689C58.2209 131.689 57.4765 131.636 56.8384 131.537C55.6534 131.347 54.8558 130.99 54.8558 130.572C54.8558 130.094 55.8965 129.683 57.3853 129.494C57.8791 129.433 58.426 129.395 59.0033 129.395C59.725 129.395 60.4087 129.433 61.0012 129.524C61.6772 129.623 62.2394 129.767 62.6192 129.949C62.961 130.116 63.1585 130.306 63.1661 130.511Z' fill='%23474C2F'/%3E%3Cpath opacity='0.41' d='M63.1661 130.511C63.1661 130.929 62.3685 131.294 61.1759 131.507C60.5454 131.62 59.8085 131.681 59.0261 131.689C58.2437 131.696 57.4841 131.636 56.846 131.537C55.661 131.347 54.8633 130.99 54.8633 130.572C54.8633 130.01 55.0609 129.494 55.4027 129.091C55.4027 129.091 56.2535 129.334 57.3929 129.494C58.4336 129.638 59.7554 129.721 61.0088 129.516C61.5709 129.425 62.1178 129.273 62.6192 129.038C62.961 129.433 63.1661 129.942 63.1737 130.504L63.1661 130.511Z' fill='%23676D54'/%3E%3Cpath d='M63.1661 130.511L54.8633 130.572C54.8633 130.01 55.0609 129.494 55.4027 129.091C55.4407 129.045 55.4787 129.007 55.5166 128.969C55.9268 128.559 56.489 128.301 57.1119 128.293L60.8872 128.263C61.5785 128.263 62.2014 128.559 62.6192 129.045C62.961 129.44 63.1661 129.949 63.1737 130.511H63.1661Z' fill='%23474C2F'/%3E%3Cpath opacity='0.41' d='M62.9458 130.884C62.6268 131.142 61.9963 131.362 61.1759 131.507C60.5454 131.621 59.8085 131.681 59.0261 131.689C58.2437 131.697 57.4841 131.636 56.846 131.537C55.661 131.347 54.8633 130.99 54.8633 130.572C54.8633 130.01 55.0609 129.494 55.4027 129.091C55.4027 129.091 56.2535 129.334 57.3929 129.494C58.3576 129.63 59.5654 129.714 60.7277 129.554L62.9458 130.876V130.884Z' fill='%23676D54'/%3E%3Cpath d='M61.1759 131.507C60.5454 131.621 59.8085 131.681 59.0261 131.689C58.2437 131.697 57.4841 131.636 56.846 131.537C55.661 131.347 54.8633 130.99 54.8633 130.572C54.8633 130.01 55.0609 129.494 55.4027 129.091C55.4027 129.091 56.3218 131.431 61.1759 131.507Z' fill='%23676D54'/%3E%3Cpath opacity='0.67' d='M55.1439 96.0623C56.7619 96.8143 58.3419 98.6222 59.2838 101.023C60.7423 104.76 60.0738 108.513 57.795 109.401C57.0049 109.713 56.1162 109.629 55.2426 109.242L55.1439 96.0623Z' fill='%23676D54'/%3E%3Cpath opacity='0.67' d='M62.0951 95.88C62.1862 95.842 62.2698 95.8192 62.3609 95.7964L62.4217 103.742C61.9127 103.165 61.4646 102.436 61.1303 101.6C60.1124 99.0629 60.5454 96.5029 62.0951 95.88Z' fill='%23676D54'/%3E%3Cpath d='M46.0131 103.074C46.0359 103.157 46.0511 103.248 46.0663 103.339C46.0815 103.431 46.0967 103.522 46.1119 103.613C46.1498 103.909 46.1802 104.221 46.1954 104.547C46.1954 104.654 46.203 104.768 46.2106 104.874C46.2106 104.942 46.2106 105.011 46.2106 105.079C46.2106 105.216 46.2106 105.36 46.2106 105.504C46.2106 105.603 46.2106 105.702 46.2106 105.801C46.2106 105.816 46.2106 105.831 46.2106 105.839C46.2106 105.899 46.2106 105.96 46.2106 106.021C46.2106 106.165 46.203 106.302 46.1954 106.446C46.1878 106.606 46.1802 106.765 46.165 106.925C46.1574 107.084 46.1422 107.236 46.1347 107.388C46.1347 107.403 46.1347 107.411 46.1347 107.419C46.1271 107.517 46.1195 107.616 46.1119 107.715C46.0967 107.852 46.0891 107.996 46.0739 108.14C46.0587 108.3 46.0435 108.467 46.0207 108.626L45.9903 108.87C45.9599 109.113 45.9296 109.348 45.8992 109.584C45.884 109.66 45.8764 109.743 45.8688 109.819C45.8308 110.131 45.7776 110.434 45.732 110.723C45.7093 110.875 45.6865 111.012 45.6637 111.156C45.6257 111.369 45.5953 111.574 45.5573 111.764C45.5345 111.893 45.5117 112.022 45.489 112.144C45.4662 112.265 45.4434 112.387 45.4282 112.501C45.4054 112.615 45.3826 112.728 45.3598 112.835C45.3446 112.941 45.3219 113.04 45.3067 113.131C45.3067 113.146 45.2991 113.169 45.2915 113.192C45.2915 113.222 45.2763 113.253 45.2763 113.275C45.2611 113.367 45.2383 113.45 45.2231 113.526C45.2079 113.587 45.2003 113.64 45.1851 113.693C45.1092 113.845 45.0408 113.944 45.0408 113.944L44.8357 114.012L44.7065 113.913L42.534 112.174C42.534 112.174 41.4477 102.101 44.2052 101.402H44.2128L44.2812 101.38C44.2812 101.38 44.3343 101.372 44.3571 101.364C44.4027 101.364 44.4483 101.357 44.4938 101.357C44.5394 101.357 44.585 101.357 44.6382 101.357C44.7901 101.372 44.9268 101.402 45.0484 101.463C45.1395 101.509 45.2307 101.57 45.3067 101.638C45.3826 101.706 45.4586 101.79 45.5345 101.881C45.7472 102.177 45.9068 102.58 46.0207 103.058L46.0131 103.074Z' fill='%23474C2F'/%3E%3Cpath d='M46.0211 103.074C46.0439 103.165 46.0591 103.248 46.0743 103.347C46.0895 103.438 46.1047 103.53 46.1199 103.621C46.1579 103.917 46.1882 104.228 46.2034 104.555C46.2034 104.661 46.211 104.775 46.2186 104.882C46.2186 104.95 46.2186 105.018 46.2186 105.094C46.2186 105.231 46.2186 105.375 46.2186 105.52C46.2186 105.619 46.2186 105.717 46.2186 105.816C46.2186 105.831 46.2186 105.846 46.2186 105.862C46.2186 105.922 46.2186 105.983 46.2186 106.044C46.2186 106.188 46.211 106.325 46.2034 106.469C46.1958 106.629 46.1882 106.788 46.173 106.948C46.1654 107.107 46.1503 107.259 46.1427 107.411C46.1427 107.426 46.1427 107.434 46.1427 107.442C46.1351 107.54 46.1275 107.639 46.1123 107.738C46.0971 107.875 46.0895 108.019 46.0743 108.156C46.0591 108.323 46.0439 108.482 46.0211 108.642L45.9907 108.885C45.9604 109.128 45.93 109.363 45.8996 109.599C45.892 109.675 45.8768 109.758 45.8692 109.834C45.8312 110.146 45.7781 110.45 45.7401 110.738C45.7173 110.89 45.6945 111.027 45.6717 111.171C45.6337 111.384 45.6033 111.582 45.5654 111.779C45.5426 111.908 45.5198 112.037 45.497 112.159C45.4742 112.28 45.4514 112.402 45.4362 112.516C45.4134 112.63 45.3906 112.744 45.3678 112.85C45.3526 112.957 45.3299 113.055 45.3147 113.146C45.3147 113.169 45.3147 113.184 45.2995 113.2C45.2995 113.23 45.2919 113.253 45.2843 113.283C45.2691 113.374 45.2463 113.45 45.2311 113.534C45.2159 113.595 45.2083 113.648 45.2007 113.701C45.1248 113.853 45.0564 113.952 45.0564 113.952L44.8513 114.02L44.7298 113.921C44.7601 113.792 44.7905 113.617 44.8361 113.42C45.3982 110.662 46.8491 102.01 44.2512 101.494C44.2436 101.494 43.9322 101.448 43.917 101.448L43.5827 101.403C43.5827 101.403 43.5295 101.387 43.5143 101.38L43.765 101.342V101.327C44.1145 101.327 44.6386 101.365 44.669 101.365C44.8209 101.38 44.9501 101.418 45.0792 101.479C45.1704 101.524 45.2615 101.577 45.3375 101.653C45.421 101.722 45.497 101.805 45.5654 101.896C45.7856 102.193 45.9376 102.588 46.0515 103.074H46.0211Z' fill='%23676D54'/%3E%3Cpath d='M67.0169 99.0098C67.0169 99.0098 67.0169 99.063 67.0093 99.0858C66.9941 99.3593 66.9713 99.6403 66.9561 99.9214C66.9561 100.218 66.9181 100.438 66.8422 100.605C66.8422 100.628 66.827 100.635 66.8194 100.658C66.751 100.818 66.6371 100.917 66.5003 100.954C66.2573 101.03 65.9306 100.939 65.5508 100.727C64.5101 100.149 63.1048 98.6908 62.0793 97.6425C61.6083 97.1487 61.2133 96.7386 60.9854 96.5562C60.9854 96.9968 60.9854 97.445 60.993 97.9008C60.993 98.1363 61.0006 98.3794 61.0082 98.6224V98.8199C61.0158 99.1618 61.0234 99.5112 61.031 99.8606C61.0386 100.081 61.0386 100.309 61.0386 100.537C61.0462 101.015 61.0462 101.494 61.0386 101.965C61.031 102.147 61.031 102.329 61.0234 102.512V102.55C61.0234 102.55 61.0158 102.633 61.0158 102.679C61.0006 103.059 60.9702 103.438 60.9398 103.818C60.9398 103.833 60.9398 103.849 60.9398 103.871C60.8791 104.434 60.8031 104.996 60.6816 105.535C60.5676 106.067 60.4233 106.583 60.241 107.085C60.1574 107.305 60.0739 107.51 59.9827 107.715C59.9371 107.776 59.884 107.814 59.8308 107.852C58.7825 108.718 57.3848 108.285 56.7467 108.619C56.4504 108.801 56.1466 108.984 55.8276 109.158C55.5161 109.341 55.197 109.516 54.8628 109.69C54.6121 109.827 54.3539 109.956 54.0956 110.085C54.0272 110.116 53.9589 110.154 53.8905 110.184L53.4575 110.389C53.2676 110.473 53.0777 110.556 52.8802 110.632C52.7738 110.678 52.6599 110.723 52.5536 110.769C52.5308 110.777 52.5156 110.784 52.4928 110.792C52.2269 110.89 51.9686 110.982 51.7028 111.073C51.5432 111.134 51.3837 111.187 51.2318 111.232C51.1558 111.255 51.0875 111.278 51.0115 111.293C50.9052 111.323 50.7912 111.354 50.6848 111.384C50.5329 111.43 50.3734 111.468 50.2215 111.498C49.6518 111.635 49.082 111.726 48.5199 111.764C48.4971 111.764 48.4819 111.764 48.4667 111.779C48.4136 111.794 48.3452 111.817 48.2616 111.84C47.2969 112.106 43.6811 112.987 41.7364 112.987C38.8726 112.987 35.3252 113.64 34.6491 113.397C34.6035 113.382 34.5731 113.359 34.5579 113.344C34.5503 113.329 34.5427 113.321 34.5427 113.321C34.5579 113.245 34.5731 113.162 34.5959 113.071C34.6111 112.995 34.6339 112.911 34.6491 112.82C35.2416 110.237 35.8721 105.771 36.419 103.112C37.1786 102.352 42.496 103.112 45.5346 102.352C45.7473 102.299 46.1878 102.003 46.6284 101.684C47.1298 101.312 47.6311 100.924 47.8134 100.833C49.7049 99.8834 59.7624 91.9377 61.0082 92.6821C61.0614 92.7201 61.145 92.7733 61.2437 92.8417C61.3653 92.9252 61.4868 93.0164 61.6159 93.0999C61.6463 93.1151 61.6691 93.1303 61.6995 93.1607C61.8362 93.2519 61.9653 93.343 62.1021 93.4342C62.1401 93.457 62.178 93.4873 62.2236 93.5177C62.2236 93.5177 62.2388 93.5253 62.2692 93.5481C62.3983 93.6393 62.5275 93.7304 62.6642 93.8292C63.0744 94.1102 63.515 94.4293 63.9632 94.7483H63.9708C63.9708 94.7483 63.9784 94.7635 63.986 94.7635C64.0315 94.8015 64.0847 94.8395 64.1379 94.8775C64.2518 94.9534 64.3658 95.037 64.4721 95.1205C64.662 95.2573 64.8519 95.394 65.0343 95.5459C65.3381 95.7738 65.6192 95.9941 65.8699 96.1992C65.961 96.2752 66.0522 96.3435 66.1357 96.4195C66.3788 96.6246 66.6067 96.8297 66.827 97.0272C66.8498 97.0424 66.8649 97.0576 66.8725 97.0728C66.9257 97.1563 66.9637 97.2703 66.9941 97.3918C67.0017 97.407 67.0017 97.4222 67.0017 97.4374C67.0853 97.8324 67.0625 98.3945 67.0321 99.0023L67.0169 99.0098Z' fill='%23E8D4BA'/%3E%3Cpath d='M66.9565 99.9214C66.9261 100.164 66.8881 100.392 66.8425 100.59C66.7894 100.795 66.7286 100.962 66.6526 101.084C65.3764 100.104 59.8387 95.3864 59.8387 95.3864C59.8387 95.3864 60.5756 94.057 61.8442 95.1053C63.0064 96.0701 66.4171 99.3896 66.9565 99.9214Z' fill='%23CEB79B'/%3E%3Cpath d='M67.1457 101.152C67.1077 101.433 66.8951 102.231 66.576 102.998C66.5152 103.142 66.4469 103.287 66.3785 103.423C66.3405 103.499 66.3025 103.575 66.257 103.651C66.1886 103.773 66.1126 103.894 66.0443 104.001C65.9531 104.137 65.8544 104.251 65.7556 104.358C65.391 104.722 63.5147 103.279 61.7979 101.418C61.5397 101.137 61.2814 100.841 61.0307 100.544C60.6129 100.043 60.2179 99.5264 59.8913 99.0174C58.9645 97.6045 58.4784 96.2676 59.0557 95.5307C59.0557 95.5307 60.4762 94.1634 61.5473 94.8774C61.6308 94.9306 61.7296 95.0066 61.8511 95.1129C62.8766 95.9941 65.1859 98.4933 66.3937 99.9974C66.576 100.225 66.7279 100.423 66.8495 100.597C67.0546 100.879 67.1685 101.084 67.1609 101.16L67.1457 101.152Z' fill='%23E8D4BA'/%3E%3Cpath d='M66.5761 102.998C66.4165 103.362 66.2418 103.712 66.0443 104C64.3807 102.679 60.0356 99.0325 60.0356 99.0325C60.0356 99.0325 61.2663 98.3716 62.5348 99.4199C63.6363 100.331 65.8392 102.269 66.5761 102.998Z' fill='%23CEB79B'/%3E%3Cpath d='M65.437 106.553C65.361 106.667 65.2775 106.766 65.1939 106.857L65.1787 106.872C65.0116 107.047 64.8293 107.161 64.6318 107.206C64.4039 107.259 63.7734 106.857 63.029 106.188C62.5656 105.77 62.0567 105.254 61.5705 104.684C61.5477 104.654 61.5173 104.623 61.4945 104.593C61.3806 104.456 61.2666 104.312 61.1527 104.168C61.0615 104.054 60.9704 103.94 60.8868 103.818C60.6665 103.514 60.4538 103.203 60.2639 102.884C60.1424 102.671 60.0208 102.466 59.9221 102.253C59.3372 101.068 59.1397 99.9061 59.7702 99.0781C59.7702 99.0781 59.8158 99.0477 59.8917 99.0097C60.1196 98.8958 60.6134 98.6679 61.0388 98.6299C61.2363 98.6147 61.411 98.6299 61.5477 98.7211C61.6161 98.7667 61.7376 98.873 61.8971 99.0249C62.3301 99.4275 63.0518 100.157 63.7886 100.932C64.5406 101.714 65.3079 102.542 65.8092 103.119C66.0067 103.34 66.1587 103.522 66.2574 103.651C66.3334 103.75 66.3713 103.818 66.3789 103.841C66.4245 104.061 66.0903 105.626 65.437 106.553Z' fill='%23E8D4BA'/%3E%3Cpath d='M65.4371 106.553C65.3611 106.667 65.2776 106.766 65.194 106.857C65.0193 107.032 64.8294 107.161 64.6243 107.206C64.5939 107.214 64.5559 107.206 64.5179 107.206C63.9026 106.568 61.092 104.35 60.226 102.884C59.9374 102.383 60.226 102.694 61.1908 102.694C62.9379 102.694 65.4447 106.561 65.4447 106.561L65.4371 106.553Z' fill='%23CEB79B'/%3E%3Cpath d='M65.4523 107.502C65.2169 107.859 64.0318 110.412 63.614 110.647C63.2266 110.852 62.5658 110.548 62.3379 110.442L62.543 108.399C62.467 108.3 61.1225 107.7 60.6135 107.723C60.3932 107.685 60.1729 107.73 59.9602 107.738C59.7703 107.738 59.5804 107.715 59.4057 107.571C59.1246 107.358 57.7117 103.476 57.7117 103.476C56.9141 101.63 58.1979 101.858 59.8995 102.269C60.2413 102.352 60.5907 102.443 60.9553 102.519C61.0921 102.55 61.2288 102.58 61.3579 102.61C62.1935 102.785 64.3433 105.429 65.1561 106.887C65.2928 107.138 65.3916 107.35 65.4448 107.51L65.4523 107.502Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M66.2577 103.651C66.3337 103.75 66.3717 103.818 66.3793 103.841C66.4249 104.061 66.0906 105.626 65.4374 106.553C65.3614 106.667 65.2778 106.766 65.1943 106.857C65.1867 106.864 65.1791 106.872 65.1715 106.88C65.3082 107.13 65.407 107.343 65.4601 107.502C65.2247 107.86 64.0396 110.412 63.6218 110.647C63.2344 110.852 62.5735 110.549 62.3457 110.442L62.5508 108.399C62.4748 108.3 61.1303 107.7 60.6213 107.723C60.401 107.685 60.1807 107.73 59.968 107.738C60.0212 107.662 60.0744 107.586 60.1276 107.51C60.9404 106.325 61.3202 105.353 61.4873 104.601C61.7759 103.271 61.3733 102.61 61.3733 102.61C61.5784 102.185 61.7152 101.79 61.7987 101.433C62.2089 99.7391 61.5481 98.744 61.5481 98.744C61.7987 98.3869 61.9659 98.0375 62.0722 97.7033C62.5052 96.3131 61.8823 95.1737 61.8519 95.1205C62.1102 93.738 61.0771 92.7733 61.0087 92.7049C61.2214 92.8416 61.8671 93.2822 62.6647 93.8443C63.28 94.2773 63.9713 94.7787 64.6322 95.2648C65.1791 95.6675 65.6956 96.0625 66.1058 96.3967C66.6224 96.8145 66.9642 97.1335 66.987 97.2627C67.0478 97.6121 67.0933 98.9035 66.9718 99.929C66.9414 100.172 66.9034 100.4 66.8579 100.597C67.063 100.878 67.1769 101.084 67.1693 101.16C67.1313 101.441 66.9186 102.238 66.5996 103.005C66.5008 103.233 66.3945 103.454 66.2805 103.659L66.2577 103.651Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M65.452 107.502C65.452 107.502 65.4065 107.563 65.3989 107.594C65.2621 107.776 65.1406 108.042 65.0039 108.338C64.9887 108.361 64.9811 108.391 64.9659 108.414C64.7152 108.953 64.4265 109.576 64.0847 110.047C64.0771 110.047 64.0771 110.055 64.0771 110.055C64.0695 110.062 64.0695 110.07 64.0619 110.078C64.0619 110.093 64.0467 110.108 64.0315 110.123C63.7884 110.435 63.515 110.663 63.2035 110.708H63.1883C63.1883 110.708 63.1656 110.716 63.158 110.708C62.9149 110.754 62.6338 110.67 62.3376 110.435C62.3452 110.374 62.3528 110.305 62.3604 110.23C62.3755 110.078 62.3983 109.895 62.4135 109.705C62.4287 109.607 62.4363 109.508 62.4439 109.409C62.4591 109.212 62.4819 109.022 62.4971 108.847C62.5123 108.741 62.5199 108.642 62.5275 108.558L62.5427 108.391C62.5427 108.391 62.5275 108.376 62.4971 108.361C62.4971 108.361 62.4743 108.346 62.4515 108.33C62.4363 108.315 62.4135 108.308 62.3831 108.292C62.3755 108.292 62.3755 108.285 62.3679 108.285H62.3604C62.3604 108.285 62.3224 108.27 62.3072 108.254C62.178 108.194 62.0489 108.125 61.9122 108.072C61.783 108.011 61.6463 107.958 61.502 107.905C61.4108 107.875 61.3197 107.844 61.2209 107.821C61.2057 107.821 61.1905 107.814 61.1677 107.806C61.1222 107.799 61.0766 107.784 61.031 107.776C61.0006 107.768 60.9702 107.761 60.9322 107.753C60.8411 107.738 60.7423 107.723 60.6512 107.715H60.6208C60.5752 107.708 60.522 107.708 60.4689 107.708C60.4689 107.708 60.4689 107.7 60.4613 107.7H60.4537C60.4537 107.7 60.4537 107.7 60.4385 107.708C60.4385 107.708 60.4334 107.705 60.4233 107.7H60.3701C60.2865 107.7 60.2106 107.7 60.127 107.715C60.0815 107.715 60.0283 107.723 59.9827 107.73H59.9675C59.9219 107.784 59.8688 107.822 59.8156 107.859C58.7673 108.725 57.3696 108.292 56.7315 108.627C56.4352 108.809 56.1314 108.991 55.8123 109.166C55.5009 109.348 55.1818 109.523 54.8476 109.698C54.5969 109.835 54.3387 109.964 54.0804 110.093C54.012 110.123 53.9437 110.161 53.8753 110.192L53.4423 110.397C53.2524 110.48 53.0625 110.564 52.865 110.64L52.4776 110.799C52.2117 110.898 51.9534 110.989 51.6875 111.08C51.528 111.141 51.3685 111.194 51.2166 111.24C51.0343 111.293 50.852 111.346 50.6696 111.392C50.5177 111.437 50.3582 111.475 50.2063 111.506C49.6366 111.642 49.0668 111.734 48.5047 111.772C48.4819 111.772 48.4667 111.772 48.4515 111.787C48.3983 111.802 48.33 111.825 48.2464 111.848C47.9122 111.939 47.2589 112.106 46.4613 112.288C44.9648 112.622 42.9898 112.995 41.7212 112.995C38.8574 112.995 35.31 113.648 34.6339 113.405C34.5883 113.39 34.5579 113.367 34.5427 113.352C34.5351 113.336 34.5275 113.329 34.5275 113.329C34.5427 113.253 34.5579 113.169 34.5807 113.078C34.5959 113.002 34.6187 112.919 34.6339 112.827C35.2264 110.245 35.8569 105.778 36.4038 103.119C37.1634 102.36 42.4808 103.119 45.5194 102.36C45.7321 102.307 46.1726 102.01 46.6132 101.691C45.4282 106.31 47.9502 108.065 52.5308 107.389C54.5818 107.13 56.929 107.107 58.8661 106.447C59.5193 106.234 60.1346 105.938 60.6664 105.543C60.9398 105.338 61.1905 105.11 61.4184 104.851C61.464 104.791 61.5172 104.737 61.5627 104.677C61.6387 104.677 61.7147 104.692 61.7982 104.73C62.6186 105.064 63.5302 107.001 64.4189 105.801L64.4341 105.786C64.5329 105.922 64.662 106.097 64.8064 106.279C64.8292 106.325 64.8595 106.363 64.8899 106.409C65.0039 106.553 65.1102 106.705 65.1938 106.849C65.3533 107.1 65.4596 107.328 65.452 107.502Z' fill='%23CEB79B'/%3E%3Cpath d='M62.3379 107.503C62.148 107.89 61.5023 107.905 61.5023 107.905C61.2365 107.814 60.9326 107.738 60.6212 107.708C60.4085 107.685 60.1958 107.685 59.9831 107.723H59.9679C59.9223 107.776 59.8691 107.822 59.8235 107.852C59.8235 107.852 60.3173 106.576 60.7503 106.842C61.1909 107.108 60.3173 107.32 60.7503 107.404C61.1909 107.495 62.5354 107.108 62.3455 107.495L62.3379 107.503Z' fill='%23CEB79B'/%3E%3Cpath d='M62.5275 108.558L62.5427 108.391C62.5427 108.391 62.4743 108.346 62.3604 108.285V108.27C62.3604 108.27 62.5047 107.7 63.0896 108.27C63.6745 108.839 62.5199 108.551 62.5199 108.551L62.5275 108.558Z' fill='%23CEB79B'/%3E%3Cpath d='M64.434 96.1537C64.3125 96.7917 64.0694 97.3387 64.0694 97.3387L62.8388 95.9865C62.854 95.8954 62.8616 95.8042 62.8692 95.7207C62.9148 95.3105 62.8996 94.9762 62.854 94.6952C62.778 94.2774 62.6261 93.9887 62.4894 93.8064C62.3374 93.6013 62.2083 93.5253 62.2083 93.5253C62.2691 93.2215 62.9983 93.5937 63.8719 94.2698C63.9403 94.3154 64.001 94.3685 64.0694 94.4217C64.1834 94.5205 64.2745 94.6344 64.3353 94.7635H64.3429C64.5404 95.1585 64.5176 95.6827 64.434 96.1537Z' fill='%23949984'/%3E%3Cpath d='M62.854 94.7027C62.6945 93.8215 62.2083 93.5253 62.2083 93.5253C62.2691 93.229 62.9983 93.5936 63.8719 94.2697C64.4416 95.2724 62.854 94.7027 62.854 94.7027Z' fill='%239EA58E'/%3E%3Cpath d='M64.4345 96.1536C64.313 96.7917 64.0699 97.331 64.0699 97.331L62.8393 95.9789C62.8545 95.8877 62.8697 95.7965 62.8773 95.713C62.8773 95.713 63.6445 96.9208 64.4345 96.146V96.1536Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M59.451 98.6528C59.451 98.6528 61.654 97.4222 61.5704 97.8856C61.4869 98.349 61.259 98.6148 61.0311 98.6376C60.8032 98.6604 59.451 98.6604 59.451 98.6604V98.6528Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M59.451 95.5763C59.451 95.5763 61.5552 93.8823 61.4641 94.3457C61.3729 94.8091 61.221 95.1737 60.9931 95.1965C60.7652 95.2193 59.451 95.5839 59.451 95.5839V95.5763Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M59.261 102.694C59.261 102.694 60.9094 101.6 61.0841 102.041C61.1904 102.314 61.0309 102.671 60.803 102.694C60.5751 102.717 59.261 102.694 59.261 102.694Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M65.4372 106.553C65.3612 106.667 65.2777 106.766 65.1941 106.857L65.1789 106.872L62.7785 103.446C62.7785 103.446 66.3943 104.707 65.8094 103.127C66.0069 103.347 66.1588 103.53 66.2576 103.659C66.3336 103.757 66.3715 103.826 66.3791 103.849C66.4247 104.069 66.0905 105.634 65.4372 106.56V106.553Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M67.1465 101.152C67.1086 101.433 66.8959 102.231 66.5768 102.998C66.5161 103.142 66.4477 103.286 66.3793 103.423L63.9789 100.651C63.9789 100.651 66.9642 101.129 66.3869 99.9897C66.5692 100.218 66.7212 100.415 66.8427 100.59C67.0478 100.871 67.1617 101.076 67.1542 101.152H67.1465Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M66.9564 99.9214C66.926 100.164 66.888 100.392 66.8424 100.59L64.6775 97.6957C64.6775 97.6957 67.321 97.764 66.098 96.3891C66.6145 96.8069 66.9564 97.1259 66.9792 97.2551C67.0399 97.6045 67.0855 98.8959 66.964 99.9214H66.9564Z' fill='%23CEB79B'/%3E%3Cpath d='M52.5385 110.776C52.5385 110.776 52.5005 110.792 52.4777 110.799C52.2118 110.898 51.9535 110.989 51.6877 111.08C51.5281 111.141 51.3686 111.194 51.2167 111.24C51.1407 111.263 51.0724 111.285 50.9964 111.3C50.7837 109.295 50.8445 106.621 51.9004 104.98C51.7712 106.667 51.832 109.113 52.5385 110.776Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M46.4613 112.288C45.1547 112.584 43.476 112.904 42.2302 112.979C42.0479 112.987 41.8807 112.995 41.7212 112.995C38.8574 112.995 35.31 113.648 34.6339 113.405C34.5883 113.39 34.5579 113.367 34.5427 113.352C34.5351 113.337 34.5275 113.329 34.5275 113.329C34.5427 113.253 34.5579 113.169 34.5807 113.078C34.5959 113.002 34.6187 112.919 34.6339 112.828C35.2264 110.245 35.8569 105.778 36.4038 103.119C37.0723 102.451 41.2654 102.96 44.3343 102.573C44.7521 102.519 45.1547 102.451 45.5194 102.36C45.5194 102.36 41.6908 108.642 46.4613 112.288Z' fill='%23CEB79B'/%3E%3Cpath d='M42.2302 112.979C42.0479 112.987 41.8807 112.995 41.7212 112.995C38.8574 112.995 35.31 113.648 34.6339 113.405C34.5883 113.39 34.5579 113.367 34.5427 113.352C34.5351 113.336 34.5275 113.329 34.5275 113.329C34.5427 113.253 34.5579 113.169 34.5807 113.078C34.5959 113.002 34.6187 112.919 34.6339 112.828C35.2264 110.245 35.8569 105.778 36.4038 103.119C37.0723 102.451 41.2654 102.96 44.3343 102.573L44.3951 102.603C44.3951 102.603 41.4022 107.29 42.2302 112.979Z' fill='%23CEB79B'/%3E%3Cpath d='M64.3353 94.7635C63.4237 94.0267 62.4894 93.8064 62.4894 93.8064C62.3374 93.6013 62.2083 93.5253 62.2083 93.5253C62.2691 93.2215 62.9983 93.5937 63.8719 94.2698C63.9403 94.3154 64.001 94.3685 64.0694 94.4217C64.1834 94.5205 64.2745 94.6344 64.3353 94.7635Z' fill='%23676D54'/%3E%3Cpath d='M44.3419 101.418C44.3419 101.418 43.7037 102.04 43.2784 103.013C42.6934 104.433 42.7618 106.272 43.1416 108.156C43.5062 109.971 44.1595 111.832 44.8052 113.412C44.8584 113.541 44.9116 113.67 44.9647 113.8C44.9875 113.845 45.0027 113.898 45.0255 113.951L44.7976 114.035L44.1216 114.255C43.6354 114.331 43.172 114.43 42.7011 114.552L42.5567 114.088L42.4959 113.898L41.0147 108.976V108.953L39.6853 104.578L39.5334 104.084L39.5182 104.031L39.4726 103.871L39.3511 103.461L39.3359 103.415L38.9181 102.018C39.2675 101.98 39.6245 101.934 40.0044 101.889C40.9615 101.767 42.0174 101.615 43.1872 101.433H43.2556C43.2556 101.433 43.3315 101.41 43.3695 101.402C43.4607 101.387 43.5518 101.372 43.6506 101.357C43.6658 101.357 43.681 101.357 43.7037 101.364C43.7037 101.364 43.7114 101.364 43.719 101.364C43.8481 101.38 44.0456 101.395 44.2051 101.41C44.2279 101.41 44.2507 101.41 44.2735 101.41H44.3191C44.3191 101.41 44.3418 101.41 44.3494 101.418H44.3419Z' fill='%23676D54'/%3E%3Cpath d='M43.7266 101.349C43.7266 101.349 43.7266 101.357 43.719 101.364C43.719 101.38 43.6962 101.387 43.6886 101.402C43.681 101.402 43.6734 101.425 43.6658 101.425C43.6354 101.456 43.5823 101.501 43.5671 101.554C43.5367 101.585 43.5063 101.63 43.4835 101.668C43.4379 101.721 43.4 101.797 43.3468 101.858C43.2556 101.987 43.1872 102.109 43.1113 102.246C43.1113 102.246 43.1113 102.253 43.1113 102.261C43.1113 102.261 43.0885 102.314 43.0733 102.337C43.0733 102.337 43.0733 102.337 43.0733 102.344C43.0353 102.405 43.0201 102.451 42.9973 102.511C42.9973 102.511 42.9973 102.517 42.9973 102.527C42.9973 102.527 42.9974 102.534 42.9822 102.549C42.9822 102.557 42.9822 102.565 42.9822 102.565C42.9442 102.663 42.891 102.77 42.853 102.876C42.853 102.876 42.853 102.876 42.853 102.891V102.906C42.853 102.929 42.8378 102.944 42.8302 102.967V102.99C42.8302 102.99 42.7999 103.043 42.7999 103.066C42.7771 103.172 42.7391 103.263 42.7163 103.37C42.5416 103.955 42.496 104.578 42.4656 105.185C42.4656 105.239 42.4656 105.284 42.4656 105.337C42.4656 105.383 42.4656 105.413 42.4656 105.444C42.4656 105.793 42.4884 106.15 42.5188 106.499C42.5492 106.872 42.6099 107.259 42.6707 107.631C43.0049 109.447 43.6126 111.224 44.3267 112.918C44.4103 113.108 44.4862 113.298 44.5774 113.488C44.5774 113.496 44.5774 113.496 44.5774 113.496C44.6382 113.663 44.7217 113.815 44.7901 113.982C44.7901 113.982 44.8053 114.027 44.8204 114.05C44.3115 114.21 43.7722 114.407 43.2708 114.59C42.42 114.901 41.592 115.273 40.7716 115.645C33.5552 118.737 27.8123 124.905 20.1553 126.941V126.956C15.9545 128.103 10.1206 125.771 6.61871 122.634C6.27688 122.3 5.76792 122.042 5.52484 121.616C5.50205 121.525 5.49446 121.434 5.50206 121.335V121.32C5.56283 120.826 5.85147 120.218 6.13254 119.702C6.75543 118.555 7.51507 117.423 8.2747 116.352C10.8726 112.774 13.6377 109.014 17.132 106.218C21.4467 102.428 27.387 102.451 32.75 102.405C34.9909 102.39 37.2242 102.261 39.4575 101.98C40.878 101.828 42.3137 101.607 43.7342 101.372L43.7266 101.349Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M43.7344 101.342C43.7344 101.342 43.6964 101.387 43.6812 101.402C43.6432 101.448 43.5901 101.494 43.5597 101.547C43.5369 101.585 43.4989 101.623 43.4761 101.661C43.4685 101.661 43.4609 101.691 43.4457 101.691C43.4229 101.744 43.3774 101.79 43.3394 101.851C43.1951 102.056 43.0735 102.276 42.9748 102.496C42.9748 102.496 42.9748 102.496 42.9748 102.511C42.9672 102.511 42.9672 102.542 42.952 102.549C42.8988 102.679 42.838 102.808 42.8001 102.944C42.1468 104.874 42.443 106.986 42.9292 108.923C36.6091 109.53 31.1777 106.256 30.3193 102.398C34.4441 102.458 39.1842 102.154 43.7344 101.349V101.342Z' fill='%23474C2F'/%3E%3Cpath d='M41.0454 115.479C33.6922 118.57 27.9266 124.83 20.1404 126.911V126.926C16.3347 128.012 10.2348 126.159 5.6087 121.768C5.6087 120.34 6.86209 118.076 8.57125 115.684C10.2728 113.314 12.4226 110.822 14.2761 108.893C15.3851 107.73 16.3878 106.781 17.1171 106.181C19.4947 110.906 29.9092 119.573 41.0454 115.479Z' fill='%23979E87'/%3E%3Cpath d='M41.1146 115.456C41.1146 115.456 41.0688 115.471 41.0459 115.479C41.0688 115.471 41.084 115.463 41.1069 115.456H41.1146Z' fill='%23979E87'/%3E%3Cpath d='M41.045 103.651C40.9083 104.882 39.6929 104.593 39.5258 104.046C39.2751 103.256 41.1514 102.618 41.045 103.651Z' fill='%23676D54'/%3E%3Cpath d='M41.0455 103.651C41.0151 103.955 40.9164 104.16 40.7797 104.297C40.8253 104.19 40.8632 104.054 40.8784 103.902C40.962 103.142 39.9669 103.294 39.5339 103.734C39.7618 103.119 41.1367 102.762 41.0455 103.651Z' fill='%23474C2F'/%3E%3Cpath d='M34.6344 104.836C34.8015 105.353 33.776 105.755 33.4114 105.71C33.2215 105.687 33.0695 105.596 32.9936 105.444C32.3707 104.692 34.2546 103.651 34.6344 104.836Z' fill='%23676D54'/%3E%3Cpath d='M32.9482 104.836C33.2596 104.297 34.3535 103.962 34.6346 104.836C34.7029 105.041 34.5738 105.231 34.3763 105.383C34.4218 105.292 34.4294 105.2 34.3991 105.102C34.1712 104.388 33.3888 104.479 32.9482 104.836Z' fill='%23474C2F'/%3E%3Cpath d='M26.9391 105.322C27.3189 104.57 28.3292 104.585 28.709 105.041C28.8761 105.246 28.8153 105.535 28.6406 105.702C28.1848 106.135 27.3113 106.196 26.9998 105.823C26.8935 105.702 26.8631 105.482 26.9391 105.322Z' fill='%23676D54'/%3E%3Cpath d='M28.7086 105.041C28.8833 105.246 28.8149 105.535 28.6402 105.702C28.6174 105.717 28.6023 105.74 28.5795 105.755C28.6326 105.611 28.6174 105.444 28.5035 105.315C28.1769 104.927 27.402 104.866 26.9387 105.315C27.3261 104.578 28.3288 104.585 28.701 105.041H28.7086Z' fill='%23474C2F'/%3E%3Cpath d='M26.9166 123.948C25.2302 124.989 23.4755 125.954 21.5688 126.546C21.0978 126.691 20.6193 126.827 20.1331 126.919V126.934C16.145 127.807 12.0582 126.478 8.74626 124.214C8.4728 124.017 8.19934 123.834 7.92587 123.645C7.47769 123.325 7.0295 122.968 6.6041 122.619C6.26227 122.308 5.82928 122.042 5.53302 121.662C5.51783 121.639 5.51025 121.616 5.50266 121.594C5.47227 121.51 5.47227 121.404 5.47987 121.312V121.297C5.55583 120.705 5.81409 120.241 6.10275 119.672C6.3914 119.132 6.71046 118.608 7.0371 118.099C7.38653 117.545 7.76634 116.998 8.14615 116.458C8.17654 116.413 8.20694 116.367 8.23733 116.322C8.10059 117.393 13.5167 122.596 17.0414 123.075C19.6849 123.941 23.6958 124.229 26.8938 123.956H26.9014L26.9166 123.948Z' fill='%23949984'/%3E%3Cpath d='M21.515 105.77C21.6517 105.634 21.8036 105.527 21.9708 105.459C22.3202 105.254 22.7076 105.299 22.9583 105.626C22.9811 105.664 23.0039 105.702 23.0114 105.748C23.0798 105.93 23.0646 106.165 22.9279 106.348C22.7456 106.606 22.1758 106.849 21.8416 106.781C21.4618 106.758 21.1504 106.135 21.515 105.77Z' fill='%23676D54'/%3E%3Cpath d='M21.5152 105.77C21.6519 105.634 21.8039 105.527 21.971 105.459C22.3204 105.254 22.7078 105.299 22.9585 105.626C22.9813 105.664 23.0041 105.702 23.0117 105.748C23.08 105.93 23.0648 106.165 22.9281 106.348C22.9205 106.363 22.9053 106.37 22.8977 106.386C22.9281 106.257 22.9205 106.12 22.8825 106.006C22.8749 105.96 22.8521 105.915 22.8294 105.884C22.5863 105.558 22.1913 105.512 21.8418 105.717C21.6823 105.786 21.5228 105.899 21.3861 106.036C21.3861 106.036 21.3709 106.051 21.3633 106.059C21.3861 105.96 21.4316 105.862 21.5152 105.77Z' fill='%23474C2F'/%3E%3Cpath d='M15.3852 107.768C15.9701 107.1 16.7374 107.054 17.102 107.297C17.6261 107.647 17.0868 109.029 15.6663 108.604C15.2561 108.482 15.0282 108.186 15.3928 107.768H15.3852Z' fill='%23676D54'/%3E%3Cpath d='M15.3848 107.768C15.9622 107.1 16.737 107.054 17.1016 107.297C17.3523 107.464 17.3599 107.859 17.1472 108.194C17.2156 107.943 17.1624 107.7 16.9801 107.571C16.6154 107.328 15.8482 107.373 15.2633 108.042C15.2405 108.064 15.2253 108.087 15.2101 108.11C15.2253 108.011 15.2785 107.89 15.3848 107.768Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M20.133 126.926C16.4413 127.678 12.1114 126.987 6.93829 122.877C7.31051 122.832 10.782 125.019 12.1949 125.543C14.9144 126.554 17.9529 126.82 18.3403 126.759C19.3506 126.599 21.7587 126.106 22.7538 125.68C23.126 125.521 23.4982 125.346 23.8704 125.156C24.5693 124.807 25.2606 124.412 25.9442 124.009C26.9925 123.386 28.018 122.725 29.0435 122.072C30.0158 121.457 30.9958 120.864 31.9681 120.241C33.8444 119.026 35.6827 117.75 37.5742 116.565C37.6957 116.489 37.8096 116.413 37.9312 116.344C39.4201 115.425 40.9545 114.574 42.5117 113.898C43.0359 113.67 43.5676 113.465 44.0994 113.283C44.2057 113.245 44.3121 113.207 44.426 113.177C44.4412 113.215 44.4564 113.253 44.4716 113.291C44.502 113.359 44.5248 113.42 44.5551 113.481C44.5703 113.511 44.5779 113.534 44.5931 113.564C44.6311 113.655 44.6691 113.739 44.7071 113.822C44.7223 113.86 44.7374 113.891 44.7526 113.921C44.7678 113.952 44.783 113.99 44.7982 114.028C44.745 114.05 44.6843 114.065 44.6311 114.081C44.5627 114.103 44.4868 114.126 44.4108 114.149C44.388 114.157 44.3652 114.164 44.3349 114.172L43.7727 114.369C43.7727 114.369 43.7271 114.385 43.7043 114.392C43.5904 114.43 43.4765 114.468 43.3625 114.514L43.1574 114.582C43.0283 114.635 42.8991 114.681 42.7624 114.734C42.6181 114.795 42.4814 114.848 42.3446 114.909C42.2079 114.962 42.0712 115.023 41.942 115.076C41.9268 115.083 41.9116 115.091 41.904 115.091C41.7825 115.144 41.661 115.197 41.5394 115.251C41.4027 115.311 41.2736 115.372 41.1368 115.433C41.0077 115.486 40.8861 115.547 40.7646 115.6C40.757 115.6 40.7418 115.608 40.7342 115.615C40.5975 115.676 40.4683 115.744 40.3316 115.805C40.0657 115.934 39.7999 116.063 39.534 116.2C39.4808 116.23 39.4276 116.253 39.3745 116.284C39.3441 116.291 39.3213 116.314 39.2985 116.322C39.2453 116.352 39.1922 116.375 39.139 116.405C39.0099 116.474 38.8807 116.542 38.744 116.61C38.6148 116.679 38.4781 116.755 38.349 116.823C37.4678 117.302 36.5942 117.803 35.7207 118.327C35.5383 118.441 35.356 118.547 35.1661 118.661C34.9838 118.775 34.8015 118.882 34.6116 118.995C34.4293 119.109 34.2394 119.223 34.0571 119.337C33.6924 119.565 33.3278 119.801 32.9632 120.029C32.7809 120.143 32.591 120.264 32.4087 120.386C32.0592 120.613 31.7098 120.841 31.3528 121.069C31.1705 121.191 30.9882 121.312 30.7983 121.426C30.6159 121.548 30.4336 121.669 30.2437 121.783C29.1347 122.505 28.0256 123.219 26.9166 123.91C26.8482 123.956 26.7722 124.001 26.7039 124.047C25.2985 124.921 23.9388 125.711 22.5259 126.242C21.8118 126.516 21.075 126.721 20.323 126.842H20.3078C20.2546 126.85 20.2014 126.865 20.1255 126.888V126.903H20.133V126.926Z' fill='%23474C2F'/%3E%3Cpath d='M16.441 112.972C16.1144 115.281 13.5772 116.838 10.7666 116.443C9.95376 116.329 9.20932 116.063 8.57123 115.691C10.2728 113.321 12.4226 110.829 14.2761 108.9C15.7725 109.834 16.6689 111.376 16.441 112.972Z' fill='%23AAB09E'/%3E%3Cpath d='M77.5219 126.47L75.5848 128.65C75.5848 128.65 71.0575 117.871 73.9593 117.149C76.861 116.428 77.5219 126.47 77.5219 126.47Z' fill='%23474C2F'/%3E%3Cpath d='M75.8593 128.339L75.5783 128.65C75.5783 128.65 71.0509 117.871 73.9527 117.149C74.0894 117.119 74.2185 117.104 74.3477 117.119C71.7194 117.772 75.1757 126.645 75.8593 128.339Z' fill='%23676D54'/%3E%3Cpath d='M83.5003 127.427C83.318 127.443 83.1129 127.465 82.9002 127.481C82.7255 127.496 82.5356 127.511 82.3381 127.519C82.1406 127.534 81.9279 127.549 81.7152 127.557C81.5025 127.572 81.2822 127.579 81.0619 127.595H81.0467C80.8188 127.602 80.591 127.61 80.3555 127.617C78.935 127.671 77.3018 127.686 75.6306 127.655C75.0989 127.648 74.5671 127.64 74.0354 127.617C73.8607 127.61 73.6859 127.602 73.5112 127.602C73.3137 127.595 73.1162 127.587 72.9187 127.572C71.6881 127.519 70.4955 127.427 69.4168 127.298C69.2497 127.283 69.075 127.26 68.9155 127.238C68.7483 127.215 68.5888 127.192 68.4293 127.169C68.2698 127.146 68.1178 127.124 67.9659 127.093C67.5101 127.017 67.1 126.934 66.7277 126.835C66.6518 126.82 66.5834 126.797 66.5074 126.774C66.3555 126.729 66.196 126.675 66.0365 126.615C65.8694 126.561 65.7098 126.501 65.5427 126.44C65.4212 126.402 65.3072 126.356 65.1857 126.303C65.1477 126.303 65.1097 126.28 65.0642 126.258C64.9958 126.227 64.9274 126.204 64.859 126.174C64.6919 126.106 64.5248 126.037 64.3653 125.961C64.1298 125.855 63.8943 125.749 63.6664 125.635C63.6588 125.635 63.6512 125.627 63.6436 125.627C63.5601 125.582 63.4689 125.544 63.3854 125.498C63.2106 125.407 63.0435 125.323 62.8764 125.232C62.5422 125.057 62.2231 124.883 61.9117 124.7C61.8205 124.655 61.7294 124.602 61.6458 124.548C61.4255 124.427 61.2052 124.29 60.9925 124.161C60.8254 124.07 60.5975 124.04 60.3468 124.024C60.005 124.002 59.6556 123.986 59.3138 123.941C59.2682 123.941 59.2226 123.933 59.177 123.926C59.1087 123.918 59.0479 123.903 58.9795 123.888C58.9795 123.888 58.9795 123.88 58.9643 123.888C58.9112 123.872 58.858 123.865 58.8048 123.85C58.744 123.827 58.6833 123.812 58.6225 123.789C58.5921 123.789 58.5541 123.774 58.5237 123.758L58.4782 123.736C58.3794 123.698 58.2731 123.645 58.1743 123.591C58.0832 123.538 57.9996 123.477 57.916 123.409C57.8629 123.363 57.8097 123.318 57.7565 123.265C57.6653 123.06 57.5818 122.847 57.4982 122.634C57.3159 122.125 57.1716 121.601 57.0577 121.077C57.0425 121.009 57.0273 120.948 57.0197 120.879C56.9209 120.393 56.8526 119.907 56.7994 119.413V119.353C56.7614 118.973 56.731 118.601 56.7158 118.221C56.7158 118.175 56.7082 118.13 56.7082 118.084V118.054C56.7006 117.871 56.693 117.689 56.693 117.514C56.6854 117.036 56.6854 116.557 56.693 116.079C56.693 115.851 56.693 115.63 56.693 115.41C56.7006 115.061 56.7082 114.711 56.7158 114.369V114.164C56.7234 113.921 56.731 113.678 56.7386 113.443C56.7386 112.995 56.7386 112.546 56.7386 112.098C56.4044 112.318 56.0321 112.698 55.6295 113.131C54.5737 114.271 53.3355 115.843 52.1732 116.276C51.8998 116.375 51.6339 116.413 51.3756 116.367C51.2161 116.344 51.0566 116.291 50.9047 116.2C50.9047 116.193 50.9047 116.185 50.9047 116.177L50.8819 116.132C50.7983 115.934 50.7679 115.668 50.7603 115.403C50.7603 115.395 50.7603 115.387 50.7527 115.38C50.7527 115.319 50.7451 115.258 50.7451 115.197C50.7451 115.197 50.7375 115.197 50.7451 115.182C50.7375 114.97 50.7375 114.764 50.7147 114.582C50.7071 114.567 50.7071 114.559 50.7071 114.544C50.5932 114.05 50.6084 113.633 50.7147 113.268C50.8363 112.805 51.0946 112.432 51.4288 112.098L51.4516 112.075L51.5276 111.999C51.5276 111.999 51.5503 111.992 51.5579 111.977C51.8922 111.658 52.2948 111.369 52.705 111.088C52.8341 110.989 52.9708 110.89 53.1076 110.792C53.2671 110.67 53.4342 110.549 53.6013 110.427C53.6545 110.389 53.7077 110.343 53.7533 110.305C53.7533 110.305 53.7533 110.305 53.7684 110.29H53.776C53.8824 110.214 53.9963 110.131 54.1027 110.062C54.4369 109.819 54.7712 109.591 55.075 109.371C55.8726 108.809 56.5183 108.368 56.731 108.224C57.4831 108.087 59.4429 109.196 61.699 110.693C63.4157 111.825 65.3072 113.184 66.9708 114.369C68.7939 115.676 70.3436 116.793 71.1108 117.226C71.164 117.264 71.2247 117.309 71.2855 117.347C71.3235 117.37 71.3387 117.393 71.3463 117.393C71.521 117.507 71.7109 117.605 71.916 117.689C72.0451 117.742 72.1819 117.795 72.3186 117.841C72.63 117.947 72.9643 118.038 73.3137 118.099C73.4808 118.13 73.6555 118.16 73.8303 118.175C73.8606 118.175 73.8834 118.175 73.9138 118.175C73.9138 118.175 73.9214 118.175 73.9214 118.183C74.0961 118.206 74.2784 118.228 74.4608 118.236C74.4987 118.236 74.5367 118.244 74.5747 118.244C74.6507 118.251 74.719 118.259 74.795 118.266C74.8786 118.266 74.9621 118.282 75.0533 118.282H75.152C75.3647 118.297 75.5774 118.304 75.7901 118.304C76.732 118.327 77.6816 118.289 78.5172 118.274C78.5628 118.274 78.6007 118.274 78.6463 118.274C79.8617 118.251 80.8416 118.282 81.2366 118.578C81.267 118.601 81.2974 118.623 81.3202 118.646C81.9051 121.54 82.8471 124.617 83.5003 127.42V127.427Z' fill='%23E8D4BA'/%3E%3Cpath d='M50.7679 115.456C50.7983 115.699 50.8363 115.927 50.8819 116.124C50.9351 116.329 50.9958 116.496 51.0718 116.618C52.348 115.638 57.8857 110.921 57.8857 110.921C57.8857 110.921 57.1488 109.591 55.8803 110.64C54.718 111.604 51.3073 114.924 50.7679 115.456Z' fill='%23CEB79B'/%3E%3Cpath d='M50.5775 116.694C50.6155 116.975 50.8282 117.773 51.1472 118.54C51.208 118.684 51.2764 118.828 51.3447 118.965C51.3827 119.041 51.4207 119.117 51.4662 119.193C51.5346 119.315 51.6106 119.436 51.6789 119.542C51.7701 119.679 51.8689 119.793 51.9676 119.9C52.3322 120.264 54.2085 118.821 55.9253 116.96C56.1836 116.679 56.4418 116.382 56.6925 116.086C57.1103 115.585 57.5053 115.068 57.8319 114.559C58.7587 113.146 59.2449 111.809 58.6675 111.073C58.6675 111.073 57.247 109.705 56.176 110.419C56.0924 110.473 55.9937 110.548 55.8721 110.655C54.8466 111.536 52.5373 114.035 51.3295 115.539C51.1472 115.767 50.9953 115.965 50.8737 116.139C50.6686 116.42 50.5547 116.626 50.5623 116.701L50.5775 116.694Z' fill='%23E8D4BA'/%3E%3Cpath d='M51.1473 118.532C51.3069 118.897 51.4816 119.246 51.6791 119.535C53.3427 118.213 57.6877 114.567 57.6877 114.567C57.6877 114.567 56.4572 113.906 55.1886 114.954C54.0871 115.866 51.8842 117.803 51.1473 118.532Z' fill='%23CEB79B'/%3E%3Cpath d='M52.2864 122.095C52.3624 122.209 52.446 122.308 52.5295 122.399L52.5447 122.414C52.7118 122.589 52.8941 122.703 53.0916 122.748C53.3195 122.801 53.95 122.399 54.6945 121.73C55.1578 121.313 55.6668 120.796 56.153 120.226C56.1757 120.196 56.2061 120.165 56.2289 120.135C56.3429 119.998 56.4568 119.854 56.5707 119.71C56.6619 119.596 56.7531 119.482 56.8366 119.36C57.0569 119.056 57.2696 118.745 57.4595 118.426C57.5811 118.213 57.7026 118.008 57.8014 117.795C58.3863 116.61 58.5838 115.448 57.9533 114.62C57.9533 114.62 57.9077 114.59 57.8317 114.552C57.6038 114.438 57.1101 114.21 56.6847 114.172C56.4872 114.157 56.3125 114.172 56.1757 114.263C56.1074 114.309 55.9858 114.415 55.8263 114.567C55.3933 114.97 54.6717 115.699 53.9348 116.474C53.1828 117.256 52.4156 118.084 51.9142 118.661C51.7167 118.882 51.5648 119.064 51.466 119.193C51.3901 119.292 51.3521 119.36 51.3445 119.383C51.2989 119.603 51.6332 121.168 52.2864 122.095Z' fill='%23E8D4BA'/%3E%3Cpath d='M52.2861 122.095C52.3621 122.209 52.4456 122.308 52.5292 122.399C52.7039 122.573 52.8938 122.703 53.0989 122.748C53.1293 122.756 53.1673 122.748 53.2053 122.748C53.8206 122.11 56.6312 119.892 57.4972 118.426C57.7858 117.925 57.4972 118.236 56.5324 118.236C54.7853 118.236 52.2785 122.103 52.2785 122.103L52.2861 122.095Z' fill='%23CEB79B'/%3E%3Cpath d='M52.2717 123.037C52.5072 123.394 53.6922 125.946 54.11 126.182C54.4974 126.387 55.1582 126.083 55.3861 125.977L55.181 123.933C55.257 123.834 56.6016 123.234 57.1105 123.257C57.3308 123.219 57.5511 123.265 57.7638 123.272C57.9537 123.272 58.1436 123.25 58.3183 123.105C58.5994 122.893 60.0123 119.011 60.0123 119.011C60.8099 117.165 59.5261 117.393 57.8246 117.803C57.4827 117.887 57.1333 117.978 56.7687 118.054C56.6319 118.084 56.4952 118.114 56.3661 118.145C55.5305 118.32 53.3807 120.963 52.5679 122.422C52.4312 122.672 52.3324 122.885 52.2792 123.044L52.2717 123.037Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M57.7566 123.265C57.5439 123.265 57.3236 123.212 57.1033 123.25C56.602 123.227 55.2574 123.827 55.1815 123.926L55.3866 125.977C55.1587 126.083 54.4978 126.387 54.1104 126.182C53.6926 125.946 52.5076 123.394 52.2721 123.037C52.3177 122.877 52.4164 122.665 52.5607 122.414L52.538 122.391C52.4468 122.308 52.3633 122.201 52.2873 122.095C51.634 121.168 51.2998 119.603 51.3454 119.383C51.353 119.353 51.3985 119.292 51.4669 119.193C51.3529 118.988 51.2466 118.76 51.1478 118.532C50.8212 117.773 50.6085 116.975 50.5781 116.694C50.5781 116.61 50.6845 116.421 50.882 116.132H50.8896C50.8364 115.927 50.7984 115.699 50.768 115.456C50.768 115.441 50.768 115.418 50.768 115.403C50.768 115.395 50.768 115.387 50.7604 115.38C50.7604 115.319 50.7528 115.258 50.7528 115.198C50.7528 115.198 50.7453 115.198 50.7528 115.182C50.7453 114.97 50.7452 114.765 50.7225 114.582C50.7149 114.567 50.7149 114.559 50.7149 114.544C50.6009 114.05 50.6161 113.633 50.7225 113.268C50.844 112.805 51.1023 112.432 51.4365 112.098L51.4593 112.075L51.5353 111.999C51.5353 111.999 51.558 111.992 51.5656 111.977C51.5884 111.961 51.6188 111.946 51.6416 111.924C51.953 111.673 52.3177 111.384 52.7127 111.088C52.8418 110.989 52.9786 110.89 53.1153 110.792C53.2748 110.67 53.4419 110.549 53.609 110.427C53.7762 110.306 53.9433 110.184 54.1104 110.062C54.4446 109.819 54.7789 109.591 55.0827 109.371C55.8803 108.809 56.526 108.368 56.7387 108.224C56.6703 108.285 55.85 109.052 55.85 110.199C55.85 110.336 55.8499 110.488 55.8879 110.64C55.8575 110.693 55.265 111.779 55.6448 113.131L55.6676 113.222C55.774 113.557 55.9411 113.906 56.1918 114.263C56.1918 114.263 55.5309 115.258 55.9411 116.952C56.0247 117.317 56.1614 117.712 56.3665 118.13C56.3665 118.13 55.9639 118.798 56.2526 120.128C56.4121 120.88 56.7995 121.844 57.6047 123.037C57.6579 123.113 57.711 123.181 57.7642 123.265H57.7566Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M83.5 127.428C83.3177 127.443 83.1126 127.466 82.8999 127.481C82.7252 127.496 82.5353 127.511 82.3378 127.519C82.1403 127.534 81.9276 127.549 81.7149 127.557C81.5022 127.572 81.2895 127.579 81.0616 127.595H81.0464C80.8261 127.602 80.5906 127.61 80.3552 127.617C78.9346 127.671 77.3015 127.686 75.6303 127.655C75.0985 127.648 74.5668 127.64 74.0351 127.617C73.8603 127.61 73.6856 127.602 73.5109 127.602C73.3134 127.595 73.1159 127.587 72.9184 127.572C71.6878 127.519 70.4952 127.428 69.4165 127.298C69.2494 127.283 69.0747 127.26 68.9151 127.238C68.748 127.215 68.5885 127.192 68.429 127.169C68.2695 127.146 68.1175 127.124 67.9656 127.093C67.5098 127.017 67.0996 126.934 66.7274 126.835C66.6515 126.82 66.5831 126.797 66.5071 126.774C66.3552 126.729 66.1957 126.675 66.0362 126.615C65.869 126.562 65.7095 126.501 65.5424 126.44C65.4208 126.402 65.3069 126.356 65.1854 126.303C65.1474 126.303 65.1094 126.28 65.0638 126.258C64.9955 126.227 64.9271 126.205 64.8587 126.174C64.6916 126.106 64.5245 126.037 64.365 125.961C64.1295 125.855 63.894 125.749 63.6661 125.635C63.6585 125.635 63.6509 125.627 63.6433 125.627C63.5597 125.582 63.4686 125.544 63.385 125.498C63.2103 125.407 63.0432 125.323 62.8761 125.232C62.5419 125.057 62.2228 124.883 61.9114 124.7C61.8202 124.655 61.7291 124.602 61.6455 124.549C61.4252 124.427 61.2049 124.29 60.9922 124.161C60.8251 124.07 60.5972 124.04 60.3465 124.024C60.0047 124.002 59.6553 123.986 59.3134 123.941C59.1995 123.926 59.0855 123.91 58.9792 123.888C58.9792 123.888 58.9792 123.88 58.964 123.888C58.9108 123.872 58.8576 123.865 58.8045 123.85C58.7437 123.827 58.6829 123.812 58.6222 123.789C58.5766 123.774 58.531 123.759 58.4778 123.736C58.3791 123.698 58.2727 123.645 58.174 123.591C58.0828 123.538 57.9993 123.477 57.9157 123.409C57.8625 123.364 57.8094 123.318 57.7562 123.265C57.5891 123.265 57.4296 123.212 57.27 123.242H57.2624C56.594 123.25 55.9635 123.531 55.371 123.812H55.3634C55.3634 123.812 55.3026 123.85 55.2874 123.865C55.2494 123.888 55.2266 123.903 55.1962 123.926C55.257 124.579 55.3254 125.316 55.4013 125.969C55.3862 125.977 55.3785 125.992 55.3634 125.992C55.0823 126.212 54.8164 126.288 54.5809 126.243C54.2543 126.227 53.9732 125.984 53.715 125.673C53.6998 125.642 53.677 125.62 53.6618 125.589C53.6618 125.589 53.6618 125.589 53.6542 125.589C53.1073 124.86 52.773 123.789 52.2869 123.044C52.3248 122.482 52.9933 121.799 53.3048 121.328C54.2999 122.657 55.1735 120.31 56.1762 120.219C56.4116 120.454 56.7003 120.674 57.0345 120.887C61.3644 123.667 68.9835 121.89 66.9857 114.377C68.8088 115.684 70.3584 116.8 71.1257 117.233C71.1788 117.271 71.2396 117.317 71.3004 117.355C71.3384 117.378 71.3535 117.4 71.3611 117.4C71.5359 117.514 71.7258 117.613 71.9309 117.697C72.06 117.75 72.1891 117.803 72.3335 117.849C72.6449 117.955 72.9792 118.046 73.3286 118.107C73.4957 118.137 73.6704 118.168 73.8451 118.183C73.8755 118.183 73.8983 118.183 73.9287 118.183C73.9287 118.183 73.9363 118.183 73.9363 118.19C74.111 118.213 74.2933 118.236 74.4756 118.244C74.5136 118.244 74.5516 118.251 74.5896 118.251C74.6655 118.259 74.7339 118.266 74.8099 118.274C74.8934 118.274 74.977 118.289 75.0681 118.289H75.1669C75.3796 118.304 75.5923 118.312 75.805 118.312C76.7469 118.335 77.6965 118.297 78.532 118.282C78.5776 118.282 78.6156 118.282 78.6612 118.282C79.8766 118.259 80.8565 118.289 81.2515 118.585C81.2819 118.608 81.3123 118.631 81.3351 118.654C81.92 121.548 82.8619 124.624 83.5152 127.428H83.5Z' fill='%23CEB79B'/%3E%3Cpath d='M55.3862 123.037C55.5762 123.424 56.2218 123.439 56.2218 123.439C56.4877 123.348 56.7916 123.272 57.103 123.242C57.3157 123.219 57.5284 123.219 57.7411 123.257H57.7563C57.8019 123.31 57.855 123.356 57.9006 123.386C57.9006 123.386 57.4069 122.11 56.9739 122.376C56.5333 122.642 57.4069 122.855 56.9739 122.938C56.5333 123.029 55.1888 122.642 55.3787 123.029L55.3862 123.037Z' fill='%23CEB79B'/%3E%3Cpath d='M55.1962 124.093L55.181 123.926C55.181 123.926 55.2494 123.88 55.3633 123.819V123.804C55.3633 123.804 55.219 123.234 54.6341 123.804C54.0491 124.374 55.2038 124.085 55.2038 124.085L55.1962 124.093Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M58.2727 114.187C58.2727 114.187 56.0698 112.956 56.1533 113.42C56.2369 113.883 56.4648 114.149 56.6926 114.172C56.9205 114.195 58.2727 114.195 58.2727 114.195V114.187Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M58.2726 111.111C58.2726 111.111 56.1684 109.417 56.2596 109.88C56.3507 110.343 56.5027 110.708 56.7306 110.731C56.9584 110.754 58.2726 111.118 58.2726 111.118V111.111Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M58.4625 118.228C58.4625 118.228 56.8141 117.134 56.6393 117.575C56.533 117.848 56.6925 118.205 56.9204 118.228C57.1483 118.251 58.4625 118.228 58.4625 118.228Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M52.2864 122.095C52.3624 122.209 52.446 122.308 52.5295 122.399L52.5447 122.414L54.9451 118.988C54.9451 118.988 51.3293 120.249 51.9142 118.669C51.7167 118.889 51.5648 119.072 51.466 119.201C51.3901 119.299 51.3521 119.368 51.3445 119.391C51.2989 119.611 51.6332 121.176 52.2864 122.103V122.095Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M50.5775 116.694C50.6155 116.975 50.8282 117.773 51.1473 118.54C51.208 118.684 51.2764 118.829 51.3448 118.965L53.7452 116.193C53.7452 116.193 50.7599 116.671 51.3372 115.532C51.1549 115.76 51.0029 115.957 50.8814 116.132C50.6763 116.413 50.5623 116.618 50.5699 116.694H50.5775Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M53.0536 113.23L50.8887 116.124C50.8355 115.927 50.7975 115.699 50.7672 115.456C50.7672 115.441 50.7672 115.418 50.7672 115.403C50.7672 115.395 50.7671 115.387 50.7596 115.38C50.7596 115.319 50.752 115.258 50.752 115.198C50.752 115.198 50.7444 115.198 50.752 115.182C50.7444 114.97 50.7444 114.765 50.7216 114.582C50.714 114.567 50.714 114.559 50.714 114.544C50.6 114.051 50.6152 113.633 50.7216 113.268C50.8431 112.805 51.1014 112.433 51.4356 112.098L51.4584 112.075L51.5344 112C51.5344 112 51.5572 111.992 51.5648 111.977C51.5875 111.962 51.6179 111.946 51.6407 111.924C50.4177 113.298 53.0612 113.23 53.0612 113.23H53.0536Z' fill='%23CEB79B'/%3E%3Cpath d='M65.1854 126.311C65.1854 126.311 65.2233 126.326 65.2461 126.334C65.512 126.432 65.7703 126.524 66.0361 126.615C66.1957 126.676 66.3552 126.729 66.5071 126.774C66.5831 126.797 66.6514 126.82 66.7274 126.835C66.9401 124.83 66.8793 122.156 65.8234 120.515C65.9526 122.201 65.8918 124.647 65.1854 126.311Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M83.4995 127.427C83.3172 127.443 83.1121 127.465 82.8994 127.481C81.0915 127.625 78.2505 127.708 75.3487 127.655C73.6851 127.625 71.9988 127.549 70.4795 127.412C75.683 125.111 72.2039 117.894 72.2039 117.894L72.3178 117.841C72.5305 117.917 72.7508 117.978 72.9863 118.023C73.0926 118.061 73.199 118.076 73.3129 118.099C73.5104 118.137 73.7079 118.168 73.913 118.183C74.6423 118.281 75.4095 118.312 76.1767 118.319C76.9895 118.319 77.7947 118.297 78.5164 118.281C78.562 118.281 78.5999 118.281 78.6455 118.281C79.8609 118.259 80.8408 118.289 81.2358 118.585C81.2662 118.608 81.2966 118.631 81.3194 118.654C81.9043 121.548 82.8463 124.624 83.4995 127.427Z' fill='%23CEB79B'/%3E%3Cpath d='M83.4998 127.427C83.3175 127.443 83.1124 127.465 82.8997 127.481C80.8259 127.648 77.3696 127.739 74.0349 127.617C76.5113 123.888 75.0908 119.049 73.9209 118.19C73.9209 118.183 73.9133 118.183 73.9133 118.183C74.0956 118.206 74.2704 118.228 74.4603 118.244C74.4982 118.244 74.5362 118.251 74.5742 118.251C74.7641 118.266 74.954 118.282 75.1515 118.289C75.3642 118.304 75.5769 118.312 75.7896 118.312C76.7316 118.335 77.6811 118.297 78.5167 118.282C78.5623 118.282 78.6002 118.282 78.6458 118.282C79.8612 118.259 80.8411 118.289 81.2361 118.585C81.2665 118.608 81.2969 118.631 81.3197 118.654C81.9046 121.548 82.8466 124.624 83.4998 127.427Z' fill='%23CEB79B'/%3E%3Cpath d='M76.1771 118.32L76.0859 118.502C73.9894 122.482 72.9791 118.031 72.9791 118.031C73.0854 118.061 73.1918 118.076 73.3057 118.099C73.5032 118.137 73.7007 118.168 73.9058 118.183C74.6351 118.282 75.4023 118.312 76.1695 118.32H76.1771Z' fill='%23CEB79B'/%3E%3Cpath d='M77.5075 128.005C76.8087 127.967 76.1022 127.982 75.3882 128.096C76.0946 124.51 76.7327 118.836 73.6334 117.286C75.5477 116.709 77.1429 116.155 78.5406 115.615L77.5151 128.012L77.5075 128.005Z' fill='%23676D54'/%3E%3Cpath d='M99.9085 129.57C91.8032 131.127 83.7208 127.101 75.5472 128.643C75.5851 128.445 75.6231 128.248 75.6535 128.05C76.0333 125.916 76.2916 123.736 76.1169 121.563C75.9649 119.915 75.5168 117.97 73.9291 117.15C81.4875 115.311 86.8656 111.012 94.4163 109.797C99.9616 109.424 106.692 114.043 110.475 117.066C112.42 118.631 111.645 119.163 110.756 120.538C107.019 126.28 103.334 128.688 99.9237 129.577H99.9161L99.9085 129.57Z' fill='%23979E87'/%3E%3Cpath opacity='0.5' d='M99.901 129.57C99.8478 129.585 99.7871 129.6 99.7339 129.615H99.7187C99.0275 129.828 98.3362 129.949 97.6525 130.018C97.5918 130.003 97.5234 129.995 97.4626 129.98C97.0372 129.889 96.6346 129.76 96.2548 129.6C92.7225 128.149 91.4464 124.184 95.9434 120.226C99.0578 117.484 105.104 115.828 110.46 117.074C111.425 117.924 111.926 118.623 111.683 119.026C111.371 119.558 111.052 120.059 110.741 120.545C107.004 126.288 103.319 128.696 99.9086 129.585L99.901 129.57Z' fill='%23AAB09E'/%3E%3Cpath d='M87.8379 119.52C85.3312 122.102 83.227 125.095 81.7989 128.4C79.7099 128.286 77.6133 128.331 75.5395 128.643C76.0637 125.384 77.2867 119.163 73.9139 117.157C79.1326 115.737 83.6524 113.245 88.6963 111.339C92.8743 109.667 97.3637 109.105 101.83 111.528C96.4066 112.44 91.6133 115.63 87.8379 119.527V119.52Z' fill='%238D9280'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M83.8347 113.466C83.2118 114.271 82.6041 115.099 82.004 115.927C80.8038 117.59 79.6492 119.307 78.7376 121.153C77.7957 123.029 76.9981 124.974 76.2916 126.949C76.0941 127.503 75.8966 128.066 75.7143 128.628C75.6611 128.635 75.6079 128.643 75.5548 128.651C76.2612 125.065 77.0284 118.707 73.9291 117.157C78.6312 115.744 81.4419 114.461 83.9714 113.306C83.9335 113.359 83.8803 113.412 83.8423 113.473L83.8347 113.466Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M99.2168 110.488C98.9813 110.488 98.761 110.533 98.5559 110.64C98.3888 110.731 98.2521 110.852 98.0926 110.959C97.8343 111.126 97.5152 111.126 97.2266 111.194C96.8772 111.278 96.5277 111.361 96.1783 111.452C95.7833 111.551 95.3427 111.703 94.9325 111.642C94.7578 111.612 94.5831 111.551 94.416 111.513C94.0665 111.43 93.6791 111.414 93.3904 111.62C93.1929 111.764 93.0638 111.984 92.8967 112.166C92.5093 112.584 91.9016 112.653 91.3774 112.805C90.9748 112.926 90.5494 113.017 90.1696 113.177C89.8354 113.313 89.4936 113.23 89.1365 113.207C88.8251 113.184 88.4909 113.207 88.2326 113.397C88.1186 113.473 88.0275 113.587 87.9287 113.678C87.6097 113.99 87.2603 114.111 86.8577 114.24C86.3867 114.385 85.9157 114.552 85.4447 114.711C84.951 114.878 84.3965 115.137 83.8647 115.137C83.6672 115.137 83.4621 115.114 83.2722 115.167C82.9835 115.251 82.7784 115.494 82.5429 115.661C82.391 115.767 82.2087 115.843 82.0264 115.904C81.8821 115.957 81.7301 115.995 81.5934 116.048C81.0237 116.253 80.454 116.451 79.8842 116.656C79.626 116.747 79.3677 116.846 79.1018 116.937C78.8587 117.028 78.6461 117.127 78.403 117.142C78.3194 117.142 78.2283 117.142 78.1295 117.127C77.894 117.089 77.6661 117.005 77.4307 117.013C77.1344 117.02 76.8533 117.172 76.671 117.4C76.5951 117.507 76.5343 117.628 76.4507 117.727C76.2684 117.955 75.9798 118.069 75.7215 118.175C75.6911 118.183 75.2277 118.38 75.2125 118.365C75.1973 118.335 75.1821 118.312 75.1593 118.289C75.1517 118.274 75.1442 118.259 75.129 118.243V118.228C75.129 118.228 75.1062 118.206 75.0986 118.198L75.0834 118.183C75.0834 118.183 75.0834 118.183 75.0834 118.175C75.0682 118.152 75.0606 118.137 75.0454 118.122C75.0454 118.122 75.0454 118.122 75.0454 118.114C75.0226 118.092 75.0074 118.069 74.9922 118.046C74.9618 118 74.9239 117.962 74.8935 117.924C74.8859 117.917 74.8783 117.902 74.8707 117.894C74.8631 117.886 74.8555 117.871 74.8403 117.864C74.8251 117.841 74.8023 117.826 74.7871 117.803L74.734 117.742C74.734 117.742 74.696 117.704 74.6808 117.689H74.6732C74.6276 117.636 74.582 117.598 74.544 117.56C74.5213 117.537 74.4909 117.514 74.4681 117.499L74.3997 117.446C74.3997 117.446 74.3314 117.393 74.301 117.37L74.2554 117.332H74.2402C74.2402 117.332 74.2022 117.302 74.187 117.294C74.1794 117.286 74.1642 117.279 74.1567 117.271C74.1339 117.256 74.1111 117.241 74.0883 117.233C74.0579 117.218 74.0351 117.203 74.0047 117.188C74.0047 117.188 73.9667 117.165 73.9515 117.157C74.0959 117.112 74.2478 117.066 74.3845 117.028C74.4073 117.02 74.4301 117.013 74.4529 117.005C74.5516 116.975 74.6504 116.945 74.7567 116.914C74.8479 116.884 74.9315 116.861 75.0226 116.831C75.5088 116.679 75.9646 116.527 76.4128 116.375C76.4735 116.352 76.5419 116.337 76.6027 116.314C77.3547 116.056 78.0459 115.805 78.6992 115.562C78.7904 115.532 78.8815 115.494 78.9651 115.463C79.0942 115.418 79.2158 115.364 79.3373 115.319C79.4437 115.281 79.5424 115.235 79.6412 115.197C79.8083 115.129 79.9678 115.068 80.1197 115C80.2109 114.962 80.2945 114.931 80.378 114.894C80.4996 114.84 80.6135 114.795 80.735 114.749C81.0845 114.605 81.4263 114.453 81.7605 114.316C81.9352 114.24 82.1024 114.164 82.2695 114.088C82.5657 113.959 82.8468 113.83 83.1279 113.708C83.219 113.663 83.3178 113.625 83.4089 113.579C83.6064 113.488 83.8039 113.397 83.9938 113.313C85.5435 112.607 86.9868 111.954 88.7035 111.354C88.7187 111.354 88.7263 111.346 88.7339 111.338C88.7795 111.323 88.8327 111.3 88.8782 111.285C89.9341 110.898 91.1495 110.503 92.6536 110.093C93.2233 109.933 93.8234 109.842 94.4387 109.804C95.958 109.713 97.5912 109.971 99.2548 110.495H99.2472L99.2168 110.488Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath opacity='0.14' d='M99.9082 129.57C99.8398 129.585 99.7866 129.6 99.741 129.615H99.7258C99.0346 129.828 98.3433 129.949 97.6597 130.018C96.3075 130.139 94.9478 130.018 93.5273 129.843C93.4589 129.836 93.383 129.828 93.3146 129.813C92.1979 129.676 91.0737 129.516 89.9494 129.349C89.7595 129.319 89.5772 129.296 89.3873 129.266C89.1974 129.235 89.0151 129.213 88.8252 129.182C88.4682 129.129 88.1111 129.084 87.7617 129.03C87.5794 129 87.3895 128.977 87.1996 128.954C86.8273 128.901 86.4627 128.856 86.0905 128.81C85.9082 128.787 85.7183 128.764 85.536 128.742C85.3537 128.719 85.1638 128.696 84.9815 128.681C84.7991 128.658 84.6092 128.643 84.4269 128.62C83.5533 128.529 82.6722 128.453 81.8062 128.407C81.6771 128.407 81.5479 128.392 81.4112 128.385C81.2821 128.385 81.1529 128.377 81.0238 128.369C80.9706 128.369 80.9174 128.369 80.8643 128.369C80.8415 128.369 80.8111 128.369 80.7883 128.369C80.7351 128.369 80.6819 128.369 80.6288 128.369C80.3705 128.362 80.1046 128.362 79.8464 128.354C79.7172 128.354 79.5881 128.354 79.4589 128.354C79.4513 128.354 79.4438 128.354 79.4286 128.354C79.307 128.354 79.1855 128.354 79.0639 128.354C78.9348 128.354 78.8057 128.354 78.6689 128.362C78.5474 128.362 78.4335 128.369 78.3119 128.377C78.2967 128.377 78.2891 128.377 78.2739 128.377C78.1448 128.377 78.0156 128.392 77.8865 128.4C77.7498 128.4 77.6206 128.415 77.4839 128.43C77.3624 128.438 77.2332 128.453 77.1041 128.461C77.0889 128.461 77.0737 128.461 77.0585 128.461C77.0433 128.461 77.0281 128.461 77.0129 128.461C77.0053 128.461 76.9978 128.461 76.9826 128.461C76.9598 128.461 76.9294 128.461 76.9066 128.468C76.8002 128.476 76.6939 128.491 76.58 128.499C76.5572 128.499 76.5344 128.499 76.5116 128.499C76.4888 128.499 76.4584 128.499 76.4356 128.506C76.3369 128.514 76.2457 128.529 76.147 128.544C76.0938 128.552 76.033 128.559 75.9798 128.567C75.9571 128.567 75.9343 128.567 75.9039 128.575C75.8355 128.582 75.7672 128.597 75.6988 128.605C75.6456 128.613 75.5924 128.62 75.5392 128.628C75.5392 128.59 75.5544 128.552 75.562 128.514C75.562 128.476 75.5772 128.438 75.5848 128.407C75.6 128.316 75.6228 128.225 75.638 128.134C75.638 128.104 75.6456 128.073 75.6532 128.05C75.6532 128.05 75.6532 128.05 75.6532 128.043C75.6684 127.974 75.676 127.906 75.6912 127.838C75.6912 127.8 75.7064 127.762 75.714 127.724C75.8203 127.709 75.9191 127.693 76.0254 127.686C76.5268 127.625 77.0357 127.579 77.5523 127.557C79.0639 127.488 80.5832 127.595 82.0873 127.769C82.2088 127.785 82.3227 127.8 82.4443 127.815C84.3433 128.058 86.2348 128.4 88.1339 128.673C89.1138 128.818 90.1014 128.916 91.0813 129.053C92.122 129.19 93.1551 129.342 94.2033 129.448C94.887 129.517 95.5783 129.57 96.2619 129.585C96.6266 129.592 96.9912 129.585 97.3482 129.57C98.3129 129.524 100.539 128.954 101.465 128.666C101.815 128.559 104.451 127.048 106.646 125.035C107.786 123.986 110.414 120.636 110.748 120.522C107.011 126.265 103.326 128.673 99.9157 129.562L99.9082 129.57Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M78.1756 118.244C77.9857 118.494 77.5831 118.745 77.2565 118.586C76.9298 118.434 76.5348 117.94 76.9298 117.75C77.0666 117.682 77.3249 117.659 77.4768 117.613C77.6439 117.56 77.8262 117.347 78.0009 117.385C78.282 117.53 78.3959 117.955 78.1756 118.244Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M78.1833 117.757C78.1453 118.304 77.1274 119.056 76.7628 118.046C76.459 117.195 78.2441 116.967 78.1833 117.757Z' fill='%23676D54'/%3E%3Cpath d='M78.1152 117.491C77.6442 117.286 76.7403 117.567 76.9606 118.198C77.0061 118.327 77.0669 118.426 77.1277 118.502C76.9833 118.441 76.8542 118.297 76.763 118.046C76.4972 117.309 77.7885 117.043 78.1076 117.491H78.1152Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M84.1846 115.714C84.4049 115.957 84.5112 116.512 84.1618 116.747C83.8124 116.975 83.0527 117.089 82.7565 116.694C82.5058 116.36 83.1135 116.048 83.3718 115.896C83.4933 115.828 83.9263 115.562 84.0783 115.699C84.0783 115.699 84.1846 115.714 84.1922 115.714H84.1846Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M84.2376 116.238C84.1996 116.398 84.0857 116.542 83.9186 116.641C83.5995 116.831 82.6196 116.907 82.6652 116.39C82.7639 115.197 84.6402 115.319 84.2376 116.238Z' fill='%23676D54'/%3E%3Cpath d='M84.1533 115.691C83.6899 115.57 82.9834 115.813 82.9303 116.527C82.9227 116.625 82.9531 116.701 83.0062 116.762C82.8011 116.717 82.6492 116.603 82.672 116.398C82.7404 115.524 83.7735 115.357 84.1609 115.691H84.1533Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M89.283 113.45C89.4425 113.466 89.6932 113.716 89.7539 113.891C90.0654 114.772 88.3486 115.182 88.0524 114.742C87.984 114.651 87.8245 114.453 87.946 114.286C88.0676 114.111 88.3866 114.126 88.5689 114.035C88.7057 113.967 88.85 113.906 88.9715 113.815C89.0551 113.754 89.1842 113.648 89.2982 113.64C89.2982 113.655 89.2526 113.45 89.2754 113.45H89.283Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M89.5556 113.61C89.6619 113.709 89.6695 113.921 89.6011 114.073C89.396 114.521 88.6136 114.84 88.1275 114.65C87.9376 114.575 87.8236 114.354 87.9376 114.104C88.1806 113.549 89.0694 113.124 89.5556 113.61Z' fill='%23676D54'/%3E%3Cpath d='M89.548 113.602C89.0466 113.397 88.3706 113.777 88.1655 114.255C88.0971 114.415 88.1199 114.567 88.1882 114.666C88.1655 114.666 88.1427 114.65 88.1275 114.643C87.9376 114.567 87.8236 114.347 87.9376 114.096C88.1806 113.541 89.0618 113.116 89.5556 113.602H89.548Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M98.6014 111.741C98.5102 111.46 98.6545 111.263 98.8824 111.042C99.0267 110.905 99.1255 111.042 99.3078 110.997C99.6724 110.913 100.28 110.738 100.462 111.126C100.994 112.227 99.0343 113.086 98.5938 111.749L98.6014 111.741Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M93.1165 112.554C93.1013 112.387 93.3444 112.501 93.4432 112.372C93.709 112.03 94.1572 111.916 94.5598 111.833C95.5777 112.585 93.2153 113.937 93.1165 112.562V112.554Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M94.4311 111.734C94.8262 111.901 94.6742 112.569 94.3476 112.751C94.0665 112.957 93.5196 112.972 93.2993 112.827C93.1474 112.721 93.0866 112.524 93.1094 112.334C93.1094 112.296 93.117 112.25 93.1322 112.205C93.2841 111.817 93.6183 111.612 93.9678 111.642C94.1273 111.642 94.2868 111.665 94.4311 111.726V111.734Z' fill='%23676D54'/%3E%3Cpath d='M94.4311 111.734C94.5223 111.772 94.5831 111.84 94.6211 111.916C94.6211 111.916 94.6058 111.908 94.5982 111.908C94.4539 111.847 94.2944 111.817 94.1349 111.825C93.7855 111.787 93.4512 111.992 93.2993 112.379C93.2841 112.417 93.2765 112.463 93.2765 112.508C93.2613 112.622 93.2765 112.744 93.3373 112.843C93.3297 112.835 93.3145 112.827 93.2993 112.82C93.1474 112.713 93.0866 112.516 93.1094 112.334C93.1094 112.296 93.117 112.25 93.1322 112.205C93.2841 111.817 93.6183 111.612 93.9678 111.642C94.1273 111.642 94.2868 111.665 94.4311 111.726V111.734Z' fill='%23474C2F'/%3E%3Cpath d='M100.25 110.913C100.652 111.126 100.508 111.475 100.174 111.756C99.0037 112.729 98.2517 111.741 98.6391 111.225C98.9126 110.86 99.5962 110.579 100.25 110.921V110.913Z' fill='%23676D54'/%3E%3Cpath d='M100.25 110.913C100.371 110.974 100.44 111.05 100.478 111.133C100.462 111.118 100.44 111.111 100.417 111.095C99.7711 110.761 99.0874 111.042 98.8064 111.399C98.6696 111.582 98.6696 111.817 98.7836 112.007C98.5329 111.81 98.4569 111.46 98.6392 111.209C98.9127 110.845 99.5964 110.564 100.25 110.906V110.913Z' fill='%23474C2F'/%3E%3Cpath d='M63.9713 112.242L67.5491 114.514C67.5491 114.514 68.3087 114.514 66.7895 113.754C65.2702 112.994 63.7586 111.566 64.5182 111.141C64.5182 111.141 63.4395 111.49 63.9788 112.242H63.9713Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M88.0587 103.879C88.0587 103.879 88.0511 103.947 88.0435 103.985C87.3218 102.831 86.623 101.646 85.8785 100.537C85.4531 102.762 84.8834 104.912 84.1542 106.515C83.8351 107.214 82.4146 110.389 82.3918 111.437C82.3918 111.68 82.3614 111.923 82.3083 112.159C82.1563 112.508 82.0424 112.789 81.9816 112.994C82.5058 109.257 83.6452 102.603 84.3669 98.4476C84.42 98.1665 84.4656 97.9006 84.5112 97.6424C84.815 95.8952 85.0201 94.7634 85.0201 94.7634C85.2556 95.2343 85.757 96.6245 86.2811 98.1969C86.8585 99.9137 87.4813 101.843 87.8156 103.005C87.8156 103.013 87.8232 103.021 87.8232 103.028C87.9371 103.408 88.0207 103.704 88.0587 103.879Z' fill='%238D9280'/%3E%3Cpath opacity='0.3' d='M70.6038 42.8769C70.6884 42.7655 70.7463 42.7076 70.7463 42.7076C70.7374 42.7522 70.733 42.7967 70.7285 42.8412L70.6083 42.8724L70.6038 42.8769Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M70.9057 44.5795C70.8969 44.6594 70.8969 44.7259 70.888 44.8057C70.888 44.8102 70.888 44.8146 70.8836 44.819C70.8747 44.9743 70.8525 45.1207 70.8348 45.2493C70.8303 45.2848 70.8303 45.3247 70.8215 45.3558C70.8126 45.4267 70.8037 45.4888 70.7948 45.5509L70.7815 45.6397V45.653L70.7771 45.6574C70.7771 45.6663 70.7771 45.6707 70.7727 45.684C70.7682 45.7195 70.7594 45.7639 70.7461 45.8171C70.7106 45.9413 70.6706 46.0877 70.6219 46.2385C70.5642 46.4204 70.4977 46.6067 70.44 46.7797C70.5686 47.1567 70.7017 47.5249 70.8348 47.8753C70.7815 47.9507 70.7283 48.0217 70.6795 48.0971C70.6352 48.168 70.5952 48.2346 70.5597 48.3056C70.4976 48.4164 70.4489 48.5362 70.4134 48.6515C70.4089 48.6649 70.4045 48.6782 70.4001 48.6915C70.338 48.8999 70.2138 49.1173 70.0496 49.3258C69.9742 49.4234 69.8988 49.521 69.8101 49.6097C69.5218 49.9024 69.1847 50.1198 68.8919 50.173C68.8653 50.1774 68.8431 50.1774 68.8209 50.1774C68.6923 50.1908 68.5814 50.1686 68.4883 50.0932C68.4883 50.0932 68.4853 50.0917 68.4794 50.0887H68.4749C68.4749 50.0887 68.4705 50.0799 68.4661 50.0754C68.4084 50.0133 68.3419 49.8669 68.2798 49.6673C68.2532 49.6052 68.2354 49.5387 68.2177 49.4677C68.1777 49.3213 68.1378 49.1572 68.0979 48.9709C68.0535 48.7491 68.0047 48.514 67.9648 48.2523C67.9116 47.9196 67.8584 47.5603 67.8184 47.1744V47.1567C67.8051 47.068 67.7874 46.9704 67.783 46.8728C67.7785 46.8684 67.783 46.8684 67.783 46.8684C67.783 46.8684 67.7815 46.8654 67.7785 46.8595C67.7519 46.6599 67.7386 46.4514 67.7253 46.2518C67.6943 45.9014 67.6765 45.5598 67.6676 45.2227V45.1828C67.6588 44.8057 67.6588 44.4509 67.6765 44.1182V44.0428C67.6809 44.0073 67.6854 43.9807 67.6854 43.9452C67.6898 43.8742 67.6943 43.8121 67.6987 43.75C67.6987 43.75 67.7016 43.7456 67.7076 43.7367C67.7076 43.6879 67.712 43.648 67.7164 43.6081C67.7164 43.5948 67.7164 43.577 67.7209 43.5637C67.7297 43.4351 67.7519 43.3109 67.7741 43.2044V43.1956C67.783 43.1379 67.7918 43.0847 67.8051 43.027C67.814 42.9871 67.8184 42.956 67.8318 42.9294V42.9205C67.8406 42.8806 67.8495 42.8451 67.8717 42.8185V42.8096C67.9072 42.6854 67.9426 42.579 67.9914 42.4858C67.9959 42.4725 68.0003 42.4504 68.0092 42.437C68.0181 42.4237 68.0225 42.406 68.0402 42.3927C68.1689 42.1753 68.333 42.0556 68.5459 42.0689C68.7012 42.0777 68.8608 42.1088 69.0205 42.1532H69.025C69.1669 42.1886 69.3044 42.2374 69.4464 42.304C69.646 42.3927 69.8367 42.4947 70.023 42.6322C70.0496 42.6455 70.0762 42.6633 70.0984 42.6854C70.1073 42.6854 70.1117 42.6943 70.125 42.6988C70.1428 42.7076 70.165 42.7254 70.1783 42.7387C70.1916 42.752 70.2138 42.7653 70.2271 42.7786C70.2404 42.7875 70.2626 42.8052 70.2759 42.8141C70.3557 42.8895 70.4311 42.9516 70.5065 43.027C70.5775 43.098 70.644 43.1689 70.715 43.2399C70.715 43.4262 70.7239 43.6125 70.7505 43.8121C70.786 44.0694 70.8436 44.3267 70.919 44.5884L70.9057 44.5795Z' fill='%23A05A07'/%3E%3Cpath d='M66.5095 67.0068C66.4961 67.1222 67.7204 66.3415 67.5474 64.2034C67.5474 61.8126 66.0304 62.3182 66.0304 62.3182C66.0304 62.3182 67.0151 63.4627 66.5095 67.0068Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M44.9739 48.208C44.4993 50.2085 44.1711 53.4999 46.6773 52.8833C49.1835 52.2712 46.8414 47.9818 46.8414 47.9818L44.9739 48.208Z' fill='%23A05A07'/%3E%3Cpath d='M49.9511 61.8568C49.9511 61.8568 48.0082 61.6838 47.8352 63.8307C47.6667 65.9732 49.9511 66.5764 50.0664 66.6031C50.1773 66.6297 49.9511 61.8568 49.9511 61.8568Z' fill='%23B4B296'/%3E%3Cpath d='M66.0127 75.7497C64.7529 75.6122 63.369 75.3815 61.9185 75.0843C61.6257 75.0222 61.333 74.9601 61.0402 74.8936C59.6607 74.5875 58.2368 74.2282 56.7996 73.8246C56.427 73.7225 56.0633 73.6161 55.6907 73.5052C55.6818 73.5052 55.6729 73.5052 55.6641 73.4963C52.1687 72.4672 48.6955 71.2119 45.8566 69.9788C45.6481 69.8856 45.413 69.7614 45.3642 69.5396C45.3287 69.3666 46.3223 67.6943 46.4776 67.6145C48.8596 66.2882 49.76 59.4837 50.0972 53.9967C50.2746 51.0469 50.2923 48.483 50.2923 47.3564V46.7442C51.8626 45.174 56.1254 47.7645 57.7843 48.4431C58.5739 48.7625 65.2941 51.282 66.0393 52.1115C66.0881 52.1647 66.1147 52.2135 66.1103 52.249C65.9107 54.1741 65.7998 55.8198 65.782 57.257C65.7643 58.3216 65.7998 59.2708 65.8796 60.1269C65.9816 61.227 66.1591 62.1807 66.4163 63.0412C66.6603 63.8929 66.9797 64.6514 67.3656 65.3789C67.4676 65.574 67.5741 65.7648 67.6894 65.9555C68.0664 66.6031 68.51 67.2286 69.0024 67.8851C69.0024 67.8939 69.0157 67.9028 69.0246 67.9161C69.5569 68.6214 70.1513 69.3577 70.8033 70.1739C70.8787 70.2671 70.9541 70.3602 71.0295 70.4578C71.9699 71.6422 72.48 72.6003 72.622 73.3677C73.0567 75.6698 70.2045 76.2154 66.0082 75.7586L66.0127 75.7497Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M71.034 70.4489C66.8599 65.2103 64.9614 63.3517 66.1147 52.249C66.1812 51.6058 58.6316 48.7802 57.7888 48.4386C56.1298 47.76 51.867 45.165 50.2968 46.7397C50.2879 46.7486 50.3677 51.7344 49.8754 56.8577C50.0972 57.2037 50.3101 57.5541 50.492 57.9223C50.869 58.6897 51.1529 59.5236 51.4013 60.3442C51.5477 60.8277 51.6763 61.3112 51.7695 61.8036C51.8271 62.0964 51.867 62.4069 51.836 62.7041C51.7828 63.1787 51.5077 63.5291 50.9976 63.4936C50.3278 63.4493 49.7201 63.05 49.2455 62.602C49.179 62.5399 49.1124 62.4734 49.0459 62.4024C48.4825 64.9352 47.6619 66.9491 46.4731 67.6011C46.3223 67.6854 45.3287 69.3577 45.3642 69.5263C45.413 69.748 45.6437 69.8722 45.8566 69.9654C57.2121 74.898 78.7699 80.141 71.034 70.44V70.4489Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M71.0333 70.4489C66.8593 65.2103 64.9608 63.3517 66.1141 52.249C66.1806 51.6058 58.6309 48.7802 57.7881 48.4386C56.1292 47.76 51.8664 45.165 50.2961 46.7397C50.2873 46.7486 50.3449 50.3549 50.061 54.5822C50.1409 54.6886 50.2163 54.7995 50.2917 54.9104C50.6288 55.4294 50.8861 55.9927 51.1123 56.5694C51.3341 57.1239 51.5115 57.6916 51.72 58.2505C51.8575 58.6187 52.0039 58.9825 52.1458 59.3551C52.5362 60.3886 52.9221 61.4665 53.0419 62.571C53.1306 63.3561 53.0641 64.3852 52.1015 64.5316C51.3607 64.6425 50.6332 64.3497 50.03 63.9372C49.6219 63.6577 49.2493 63.3295 48.9166 62.9613C48.3577 65.2324 47.5726 67.0067 46.4769 67.61C46.3261 67.6943 45.3325 69.3666 45.368 69.5351C45.4168 69.7569 45.6475 69.8811 45.8604 69.9743C57.2159 74.9068 78.7737 80.1499 71.0378 70.4489H71.0333Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M72.6265 73.3587C72.1785 75.2883 68.3903 75.3947 63.5243 74.543C63.4844 72.507 57.3364 72.6224 56.7953 70.6484C55.1984 64.8065 52.9628 60.4861 50.0928 53.9966L50.0485 53.8946C50.2303 51.242 50.2791 48.8201 50.2924 47.3518V47.3208C50.2924 47.1034 50.2924 46.9082 50.2924 46.7397C50.2924 46.203 50.2924 45.8925 50.2924 45.8925C51.8582 44.3178 56.1255 46.9127 57.7844 47.5914C58.6228 47.9329 66.1769 50.7585 66.1104 51.4017C66.0882 51.6456 66.0616 51.8807 66.0394 52.1158C65.8486 54.1164 65.7644 55.802 65.7821 57.2613C65.6845 64.1057 67.5786 66.1284 71.0296 70.4577C71.97 71.6376 72.4801 72.6002 72.6221 73.3631L72.6265 73.3587Z' fill='%23CEB79B'/%3E%3Cpath d='M48.8636 62.0654C48.8636 62.0654 48.0252 61.8879 47.8522 64.0215C47.6837 66.1552 48.9035 66.9358 48.8902 66.8249C48.3845 63.2852 48.8636 62.0698 48.8636 62.0698V62.0654Z' fill='%23BBB99D'/%3E%3Cpath d='M42.6185 67.7741C43.1198 70.0098 42.4056 72.3873 43.3859 74.5476C43.4081 74.5964 43.4347 74.6451 43.4569 74.6939C42.8625 74.9069 42.2814 75.1331 41.7181 75.377C42.002 75.6565 42.3125 75.9138 42.6318 76.1489C43.5811 76.8542 44.6324 77.3864 45.7191 77.8566C46.6107 78.2425 47.5733 78.4155 48.5492 78.3712C49.494 78.3268 50.4166 78.1272 51.3304 77.8877C52.1687 77.6703 53.016 77.4619 53.8233 77.1469C54.5241 76.8763 55.2028 76.5481 55.846 76.1489C57.0791 75.3859 58.1659 74.3834 58.9865 73.1813C59.6962 72.1434 60.193 70.9856 60.4858 69.7658C60.1132 70.0098 59.7406 70.2582 59.3591 70.4888C57.7933 71.4292 56.0766 72.2543 54.2402 72.4539C52.599 72.6313 50.8469 72.3075 49.5339 71.2607C48.385 70.3469 47.5156 69.0783 46.8946 67.7608C46.6107 67.162 46.3623 66.5277 46.1849 65.8756C45.3865 66.3813 44.3219 66.8737 42.8847 67.2685C42.6851 67.3217 42.6097 67.477 42.623 67.6233C42.6097 67.6677 42.6097 67.7209 42.623 67.7786H42.6185V67.7741Z' fill='%23C2C2AC'/%3E%3Cpath d='M44.8807 67.0423C45.8788 69.1049 45.7235 71.5845 47.1696 73.4608C47.2006 73.5052 47.2405 73.5451 47.2716 73.585C46.7393 73.9266 46.2292 74.2814 45.7368 74.6452C46.0784 74.8537 46.4377 75.0355 46.8014 75.1908C47.8882 75.661 49.0326 75.9404 50.1947 76.1533C51.1529 76.3263 52.1287 76.2731 53.0647 76.0114C53.974 75.7541 54.8301 75.346 55.6596 74.9113C56.427 74.5077 57.2033 74.1129 57.9219 73.6249C58.5429 73.2036 59.1284 72.7245 59.6651 72.1922C60.6898 71.1675 61.5237 69.9477 62.0471 68.5904C62.4996 67.4193 62.7213 66.1773 62.7302 64.9264C62.4197 65.2502 62.1181 65.574 61.7987 65.8845C60.4902 67.1576 59.0042 68.3508 57.2609 68.963C55.704 69.5086 53.9208 69.5884 52.4082 68.8698C51.0819 68.2399 49.9463 67.202 49.0414 66.062C48.6289 65.543 48.243 64.9796 47.9236 64.3853C47.2627 65.0595 46.3356 65.7781 45.0271 66.4878C44.8452 66.5854 44.8053 66.7539 44.8541 66.8915C44.8541 66.9358 44.863 66.989 44.8896 67.0423H44.8807Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M44.8807 67.0423C45.8788 69.1049 45.7235 71.5845 47.1696 73.4608C47.2006 73.5052 47.2405 73.5451 47.2716 73.585C46.7393 73.9266 46.2292 74.2814 45.7368 74.6452C46.0784 74.8537 46.4377 75.0355 46.8014 75.1908C47.8882 75.661 49.0326 75.9404 50.1947 76.1533C51.1529 76.3263 52.1287 76.2731 53.0647 76.0114C53.974 75.7541 54.8301 75.346 55.6596 74.9113C56.427 74.5077 57.2033 74.1129 57.9219 73.6249C58.5429 73.2036 59.1284 72.7245 59.6651 72.1922C60.6898 71.1675 61.5237 69.9477 62.0471 68.5904C62.4996 67.4193 62.7213 66.1773 62.7302 64.9264C62.4197 65.2502 62.1181 65.574 61.7987 65.8845C60.4902 67.1576 59.0042 68.3508 57.2609 68.963C55.704 69.5086 53.9208 69.5884 52.4082 68.8698C51.0819 68.2399 49.9463 67.202 49.0414 66.062C48.6289 65.543 48.243 64.9796 47.9236 64.3853C47.2627 65.0595 46.3356 65.7781 45.0271 66.4878C44.8452 66.5854 44.8053 66.7539 44.8541 66.8915C44.8541 66.9358 44.863 66.989 44.8896 67.0423H44.8807Z' fill='%23C2C2AC'/%3E%3Cpath d='M45.4663 66.2837C44.7743 66.643 43.9271 66.9801 42.8802 67.2685C42.6806 67.3217 42.6052 67.4769 42.6185 67.6233C42.6052 67.6677 42.6052 67.7209 42.6185 67.7786C43.1198 70.0142 42.4056 72.3918 43.3859 74.552C43.4081 74.6008 43.4347 74.6496 43.4569 74.6984C42.8625 74.9113 42.2814 75.1375 41.7181 75.3815C42.002 75.6609 42.3125 75.9182 42.6318 76.1533C43.5811 76.8586 44.6324 77.3909 45.7191 77.8611C46.6107 78.247 47.5733 78.42 48.5491 78.3756C48.7177 78.3667 48.8863 78.3534 49.0504 78.3357C49.1169 74.3036 46.5619 67.9338 45.4663 66.2882H45.4619L45.4663 66.2837Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M83.1701 76.3352C83.2943 76.415 83.4141 76.4993 83.5294 76.588C83.3786 76.211 83.2544 75.9981 83.1701 76.3352Z' fill='%239EA58E'/%3E%3Cpath d='M67.676 66.0176C67.6317 66.1906 67.574 66.3636 67.5119 66.5277C67.055 67.7431 66.1812 68.7988 65.0589 69.4553C64.4823 69.788 63.8568 70.032 63.1959 70.1029C62.5483 70.1739 61.8962 70.1251 61.2575 69.9876C61.2353 69.9876 61.2176 69.9787 61.1954 69.9743C60.5078 69.8235 59.838 69.5839 59.2082 69.269C58.5339 68.9363 57.8952 68.5149 57.323 68.027C57.2609 67.9738 57.2032 67.9205 57.1367 67.8629C59.7715 66.8914 61.7898 65.9688 63.3024 65.1437C64.8593 64.2921 65.8796 63.5557 66.4784 62.988C66.4828 62.9835 66.4917 62.9791 66.4961 62.9747C66.6381 62.8416 66.7223 62.6641 66.7756 62.4823C66.8643 62.194 67.0861 62.5222 67.6228 63.1432C67.6228 63.1432 67.6272 63.1654 67.6317 63.1743C67.6627 63.2719 67.6938 63.3739 67.716 63.4759C67.92 64.3098 67.9023 65.1925 67.676 66.022V66.0176Z' fill='%23CCD1C0'/%3E%3Cpath d='M48.0836 64.1369C48.0569 64.2478 48.0303 64.3587 48.0126 64.474C47.8485 65.4987 48.0126 66.5677 48.4606 67.5037C49.015 68.6791 49.9643 69.655 51.1398 70.2228C51.7386 70.5111 52.3818 70.7018 53.0516 70.7196C53.7214 70.7418 54.3912 70.6309 55.0344 70.4313C56.4228 70.0054 57.7092 69.207 58.7382 68.1779C58.7959 68.1202 58.8536 68.0626 58.9112 68.0005C52.9762 66.3459 50.0175 64.647 48.9308 63.649C48.3719 63.1344 48.6646 63.334 48.0836 64.1325V64.1369Z' fill='%23CCD1C0'/%3E%3Cpath d='M49.3739 64.3366C49.0945 64.0216 48.9836 63.924 48.8194 63.3917C48.5533 62.5312 48.2872 62.2872 48.8638 62.0654C48.265 61.9634 47.9323 62.9082 47.7992 64.5672C47.6307 66.7008 48.5045 66.8827 48.6198 66.9137C48.6598 66.9226 48.6598 66.4169 48.642 65.7338C48.4025 65.6407 49.5513 64.5362 49.3784 64.3366H49.3739Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.7' d='M61.7808 68.1866C61.7808 68.1866 61.7808 68.2044 61.7719 68.2133C61.7009 68.4883 61.5634 68.7101 61.3416 68.8076C61.2041 68.8076 61.0755 68.8076 60.9468 68.8076C61.1908 68.6258 61.4303 68.4483 61.661 68.2709C61.6965 68.2443 61.732 68.2177 61.7719 68.1911L61.7808 68.1866Z' fill='%232B6B40'/%3E%3Cpath d='M65.3871 39.2299C63.9277 38.946 61.3905 39.4472 59.8735 39.8863L59.8912 40.5295L59.4698 40.015C58.7823 40.2678 58.7734 40.5207 59.1194 41.0884C59.7803 42.1841 59.6827 42.082 60.0243 42.0333C62.1135 41.1461 64.4866 40.6981 65.7464 40.7513C65.8706 40.5828 65.9638 39.3363 65.3915 39.2299H65.3871Z' fill='%23CE8000'/%3E%3Cpath opacity='0.6' d='M65.3868 39.2301C65.0053 39.1547 64.5484 39.1369 64.0561 39.1547C64.0694 39.2833 64.0782 39.4075 64.0694 39.5184C64.0516 40.0285 63.8564 40.5164 63.5681 40.9689C64.4287 40.8048 65.1916 40.7338 65.7416 40.756C65.8659 40.5874 65.959 39.341 65.3912 39.2345L65.3868 39.2301Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M65.3787 39.2256C64.8642 39.128 64.2121 39.1236 63.5246 39.1812C63.3383 39.5361 63.0544 39.8643 62.735 40.126C62.6152 40.2236 62.3225 40.5164 62.1273 40.4055C61.9853 40.3257 61.9587 40.166 61.9498 40.0107C61.6881 40.5208 61.1071 40.8801 60.6147 41.235C60.3175 41.4523 60.0247 41.7628 59.7009 42.0112C59.7896 42.0911 59.8517 42.0556 60.007 42.0334C62.0962 41.1463 64.4694 40.6983 65.7291 40.7515C65.8533 40.5829 65.9465 39.3365 65.3743 39.23L65.3787 39.2256Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M62.3041 41.1817C62.2597 41.2127 62.2153 41.2482 62.1754 41.2837C62.8763 41.0885 63.5549 40.951 64.1671 40.8579C64.1981 40.6095 64.1759 40.3478 64.1227 40.126C63.892 40.3123 63.6215 40.5385 63.2977 40.5607C63.2755 40.5607 63.2577 40.5474 63.2533 40.5296L63.2311 40.3478C63.036 40.6982 62.6456 40.9333 62.3085 41.1817H62.3041Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M64.5929 40.0329C64.5974 40.0861 64.5752 40.2414 64.6328 40.2281C64.6905 40.2192 64.7482 40.2015 64.8014 40.1793C64.9345 40.1172 65.0542 40.0329 65.1607 39.9353C65.3248 39.7801 65.4889 39.5805 65.6131 39.3675C65.551 39.2966 65.4756 39.2433 65.378 39.2256C65.1075 39.1724 64.797 39.1458 64.4598 39.1413C64.5042 39.4385 64.5663 39.7313 64.5929 40.0285V40.0329Z' fill='%23C77500'/%3E%3Cpath d='M55.2727 39.9442L54.9134 40.3434L54.9933 39.8377C53.6315 39.4119 50.7748 38.9417 49.5284 39.3321C49.4485 39.3542 49.2135 40.7959 49.6437 40.7604C49.6703 40.7604 49.697 40.7604 49.728 40.7604C49.7945 40.7071 49.8744 40.6539 49.9675 40.6184C50.5752 40.3833 51.143 40.4587 51.143 40.4587C51.143 40.4587 50.9567 40.6317 50.7349 40.8801C52.2475 41.1507 54.6384 41.8028 55.3171 42.0423C55.7163 42.1843 56.0978 41.5544 56.2441 40.9689C56.4304 40.2103 56.3328 40.2902 55.2683 39.9486L55.2727 39.9442Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M55.2727 39.9488L54.9134 40.348L54.9933 39.8423C54.8957 39.8113 54.878 39.8068 54.7626 39.7758C54.6118 39.8734 54.4876 39.9577 54.3545 40.0242C53.8577 40.2726 53.3299 40.4633 52.7843 40.5742C52.1544 40.7029 51.5068 40.765 50.8636 40.7428C50.8237 40.7827 50.7837 40.8315 50.7394 40.8803C52.252 41.1509 54.6473 41.8029 55.326 42.0425C55.7252 42.1844 56.1066 41.5545 56.253 40.969C56.4393 40.2105 56.3462 40.2903 55.2772 39.9488H55.2727Z' fill='%23C77500'/%3E%3Cpath opacity='0.6' d='M55.7477 40.0995C55.5836 40.5919 55.2864 41.0178 54.8561 41.3549C54.6831 41.4879 54.5057 41.621 54.3238 41.7408C54.7629 41.865 55.1178 41.9714 55.3218 42.0424C55.7211 42.1844 56.1025 41.5545 56.2489 40.969C56.4042 40.3435 56.3643 40.2903 55.7477 40.0995Z' fill='%23A05A07'/%3E%3Cpath d='M100.881 80.0922V80.1011H100.824C100.824 80.1011 100.815 80.0967 100.81 80.0967C100.118 80.0656 99.4309 80.0789 98.7478 80.1277C98.2732 80.1588 97.7941 80.2076 97.3195 80.2741C96.9602 80.3229 96.6009 80.3806 96.2416 80.4515C95.9311 80.5048 95.6294 80.5713 95.3189 80.6334C94.9818 80.7132 94.6447 80.7887 94.312 80.8774C94.139 80.9217 93.9749 80.9661 93.8063 81.0104C93.7531 81.0237 93.6955 81.0459 93.6289 81.0637C93.2829 81.1524 92.9414 81.2544 92.5998 81.3697C92.5909 81.3697 92.5732 81.3742 92.5643 81.3786C92.205 81.4895 91.8546 81.596 91.4997 81.7157C91.1005 81.8532 90.7057 81.9907 90.3021 82.1327C90.2844 82.1371 90.2622 82.146 90.2444 82.1593C90.1601 82.1859 90.0803 82.2125 90.0049 82.248C89.8807 82.2879 89.7609 82.3323 89.6412 82.3855C89.6367 82.3811 89.6367 82.3855 89.6367 82.3855C89.3085 82.5053 88.9802 82.6251 88.652 82.7581C88.4125 82.8468 88.1641 82.94 87.9245 83.0376H87.9201C87.5697 83.1707 87.2281 83.3082 86.8821 83.4412C86.8821 83.4457 86.8777 83.4457 86.8777 83.4457C86.8289 83.4634 86.7845 83.4812 86.7357 83.4989C86.0171 83.7828 85.3074 84.0711 84.5933 84.3373C84.3138 84.4437 84.0388 84.5502 83.7638 84.6522C83.7593 84.6522 83.7505 84.6611 83.746 84.6611C83.3867 84.7986 83.0363 84.9361 82.6815 85.0647C81.9673 85.322 81.2576 85.5394 80.5257 85.7212C80.1619 85.8188 79.7982 85.9031 79.4345 85.9874C79.3014 86.0273 79.1595 86.0495 79.0264 86.0849C79.0219 86.0805 79.0175 86.0849 79.0175 86.0849C78.982 86.0894 78.9554 86.0983 78.9244 86.1027L78.8135 86.1204C78.8135 86.1204 78.7869 86.1293 78.7824 86.1293C78.6405 86.1604 78.503 86.1825 78.3655 86.2047L78.0993 86.2491C77.8642 86.2979 77.6336 86.3334 77.4029 86.36C77.3851 86.36 77.3585 86.3644 77.3319 86.3688C77.1811 86.3955 77.0214 86.4176 76.8662 86.4398C76.7952 86.4487 76.7287 86.4576 76.6577 86.4709C76.4182 86.4975 76.1742 86.5241 75.9391 86.5551C75.7705 86.5684 75.6064 86.5906 75.4423 86.5995C75.429 86.5995 75.4068 86.6039 75.3891 86.6039C75.256 86.6172 75.1229 86.6305 74.9943 86.6394C74.9499 86.6394 74.8967 86.6483 74.8523 86.6483C74.4265 86.6793 73.9962 86.7015 73.5793 86.7193H73.5527C72.3373 86.7592 71.1219 86.737 69.902 86.666C68.3584 86.5729 66.8103 86.3999 65.2711 86.1604C64.446 86.0273 63.621 85.8809 62.8004 85.7168C62.7738 85.7168 62.756 85.7079 62.725 85.7035C62.6052 85.6769 62.4899 85.6547 62.3701 85.6236H62.3657C62.3257 85.6192 62.2814 85.6103 62.237 85.6059C62.1882 85.597 62.1527 85.5793 62.104 85.5704C61.8822 85.526 61.6737 85.4817 61.4519 85.4373C61.4341 85.4285 61.4164 85.4196 61.4031 85.4196C61.3765 85.4196 61.3587 85.4151 61.3321 85.4107C61.3144 85.4063 61.2922 85.4018 61.27 85.4018C61.1281 85.3664 60.9906 85.3309 60.8531 85.3043C60.7156 85.2688 60.578 85.2333 60.4361 85.2067C60.3563 85.1934 60.2808 85.1712 60.201 85.1534C60.1966 85.149 60.1966 85.1534 60.1966 85.1534C60.1788 85.149 60.1611 85.1446 60.1434 85.1401C60.0103 85.1091 59.8728 85.0825 59.7397 85.0425C59.5667 85.0026 59.3893 84.9627 59.2251 84.9183C59.2251 84.9183 59.2207 84.9139 59.2163 84.9139C59.1409 84.9006 59.0699 84.8784 58.9989 84.8607C58.9723 84.8607 58.959 84.8518 58.9368 84.8518H58.9235C58.7416 84.7986 58.5642 84.7542 58.3824 84.7099C58.1872 84.6611 57.9876 84.6123 57.7835 84.559C57.7525 84.5502 57.7259 84.5457 57.6859 84.5236C57.5041 84.4792 57.3266 84.426 57.1492 84.3816H57.1448C56.7278 84.2619 56.3153 84.1465 55.8983 84.0268C55.0777 83.7917 54.2615 83.5521 53.4498 83.3037C53.4409 83.2993 53.432 83.2949 53.4232 83.2949C53.3167 83.2638 53.2014 83.2328 53.0905 83.1973C53.0018 83.1707 52.9131 83.144 52.8243 83.113C52.6336 83.0553 52.434 82.9932 52.2388 82.9311C52.2255 82.9311 52.2122 82.9267 52.1989 82.9223C52.1856 82.9223 52.1723 82.9222 52.1678 82.9178C52.1678 82.9178 52.1634 82.9149 52.1545 82.9089C52.1191 82.8956 52.0791 82.8779 52.0436 82.869C52.0436 82.869 52.0392 82.8646 52.0348 82.8646C51.4936 82.665 50.9347 82.4875 50.3758 82.3101C50.2693 82.2746 50.1629 82.248 50.0564 82.2125C50.0298 82.2037 50.0076 82.1992 49.981 82.1859C49.5862 82.0661 49.1914 81.9508 48.7967 81.8266C48.6636 81.7867 48.5349 81.7423 48.4063 81.7024C48.2422 81.6536 48.0825 81.6004 47.9228 81.5472C47.7365 81.4895 47.5546 81.423 47.3683 81.3564C47.2841 81.3254 47.2042 81.2988 47.1244 81.2677C46.9336 81.1967 46.7429 81.1258 46.5522 81.0459C46.5477 81.0459 46.5389 81.0415 46.5344 81.0415C46.5344 81.0415 46.5315 81.04 46.5256 81.0371H46.5211C46.4723 81.0104 46.4191 80.9927 46.3703 80.9661L46.2683 80.9217L46.2239 80.9084C46.2239 80.9084 46.2151 80.904 46.2106 80.904H46.2062C46.2062 80.904 46.1929 80.8995 46.1796 80.8995C46.1663 80.8907 46.1441 80.8862 46.1263 80.8729H46.1219C46.1219 80.8729 46.0953 80.8596 46.082 80.8463C45.9844 80.802 45.8868 80.7576 45.7892 80.7044C45.7094 80.6733 45.634 80.6334 45.5541 80.5979H45.5497C45.5053 80.5713 45.4565 80.5491 45.4077 80.5181C45.2569 80.4427 45.1017 80.3628 44.9553 80.2785H44.9509C44.9509 80.2785 44.9376 80.2697 44.9331 80.2652C44.9287 80.2564 44.9198 80.2475 44.9198 80.2342C44.9109 80.2297 44.9065 80.2209 44.9021 80.2076C44.9021 80.2031 44.8976 80.1987 44.8976 80.1898C44.8888 80.1721 44.871 80.1455 44.8666 80.1188C44.8621 80.1055 44.8533 80.0834 44.84 80.0656C44.8355 80.0523 44.8311 80.0346 44.8222 80.0213C44.8222 80.0213 44.8207 80.0198 44.8178 80.0168C44.8178 80.0168 44.8133 80.0124 44.8133 80.008C44.8133 80.008 44.8089 80.0035 44.8089 79.9991H44.8133C44.8 79.9459 44.7823 79.9015 44.769 79.8438V79.835C44.769 79.835 44.7646 79.7817 44.7557 79.7507L44.7424 79.662C44.7158 79.5599 44.7025 79.4535 44.6936 79.3515C44.6847 79.2627 44.6758 79.174 44.667 79.0853C44.6625 79.072 44.6625 79.0498 44.6625 79.0321L44.6492 78.8103C44.6448 78.7526 44.6403 78.6861 44.6359 78.6284C44.6182 78.4599 44.6004 78.2957 44.5871 78.1228C44.5738 77.9852 44.5516 77.8477 44.5383 77.7058C44.5339 77.688 44.5339 77.6614 44.5339 77.6437C44.5206 77.5239 44.5073 77.4086 44.494 77.2888V77.2755C44.4895 77.2489 44.4895 77.2223 44.4851 77.1957C44.4585 76.9961 44.4407 76.8009 44.423 76.6013C44.423 76.6013 44.423 76.5983 44.423 76.5924C44.4141 76.5303 44.4053 76.4638 44.3964 76.4017C44.3964 76.3884 44.392 76.3706 44.392 76.3573C44.392 76.3484 44.3875 76.3396 44.3875 76.3263H44.392V76.3351C44.6049 77.138 45.2303 77.4707 46.153 77.4707H46.1574C46.2195 77.4707 46.2905 77.4707 46.357 77.4618C46.632 77.453 46.9336 77.413 47.253 77.3421C47.2663 77.3421 47.2796 77.3376 47.2929 77.3376C47.4438 77.3021 47.599 77.2667 47.7498 77.2312C47.7809 77.2267 47.8119 77.2179 47.8474 77.2045C47.8785 77.1957 47.9095 77.1868 47.945 77.1735C47.9849 77.1646 48.0248 77.1558 48.0692 77.138C48.149 77.1114 48.22 77.0892 48.2954 77.067C48.5305 77.0049 48.7612 76.9207 49.0051 76.8364H49.0096C49.0096 76.8364 49.0495 76.8231 49.0628 76.8186C49.0672 76.8186 49.0761 76.8142 49.0806 76.8098C49.5507 76.6368 50.0431 76.4327 50.5577 76.2109C51.0545 75.9892 51.5646 75.7452 52.088 75.4835C52.0924 75.4835 52.0969 75.4835 52.0969 75.479C52.6602 75.1951 53.2369 74.8935 53.8135 74.5786H53.8179C53.9954 74.481 54.1728 74.3878 54.3458 74.2903C54.4744 74.2148 54.6031 74.1483 54.7273 74.0729C54.8071 74.0285 54.8781 73.9886 54.9579 73.9443C55.2152 73.8023 55.4681 73.6515 55.7209 73.5051H55.7253V73.4963C55.8495 73.4253 55.9693 73.3587 56.0935 73.2833C56.2177 73.2124 56.3375 73.1414 56.4617 73.066C56.5726 73.0039 56.6879 72.9329 56.7943 72.8708C56.8653 72.8265 56.9363 72.7821 57.0073 72.7422C57.0472 72.7156 57.0915 72.6934 57.1315 72.6668C57.1403 72.6623 57.1492 72.6579 57.1625 72.649C57.1625 72.649 57.1758 72.6357 57.1803 72.6313H57.1936C57.3266 72.5514 57.4553 72.476 57.5883 72.3962C57.6638 72.3518 57.7347 72.3075 57.8101 72.2587C57.8944 72.2099 57.9831 72.1566 58.0674 72.1034C58.1118 72.0768 58.1561 72.0546 58.196 72.0236C58.2227 72.0058 58.2493 71.9837 58.2759 71.9704C58.3025 71.9526 58.3291 71.9349 58.3557 71.9171H58.3646C58.3957 71.9038 58.4223 71.8816 58.4578 71.8683L58.6352 71.7663C58.6618 71.753 58.684 71.7353 58.7106 71.7175C58.7683 71.682 58.8304 71.6421 58.8925 71.6066L59.0388 71.5135C59.0743 71.4869 59.1098 71.4691 59.1409 71.4425C59.5135 71.2118 59.8816 70.9767 60.2454 70.7416C60.2631 70.7283 60.2853 70.715 60.2986 70.7062C60.3252 70.6928 60.3429 70.6751 60.3696 70.6618C60.3696 70.6574 60.374 70.6618 60.374 70.6618C60.5559 70.542 60.7333 70.4267 60.9107 70.3158C60.9817 70.267 61.0527 70.2271 61.1236 70.1827H61.1281C61.1281 70.1827 61.1414 70.1694 61.1547 70.165C61.2035 70.1384 61.2478 70.1118 61.2878 70.0852C61.3011 70.0763 61.3144 70.0718 61.3233 70.0585C61.3499 70.0452 61.3765 70.0275 61.4031 70.0142H61.4164L61.4208 69.9964C61.8334 69.7392 62.166 69.5307 62.4189 69.3754C62.4233 69.3754 62.4233 69.371 62.4278 69.371C62.5032 69.3266 62.5697 69.2778 62.6451 69.2379H62.6496L62.6584 69.2246C62.6895 69.2113 62.7117 69.1891 62.7427 69.1758C62.7826 69.1492 62.8181 69.127 62.8536 69.1004H62.858C62.858 69.1004 62.9024 69.0694 62.9201 69.0561H62.9246C62.9246 69.0561 62.9689 69.025 62.9955 69.0117C63.0887 68.9496 63.1818 68.8831 63.275 68.8298C63.4702 68.7012 63.6875 68.5592 63.9049 68.4129C64.0557 68.3108 64.2109 68.2044 64.3662 68.0979L64.3795 68.0846C64.3795 68.0846 64.3972 68.0713 64.4106 68.0669C64.4194 68.0624 64.4238 68.058 64.4283 68.058C64.4327 68.058 64.4327 68.0536 64.4372 68.0536L64.4505 68.0403C64.4505 68.0403 64.4638 68.027 64.4771 68.0225C64.5525 67.9737 64.6235 67.9249 64.6989 67.8673C64.6989 67.8673 64.7033 67.8717 64.7033 67.8673C64.7388 67.8407 64.7787 67.814 64.8098 67.7874C64.8098 67.7874 64.8142 67.7919 64.8142 67.7874C64.8719 67.7386 64.9384 67.6943 64.9961 67.6499C64.9961 67.6499 65.0049 67.6455 65.0049 67.641C65.4929 67.2817 65.9719 66.9003 66.3845 66.5188C66.3933 66.5099 66.4022 66.5055 66.4111 66.4922C66.4377 66.4744 66.4643 66.4478 66.4909 66.4212C66.5353 66.3857 66.5841 66.3369 66.6284 66.2926H66.6329C66.6683 66.2527 66.6994 66.2216 66.7349 66.1861C66.7659 66.1506 66.797 66.1196 66.828 66.0885C66.8635 66.0486 66.899 66.0087 66.9345 65.9688C66.97 65.9333 66.9966 65.8934 67.0321 65.8623C67.0853 65.8091 67.1341 65.7514 67.1829 65.6893C67.2273 65.6316 67.276 65.5695 67.316 65.5119C67.3293 65.4941 67.347 65.472 67.3559 65.4542L67.4003 65.3965H67.4047V65.3877C67.4313 65.3478 67.4535 65.3034 67.4801 65.2635C67.4801 65.259 67.4845 65.2546 67.489 65.2457C67.4934 65.2413 67.4978 65.2324 67.5023 65.228C67.5156 65.1969 67.5333 65.1703 67.5466 65.1437H67.5511C67.5511 65.1437 67.5644 65.1393 67.5644 65.1304V65.1215C67.5644 65.1215 67.5688 65.1082 67.5688 65.1038C67.6398 64.9707 67.693 64.8421 67.7196 64.7223V64.7134C67.7595 64.5804 67.764 64.4606 67.7374 64.3497C67.7329 64.3364 67.7329 64.3187 67.7285 64.3009C67.7285 64.2876 67.7241 64.2654 67.7196 64.2521C67.7152 64.2432 67.7152 64.2344 67.7152 64.2211C67.7152 64.1856 67.7329 64.159 67.7595 64.119C67.764 64.1102 67.7729 64.1057 67.7862 64.1013C67.795 64.0924 67.8039 64.0836 67.8172 64.0747C67.8261 64.0703 67.8261 64.0658 67.8305 64.0614C67.835 64.0569 67.8394 64.0525 67.8438 64.0525C67.8837 64.0215 67.937 63.9993 67.9946 63.9727C68.0656 63.9461 68.141 63.9239 68.2253 63.8973C68.2963 63.8839 68.3628 63.8618 68.4427 63.8529C68.5314 63.8396 68.6245 63.8174 68.7177 63.8085C68.7753 63.7997 68.8286 63.7908 68.8907 63.7819C68.8951 63.7775 68.904 63.7775 68.9173 63.7819C68.9616 63.7775 69.0104 63.7731 69.0592 63.7686C69.1524 63.7642 69.2455 63.7553 69.3431 63.7509C69.5516 63.742 69.7645 63.742 69.9774 63.7464C70.0484 63.7509 70.1149 63.7553 70.177 63.7597C70.248 63.7642 70.3101 63.7642 70.3766 63.7731C70.5008 63.7864 70.6162 63.8041 70.7359 63.8174C70.7404 63.8174 70.7493 63.8174 70.7537 63.8218C70.9267 63.8485 71.0864 63.8795 71.2283 63.9239C71.2328 63.9239 71.2416 63.9283 71.2461 63.9283C71.2727 63.9327 71.2949 63.9416 71.3259 63.9594C71.3303 63.9594 71.3348 63.9594 71.3392 63.9638C71.3836 63.9727 71.4191 63.9904 71.459 64.0082C71.4856 64.017 71.5078 64.0259 71.5299 64.0392C71.5433 64.0436 71.561 64.0525 71.5743 64.0658C71.592 64.0791 71.6098 64.0924 71.6231 64.0969C71.6364 64.1057 71.6497 64.1102 71.6586 64.1235C71.663 64.1235 71.6675 64.1235 71.6719 64.1279H71.6808C71.6808 64.1279 71.7074 64.1412 71.7163 64.1545C71.7251 64.1678 71.7429 64.1723 71.7517 64.1812C71.7872 64.1989 71.8271 64.2255 71.8582 64.2521C72.0046 64.3497 72.1598 64.4429 72.3151 64.5271C72.3417 64.5449 72.3683 64.5626 72.3949 64.5759H72.4038C73.6236 65.259 74.9455 65.7204 76.1476 65.8712C76.2673 65.8889 76.3827 65.9022 76.5024 65.9111H76.5379C76.8839 65.9377 77.2255 65.951 77.5759 65.9643C77.5892 65.9688 77.6069 65.9688 77.6203 65.9643C77.6291 65.9688 77.638 65.9688 77.6513 65.9688H77.7533C77.8731 65.9732 77.9929 65.9776 78.1126 65.9821C78.29 65.9909 78.4764 65.9954 78.6582 65.9998H78.8844C79.0308 66.0042 79.1772 66.0042 79.3325 66.0087C79.6651 66.0176 80.0067 66.022 80.3438 66.0353C80.6277 66.0442 80.916 66.053 81.1999 66.0664C81.4749 66.0797 81.7588 66.093 82.0383 66.1063C82.2955 66.1196 82.5439 66.1418 82.7968 66.1595C83.8436 66.2482 84.886 66.3946 85.8974 66.6341C87.095 66.9225 88.2483 67.3483 89.3041 67.9915L89.4815 68.0935C90.0093 68.4217 90.5017 68.7633 90.9941 69.1315H91.0029C91.9788 69.8501 92.9103 70.6308 93.8152 71.4292C94.2544 71.8107 94.6802 72.1966 95.106 72.5825C95.1903 72.6579 95.2701 72.7289 95.3456 72.8043C95.4698 72.9063 95.5984 73.0172 95.7093 73.1236C96.3791 73.7313 97.0312 74.3524 97.6655 74.9911C97.6743 75 97.6832 75.0088 97.6965 75.0177C97.7364 75.0532 97.7719 75.0931 97.8074 75.1242C97.8562 75.1685 97.9006 75.2085 97.9405 75.2484L97.9981 75.306C97.9981 75.306 98.0425 75.3415 98.0558 75.3593L98.0913 75.3948C98.0913 75.3948 98.109 75.4125 98.1223 75.4258C98.1223 75.4258 98.1253 75.4288 98.1312 75.4347H98.1357C98.1889 75.4835 98.2377 75.5323 98.282 75.5766C98.3885 75.6875 98.5038 75.8029 98.6103 75.9137H98.6147V75.9226C98.9296 76.242 99.2135 76.5614 99.5063 76.8852C99.5152 76.894 99.5196 76.8985 99.5196 76.9118V76.9207C99.5196 76.9207 99.524 76.9251 99.5285 76.934L99.5418 76.9517L99.5861 77.0582C99.5861 77.0582 99.5906 77.0715 99.595 77.0759C99.5994 77.0937 99.6083 77.1158 99.6216 77.1336C99.6571 77.209 99.697 77.2977 99.7414 77.3997C99.8789 77.728 100.074 78.176 100.26 78.6151C100.287 78.6684 100.309 78.7216 100.331 78.7792C100.349 78.828 100.371 78.8724 100.389 78.9168C100.398 78.9345 100.402 78.9522 100.407 78.9655C100.442 79.0454 100.478 79.1164 100.504 79.1873C100.509 79.1962 100.513 79.214 100.518 79.2273L100.575 79.3603L100.629 79.489C100.66 79.5599 100.682 79.622 100.708 79.6753C100.722 79.7063 100.735 79.7285 100.744 79.7507L100.771 79.8083C100.779 79.8394 100.797 79.866 100.806 79.8926L100.819 79.9281L100.837 79.9725C100.837 79.9725 100.85 80.0079 100.864 80.0257C100.864 80.0257 100.877 80.0612 100.881 80.0701C100.881 80.0701 100.883 80.073 100.886 80.0789V80.0967H100.895V80.1055H100.899L100.881 80.0922Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.4' d='M100.881 80.0921V80.101C100.881 80.101 100.841 80.1054 100.824 80.1054H100.81C100.136 80.1631 99.4883 80.2341 98.8585 80.3139C98.3439 80.376 97.8427 80.447 97.3503 80.5268C96.6761 80.6288 96.0284 80.7442 95.3986 80.8728C94.4271 81.0591 93.5045 81.272 92.6306 81.4982C92.2137 81.6047 91.8012 81.72 91.4019 81.8309C91.3043 81.8575 91.2068 81.8842 91.1092 81.9152C90.7321 82.0261 90.364 82.1414 90.0002 82.2523C89.876 82.2922 89.7563 82.3322 89.6321 82.3632C89.2949 82.4697 88.9578 82.585 88.6296 82.6915C88.3856 82.7757 88.1372 82.86 87.8933 82.9443C87.5561 83.0685 87.2146 83.1838 86.8819 83.3036C86.8819 83.3036 86.8775 83.3036 86.8775 83.308C86.048 83.6008 85.2407 83.898 84.4422 84.1863C83.9011 84.3815 83.3688 84.5767 82.8365 84.7585C82.7034 84.8029 82.5659 84.8517 82.4328 84.9005C81.2662 85.2953 80.0996 85.6501 78.8842 85.9562H78.8798C78.6935 86.0005 78.5116 86.0449 78.3253 86.0893C78.0104 86.1647 77.6866 86.2312 77.3627 86.2977H77.3583C77.1853 86.3332 77.0123 86.3687 76.8393 86.3953C76.3869 86.4796 75.9211 86.5461 75.4421 86.6127C75.4288 86.6127 75.4066 86.6171 75.3888 86.6171C74.7989 86.6925 74.1956 86.7502 73.5657 86.7901C72.5012 86.8655 71.3789 86.8744 70.1812 86.8212C69.9373 86.8167 69.68 86.8034 69.4227 86.7857C69.3917 86.7812 69.3651 86.7812 69.3296 86.7768C67.8436 86.6792 66.2423 86.484 64.499 86.1691C62.7824 85.8586 60.9282 85.4416 58.9011 84.8872C58.7237 84.8384 58.5462 84.7896 58.3644 84.7408C58.2091 84.6964 58.0494 84.6521 57.8942 84.6077C57.8764 84.5988 57.8543 84.5944 57.8321 84.59C57.6059 84.5279 57.3796 84.4569 57.149 84.3904H57.1445C56.7276 84.2706 56.3151 84.1553 55.8981 84.0355C55.0775 83.8004 54.2613 83.5609 53.4495 83.3125C53.4407 83.308 53.4318 83.3036 53.4229 83.3036C53.2233 83.2459 53.0193 83.1794 52.8241 83.1217C52.6334 83.0641 52.4338 83.002 52.2386 82.9399C52.2253 82.9399 52.212 82.9354 52.1987 82.931L52.1543 82.9177C52.1188 82.9044 52.0789 82.8866 52.0434 82.8778C52.0434 82.8778 52.039 82.8733 52.0345 82.8733C51.4934 82.6737 50.9345 82.4963 50.3756 82.3189C50.2735 82.2878 50.1626 82.2568 50.0562 82.2213C49.6392 82.0926 49.2178 81.9684 48.7964 81.8398C48.6634 81.7999 48.5347 81.7555 48.4061 81.7156C48.242 81.6668 48.0823 81.6136 47.9226 81.5603C47.7363 81.5027 47.5544 81.4361 47.3681 81.3696C47.2838 81.3386 47.204 81.3119 47.1242 81.2809C46.9334 81.2099 46.7427 81.1389 46.5519 81.0591C46.5475 81.0591 46.5386 81.0547 46.5342 81.0547C46.5342 81.0547 46.5312 81.0532 46.5253 81.0502L46.5209 81.0458C46.4721 81.0281 46.4189 81.0059 46.3701 80.9837L46.2237 80.926C46.2237 80.926 46.2148 80.9216 46.2104 80.9216C46.0684 80.8595 45.9265 80.793 45.789 80.7264C45.7091 80.6909 45.6337 80.651 45.5539 80.6155H45.5495C45.5007 80.5889 45.4563 80.5667 45.4075 80.5401C45.2567 80.4647 45.1014 80.3849 44.9551 80.3006H44.9506C44.9506 80.3006 44.9373 80.2917 44.9329 80.2873C44.9285 80.2784 44.9196 80.2695 44.9196 80.2562C44.9107 80.2429 44.9063 80.2296 44.9018 80.2163C44.9018 80.2163 44.9018 80.2119 44.8974 80.2119C44.8885 80.1941 44.8708 80.1675 44.8664 80.1409C44.8619 80.1276 44.853 80.1054 44.8397 80.0877C44.8353 80.0744 44.8309 80.0566 44.822 80.0433C44.822 80.0433 44.8205 80.0418 44.8176 80.0389C44.8176 80.0389 44.8131 80.0344 44.8131 80.03C44.8131 80.03 44.8087 80.0256 44.8087 80.0211H44.8131C44.7821 79.8703 44.7555 79.7151 44.7288 79.5643C44.7244 79.5376 44.72 79.511 44.72 79.4844C44.7155 79.4489 44.7111 79.4223 44.7067 79.3868C44.6934 79.2937 44.6756 79.2005 44.6667 79.1074C44.6623 79.0941 44.6623 79.0719 44.6623 79.0541C44.6135 78.6549 44.578 78.2513 44.5425 77.852C44.5381 77.8121 44.5337 77.7678 44.5337 77.7278C44.5292 77.7101 44.5292 77.6835 44.5292 77.6657C44.5159 77.546 44.5026 77.4306 44.4937 77.3109V77.2976C44.4893 77.271 44.4893 77.2443 44.4849 77.2177C44.4671 77.0226 44.4449 76.8185 44.4139 76.6233C44.4139 76.6233 44.4139 76.6204 44.4139 76.6145C44.4095 76.5568 44.4006 76.4947 44.3873 76.437V76.4237C44.3873 76.4237 44.3828 76.3927 44.3828 76.3794C44.3828 76.3705 44.3784 76.3616 44.3784 76.3483H44.3828V76.3572C44.8042 77.0447 45.4164 77.3774 46.1483 77.4661H46.1527C46.2148 77.475 46.2814 77.4794 46.3479 77.4794C46.41 77.4839 46.4721 77.4883 46.5342 77.4883H46.5431C47.2883 77.4928 48.1311 77.2887 49.0049 76.956C49.0138 76.956 49.0315 76.9516 49.0448 76.9427C49.0537 76.9427 49.0714 76.9383 49.0848 76.9294C49.5993 76.7387 50.1316 76.5036 50.6595 76.2419C51.143 76.0112 51.6176 75.7584 52.0789 75.5055C52.0833 75.5055 52.0878 75.5055 52.0878 75.5011C52.4471 75.3059 52.7975 75.1063 53.1346 74.92C53.3298 74.8091 53.525 74.6938 53.7113 74.5918C53.8931 74.4897 54.0661 74.3922 54.2302 74.299C54.3988 74.2059 54.5541 74.1171 54.7049 74.0373H54.7093C54.767 73.9974 54.8335 73.9619 54.8912 73.9353C55.1351 73.8022 55.3614 73.6824 55.5698 73.5893C55.6142 73.5627 55.6586 73.5449 55.7029 73.5272H55.7162C55.836 73.4518 55.9558 73.3852 56.08 73.3098C56.2042 73.2388 56.3239 73.1679 56.4481 73.0969C56.5546 73.0259 56.6699 72.9638 56.7808 72.8973C56.8518 72.8529 56.9228 72.8086 56.9937 72.7687C57.0425 72.7332 57.0957 72.6977 57.1445 72.6711C57.149 72.6666 57.1579 72.6622 57.1623 72.6578H57.1756C57.3087 72.5779 57.4373 72.5025 57.5704 72.4227C57.6458 72.3783 57.7168 72.334 57.7922 72.2852C57.8764 72.2364 57.9652 72.1831 58.0494 72.1299C58.1204 72.0856 58.187 72.0412 58.2579 71.9968C58.2845 71.9791 58.3112 71.9614 58.3378 71.9436H58.3422C58.5684 71.8105 58.7946 71.673 59.0209 71.5355C59.0563 71.5089 59.0918 71.4912 59.1229 71.4645C59.4955 71.2339 59.8637 70.9988 60.2274 70.7637C60.2451 70.7504 60.2673 70.7371 60.2806 70.7282C60.3072 70.7149 60.325 70.6972 60.3516 70.6839C60.3516 70.6794 60.356 70.6839 60.356 70.6839C60.5379 70.5641 60.7153 70.4488 60.8928 70.3379C60.9637 70.2891 61.0347 70.2491 61.1057 70.2048C61.1057 70.2004 61.1101 70.2004 61.1101 70.2004C61.119 70.1959 61.1234 70.1915 61.1367 70.187C61.1855 70.1604 61.2299 70.1338 61.2698 70.1072C61.2831 70.0983 61.2964 70.0939 61.3053 70.0895C61.3319 70.0717 61.3585 70.054 61.3851 70.0407H61.3984L61.4029 70.0229C61.8154 69.7657 62.1481 69.5572 62.4009 69.4019C62.4054 69.4019 62.4054 69.3975 62.4098 69.3975C62.4852 69.3531 62.5517 69.3043 62.6271 69.2644H62.6316C62.6626 69.2378 62.6892 69.2201 62.7247 69.2023C62.7646 69.1757 62.8001 69.1535 62.8356 69.1269H62.8401C62.8401 69.1269 62.8844 69.0958 62.9022 69.0825H62.9066L62.9643 69.0382C62.9643 69.0382 62.9687 69.0338 62.9731 69.0382C63.0663 68.9761 63.1594 68.9095 63.2526 68.8563C63.4611 68.7188 63.6696 68.5813 63.8825 68.4394C64.0333 68.3373 64.1885 68.2309 64.3438 68.1244C64.3615 68.1111 64.3881 68.0934 64.4059 68.0801C64.4103 68.0801 64.4103 68.0756 64.4148 68.0756C64.5123 68.0047 64.6055 67.9425 64.6986 67.876C64.7341 67.8583 64.7607 67.8317 64.7918 67.805C64.8539 67.7607 64.9249 67.7119 64.987 67.6631H64.9958C65.1777 67.5256 65.3551 67.3925 65.5281 67.2594C65.8165 67.0243 66.1003 66.7893 66.3621 66.5364C66.3709 66.5275 66.3798 66.5231 66.3887 66.5098C66.4641 66.4388 66.5351 66.3723 66.6105 66.2969C66.7125 66.1949 66.8189 66.084 66.9121 65.9775C67.0629 65.8134 67.2048 65.6448 67.3379 65.4718L67.3823 65.4142H67.3867V65.4053C67.4133 65.3654 67.4355 65.321 67.4621 65.2811C67.4621 65.2767 67.4666 65.2722 67.471 65.2633C67.4754 65.2589 67.4799 65.25 67.4843 65.2456C67.4976 65.2146 67.5198 65.1879 67.5331 65.1613C67.5375 65.1525 67.542 65.148 67.5464 65.1436C67.6529 65.0061 67.6883 64.8686 67.7017 64.7355V64.6867C67.7017 64.6867 67.7061 64.6823 67.7017 64.6778C67.7061 64.5492 67.6972 64.4294 67.7105 64.3141C67.7194 64.2209 67.7505 64.1367 67.8214 64.0613C67.8791 64.0346 67.9412 64.0169 67.9989 63.9992C68.2162 63.9238 68.4513 63.8661 68.6953 63.8217C68.7086 63.8173 68.7308 63.8173 68.7441 63.8173C68.784 63.8084 68.8239 63.804 68.8683 63.7996C68.8727 63.7951 68.8816 63.7951 68.8949 63.7996C69.4449 63.7153 70.0349 63.7197 70.5893 63.8129C70.6337 63.8173 70.6736 63.8262 70.718 63.8306C70.7224 63.8306 70.7313 63.8306 70.7357 63.835C70.9886 63.8838 71.2281 63.9548 71.4499 64.048C71.512 64.0746 71.5785 64.1012 71.6406 64.1322C71.6451 64.1322 71.6495 64.1322 71.6539 64.1367H71.6628C71.6628 64.1367 71.6894 64.15 71.6983 64.1633C71.7072 64.1766 71.7249 64.1766 71.7338 64.181C71.7692 64.2076 71.8092 64.2298 71.8402 64.2564C71.9866 64.354 72.1419 64.4516 72.2971 64.5314C72.3282 64.5492 72.3548 64.5669 72.3858 64.5802C73.5657 65.1924 74.8077 65.5517 76.0852 65.769C76.5865 65.8577 77.0877 65.9198 77.5978 65.9686C77.6067 65.9731 77.6156 65.9731 77.6289 65.9731C77.6688 65.9731 77.7043 65.9775 77.7398 65.9819C78.2765 66.0307 78.8221 66.0662 79.3633 66.0928C80.4722 66.1461 81.5945 66.1771 82.699 66.2437C83.7769 66.3146 84.8414 66.4211 85.875 66.6384C87.5694 66.9933 89.1885 67.632 90.6434 68.843C90.7499 68.9362 90.8652 69.0337 90.9717 69.1313H90.9805C91.9298 69.8721 92.8746 70.6395 93.7928 71.4291C94.0856 71.6819 94.3783 71.9303 94.6667 72.192C95.3453 72.7864 96.0018 73.3985 96.6494 74.0195C96.7382 74.1038 96.8224 74.1881 96.9112 74.2724C97.1684 74.5208 97.4257 74.7648 97.6741 75.0176C97.714 75.0531 97.7495 75.093 97.785 75.1241C97.8915 75.2261 97.9979 75.337 98.0911 75.439C98.2596 75.6031 98.4104 75.7628 98.5657 75.9269C98.8718 76.2463 99.169 76.5657 99.4706 76.8895C99.475 76.8984 99.4839 76.9072 99.5016 76.9205C99.5016 76.9205 99.5061 76.9294 99.5105 76.9383C99.515 76.9516 99.5283 76.9782 99.546 77.0137C99.5504 77.027 99.5593 77.0492 99.5726 77.0669C99.5726 77.0713 99.577 77.0802 99.5815 77.0847C99.5859 77.1024 99.5948 77.1246 99.6081 77.1423C99.6436 77.2177 99.6835 77.3064 99.7279 77.4085C99.8654 77.7367 100.061 78.1847 100.247 78.6239C100.273 78.6771 100.296 78.7303 100.318 78.788C100.336 78.8323 100.358 78.8811 100.375 78.9255C100.384 78.9432 100.389 78.961 100.393 78.9743C100.429 79.0497 100.455 79.1251 100.491 79.1961C100.495 79.205 100.5 79.2227 100.504 79.236C100.513 79.2493 100.517 79.2671 100.517 79.2804C100.553 79.3558 100.58 79.4223 100.611 79.4933H100.615C100.642 79.5687 100.668 79.6264 100.695 79.684C100.708 79.7151 100.721 79.7372 100.73 79.7594C100.739 79.786 100.744 79.7993 100.757 79.8171C100.766 79.8481 100.784 79.8748 100.792 79.9014L100.806 79.9369C100.806 79.9369 100.815 79.9635 100.819 79.9768C100.819 79.9768 100.819 79.9812 100.824 79.9812C100.828 79.9945 100.837 80.0167 100.85 80.0344C100.85 80.0344 100.863 80.0699 100.868 80.0788C100.868 80.0788 100.869 80.0818 100.872 80.0877C100.872 80.0877 100.877 80.101 100.881 80.1054V80.1143H100.886L100.881 80.0921Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M72.3904 64.5316L72.3771 64.5449C71.4811 65.8312 70.3145 66.949 69.0325 67.9072C69.0237 67.916 69.0148 67.9205 69.0059 67.9249C68.5757 68.2443 68.1321 68.5459 67.6796 68.8298C66.2025 69.7569 64.6145 70.5243 62.9866 71.1896C62.2059 71.5001 61.4252 71.8062 60.6489 72.1256C60.4227 72.2187 60.2009 72.3074 59.9836 72.405C58.919 72.8664 57.8633 73.3543 56.7943 73.82C56.7765 73.8289 56.7588 73.8333 56.7455 73.8422C55.7297 74.2814 54.7183 74.7205 53.7247 75.2173C52.7888 75.6831 51.844 76.2109 51.0544 76.894C50.4156 77.4441 49.8789 78.0961 49.5595 78.8679C49.2446 79.6398 49.2002 80.5003 49.116 81.3209C49.0982 81.5072 49.0805 81.698 49.0672 81.902C49.0672 81.8665 48.7922 81.7645 48.4373 81.6492C48.007 81.5028 47.4614 81.3342 47.1332 81.2278C47.111 81.2278 47.0888 81.2145 47.0666 81.2056C46.9646 81.1701 46.8892 81.1479 46.8582 81.139C46.7561 81.1036 46.6408 81.0681 46.5255 81.037C46.5255 81.037 46.5166 81.037 46.5122 81.037C46.0509 80.8995 45.5274 80.7576 45.1593 80.487C45.1238 80.4648 45.0927 80.4426 45.0572 80.416C45.0129 80.3761 44.9685 80.3273 44.933 80.2785C44.9153 80.2519 44.8976 80.2253 44.8798 80.1942C44.8399 80.1277 44.8044 80.0523 44.7778 79.9724C44.6048 79.5289 44.6048 78.9567 44.556 78.5663C44.4717 77.8078 44.4362 77.0493 44.3564 76.2908C44.3564 76.3307 44.3697 76.375 44.3786 76.4105C44.454 76.8585 44.6713 77.1336 44.9907 77.2666C45.0262 77.2844 45.0617 77.2977 45.0972 77.3066C45.3944 77.4485 45.7581 77.5062 46.1706 77.4929C46.2194 77.4929 46.2726 77.4929 46.3303 77.484C46.7561 77.4529 47.2263 77.3642 47.7187 77.2267C47.7808 77.209 47.8429 77.1912 47.9094 77.1735C48.0248 77.138 48.149 77.1025 48.2643 77.067C48.495 76.9916 48.7212 76.9073 48.9563 76.8231C50.7749 76.1399 52.6025 75.1286 53.3787 74.7693C53.4719 74.7161 53.5783 74.6673 53.6715 74.6096C54.2969 74.2814 54.9091 73.9309 55.5256 73.5805C55.57 73.5539 55.6232 73.5273 55.6676 73.4962C56.1466 73.2256 56.6257 72.9506 57.1003 72.6712C57.3931 72.4982 57.6859 72.3163 57.9786 72.1389C59.0299 71.509 60.0679 70.8658 61.097 70.2049C61.199 70.1428 61.2966 70.0763 61.3986 70.0142C61.5538 69.9121 61.7091 69.8145 61.8643 69.7125C62.0373 69.5972 62.2192 69.4863 62.3922 69.3665C62.4632 69.3222 62.5341 69.2734 62.6051 69.2335C62.6051 69.2335 62.6184 69.2157 62.6229 69.2157C62.6894 69.1802 62.7515 69.1359 62.818 69.0959C62.8846 69.0516 62.9467 69.0028 63.0132 68.9629C63.3104 68.7633 63.6076 68.5725 63.9092 68.3685C64.0113 68.3064 64.1177 68.2354 64.2197 68.1644C64.2552 68.1378 64.2907 68.1156 64.3262 68.0935C64.3484 68.0757 64.3706 68.058 64.3927 68.0491C65.4396 67.3394 66.3888 66.5764 67.0054 65.8578C67.1074 65.7425 67.2006 65.6227 67.2848 65.5074C67.3159 65.4675 67.3425 65.4231 67.3691 65.3832C67.6486 64.9574 67.7772 64.567 67.6929 64.2388C67.6796 64.1944 67.6929 64.1501 67.7329 64.1057C67.7462 64.088 67.7639 64.0702 67.7816 64.0569C67.795 64.048 67.8038 64.0392 67.8171 64.0347C67.9059 63.9771 68.0389 63.9283 68.1986 63.8839C68.2651 63.8662 68.3361 63.8484 68.416 63.8396C68.8418 63.7553 69.4051 63.7154 69.9507 63.7376C70.0838 63.7376 70.2169 63.7509 70.35 63.7642C70.6605 63.7952 70.9621 63.844 71.2061 63.9194C71.2415 63.9283 71.2815 63.9416 71.317 63.9549C71.3569 63.9682 71.3968 63.9815 71.4323 63.9993C71.4722 64.0126 71.5121 64.0347 71.5432 64.0481C71.5787 64.0747 71.6053 64.088 71.6319 64.1013C71.6408 64.1013 71.6452 64.1102 71.6541 64.1146C71.6763 64.1279 71.6984 64.1456 71.725 64.1545C71.7694 64.1811 71.8138 64.2077 71.8581 64.2344C72.0222 64.3319 72.1952 64.4295 72.386 64.5404L72.3904 64.5316Z' fill='%233B754B'/%3E%3Cpath d='M79.6647 78.8324C76.7637 76.8718 82.4636 74.3256 80.9111 71.9658C78.7509 68.4261 72.0839 79.3558 76.4487 82.5185C78.8263 83.5919 84.3621 80.6111 79.6691 78.8412L79.6647 78.8324Z' fill='%233E8E5B'/%3E%3Cpath d='M68.181 80.039C67.7729 80.2785 67.3515 80.4915 66.8813 80.5935C66.4155 80.7044 65.9409 80.7487 65.4663 80.6556C64.9784 80.558 64.4106 80.3406 63.9138 80.5048C63.6831 80.5802 63.3771 80.7532 63.3637 81.0237C63.3549 81.21 63.448 81.3875 63.5722 81.525C63.8739 81.8532 64.2953 82.0351 64.73 82.1282C65.2667 82.248 65.8212 82.2658 66.3668 82.3012C66.8414 82.3323 67.3071 82.421 67.7818 82.4476C68.2475 82.4742 68.731 82.4565 69.179 82.3323C69.6182 82.2125 70.1105 81.9774 70.3412 81.5693C70.8912 80.6157 69.6492 79.1607 68.1721 80.0301V80.039H68.181Z' fill='%233E8E5B'/%3E%3Cpath d='M98.6055 75.8958H98.5922C98.5922 75.8958 98.5744 75.9003 98.5611 75.9003C98.3127 75.918 98.0643 75.9402 97.8159 75.9713H97.8115C97.8115 75.9713 97.8071 75.9713 97.8026 75.9713C97.7006 75.9801 97.5897 75.989 97.4877 76.0067H97.4788C96.1703 76.1531 94.8839 76.3838 93.602 76.6588C92.8124 76.8274 92.0184 77.0092 91.2333 77.2C90.5679 77.3641 89.9114 77.5282 89.246 77.6923C89.113 77.7278 88.9799 77.7544 88.8424 77.7944C88.35 77.9141 87.8532 78.0294 87.3653 78.1492C87.2322 78.1936 87.0858 78.2335 86.935 78.2779H86.9306C84.8014 78.8368 80.7959 79.2227 81.0975 76.1265H81.102C81.1375 75.9136 81.1818 75.714 81.2395 75.5232C81.408 74.951 81.6698 74.4453 82.0024 73.9885C82.0024 73.9885 82.0024 73.984 82.0069 73.984C82.9694 72.6489 84.5086 71.7041 85.9414 70.7282H85.9458C86.1987 70.5552 86.4471 70.3822 86.6866 70.2136H86.691C86.7975 70.1338 86.8995 70.0584 87.0015 69.983C87.1745 69.8499 87.3387 69.7168 87.5028 69.5838C87.5028 69.5838 87.5117 69.5838 87.5161 69.5749C87.6536 69.464 88.1016 69.0648 88.5319 68.67C88.5408 68.6656 88.5452 68.6567 88.5496 68.6522C88.5674 68.6345 88.5895 68.6168 88.6073 68.599C88.8646 68.3639 89.1085 68.1377 89.2726 67.9736L89.4501 68.0756C89.8493 68.3063 90.2441 68.5591 90.6344 68.8208C90.7453 68.9006 90.8607 68.9849 90.9716 69.0603C92.2535 69.983 93.4822 71.0697 94.6577 72.1698C94.7996 72.2984 94.9371 72.4315 95.0746 72.5646C95.1589 72.64 95.2387 72.711 95.3142 72.7864C96.0594 73.4872 96.7824 74.1881 97.4921 74.8446C97.532 74.8801 97.5808 74.9244 97.6341 74.9732C97.6429 74.9821 97.6518 74.991 97.6651 74.9998C97.705 75.0353 97.7405 75.0752 97.776 75.1063C97.8248 75.1506 97.8692 75.1906 97.9091 75.2305L97.9667 75.2881C97.9667 75.2881 98.0111 75.3236 98.0244 75.3414C98.0377 75.3502 98.051 75.3591 98.0599 75.3769L98.091 75.4079C98.091 75.4079 98.0954 75.4079 98.0998 75.4168H98.1043C98.1575 75.4656 98.2063 75.5144 98.2506 75.5587C98.3305 75.6341 98.3926 75.6918 98.4281 75.7273C98.4857 75.785 98.539 75.8471 98.6011 75.9047L98.6055 75.8958Z' fill='%233B754B'/%3E%3Cpath d='M82.766 66.1372L82.6906 66.217L81.7324 67.2461C81.7324 67.2461 81.5062 67.4856 81.1469 67.8583C81.036 67.978 80.9118 68.1111 80.7699 68.2486C80.6146 68.4172 80.4328 68.599 80.2376 68.7942L80.1977 68.8341C80.1711 68.8607 80.1489 68.8874 80.1178 68.914C79.9848 69.0515 79.8428 69.1934 79.692 69.3442C79.6742 69.362 79.6476 69.3842 79.6299 69.4063C79.6033 69.4241 79.5811 69.4507 79.5545 69.4817C79.2484 69.7834 78.9157 70.1072 78.5609 70.4443C78.1306 70.8613 77.6604 71.3004 77.1636 71.7529C77.1326 71.7839 77.1059 71.8105 77.0705 71.8416C77.0527 71.8593 77.0305 71.8815 77.0084 71.8992C76.2765 72.569 75.4869 73.261 74.6663 73.9441C74.6663 73.9441 74.6663 73.9486 74.6618 73.9486C74.2626 74.2857 73.8501 74.6184 73.4376 74.9466H73.4331C73.2912 75.0575 73.1492 75.1728 73.0029 75.2837C72.9541 75.3236 72.9053 75.3636 72.8521 75.3946C72.8521 75.3946 72.8506 75.3946 72.8476 75.3946C72.8476 75.3946 72.8476 75.4035 72.8432 75.399C72.8432 75.399 72.8432 75.4035 72.8387 75.4079C71.8407 76.1709 70.8205 76.885 69.8136 77.4972C68.4784 78.3133 67.1654 78.9477 65.9677 79.267C65.1161 79.4977 64.3221 79.5731 63.6124 79.4445C62.7474 79.2892 62.0155 78.8323 61.4654 77.9851L61.4078 77.8964C60.9553 77.16 61.0485 76.4015 61.5009 75.6652C61.5897 75.5144 61.6917 75.3636 61.8114 75.2127C61.8469 75.1728 61.8824 75.1285 61.9135 75.0885C61.9135 75.0885 61.9179 75.0885 61.9179 75.0841H61.9223C61.9223 75.0841 61.9179 75.0841 61.9223 75.0797C62.2772 74.6627 62.7296 74.2546 63.2442 73.8643C64.118 73.1989 65.1693 72.5868 66.194 72.0767C66.4779 71.9347 66.7573 71.7972 67.0323 71.673C67.3251 71.5355 67.6134 71.4069 67.8884 71.3004C67.8884 71.3004 67.8884 71.296 67.8929 71.296C68.3631 71.0964 68.8022 70.9278 69.1704 70.7947C69.6539 70.6217 70.2172 70.4177 70.8116 70.1648C70.8604 70.1515 70.9092 70.1294 70.9535 70.1072H70.9624C71.5568 69.8543 72.1823 69.5749 72.7855 69.26C72.8254 69.2422 72.8609 69.22 72.892 69.2023C74.307 68.4571 75.62 67.53 76.2454 66.461C76.272 66.4211 76.2942 66.3811 76.3164 66.3368C76.3962 66.1904 76.4628 66.0352 76.5116 65.8843C76.8487 65.9021 77.1991 65.9243 77.554 65.9331C77.5673 65.9376 77.585 65.9376 77.5983 65.9331C77.6072 65.9376 77.6161 65.9376 77.6294 65.9376H77.7314C77.8512 65.942 77.9709 65.9464 78.0907 65.9509C78.348 65.9553 78.6008 65.9642 78.8625 65.9686C79.0089 65.9731 79.1553 65.973 79.3105 65.9775C79.6432 65.9864 79.9848 65.9908 80.3219 66.0041C80.6058 66.013 80.8941 66.0218 81.178 66.0352C81.7103 66.0618 82.2426 66.0884 82.7749 66.1327L82.766 66.1372Z' fill='%233B754B'/%3E%3Cpath d='M100.881 80.0966V80.1055C100.881 80.1055 100.846 80.1099 100.828 80.1099C100.824 80.1099 100.819 80.1099 100.815 80.1143C100.145 80.1853 99.5019 80.2563 98.8809 80.3406C98.3619 80.4115 97.8474 80.4825 97.3595 80.5624C96.6852 80.6644 96.042 80.7797 95.4166 80.8995C94.4319 81.0858 93.5092 81.2898 92.6398 81.5027C92.2184 81.6048 91.8059 81.7157 91.4067 81.8221C91.3091 81.8487 91.2115 81.8753 91.1139 81.9064C90.8123 81.9862 90.5284 82.0705 90.2445 82.1592C90.0316 82.2169 89.832 82.279 89.6324 82.3411C89.2864 82.4431 88.9493 82.554 88.621 82.6605C88.3726 82.7447 88.1242 82.829 87.8847 82.9044C87.5476 83.0242 87.2104 83.1395 86.8866 83.2593H86.8822C86.0261 83.5654 85.2143 83.867 84.4248 84.1642C83.8836 84.3638 83.3602 84.5634 82.8368 84.7541C82.7037 84.7985 82.5662 84.8473 82.4331 84.8961C81.2754 85.3131 80.1354 85.6901 78.9377 86.005H78.9333C78.7381 86.0583 78.5385 86.1071 78.3433 86.1514C78.0284 86.2313 77.7135 86.2978 77.3941 86.3688C77.3763 86.3688 77.3497 86.3732 77.3231 86.3776C77.1723 86.4131 77.0215 86.4353 76.8662 86.4664C75.8371 86.6527 74.7548 86.7857 73.5749 86.8434C72.5325 86.8966 71.4191 86.8966 70.2037 86.8301C69.9464 86.8168 69.6847 86.7946 69.4186 86.7769C69.3875 86.7724 69.3609 86.7724 69.3254 86.768C67.9459 86.6615 66.4466 86.4619 64.7876 86.1647C63.2218 85.8897 61.5096 85.5215 59.6333 85.0425C59.5801 85.0292 59.5313 85.0114 59.4825 85.0026C59.2962 84.9582 59.101 84.9094 58.9058 84.8606C58.7284 84.8163 58.5465 84.7675 58.3647 84.7231C58.2094 84.6787 58.0497 84.6344 57.89 84.5945C57.8723 84.5856 57.8501 84.5812 57.8279 84.5767C57.6062 84.5191 57.3844 84.4525 57.1537 84.3904C55.8718 84.0356 54.5189 83.6408 53.0861 83.1928C52.9974 83.1661 52.9087 83.1395 52.82 83.1085C52.6292 83.0508 52.4296 82.9887 52.2344 82.9266C52.2744 82.9355 52.3098 82.9399 52.3453 82.9532C53.7648 83.2637 55.2508 83.3746 56.7146 83.3214C57.4154 83.2948 58.1207 83.2282 58.8038 83.1218H58.8127C58.9458 83.1085 59.0788 83.0952 59.2119 83.0863C59.3893 83.073 59.5668 83.0597 59.7398 83.0508C59.7797 83.0464 59.8196 83.0464 59.864 83.0464C60.6269 83.0065 61.3544 83.0153 62.0508 83.0597C62.6895 83.0952 63.3105 83.1573 63.9138 83.2416C65.0449 83.3835 66.1317 83.592 67.2273 83.7827C69.0149 84.0977 70.838 84.3771 72.9362 84.3194C73.8588 84.2928 74.8391 84.2085 75.8904 84.0267L76.3029 83.9513C76.3029 83.9513 76.3206 83.9468 76.3384 83.9424C76.5069 83.9114 76.6711 83.8803 76.8441 83.8404H76.8485C77.0925 83.7872 77.3453 83.7339 77.5981 83.6674C77.9131 83.5875 78.2325 83.4988 78.5607 83.4057C81.3996 82.5806 84.1409 81.3564 86.8999 80.1809H86.9088C87.0907 80.101 87.2725 80.0256 87.4544 79.9502C87.9956 79.724 88.5323 79.4978 89.069 79.2849C89.0823 79.276 89.1045 79.2715 89.1178 79.2671C89.1178 79.2627 89.1222 79.2671 89.1222 79.2671C89.9606 78.93 90.8078 78.6106 91.6595 78.3223C92.0055 78.2025 92.347 78.0916 92.693 77.9852C93.1455 77.8477 93.6024 77.719 94.0593 77.6037C94.2323 77.5593 94.4052 77.515 94.5782 77.4751C95.3412 77.2932 96.1086 77.1468 96.8893 77.0448C97.4304 76.9694 97.976 76.9206 98.5261 76.8984C98.5261 76.8984 98.5305 76.894 98.5349 76.8984C98.5837 76.8895 98.637 76.8895 98.6902 76.8895C98.7035 76.8851 98.7212 76.8851 98.7346 76.8895C98.7479 76.8851 98.7656 76.8851 98.7833 76.8851C99.0096 76.8762 99.2402 76.8718 99.4709 76.8718H99.4975C99.4975 76.8718 99.5019 76.8851 99.5019 76.8984V76.9073C99.5019 76.9073 99.5197 76.9428 99.5463 76.996C99.5507 77.0093 99.5596 77.0315 99.5729 77.0492C99.5729 77.0581 99.5773 77.0625 99.5818 77.067C99.5862 77.0847 99.5951 77.1069 99.6084 77.1246C99.6394 77.2 99.6794 77.2888 99.7282 77.3908C99.8657 77.719 100.061 78.167 100.247 78.6062C100.274 78.6594 100.296 78.7126 100.318 78.7703C100.336 78.8191 100.358 78.8635 100.376 78.9078C100.385 78.9256 100.389 78.9433 100.394 78.9566C100.429 79.0365 100.464 79.1074 100.491 79.1784C100.496 79.1873 100.5 79.205 100.504 79.2183C100.513 79.2316 100.518 79.2494 100.518 79.2627C100.535 79.2937 100.549 79.3203 100.562 79.3514C100.575 79.3958 100.598 79.4357 100.611 79.4756H100.615C100.646 79.551 100.669 79.6131 100.695 79.6663C100.708 79.6974 100.722 79.7196 100.731 79.7417C100.74 79.7683 100.744 79.7817 100.757 79.7994C100.766 79.8305 100.784 79.8571 100.793 79.8837L100.806 79.9192C100.806 79.9192 100.815 79.9458 100.819 79.9591C100.819 79.9591 100.819 79.9635 100.824 79.9635C100.828 79.9768 100.837 79.999 100.85 80.0168C100.859 80.0434 100.864 80.0567 100.868 80.07C100.873 80.0789 100.873 80.0833 100.877 80.0877C100.877 80.0922 100.877 80.0966 100.881 80.0966C100.881 80.101 100.881 80.1055 100.886 80.1055L100.881 80.0966Z' fill='%233B754B'/%3E%3Cpath d='M98.1048 75.408C98.1048 75.408 98.0915 75.408 98.0871 75.4124C97.8165 75.4479 97.5548 75.4701 97.302 75.4923C97.2842 75.4967 97.2665 75.5011 97.2487 75.4967C97.2354 75.5011 97.2177 75.5011 97.2044 75.5011C97.0979 75.51 96.9915 75.5189 96.8895 75.5189H96.885C95.0575 75.6431 93.5848 75.4257 92.5601 74.6805C91.8593 74.1704 91.3669 73.4119 91.1097 72.3473C91.0476 72.0812 90.9988 71.7973 90.9633 71.4912C90.9189 71.0831 90.9012 70.6529 90.9145 70.1782V70.0496C90.9234 69.748 90.9455 69.4286 90.9721 69.1003C90.9721 69.087 90.9766 69.0649 90.9766 69.0515C92.2585 69.9742 93.4872 71.0609 94.6627 72.161C94.8046 72.2896 94.9421 72.4227 95.0797 72.5558C95.1639 72.6312 95.2438 72.7022 95.3192 72.7776C96.0644 73.4784 96.7874 74.1793 97.4972 74.8358C97.5371 74.8713 97.5859 74.9156 97.6391 74.9644C97.648 74.9733 97.6568 74.9822 97.6701 74.991C97.7101 75.0265 97.7455 75.0664 97.781 75.0975C97.8298 75.1418 97.8742 75.1818 97.9141 75.2217L97.9718 75.2794C97.9718 75.2794 98.0161 75.3148 98.0294 75.3326C98.0427 75.3415 98.0561 75.3503 98.0649 75.3681L98.096 75.3991C98.096 75.3991 98.1004 75.3991 98.1048 75.408Z' fill='%232B6B40'/%3E%3Cpath d='M48.4329 81.6447C48.597 81.0192 48.9563 80.3228 48.7567 79.6663C48.7123 79.5244 48.6502 79.3869 48.6413 79.2449C48.6192 78.9921 48.7522 78.7526 48.8498 78.5219C49.076 77.9586 49.0051 77.3775 49.0317 76.8008C48.4595 76.8585 47.8385 77.2001 47.2618 77.3287C46.7828 77.4396 46.2771 77.5239 45.7803 77.4839C45.0129 77.4351 44.4407 77.0271 44.3564 76.2508C44.4717 77.3553 44.5915 78.4554 44.7113 79.5599C44.7379 79.8038 44.7689 80.0611 44.9153 80.2563C45.0839 80.4825 45.3722 80.5934 45.6383 80.691C46.5965 81.037 47.5235 81.3608 48.4284 81.6713C48.4284 81.658 48.4329 81.6491 48.4373 81.6358L48.4329 81.6447Z' fill='%232B6B40'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M69.0022 67.5257C69.0155 67.6011 69.0244 67.6942 69.0155 67.7963C69.0155 67.8229 69.0155 67.8495 69.0066 67.8805C69.0066 67.8938 69.0066 67.9116 69.0066 67.9249C68.9578 68.3862 68.7361 69.0028 68.4211 69.5129C68.0308 70.1428 67.4985 70.6085 66.9751 70.4222C67.0815 70.8126 67.0993 71.2428 67.0327 71.6731C66.9307 72.3784 66.598 73.0792 66.1012 73.5805C66.4117 74.1083 66.3407 75.031 66.0169 75.7496C65.9814 75.8294 65.9415 75.9048 65.9016 75.9758C65.6665 76.3883 65.3427 76.6944 64.9568 76.7787C64.9213 77.2799 64.7838 77.7501 64.5798 78.1804C64.3447 78.6639 64.012 79.0941 63.6127 79.449C63.3732 79.6575 63.0982 79.8438 62.8143 79.999C62.8143 79.999 63.0583 81.7334 61.8562 81.7955C61.8384 81.7955 61.8296 81.7867 61.8207 81.7822C61.834 81.8044 61.8473 81.8266 61.8562 81.8487C62.0247 82.1593 62.078 82.6028 62.0514 83.0642C62.0203 83.5343 61.9139 84.0178 61.7497 84.3993C61.7497 84.3993 61.5235 85.0691 61.4037 85.4328C61.3594 85.4195 61.315 85.4107 61.2751 85.4018C60.9957 85.3397 60.7162 85.2732 60.4367 85.2111C60.3569 85.1933 60.2771 85.1756 60.1972 85.1578C57.1365 84.7143 59.727 83.3347 59.7448 83.0597C59.7669 82.6383 59.7093 82.2125 59.554 81.8221L59.5407 81.7955C59.4831 81.6403 59.4032 81.4895 59.3012 81.3519H59.3411C59.5185 81.0503 59.5585 80.6999 59.5496 80.3362C59.5496 80.0922 59.523 79.8349 59.5097 79.5998C59.5274 79.5643 59.5629 79.4978 59.6117 79.4046C59.7048 79.2317 59.8424 78.9877 59.9754 78.7393C60.1396 78.4377 60.2859 78.1405 60.3525 77.9675C60.6319 77.2356 60.6364 76.3928 60.419 75.6387C60.5388 75.5766 60.6452 75.4967 60.7295 75.3992C60.8138 75.3149 60.8848 75.2173 60.9424 75.1108C60.9779 75.0399 61.0178 74.9689 61.0444 74.8935C61.1376 74.6628 61.1864 74.41 61.1997 74.1527C61.2352 73.4208 60.9956 72.6357 60.6053 72.2231C60.623 72.1921 60.6408 72.1655 60.6585 72.1256C60.9602 71.5578 61.1065 70.4134 61.1065 70.4134V70.3291C61.1065 70.2892 61.1065 70.2448 61.0977 70.2004C61.0977 70.1916 61.0977 70.1827 61.0977 70.1738C61.0977 70.1029 61.0977 70.0319 61.0844 69.9565C61.0844 69.9565 61.0844 69.9476 61.0844 69.9387C61.0844 69.9032 61.0533 69.7923 61.0223 69.6593C60.9602 69.4064 60.8537 69.0738 60.8227 69.0028C60.8626 68.9673 60.9069 68.9407 60.9469 68.9096C61.3328 68.8653 61.5235 68.5459 61.5856 68.1556C61.5856 68.1556 61.5856 68.1467 61.5856 68.1422C61.63 67.814 61.5945 67.4325 61.5102 67.1131C61.4836 67.0111 61.4525 66.9091 61.4126 66.8159C61.7231 66.5587 62.2598 66.257 62.4816 65.9288C62.6058 65.7558 62.7212 65.5739 62.8188 65.3876C62.9296 65.1703 63.0272 64.9396 63.1071 64.7134C63.2579 64.2831 63.3555 63.8396 63.4176 63.3782C63.5728 62.8016 64.1095 62.6375 64.5398 62.2782C65.3116 61.635 65.5334 60.8676 65.8794 60.118C65.9815 61.218 66.1589 62.1717 66.4162 63.0322C66.4383 63.0101 66.4561 62.9968 66.4783 62.9746C66.4783 62.9746 66.4916 62.9657 66.496 62.9613C66.6379 62.8282 66.7222 62.6508 66.7754 62.4645C66.8686 62.1761 67.086 62.5 67.6227 63.1254C67.6227 63.1254 67.6315 63.1476 67.6315 63.1609C67.667 63.2585 67.6937 63.3605 67.7203 63.467C67.7602 63.6488 67.7957 63.8351 67.8223 64.0214C67.911 63.9638 68.0441 63.915 68.2038 63.8706C68.2703 63.8529 68.3413 63.8351 68.4211 63.8262C68.8469 63.742 69.4103 63.702 69.9559 63.7242C70.089 63.7242 70.222 63.7375 70.3551 63.7508C70.6656 63.7819 70.9672 63.8307 71.2112 63.9061C71.2467 63.915 71.2866 63.9283 71.3221 63.9416C71.362 63.9549 71.402 63.9682 71.4374 63.9859C71.7568 65.2634 69.7696 67.0466 69.0022 67.5212V67.5257Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M67.93 44.584C67.8103 45.2715 67.5929 51.8276 67.1804 53.2071C66.8211 54.4092 63.2459 59.5813 57.9939 59.9539C52.7464 59.5768 48.2441 55.0435 47.8715 52.6437C47.6852 51.4638 47.4679 46.6688 47.3082 45.5199C47.2461 45.4356 47.3481 43.9363 47.3082 42.8939C47.4945 41.3947 47.5876 37.0875 48.6212 35.2068C49.2244 34.1067 50.6394 32.8514 51.6286 32.5054C53.5049 31.8445 55.918 32.6074 58.6859 32.807C59.613 32.8736 60.5489 32.8869 61.4804 32.8292C64.4568 32.6429 65.0202 32.0041 66.8078 35.7701C67.1804 37.2605 67.7437 42.3306 67.7437 42.3306L67.93 44.5795V44.584Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M66.9757 50.0844C67.3749 51.2155 67.1798 53.2072 67.1798 53.2072L58.1796 55.2698L55.3673 49.459C55.3673 49.459 55.3673 48.6694 55.9307 48.6871C56.494 48.7093 56.8666 49.6896 57.7094 49.6674C58.5522 49.6453 58.4502 49.1662 59.1555 48.8424C59.8652 48.5186 60.1934 48.6871 60.2156 48.8867C60.2378 49.0864 59.9229 49.4323 59.9229 49.4323C59.9229 49.4323 62.7662 52.3688 63.986 51.3353C66.4212 49.2727 65.8978 45.897 65.8623 44.5885C65.8269 43.3775 64.9353 42.7166 64.9264 42.7122C65.676 41.5855 64.9619 40.4499 63.9904 40.6495C62.6996 40.9157 60.2422 41.7762 59.6789 42.1488C58.7429 41.2129 58.5522 40.8358 57.0529 41.2129C56.8178 41.2705 56.6182 41.55 56.3876 41.7673C56.3831 42.2154 56.2367 42.6944 55.8508 42.9206C55.3407 43.2178 54.702 42.7255 54.2495 42.5037C51.4372 41.1197 49.3702 41.0266 49.1839 41.0266C48.2524 41.0266 48.0572 47.7734 51.8098 52.6483C51.4328 54.5246 48.3766 50.426 48.004 50.5191C47.5293 49.49 47.1922 48.3988 47.0015 47.2987C46.7442 45.7861 47.6225 44.0518 46.7309 42.761C46.1631 41.927 44.5219 41.7452 44.8723 40.4588C45.2893 36.8481 45.2804 34.1378 50.1065 32.4168C52.2091 31.6715 53.8547 32.5454 57.3324 32.8293C58.0909 32.8914 58.8494 32.8914 59.6079 32.8382C61.981 32.6652 67.0556 31.8135 67.437 37.7308C67.4503 37.8772 67.6278 38.0413 67.7121 38.2631C67.783 38.3695 67.7387 38.4938 67.8052 38.6135L67.8629 41.1064C67.7653 41.0887 67.8717 46.3406 66.9713 50.08L66.9757 50.0844Z' fill='%23CEB79B'/%3E%3Cpath d='M49.37 32.0264V32.0352C49.3611 32.0663 49.3522 32.0973 49.3389 32.1284C49.2768 32.3457 49.2103 32.572 49.1437 32.8026C49.0639 33.0821 48.9796 33.3748 48.8998 33.6676C48.8732 33.7474 48.851 33.8228 48.8288 33.9071H48.8244C48.6159 34.6346 48.4074 35.3842 48.2211 36.1294C48.2034 36.2137 48.1812 36.2936 48.1634 36.369C48.1634 36.3778 48.1634 36.3867 48.159 36.4C48.1324 36.4754 48.1146 36.5508 48.1013 36.6307C48.1013 36.6351 48.1013 36.6395 48.0969 36.644C48.0659 36.7637 48.0437 36.8746 48.0126 36.9944C47.9993 37.0698 47.9771 37.1408 47.9638 37.2162C47.9594 37.2295 47.9594 37.2428 47.955 37.2561C47.9106 37.4424 47.8707 37.6243 47.8352 37.8017C47.782 38.0767 47.7332 38.3384 47.6888 38.5869C47.6711 38.7111 47.6489 38.8308 47.6311 38.9506C47.6267 38.9772 47.6267 38.9994 47.6223 39.0216C47.6178 39.0748 47.609 39.1236 47.6045 39.1724C47.6001 39.1768 47.6001 39.1857 47.6001 39.1901C47.5868 39.2877 47.5735 39.3853 47.5602 39.4784V39.4917C47.5602 39.4917 47.5557 39.5006 47.5557 39.5051C47.5424 39.6426 47.5247 39.7756 47.5114 39.9043C47.4803 40.1571 47.4582 40.3922 47.4404 40.614V40.6273C47.436 40.6805 47.4315 40.7293 47.4271 40.7781C47.3783 41.4479 47.3694 41.9802 47.3694 42.3439C47.3694 42.5169 47.3739 42.6544 47.3783 42.7476V42.823C47.3827 42.8674 47.3827 42.894 47.3827 42.894C47.3827 42.894 47.3739 42.8984 47.3473 42.9117C47.3384 42.9117 47.3295 42.9206 47.3118 42.925C47.2718 42.9428 47.2231 42.9694 47.1654 43.0049C47.1033 43.0404 47.0234 43.0803 46.9392 43.1291C46.8682 43.169 46.7972 43.2134 46.7174 43.2577C46.6242 43.3154 46.5266 43.3819 46.4246 43.444C46.3625 43.4884 46.296 43.5283 46.2383 43.5726C46.1097 43.6614 45.981 43.7589 45.8613 43.8565C45.5685 44.0916 45.3068 44.3622 45.1382 44.6417C45.1072 44.686 45.0895 44.7304 45.0673 44.7703C44.881 44.584 44.7124 44.3888 44.5616 44.1803C44.5572 43.6214 44.6592 43.067 44.6902 42.5214C44.6991 42.3528 44.708 42.1931 44.7168 42.0334C44.7213 41.8871 44.7302 41.7407 44.7302 41.6032C44.7612 40.9511 44.7656 40.4011 44.7701 39.9087C44.779 39.1945 44.7745 38.6179 44.8056 38.0368C44.81 37.9304 44.8144 37.815 44.8233 37.7086C44.8277 37.611 44.8366 37.5134 44.8499 37.4158C44.8943 36.9678 44.9608 36.502 45.0717 35.9653C45.3157 34.7765 45.6661 33.6543 46.1718 32.6119C46.5976 31.7425 47.1343 30.9263 47.8041 30.1766C47.9283 30.0391 48.057 29.9061 48.1812 29.7819C48.1856 29.977 48.2788 30.1456 48.4118 30.3142C48.4429 30.3585 48.4739 30.3984 48.5183 30.4428C48.6203 30.567 48.7445 30.6868 48.851 30.8198C49.126 31.1392 49.3434 31.5029 49.1881 32.0308C49.1704 32.0929 49.3966 31.9598 49.3744 32.0308L49.37 32.0264Z' fill='%23CE8000'/%3E%3Cpath d='M47.6976 47.4319C47.6843 47.5162 47.6666 47.6005 47.6488 47.6848C47.6311 47.769 47.6089 47.8489 47.5912 47.9243C47.5734 48.0041 47.5468 48.0795 47.5202 48.155C47.4625 48.3368 47.3915 48.5009 47.3117 48.6518C47.2851 48.7005 47.2585 48.7493 47.223 48.7937C47.1919 48.8514 47.1609 48.9046 47.121 48.9623C47.0899 49.0066 47.0589 49.051 47.0234 49.0909C46.9968 49.1219 46.9746 49.1441 46.9435 49.1707C46.9125 49.2062 46.8903 49.2284 46.8548 49.255C46.8371 49.2728 46.8149 49.2905 46.7972 49.3038L46.7395 49.3482C46.6818 49.3925 46.6109 49.428 46.5443 49.4591C46.5399 49.4635 46.5355 49.4679 46.531 49.4679C46.531 49.4679 46.5266 49.4679 46.5221 49.4724C46.5221 49.4724 46.5177 49.4724 46.5133 49.4768H46.5C46.5 49.4768 46.4911 49.4812 46.4822 49.4857H46.4734C46.4734 49.4857 46.4733 49.4857 46.4689 49.4901C46.4423 49.499 46.4246 49.5079 46.3979 49.5167C46.3092 49.5522 46.2249 49.5611 46.1407 49.5567C46.1362 49.5522 46.1362 49.5567 46.1318 49.5567H46.1007C46.0431 49.5522 45.9899 49.5433 45.9322 49.5212C45.8745 49.5034 45.8257 49.4768 45.7681 49.4458C45.7503 49.4324 45.7281 49.4191 45.7104 49.4058L45.6527 49.3615C45.6527 49.3615 45.6128 49.3304 45.5951 49.3127C45.564 49.2861 45.533 49.255 45.5019 49.224C45.4842 49.2062 45.462 49.184 45.4531 49.1663H45.4487C45.4487 49.1663 45.4309 49.1486 45.4221 49.1353C45.3866 49.0953 45.36 49.0554 45.3289 49.0155C45.3289 49.0155 45.3201 49.0066 45.3245 49.0022C45.2402 48.9002 45.1692 48.776 45.0983 48.6429C45.0983 48.6429 45.0938 48.634 45.0894 48.6118C45.0894 48.603 45.085 48.5941 45.085 48.5808C45.0761 48.5497 45.0672 48.5187 45.0495 48.4699C45.0406 48.4344 45.0317 48.3989 45.0184 48.3634C45.0051 48.3146 44.9918 48.2614 44.9785 48.2082C44.9741 48.1904 44.9696 48.1727 44.9652 48.155C44.9608 48.1416 44.9608 48.1283 44.9563 48.1195C44.8809 47.8134 44.8055 47.4497 44.7878 47.2367C44.7789 47.0638 44.9253 46.8331 44.9785 46.6956C45.0184 46.5758 45.0628 46.3496 45.014 46.2431C45.014 46.2343 45.0051 46.2298 45.0007 46.2165C44.943 46.1367 44.7168 46.2121 44.6281 46.221C44.4994 46.2387 44.4063 46.1189 44.3442 45.8883C44.3264 45.8129 44.3043 45.7197 44.2954 45.6221C44.2954 45.6221 44.2939 45.6177 44.2909 45.6088C44.1801 44.7572 44.0071 43.2313 44.3664 42.1755C44.3664 42.1755 44.3678 42.1741 44.3708 42.1711C44.3708 42.1711 44.3752 42.1578 44.3752 42.1445C44.4196 42.038 44.4639 41.9271 44.5127 41.8296C44.566 41.7275 44.6458 41.661 44.7345 41.6033C44.7345 41.5989 44.739 41.5989 44.739 41.5989C44.7966 41.559 44.8499 41.5279 44.912 41.5013C44.9253 41.4924 44.943 41.4836 44.9608 41.4703C44.9696 41.4614 44.9918 41.4525 45.0007 41.4392C45.014 41.4348 45.0273 41.4259 45.0406 41.4215C45.045 41.417 45.0539 41.4126 45.0583 41.4126C45.1959 41.3283 45.3245 41.2573 45.4753 41.1553L45.5773 41.0977C45.7015 41.0356 45.8302 41.0001 45.9588 41.0134C45.9854 41.0134 46.0076 41.0222 46.0342 41.0267C46.0386 41.0267 46.0431 41.0267 46.0475 41.0311C46.0653 41.0311 46.0919 41.04 46.1096 41.0444C46.1274 41.0489 46.1495 41.0577 46.1673 41.071C46.1806 41.0755 46.1939 41.0799 46.2072 41.0843C46.2205 41.0932 46.2427 41.1021 46.256 41.1154C46.2959 41.142 46.3358 41.1642 46.3758 41.1952C46.3935 41.2085 46.4157 41.2263 46.4334 41.244C46.5621 41.3505 46.6863 41.5013 46.7972 41.6743C46.8016 41.6832 46.8105 41.7009 46.8149 41.7098C46.8282 41.7364 46.8459 41.7541 46.8548 41.7808C46.8814 41.8162 46.8992 41.8562 46.9258 41.8917C46.9347 41.905 46.9435 41.9271 46.9524 41.9404C46.9879 41.9981 47.0145 42.0602 47.0411 42.1223C47.0544 42.1534 47.0677 42.1755 47.081 42.2066C47.0944 42.2332 47.1121 42.2598 47.121 42.2864C47.1254 42.2953 47.1298 42.3042 47.1298 42.3175H47.1343C47.152 42.3663 47.1742 42.4151 47.1875 42.4594C47.1964 42.486 47.2052 42.5038 47.2141 42.5304C47.2452 42.5925 47.2674 42.659 47.2895 42.7256C47.2984 42.7566 47.3073 42.7877 47.3206 42.8232C47.3206 42.8232 47.3235 42.8276 47.3295 42.8365C47.3295 42.8365 47.3339 42.8542 47.3339 42.8631C47.3383 42.872 47.3383 42.8764 47.3428 42.8808C47.3472 42.8897 47.3472 42.8986 47.3516 42.9163C47.4049 43.0937 47.4581 43.2756 47.5025 43.4664C47.5158 43.5151 47.5291 43.5684 47.5379 43.6216C47.5468 43.6482 47.5512 43.666 47.5557 43.6926C47.5601 43.7103 47.5645 43.7369 47.569 43.7547C47.5734 43.799 47.5823 43.839 47.5867 43.8789C47.8218 45.0366 47.8884 46.354 47.6976 47.4319Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M47.6977 47.4319C47.6844 47.5162 47.6667 47.6005 47.649 47.6848C47.6312 47.7691 47.609 47.8489 47.5913 47.9243C47.5735 48.0042 47.5469 48.0796 47.5203 48.155V48.1638C47.4626 48.3413 47.3917 48.501 47.3207 48.6562L47.232 48.8026C47.1965 48.8558 47.161 48.9091 47.1255 48.9578C47.0945 49.0022 47.0634 49.0466 47.0279 49.0865C47.0013 49.1175 46.9792 49.1397 46.9481 49.1663C46.9171 49.2018 46.8949 49.224 46.8594 49.2506C46.8416 49.2684 46.8195 49.2861 46.8017 49.2994L46.7441 49.3438C46.6864 49.3881 46.6154 49.4236 46.5489 49.4547C46.5444 49.4591 46.54 49.4635 46.5356 49.4635C46.5356 49.4635 46.5311 49.4635 46.5267 49.468C46.5267 49.468 46.5223 49.468 46.5178 49.4724C46.5178 49.4724 46.5134 49.4768 46.509 49.4768H46.5045C46.5045 49.4768 46.4912 49.4857 46.4779 49.4857H46.4735C46.4469 49.499 46.4247 49.5123 46.3981 49.5168C46.3138 49.5434 46.2339 49.5567 46.1497 49.5522C46.1497 49.5522 46.1452 49.5522 46.1408 49.5522C46.1364 49.5478 46.1364 49.5522 46.1319 49.5522H46.1009C46.0432 49.5478 45.99 49.5389 45.9323 49.5168C45.8746 49.499 45.8259 49.4724 45.7682 49.4413C45.7504 49.428 45.7283 49.4147 45.7105 49.4014C45.6928 49.3926 45.6706 49.3748 45.6529 49.3615C45.6351 49.3482 45.6129 49.326 45.5952 49.3083C45.5641 49.2817 45.5331 49.2506 45.502 49.2196C45.4843 49.2018 45.4621 49.1796 45.4532 49.1619H45.4488C45.4488 49.1619 45.4311 49.1441 45.4222 49.1308C45.3867 49.0909 45.3601 49.051 45.329 49.0111C45.329 49.0111 45.3202 49.0022 45.3246 48.9978C45.2403 48.8913 45.1694 48.7671 45.0984 48.6385C45.0984 48.6385 45.094 48.6296 45.0895 48.6074C45.0851 48.603 45.0851 48.5941 45.0806 48.5808C45.0806 48.5719 45.0496 48.4965 45.0185 48.4078C45.0052 48.3635 44.9831 48.3191 44.9653 48.2747C44.9476 48.2215 44.9254 48.1683 44.9165 48.1372H44.9121C44.9121 48.1372 44.9077 48.1106 44.9077 48.1062C44.9121 48.1106 44.921 48.1151 44.9343 48.1195C44.9343 48.1151 44.9387 48.1195 44.9387 48.1195C44.9476 48.1239 44.9564 48.1328 44.9742 48.1372C44.9919 48.1461 45.0141 48.155 45.0363 48.1727C45.0407 48.1772 45.0496 48.1772 45.054 48.1816C45.2093 48.2614 45.4355 48.3635 45.6617 48.4522C45.715 48.4699 45.7726 48.4921 45.8303 48.5098C45.848 48.5143 45.8747 48.5231 45.8924 48.5276C45.9678 48.5542 46.0343 48.5719 46.1009 48.5808C46.265 48.6163 46.3848 48.6119 46.4203 48.5364C46.4912 48.3989 46.5533 48.2126 46.611 47.9908C46.6598 47.8001 46.7086 47.5872 46.7529 47.3565C46.9215 46.4428 47.0191 45.3028 47.0191 44.6374V44.4689C47.0058 44.114 46.8993 43.6749 46.7263 43.2357C46.5755 42.8675 46.3715 42.4994 46.1364 42.1889C45.8436 41.7985 45.4887 41.5058 45.1073 41.4348C45.0806 41.4304 45.0629 41.4259 45.0363 41.4259C45.023 41.4215 45.0097 41.4215 44.9964 41.4215C45.0097 41.4126 45.023 41.4082 45.0363 41.4037C45.0363 41.4037 45.0496 41.3904 45.054 41.3904C45.1915 41.3062 45.3202 41.2352 45.471 41.1332L45.573 41.0755C45.7017 41.0178 45.8259 40.9823 45.9545 40.9957C46.0565 41.0045 46.1541 41.04 46.2561 41.0932C46.296 41.1199 46.336 41.142 46.3759 41.1731C46.3936 41.1864 46.4158 41.2041 46.4336 41.2219C46.5622 41.3283 46.6864 41.4791 46.7973 41.6521L46.8062 41.661C46.8461 41.7231 46.886 41.7985 46.9259 41.8695C46.9348 41.8828 46.9437 41.905 46.9525 41.9183C46.988 41.976 47.0146 42.0381 47.0457 42.1002C47.059 42.1312 47.0723 42.1534 47.0812 42.1844C47.0989 42.2199 47.1167 42.2598 47.13 42.2909V42.2998C47.1566 42.3441 47.1743 42.3885 47.1876 42.4328C47.1965 42.4595 47.2054 42.4772 47.2142 42.5038C47.2453 42.5659 47.2675 42.6324 47.2897 42.699C47.303 42.7345 47.3163 42.7744 47.3296 42.8054V42.8143C47.3296 42.8143 47.334 42.8276 47.334 42.8321H47.3384C47.3384 42.8321 47.3429 42.8409 47.3429 42.8498C47.3473 42.8587 47.3473 42.8675 47.3518 42.8853C47.405 43.0627 47.4582 43.2446 47.5026 43.4353C47.5159 43.4841 47.5336 43.5373 47.5425 43.5906C47.5469 43.6083 47.5514 43.6349 47.5558 43.6615C47.5602 43.6793 47.5647 43.7059 47.5691 43.7236C47.8264 44.9124 47.8974 46.2831 47.7022 47.4009L47.6977 47.4319Z' fill='%23CEB79B'/%3E%3Cpath d='M46.5357 44.8414C46.5091 44.5354 46.5446 44.2648 46.4071 43.941C46.0433 43.0937 45.7417 42.903 45.1251 42.699C44.7791 42.5836 44.6594 43.7325 44.7836 44.2914C44.9477 45.0233 45.4267 43.6083 45.6973 43.7103C46.1941 43.9055 45.6397 45.4048 45.5776 45.8129C45.5066 46.2609 45.7594 46.7266 45.9368 47.117C46.0655 47.392 46.274 47.3831 46.4026 47.1347C46.4425 47.0504 46.4736 46.9573 46.4913 46.8508C46.3538 46.6069 45.9679 46.4915 46.0123 46.1278C46.0566 45.7375 46.3494 45.0322 46.5401 44.8414H46.5357Z' fill='%23CEB79B'/%3E%3Cpath d='M46.5748 49.459C46.5615 49.5478 46.5394 49.6542 46.5172 49.774C46.4994 49.8583 46.4817 49.947 46.4639 50.0401C46.4551 50.0845 46.4462 50.1333 46.4329 50.1821C46.424 50.2309 46.4151 50.2752 46.3974 50.324C46.2865 50.7765 46.118 51.2733 45.8917 51.6326C45.8917 51.6326 45.8917 51.637 45.8873 51.637C45.8696 51.6725 45.8429 51.6991 45.8163 51.7301C45.8119 51.7346 45.8075 51.739 45.8075 51.7435C45.7897 51.7701 45.7675 51.7923 45.7453 51.8144L45.732 51.8277C45.732 51.8277 45.7187 51.8366 45.7143 51.8455C45.6966 51.8588 45.6788 51.8765 45.6655 51.8854C45.6478 51.8987 45.63 51.9165 45.6167 51.9253H45.6123C45.6123 51.9253 45.5945 51.9431 45.5812 51.9431C45.4615 52.0229 45.324 52.0717 45.1865 52.0939C45.0844 52.1116 44.9735 52.1116 44.8715 52.1028C44.836 52.0983 44.7961 52.0894 44.7606 52.085C44.734 52.0806 44.7118 52.0717 44.6852 52.0673H44.6808C44.5388 52.0273 44.4013 51.9652 44.2771 51.881C44.2017 51.8277 44.1352 51.7701 44.0686 51.7035C44.0021 51.637 43.9444 51.566 43.8868 51.4862C43.8069 51.3664 43.7404 51.2245 43.696 51.0737C43.665 50.9716 43.6472 50.8607 43.6384 50.7498C43.6251 50.6434 43.6251 50.5281 43.6339 50.4127C43.6517 50.1954 43.7049 49.9603 43.8025 49.703C43.8069 49.6853 43.8158 49.6675 43.8202 49.6498C43.8468 49.5921 43.869 49.5256 43.9001 49.4635C43.9356 49.3881 43.9755 49.3127 44.0243 49.2328C44.0642 49.1574 44.1041 49.0864 44.1529 49.011C44.2461 48.8602 44.3348 48.7316 44.4235 48.6162C44.4856 48.5408 44.5433 48.4787 44.5965 48.4211C44.7074 48.3013 44.8138 48.2126 44.9114 48.1505C44.9203 48.1461 44.9247 48.1416 44.9292 48.1372C44.938 48.1283 44.9425 48.1239 44.9558 48.1239C44.9868 48.1106 45.009 48.0928 45.0401 48.0795C45.2086 47.9908 45.3594 47.9731 45.4925 47.9908C45.5502 47.9997 45.6034 48.0174 45.6611 48.0352L45.7365 48.0662C45.7365 48.0662 45.7764 48.0928 45.7941 48.1017C45.7986 48.1061 45.803 48.1106 45.8119 48.115C45.8829 48.1594 45.945 48.2126 45.9937 48.2658C46.0692 48.3412 46.1179 48.4078 46.1446 48.4521C46.1623 48.4832 46.1756 48.5009 46.1756 48.5009C46.1756 48.5009 46.1446 48.5408 46.0958 48.6029C45.9893 48.7449 45.7897 49.011 45.5945 49.3171C45.2175 49.9115 44.8493 50.639 45.2042 50.8208C45.7409 51.087 45.9228 49.9248 45.9627 49.5788H45.9671C46.0248 49.5744 46.078 49.5699 46.1313 49.5611H46.1401C46.251 49.5478 46.3397 49.5256 46.4152 49.5078C46.4329 49.5034 46.4506 49.499 46.4639 49.499C46.4684 49.4945 46.4684 49.499 46.4684 49.499H46.4772C46.4772 49.499 46.4906 49.4901 46.495 49.4901H46.4994L46.5083 49.4857C46.5349 49.4812 46.5527 49.4768 46.5704 49.4679H46.5748V49.459Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M46.575 49.4545C46.5617 49.5477 46.5395 49.6541 46.5173 49.7739C46.4996 49.8582 46.4818 49.9469 46.4641 50.0401C46.4552 50.0844 46.4464 50.1332 46.433 50.182C46.4242 50.2219 46.4153 50.2619 46.3976 50.3018V50.3106C46.2778 50.7631 46.1181 51.2643 45.8874 51.6325H45.883C45.8653 51.6724 45.8431 51.7035 45.8209 51.7301L45.8076 51.7434C45.7899 51.77 45.7677 51.7878 45.7499 51.8144L45.7366 51.8277C45.7366 51.8277 45.7233 51.8365 45.7189 51.8454C45.7056 51.8543 45.6878 51.872 45.6701 51.8853C45.6568 51.8942 45.639 51.912 45.6213 51.9253H45.6169C45.6169 51.9253 45.5991 51.9386 45.5858 51.943C45.466 52.0229 45.3285 52.0716 45.191 52.0938C45.089 52.1116 44.9781 52.1116 44.8761 52.1027C44.8362 52.0938 44.8007 52.0894 44.7652 52.085C44.7386 52.0805 44.7164 52.0716 44.6898 52.0672H44.6854C44.5434 52.0273 44.4059 51.9652 44.2817 51.8809C44.2063 51.8277 44.1398 51.77 44.0732 51.7035C44.0067 51.6369 43.949 51.566 43.8913 51.4861C43.8115 51.3664 43.745 51.2244 43.7006 51.0736C43.6696 50.9716 43.6518 50.8607 43.6429 50.7498C43.6296 50.6433 43.6296 50.528 43.6385 50.4127C43.918 50.5945 44.2373 50.4703 44.4769 50.2885C44.5478 50.2397 44.6099 50.1864 44.6676 50.1243C44.7519 50.0445 44.8317 49.9558 44.9027 49.8582C45.0713 49.6497 45.2132 49.4279 45.3596 49.2194C45.3773 49.1884 45.3995 49.1662 45.4173 49.1352C45.5548 48.94 45.6923 48.7359 45.8209 48.5275C45.8786 48.4432 45.9318 48.35 45.9895 48.2613C46.0649 48.3367 46.1137 48.4033 46.1403 48.4476C46.158 48.4787 46.1713 48.4964 46.1713 48.4964C46.1713 48.4964 46.1403 48.5363 46.0915 48.5984C45.985 48.7404 45.7854 49.0065 45.5902 49.3126C45.2132 49.907 44.845 50.6345 45.1999 50.8163C45.7366 51.0825 45.9185 49.9203 45.9584 49.5743C46.0072 49.5654 46.056 49.561 46.0959 49.5566H46.127H46.1358C46.2467 49.5433 46.3354 49.5211 46.4109 49.5033C46.4286 49.4989 46.4508 49.4945 46.4641 49.49C46.4774 49.4856 46.4907 49.4856 46.4996 49.4812H46.5084L46.5173 49.4767C46.5218 49.4723 46.5262 49.4723 46.5262 49.4723C46.5395 49.4679 46.5572 49.4634 46.5706 49.4634H46.575V49.4545Z' fill='%23474C2F'/%3E%3Cpath d='M45.9579 49.5742C45.918 49.9246 45.7361 51.0868 45.1994 50.8162C44.574 50.5057 46.1664 48.4963 46.1664 48.4963C46.1664 48.4963 46.1398 48.4475 46.0865 48.3766C45.816 48.5362 45.6252 48.8867 45.4522 49.1528C45.2038 49.5343 44.9776 49.9601 44.8933 50.4259C44.8135 50.8695 44.7736 51.3973 44.9998 51.801C45.0397 51.8764 45.1062 51.9873 45.1861 52.0937C45.4611 52.0494 45.7139 51.8986 45.8869 51.6235C46.2906 50.9848 46.4991 49.9202 46.5745 49.45C46.4192 49.4988 46.2684 49.5432 45.9579 49.5698V49.5742Z' fill='%23474C2F'/%3E%3Cpath opacity='0.69' d='M45.7851 48.0972C45.7851 48.0972 45.7851 48.106 45.7807 48.1105C45.7496 48.2347 45.7053 48.3544 45.652 48.4698C45.5589 48.6694 45.4391 48.8601 45.3238 49.0154C45.2794 49.073 45.2395 49.1218 45.1996 49.1662C45.1198 49.2593 45.031 49.348 44.9379 49.4235C44.8669 49.4811 44.7915 49.5343 44.7161 49.5787C44.5697 49.6674 44.41 49.7251 44.2548 49.7606C44.1084 49.7872 43.9398 49.7739 43.7979 49.7029H43.7935C43.7935 49.7029 43.8068 49.6674 43.8201 49.6497C43.8467 49.592 43.8689 49.5255 43.8999 49.4634C43.9354 49.388 43.9753 49.3126 44.0241 49.2327C44.064 49.1573 44.104 49.0863 44.1528 49.0109C44.2459 48.8601 44.3346 48.7315 44.4233 48.6161C44.4854 48.5407 44.5431 48.4786 44.5963 48.421C44.6984 48.3012 44.8048 48.2125 44.9068 48.146C44.9113 48.1415 44.9157 48.1415 44.9246 48.1371C44.9246 48.1326 44.929 48.1371 44.929 48.1371C44.9379 48.1282 44.9423 48.1238 44.9556 48.1238C44.9867 48.0972 45.0133 48.0839 45.0399 48.075C45.2085 47.9907 45.3593 47.973 45.4923 47.9907C45.55 47.9996 45.6032 48.0173 45.6609 48.0351L45.7363 48.0661C45.7363 48.0661 45.7762 48.0927 45.794 48.1016L45.7851 48.0972Z' fill='%23949984'/%3E%3Cpath opacity='0.4' d='M46.536 44.8413C46.3053 44.6595 45.7686 46.6644 45.6089 46.2829C45.6044 46.2785 45.6044 46.2741 45.6044 46.2741C45.498 46.0212 45.3472 45.8261 45.1209 45.7462C45.0455 45.7196 44.9657 45.7063 44.877 45.7063C44.6996 45.7063 44.4512 45.8527 44.3358 45.8882C44.3181 45.8128 44.2959 45.7196 44.287 45.622C44.287 45.622 44.2856 45.6176 44.2826 45.6087C44.1717 44.757 43.9987 43.2311 44.358 42.1754C44.358 42.1754 44.3595 42.1739 44.3624 42.171C44.3624 42.171 44.4955 42.0734 44.7129 42.0379C44.8105 42.0246 44.9302 42.0246 45.0633 42.0468C45.325 42.0956 45.6266 42.2597 45.9593 42.6412C46.1855 42.9073 46.3275 43.1823 46.4251 43.4485C46.6912 44.1937 46.5448 44.8458 46.5448 44.8458L46.536 44.8413Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M67.8185 39.1103V39.0925H67.814C67.7519 38.924 67.6677 38.6756 67.5612 38.3695C67.5568 38.3651 67.5612 38.3606 67.5612 38.3562C67.5612 38.3562 67.5568 38.3518 67.5479 38.3429V38.334V38.3207V38.3163C67.4769 38.1344 67.4148 37.9215 67.3305 37.7086C67.2196 37.3404 67.0955 36.9501 66.9624 36.5375H66.9535C66.9535 36.5375 66.9491 36.5065 66.9491 36.4932C66.8781 36.298 66.8249 36.1161 66.7583 35.9121C66.7583 35.9121 66.7569 35.9091 66.7539 35.9032C66.7539 35.9032 66.7495 35.8988 66.7495 35.8944C66.745 35.8899 66.745 35.8811 66.7406 35.8677C66.7362 35.8589 66.7362 35.85 66.7362 35.8367C66.7362 35.8367 66.7347 35.8337 66.7317 35.8278V35.8145C66.7317 35.8145 66.7273 35.8056 66.7273 35.8012C66.7228 35.7923 66.7184 35.7835 66.7184 35.7702C66.6652 35.5972 66.6119 35.4375 66.5543 35.2778C66.5543 35.2689 66.5498 35.2645 66.5498 35.2512C66.5498 35.2512 66.541 35.2423 66.541 35.2379C66.5365 35.229 66.5365 35.2201 66.5321 35.2068C66.4123 34.8475 66.3148 34.5281 66.2216 34.2443C66.2216 34.2443 66.2201 34.2413 66.2172 34.2354C66.0708 33.8096 65.9599 33.4946 65.8978 33.3793C65.8889 33.3527 65.8845 33.3438 65.8712 33.3438C65.8179 33.3305 65.7647 33.3305 65.7026 33.3172C65.6716 33.3172 65.6405 33.3127 65.6006 33.3127H65.5962C65.5074 33.3127 65.4187 33.3127 65.3211 33.3261H65.3167C65.2413 33.3261 65.1748 33.3305 65.0949 33.3394H65.0905C65.0905 33.3394 65.0639 33.3482 65.0417 33.3482H65.0373C65.0373 33.3482 65.0106 33.3527 65.0062 33.3527H65.0018C64.5848 33.4325 64.1412 33.5789 63.6888 33.7652H63.6843C63.6045 33.8007 63.5158 33.8406 63.4404 33.8672C63.2718 33.9471 63.1299 34.018 62.9791 34.089V34.0979H62.9746C62.9746 34.0979 62.9702 34.0979 62.9702 34.1023C62.7085 34.2265 62.4645 34.3685 62.2427 34.5015C62.2383 34.506 62.2339 34.506 62.2294 34.506V34.5148C62.1762 34.5459 62.123 34.5725 62.0786 34.6036C62.0742 34.6036 62.0742 34.608 62.0697 34.608C61.95 34.6923 61.8479 34.7632 61.7548 34.8342L61.7193 34.8653H61.7149C61.4354 35.2157 62.6464 36.0807 62.9125 37.1364C62.9436 37.2473 62.9569 37.3582 62.9658 37.4824C62.9658 37.7219 62.9214 37.9747 62.7839 38.2231C62.704 38.3606 62.6065 38.4982 62.4778 38.6312C62.4778 38.6312 62.4867 38.6401 62.4778 38.6401C62.3802 38.7466 62.2649 38.853 62.1185 38.9595C61.9189 39.128 61.604 39.3232 61.2624 39.5361H61.258V39.545C61.0584 39.6692 60.8499 39.7845 60.637 39.9176C60.3753 40.0728 60.1224 40.2281 59.8918 40.37C59.8607 40.3834 59.8341 40.41 59.8075 40.4233C59.5768 40.5608 59.3772 40.6983 59.222 40.8136C59.1599 40.858 59.1022 40.9112 59.049 40.9644C58.9691 41.0487 58.907 41.133 58.8538 41.2306C58.8538 41.2439 58.8449 41.2616 58.8405 41.2749V41.2838C58.8405 41.2838 58.8316 41.3149 58.8272 41.3282C58.7784 41.4967 58.7429 41.6475 58.734 41.7984C58.703 42.131 58.703 42.4105 58.8094 42.7432C58.8893 42.9694 58.9736 43.1956 59.009 43.4396C59.009 43.444 59.0135 43.4662 59.0135 43.4706C59.0534 43.7501 59.0445 44.0207 59.0312 44.2957C59.0224 44.4066 59.0135 44.5175 59.0046 44.6239V44.655C58.9913 44.8324 58.978 45.0143 58.9647 45.1962C58.9647 45.3248 58.9647 45.4579 58.978 45.5909C58.9869 45.6176 59.0312 45.7018 59.0889 45.8305C59.2841 46.2386 59.6301 47.0104 59.6833 47.21C59.8119 47.729 59.4038 47.8931 59.0046 48.0617H59.0002C58.8494 48.1326 58.6941 48.2036 58.5877 48.3056C58.5788 48.3101 58.5699 48.3189 58.5566 48.3322C58.5167 48.3722 58.4768 48.4121 58.4368 48.4431C58.3614 48.5052 58.2905 48.5629 58.2195 48.6073H58.2017C57.7715 48.8823 57.3013 48.7847 56.4895 48.1504C56.0016 47.7733 55.5225 47.7955 55.2298 47.8665H55.2253C55.1011 47.8975 55.0124 47.9419 54.9902 47.9552C54.8483 48.3278 54.9814 48.8335 55.2697 49.3613V49.3702C55.3318 49.49 55.4072 49.6097 55.4915 49.7251V49.7339C55.4915 49.7339 55.4959 49.7339 55.4959 49.7384C55.4959 49.7384 55.4989 49.7413 55.5048 49.7472C55.5846 49.8581 55.6556 49.969 55.731 50.0666V50.0799L55.7399 50.0844C55.9484 50.3549 56.1702 50.6122 56.4053 50.8207C56.6315 51.0381 56.8533 51.2111 57.0484 51.3219C57.1017 51.384 57.217 51.4461 57.3678 51.5216H57.3723C57.6739 51.6635 58.1263 51.8321 58.6631 52.0228C58.8316 52.0805 59.0091 52.1337 59.182 52.2047H59.1909C59.3373 52.2579 59.4748 52.2934 59.6168 52.3466H59.6212C59.772 52.3998 59.9273 52.4442 60.0736 52.4885H60.0781C60.0781 52.4885 60.0869 52.493 60.0914 52.493C60.3531 52.5861 60.5971 52.666 60.8455 52.7503C61.5818 52.9854 62.2738 53.2027 62.7928 53.3801C62.8549 53.3979 62.9258 53.4245 62.9835 53.4422C63.1521 53.4999 63.294 53.5443 63.4005 53.5931C63.5114 53.6374 63.5868 53.6685 63.6001 53.6951C63.6932 53.5443 63.8751 53.4955 64.1191 53.5088H64.1324C64.4118 53.5132 64.7844 53.5931 65.1348 53.6596H65.1393C65.1393 53.6596 65.1482 53.6596 65.1482 53.664C65.4054 53.7173 65.6627 53.7616 65.8712 53.7705H65.8845C65.8845 53.7705 65.92 53.7749 65.9421 53.7749C65.9643 53.7749 65.9954 53.7749 66.0131 53.7705H66.0397C66.2127 53.7616 66.3502 53.6995 66.4079 53.5753C66.4434 53.5043 66.47 53.4378 66.5011 53.3535V53.3447C66.6075 53.0652 66.6962 52.7015 66.7805 52.2712C66.8116 52.0849 66.8515 51.8808 66.8781 51.6724V51.6591C66.9402 51.2554 66.989 50.834 67.0467 50.3949V50.3771C67.0866 49.9602 67.1309 49.5255 67.1576 49.1129V49.0952C67.1842 48.8246 67.2063 48.5673 67.2196 48.3234C67.2241 48.2347 67.233 48.1504 67.233 48.075V48.0572H67.2374C67.2374 48.0572 67.233 48.0528 67.2374 48.0483C67.2463 47.9463 67.2463 47.8399 67.264 47.7423C67.264 47.6314 67.2729 47.5161 67.2773 47.4185V47.4052C67.2862 47.3076 67.2906 47.2233 67.3039 47.1435C67.3172 46.864 67.335 46.6289 67.3483 46.4559C67.3749 46.0744 67.4193 44.9832 67.4547 43.9808C67.4592 43.9187 67.4592 43.8566 67.4636 43.8033C67.4636 43.79 67.4681 43.7723 67.4681 43.759V43.5948C67.4681 43.5948 67.4681 43.5594 67.4725 43.5461V43.3154C67.4814 43.2178 67.4814 43.1335 67.4858 43.0315V43.0138C67.4858 42.9295 67.4947 42.8452 67.4947 42.7742V42.6944C67.4947 42.6633 67.5035 42.6456 67.5035 42.619V42.5657C67.5169 42.1931 67.5213 41.958 67.5213 41.958L67.5346 41.8161H67.5435V41.7851L67.5967 41.408V41.3991L67.6056 41.3947C67.6056 41.3903 67.6011 41.3858 67.6011 41.3858V41.3681L67.61 41.3503L67.7963 39.9974H67.8052V39.9664L67.8939 39.3409C67.8939 39.3409 67.8362 39.2522 67.783 39.1103H67.8185ZM61.6262 41.9536C61.7193 41.9403 61.7947 41.927 61.879 41.9226H61.8834V41.9137H61.9721C62.5577 41.8383 63.1654 41.8028 63.7198 41.8959C64.0348 41.9447 63.711 41.9847 63.223 41.998H63.2097C62.4335 42.0246 61.2757 42.0068 61.6262 41.9536Z' fill='%23CEB79B'/%3E%3Cpath d='M55.8509 49.3659C55.5138 49.1485 55.048 48.9932 55.0081 48.6162C54.9859 48.3944 55.1766 47.8222 55.4117 47.6803C55.5892 47.5738 55.4206 47.321 55.2432 47.4274C54.8839 47.6448 54.6577 48.2658 54.6798 48.6162C54.7065 49.0997 55.2609 49.3481 55.6868 49.6231C55.8597 49.734 56.0239 49.4767 55.8509 49.3703V49.3659Z' fill='%23CEB79B'/%3E%3Cpath d='M59.3907 49.3658C59.2177 49.4767 59.3818 49.7295 59.5548 49.6186C59.9806 49.3436 60.5351 49.0952 60.5617 48.6117C60.5839 48.2613 60.3577 47.6359 59.9984 47.4229C59.8209 47.3165 59.6568 47.5738 59.8298 47.6758C60.0649 47.8177 60.2556 48.3899 60.2335 48.6117C60.1935 48.9888 59.7322 49.144 59.3907 49.3614V49.3658Z' fill='%23CEB79B'/%3E%3Cpath d='M64.3854 32.5854C64.2612 32.918 64.0882 33.2108 63.8708 33.4592C63.862 33.4725 63.8531 33.4814 63.8442 33.4902C63.3341 34.0625 62.6022 34.4351 61.7505 34.6524C61.4888 34.7234 61.2138 34.7811 60.9299 34.821C60.7037 34.8565 60.4775 34.8831 60.2424 34.9008C60.0916 34.9141 59.9363 34.923 59.7811 34.9319C58.7121 34.9807 57.5987 34.9008 56.5784 34.7722C56.2502 34.7278 55.9264 34.6835 55.6203 34.6302C54.2497 34.4085 52.9367 33.9294 51.7169 33.2596C51.7035 33.2552 51.6947 33.2463 51.6814 33.2418C51.1801 32.9624 50.6035 32.6874 50.0268 32.4301C50.0179 32.4301 50.0091 32.4257 50.0002 32.4168C50.0002 32.4168 49.9958 32.4168 49.9913 32.4168C49.7474 32.3059 49.499 32.1994 49.2594 32.093C48.7804 31.8801 48.3235 31.6805 47.942 31.4986C47.9154 31.4853 47.8888 31.472 47.8666 31.4631C47.8267 31.4454 47.7868 31.4232 47.7513 31.4054C47.9819 31.0639 48.2348 30.7445 48.5009 30.4517C48.8114 30.1102 49.1352 29.7997 49.4635 29.5158C52.9322 28.7662 57.4434 29.9416 60.5972 31.0506C60.8856 31.1526 61.1606 31.2546 61.4223 31.3522L61.5288 31.3921C61.9457 31.5518 62.3272 31.6982 62.6643 31.8401C62.6688 31.8401 62.6776 31.8446 62.682 31.849C62.7087 31.8623 62.7353 31.8712 62.7663 31.8845C63.3208 32.1107 63.7555 32.3059 64.0305 32.4301C64.2612 32.5366 64.381 32.5942 64.381 32.5942L64.3854 32.5854Z' fill='%23CE8000'/%3E%3Cpath opacity='0.4' d='M50.4966 39.5228C50.4966 39.5228 51.224 41.5056 52.5459 41.825C53.8677 42.1443 55.2073 43.311 55.8505 42.9162C56.4937 42.5214 56.3873 41.7629 56.3873 41.7629C56.3873 41.7629 56.4937 40.6451 57.616 40.6451C58.2902 40.6451 58.5519 37.8328 56.1167 38.3961C54.5597 38.7554 52.8431 38.4494 51.9515 38.2364C51.0599 38.0235 50.3058 39.1458 50.4966 39.5228Z' fill='%23CEB79B'/%3E%3Cpath d='M53.6199 42.0245C53.3715 41.9136 53.0388 41.9092 52.7682 41.8826C52.4887 41.8515 52.1161 41.7672 51.8367 41.8781C51.779 41.8781 51.7214 41.9003 51.677 41.958C51.3754 42.3616 51.7081 43.0004 52.0718 43.2576C52.5065 43.5681 53.1719 43.5016 53.5844 43.1911C53.9525 42.9117 54.1034 42.2374 53.6243 42.0289L53.6199 42.0245Z' fill='%233E875B'/%3E%3Cpath d='M53.6203 42.0245C53.3719 41.9136 53.0392 41.9092 52.7686 41.8826C52.4892 41.8515 52.1165 41.7672 51.8371 41.8781C51.7794 41.8781 51.7218 41.9003 51.6774 41.958C51.5798 42.091 51.5488 42.2507 51.5665 42.4104C51.6552 42.4104 51.7439 42.4104 51.8282 42.4104C52.0589 42.4193 52.2895 42.4148 52.5158 42.4237C52.8174 42.437 53.3009 42.4947 53.2565 42.9028C53.221 43.2133 52.7819 43.3375 52.5335 43.3951L52.4226 43.4173C52.8174 43.5194 53.2743 43.4262 53.5848 43.1867C53.953 42.9072 54.1038 42.233 53.6247 42.0245H53.6203Z' fill='%233B754B'/%3E%3Cpath d='M55.3231 42.814C55.1191 42.7431 53.0121 40.6849 50.1067 42.0289C49.8805 42.1354 50.0579 42.4769 50.2841 42.3705C52.8568 41.1817 55.1013 43.1467 55.2034 43.1778C55.4385 43.2576 55.5627 42.8894 55.3276 42.8096L55.3231 42.814Z' fill='%23676D54'/%3E%3Cpath d='M61.405 43.1071C61.7732 43.4486 62.412 43.5817 62.8644 43.32C63.2414 43.1071 63.6318 42.5215 63.3745 42.0957C63.339 42.0336 63.2858 42.007 63.2281 42.0025C62.9664 41.8695 62.5983 41.9138 62.3232 41.9138C62.0615 41.9138 61.7333 41.8917 61.4804 41.9715C60.9925 42.1268 61.0724 42.801 61.405 43.1071Z' fill='%233E875B'/%3E%3Cpath d='M63.3786 42.1001C63.3432 42.038 63.2899 42.0114 63.2323 42.007C62.9706 41.8739 62.6024 41.9183 62.3274 41.9183C62.0657 41.9183 61.7374 41.8961 61.489 41.9759C61.1918 42.0691 61.1075 42.353 61.1563 42.628C61.6487 42.5481 62.3274 42.4594 62.3495 42.9119C62.3628 43.1736 62.0435 43.2978 61.8394 43.3643C61.8306 43.3643 61.8261 43.3643 61.8217 43.3688C62.1588 43.5018 62.558 43.5063 62.873 43.3288C63.25 43.1159 63.6359 42.5304 63.3831 42.1046L63.3786 42.1001Z' fill='%233B754B'/%3E%3Cpath d='M59.7146 42.6323C59.932 42.5791 62.314 40.5164 65.1395 42.3307C65.3613 42.4726 65.1396 42.8363 64.9222 42.6944C62.4204 41.0887 59.9053 43.0271 59.7989 43.0537C59.546 43.1158 59.4618 42.6944 59.7146 42.6279V42.6323Z' fill='%23676D54'/%3E%3Cpath d='M59.129 44.2114C59.1423 44.0384 59.1512 43.8565 59.16 43.6835C59.1733 43.373 59.1378 43.0802 59.0447 42.7653C58.9249 42.3483 58.9294 41.9757 59.0624 41.4967C59.0757 41.4434 59.0669 41.3902 59.0358 41.3503C59.0003 41.3059 58.9427 41.2793 58.885 41.2793C58.8052 41.2793 58.7431 41.3281 58.7209 41.4035C58.6277 41.7451 58.5878 42.0245 58.5923 42.2996C58.5923 42.5125 58.6499 42.721 58.7031 42.925C58.7519 43.1157 58.8052 43.3109 58.814 43.5061C58.8273 43.8166 58.8096 44.1315 58.7874 44.4332C58.7608 44.8723 58.7297 45.3247 58.8007 45.7772C58.814 45.857 58.8673 45.9058 58.9471 45.9058C59.0048 45.9058 59.0624 45.8792 59.0979 45.8349C59.1334 45.7949 59.1467 45.7417 59.1378 45.6885C59.0669 45.205 59.0979 44.6993 59.1334 44.2158L59.129 44.2114Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.3' d='M65.556 33.4725C65.556 33.4725 65.5471 33.4814 65.5427 33.4858C65.5294 33.4991 65.5161 33.5124 65.5028 33.5257C65.5028 33.5257 65.4983 33.5257 65.4939 33.5346C65.3342 33.6943 64.8596 34.1246 64.1499 34.4306C64.0922 34.4528 64.0124 34.4883 63.9192 34.5238C63.764 34.5814 63.6043 34.6302 63.4313 34.6701C63.3337 34.6923 63.2317 34.7145 63.1252 34.7322C62.9699 34.7589 62.8058 34.781 62.6373 34.8032C62.2691 34.8431 61.8743 34.8698 61.4884 34.8875C61.2844 34.8964 61.0803 34.9008 60.8851 34.9052C60.6589 34.9052 60.4416 34.9052 60.242 34.9052C60.0911 34.9186 59.9359 34.9274 59.7806 34.9363C58.7116 34.9851 57.5982 34.9052 56.578 34.7766C56.2498 34.7322 55.926 34.6879 55.6199 34.6347C54.2492 34.4129 52.9363 33.9338 51.7164 33.264C51.5124 33.1842 51.2995 33.1088 51.091 33.0334C51.0821 33.0334 51.0732 33.0289 51.0644 33.0245C51.0688 33.0245 51.0732 33.0156 51.0777 33.0156C51.0777 33.0156 51.0644 33.0156 51.0599 33.0245C51.0599 33.0245 51.0511 33.0245 51.0333 33.0334C50.9623 33.06 50.7583 33.1309 50.4922 33.2197C49.7469 33.4681 48.5182 33.8407 48.2565 33.712C48.0614 33.6144 47.5512 33.3084 47.4137 32.8204C47.3161 32.47 47.4137 32.022 47.9549 31.4986C48.088 31.3655 48.2521 31.228 48.4473 31.0861C50.5099 29.5868 52.7588 29.9594 54.6352 31.0861C56.5115 32.2127 58.4898 33.8007 61.1957 33.335C61.6836 33.2507 66.0706 31.0328 66.0706 31.6494C66.0706 32.399 66.1947 32.8559 65.5693 33.4725H65.556Z' fill='%23C77500'/%3E%3Cpath d='M70.8171 43.2267V43.3376C70.8215 43.444 70.8215 43.5549 70.8171 43.6614C70.8126 43.6702 70.8038 43.688 70.7993 43.6969C70.7816 43.7279 70.7594 43.759 70.7417 43.7989C70.7017 43.8743 70.6663 43.963 70.6352 44.0606C70.4622 44.553 70.3513 45.276 70.2626 45.9192C70.2626 45.9369 70.2582 45.9591 70.2582 45.9724C70.2493 46.0478 70.2404 46.1144 70.2315 46.1853C70.2271 46.1898 70.2315 46.1898 70.2315 46.1898C70.1473 46.8596 70.1029 47.383 70.0585 47.3874C69.9565 47.3963 69.8589 47.414 69.7702 47.4362C69.6726 47.454 69.5884 47.4894 69.513 47.5205C69.4996 47.5294 69.4819 47.5338 69.473 47.5471C69.4198 47.5737 69.3754 47.6048 69.34 47.6358C69.34 47.6358 69.3385 47.6388 69.3355 47.6447C69.3355 47.6447 69.3178 47.658 69.3178 47.6624C69.2779 47.6979 69.2601 47.7378 69.2468 47.7689C69.2291 47.831 69.2113 47.8975 69.1891 47.9552C69.1803 47.9995 69.1625 48.0439 69.1492 48.0883C69.1492 48.0971 69.1492 48.1016 69.1448 48.1149C69.1448 48.1149 69.1403 48.1415 69.1359 48.1504C69.1315 48.1681 69.127 48.1859 69.1182 48.2036C69.0649 48.3722 69.0117 48.5185 68.9496 48.6516C68.8919 48.7936 68.8298 48.9178 68.7677 49.0242C68.7411 49.0819 68.7145 49.1307 68.6835 49.1795C68.6702 49.2061 68.6524 49.2283 68.6347 49.2549C68.6169 49.2904 68.5947 49.317 68.577 49.348C68.5459 49.3835 68.5238 49.419 68.4972 49.4456H68.4927C68.4617 49.49 68.4306 49.5255 68.404 49.5521H68.3996C68.3552 49.6009 68.3153 49.6363 68.2754 49.663C68.0758 49.8315 67.9382 49.8315 67.9382 49.8315C67.9382 49.8315 67.9294 49.6053 67.9072 49.2283C67.9028 49.0952 67.8983 48.9488 67.8895 48.7891C67.8895 48.7625 67.885 48.7403 67.885 48.7137C67.8806 48.6117 67.8762 48.5008 67.8717 48.3855C67.8717 48.3588 67.8673 48.3322 67.8673 48.3012C67.854 47.9641 67.8362 47.5782 67.8185 47.1701V47.1523C67.8096 46.9838 67.8052 46.8152 67.7919 46.6422V46.6067C67.7608 45.9724 67.7342 45.2982 67.7032 44.6417V44.6284C67.6943 44.4332 67.6854 44.2292 67.6721 44.0384V43.9364C67.6677 43.9053 67.6677 43.8832 67.6677 43.8521C67.6632 43.7501 67.6588 43.6525 67.6544 43.5594V43.515C67.6499 43.4174 67.6455 43.3287 67.6455 43.2355C67.6411 43.1424 67.6366 43.0537 67.6322 42.965C67.6322 42.9206 67.6278 42.8762 67.6278 42.8363V42.7565C67.6278 42.7565 67.6233 42.752 67.6233 42.7476V42.7033C67.6189 42.6278 67.6189 42.5569 67.6144 42.4859C67.6056 42.2419 67.5967 42.0157 67.5878 41.8072V41.7806C67.579 41.5588 67.5701 41.3681 67.5612 41.204C67.5568 41.0221 67.5523 40.8447 67.5435 40.6672C67.539 40.6273 67.539 40.583 67.5346 40.543V40.5342C67.5346 40.5342 67.5302 40.4987 67.5302 40.4809V40.4454C67.5213 40.2769 67.5124 40.1172 67.4991 39.9531C67.4858 39.7756 67.4636 39.5982 67.4503 39.4341C67.4503 39.4208 67.4459 39.4075 67.4459 39.3942C67.4459 39.3676 67.4414 39.3454 67.437 39.3188C67.4015 38.9639 67.3572 38.6312 67.3084 38.3118C67.2729 38.0901 67.2374 37.8816 67.2019 37.6775C67.1531 37.4158 67.0999 37.1674 67.0467 36.9368V36.9279C67.0422 36.9013 67.0378 36.8791 67.0334 36.8569C66.9446 36.5109 66.8559 36.2004 66.7672 35.9121C66.7672 35.8988 66.7628 35.8855 66.7583 35.8722C66.7583 35.8722 66.7539 35.8677 66.7539 35.8633C66.7539 35.8589 66.7495 35.8544 66.7495 35.85L66.7362 35.8056C66.6341 35.4907 66.5277 35.2068 66.4301 34.9673C66.4301 34.9628 66.4257 34.9628 66.4257 34.9584C66.4257 34.9584 66.4212 34.9584 66.4212 34.954C66.4212 34.9495 66.4168 34.9495 66.4168 34.9451C66.2039 34.4483 66.0087 34.0934 65.8579 33.8539C65.818 33.7829 65.778 33.7297 65.7514 33.6853C65.6405 33.5345 65.574 33.4636 65.574 33.4636C65.5696 33.4724 65.5607 33.4813 65.5474 33.4946C65.5385 33.5035 65.5341 33.5123 65.5208 33.5212H65.5163C65.5163 33.5212 65.4986 33.5523 65.4808 33.5611H65.4764C65.4365 33.6011 65.3833 33.6543 65.3123 33.7075C65.2591 33.7563 65.1925 33.8051 65.126 33.8583C65.0994 33.8761 65.0727 33.9027 65.0417 33.9204C64.8155 34.0846 64.5227 34.2709 64.1679 34.4261C64.1146 34.4439 64.0303 34.4793 63.9372 34.5193C63.7819 34.5725 63.6178 34.6213 63.4448 34.6612C63.3517 34.6878 63.2497 34.7056 63.1388 34.7189C62.9835 34.7499 62.8194 34.7677 62.6464 34.7898C62.3536 34.8253 62.0387 34.8475 61.7238 34.8653H61.7193C61.6439 34.8697 61.5774 34.8697 61.502 34.8741C61.2935 34.883 61.0894 34.8874 60.8987 34.8919H60.2555C59.5768 34.8919 59.0978 34.8653 59.0978 34.8653C59.0978 34.8653 59.1821 34.7898 59.3196 34.6656C59.5813 34.4217 60.0382 33.9648 60.4729 33.4059H60.4773C60.6148 33.2285 60.7523 33.0422 60.8765 32.8514C60.9076 32.8071 60.9342 32.7671 60.9608 32.7228C61.0894 32.5232 61.2003 32.3103 61.2979 32.0973C61.4088 31.8622 61.4931 31.6138 61.5419 31.3743C61.5818 31.1836 61.5951 30.984 61.5818 30.7977C61.5552 30.5404 61.4798 30.2964 61.3245 30.0658L62.0564 29.6843L61.0983 29.2141L60.3975 28.8637L60.2999 28.8149L60.2112 28.7705L60.1579 28.7395L60.0071 28.6641C60.0071 28.6641 60.0914 28.6774 60.1845 28.6907C60.1934 28.6951 60.2023 28.6951 60.2156 28.6951C60.2732 28.6995 60.3398 28.704 60.4063 28.7084C60.4906 28.7084 60.5793 28.7084 60.6592 28.6951C60.8943 28.6641 61.0806 28.5576 61.0051 28.2915C60.9564 28.1273 60.7346 27.9233 60.4285 27.6971C60.3708 27.6527 60.3043 27.6083 60.2422 27.564C60.1978 27.5329 60.1491 27.5019 60.1003 27.4708C59.9982 27.3999 59.8918 27.3333 59.7853 27.2712C59.6522 27.187 59.5192 27.1071 59.3861 27.0317H59.3817C59.2175 26.9385 59.0623 26.8498 58.9203 26.77C59.0091 26.77 59.0978 26.7744 59.1865 26.7833C59.293 26.7877 59.4083 26.7966 59.5147 26.8099C59.5946 26.8232 59.67 26.8277 59.7543 26.841C59.7676 26.841 59.7853 26.8454 59.7986 26.8454C59.9095 26.8587 60.0248 26.8809 60.1357 26.8986C60.1712 26.9031 60.1978 26.9075 60.2333 26.9119C60.2954 26.9208 60.3575 26.9385 60.4196 26.9474C60.4285 26.9474 60.4374 26.9519 60.4507 26.9519C60.464 26.9519 60.464 26.9563 60.4773 26.9563C60.5705 26.974 60.6592 26.9962 60.7523 27.014L60.8277 27.0273C60.9297 27.0539 61.0406 27.0761 61.1471 27.1071C61.1737 27.1115 61.1959 27.1204 61.2225 27.1248C61.2935 27.1426 61.3556 27.1648 61.4221 27.1825H61.431C61.5508 27.218 61.6705 27.2579 61.7947 27.2934C61.808 27.2978 61.8258 27.3023 61.8435 27.3067C61.8923 27.32 61.9411 27.3378 61.9899 27.3555H61.9943C62.0964 27.391 62.1939 27.4309 62.3004 27.4664L62.3448 27.4797C62.4911 27.5374 62.6464 27.6039 62.7972 27.666C62.8948 27.7104 62.9968 27.7547 63.1033 27.8035C63.223 27.8568 63.3384 27.9144 63.4626 27.981C63.7465 28.1318 64.0481 28.2959 64.332 28.4778C64.3453 28.4866 64.3586 28.4911 64.3719 28.5044C64.3852 28.5132 64.3985 28.5221 64.4118 28.5354C64.5094 28.5931 64.607 28.6641 64.7001 28.7306C64.709 28.735 64.7268 28.7439 64.7356 28.7483C64.8243 28.806 64.9086 28.8725 64.9973 28.9346C65.1082 29.0189 65.2236 29.1076 65.3345 29.2008C65.3877 29.2407 65.4365 29.2806 65.4853 29.325L65.676 29.4891C65.7869 29.5867 65.9022 29.6843 66.0087 29.7907C66.2216 29.9904 66.4301 30.2033 66.6341 30.4251C66.6652 30.4561 66.6918 30.4872 66.7184 30.5182C66.9579 30.7844 67.1797 31.0682 67.3882 31.3787C67.406 31.4054 67.4237 31.432 67.4459 31.4675C67.6544 31.7913 67.9782 32.3857 68.3641 33.1353C68.3685 33.1397 68.3685 33.1442 68.373 33.1531C68.7544 33.9914 69.0605 34.8874 69.2867 35.779C69.3976 36.2226 69.4952 36.6573 69.5662 37.092C69.5795 37.1807 69.6017 37.2783 69.615 37.3803C69.6416 37.5178 69.6593 37.6642 69.6859 37.8239C69.7126 37.988 69.7347 38.1522 69.7569 38.3252C69.7569 38.3252 69.7614 38.3252 69.7614 38.3296C69.7658 38.3562 69.7658 38.3739 69.7702 38.4006C69.788 38.5336 69.8101 38.6756 69.8234 38.8131C69.8412 38.9373 69.8589 39.0571 69.8767 39.1813C69.89 39.2877 69.9077 39.3942 69.9166 39.4962C69.9432 39.6692 69.9654 39.8333 69.9876 39.993C70.0807 40.7205 70.165 41.3237 70.2005 41.51C70.2049 41.5455 70.2094 41.5633 70.2138 41.5677C70.2271 41.5987 70.2715 41.6431 70.3247 41.6919C70.4489 41.8028 70.6174 41.9314 70.6263 41.9359V41.9447C70.6529 42.0068 70.6707 42.0734 70.6884 42.1355C70.7017 42.1887 70.7195 42.2464 70.7283 42.3085C70.7461 42.3927 70.7638 42.477 70.7771 42.5657C70.8082 42.7742 70.8259 42.9871 70.8348 43.2089L70.8171 43.2267Z' fill='%23C77500'/%3E%3Cpath d='M70.9408 43.6037C70.9452 43.7501 70.9452 43.8965 70.9408 44.0429C70.9319 44.2292 70.9231 44.4066 70.9053 44.5796C70.8964 44.6594 70.8964 44.726 70.8876 44.8058C70.8876 44.8103 70.8876 44.8147 70.8831 44.8191C70.8743 44.9744 70.8521 45.1208 70.8343 45.2494C70.8299 45.2849 70.8299 45.3248 70.821 45.3559C70.8122 45.4268 70.8033 45.4889 70.7944 45.551L70.7811 45.6397V45.6531L70.7767 45.6575C70.7767 45.6664 70.7767 45.6708 70.7722 45.6841C70.7678 45.7196 70.7589 45.764 70.7456 45.8172C70.7101 45.9414 70.6702 46.0878 70.6214 46.2386C70.5638 46.4204 70.4972 46.6067 70.4396 46.7797C70.3642 46.9927 70.302 47.1745 70.2843 47.2499C70.2533 47.3741 70.2045 47.5782 70.1557 47.7822C70.1379 47.8443 70.1202 47.9109 70.1069 47.9685C70.1024 47.973 70.1024 47.9774 70.098 47.9863C70.0847 48.0661 70.0581 48.1371 70.0448 48.2081C70.0403 48.2347 70.0359 48.248 70.0315 48.2613C70.027 48.279 70.0226 48.3012 70.0182 48.3145C69.9915 48.4032 69.9738 48.4698 69.9561 48.5319C69.9516 48.5407 69.9516 48.5496 69.9472 48.5629C69.9339 48.5984 69.9295 48.625 69.9161 48.6472V48.6738C69.9161 48.6738 69.9073 48.6916 69.9073 48.7004C69.9073 48.7093 69.9028 48.7137 69.9028 48.7137C69.9028 48.7182 69.8984 48.7182 69.8984 48.7226C69.8895 48.7403 69.8718 48.7625 69.8629 48.7758C69.8363 48.8246 69.8097 48.869 69.7786 48.9133C69.7609 48.94 69.7431 48.9666 69.7254 48.9932H69.721C69.7032 49.0287 69.681 49.0553 69.6589 49.0863H69.6544C69.6544 49.0863 69.6367 49.1174 69.6234 49.1263C69.6145 49.1396 69.6056 49.1573 69.5879 49.1706C69.5524 49.215 69.5125 49.2549 69.4814 49.2904C69.4726 49.2993 69.4548 49.3081 69.4415 49.3303L69.4149 49.3569C69.4149 49.3569 69.4105 49.3569 69.4016 49.3658C69.3972 49.3658 69.3927 49.3702 69.3883 49.3747C69.3617 49.4013 69.335 49.4235 69.3084 49.4456H69.304C69.304 49.4456 69.2996 49.4501 69.2951 49.4501C69.2596 49.4811 69.2197 49.5033 69.1887 49.5255C69.1798 49.5299 69.1621 49.5388 69.1532 49.5432C69.1488 49.5432 69.1443 49.5477 69.1399 49.5521C69.131 49.5521 69.1266 49.5521 69.1221 49.5565C69.1088 49.561 69.0955 49.5654 69.0866 49.5698C69.0467 49.5876 69.0024 49.6009 68.958 49.6142C68.927 49.6186 68.887 49.6231 68.856 49.6275H68.8028C68.8028 49.6275 68.7628 49.6319 68.7495 49.6319C68.7407 49.6319 68.7318 49.6319 68.7185 49.6275C68.714 49.6319 68.7096 49.6275 68.7052 49.6275H68.6475C68.6475 49.6275 68.6165 49.6186 68.6031 49.6186C68.5854 49.6142 68.5632 49.6142 68.5499 49.6053C68.541 49.6053 68.5322 49.6009 68.5233 49.5965H68.5056C68.5056 49.5965 68.4745 49.5876 68.4612 49.5787C68.4479 49.5743 68.4302 49.5698 68.4169 49.561H68.408C68.408 49.561 68.3947 49.5565 68.3902 49.5565C68.3902 49.5565 68.3814 49.5477 68.3769 49.5477L68.3459 49.5344H68.3414C68.3148 49.5255 68.2926 49.5077 68.2705 49.4989C68.2616 49.49 68.2394 49.4811 68.2261 49.4678C68.1995 49.4589 68.1773 49.4412 68.1551 49.4279C68.1152 49.4013 68.0797 49.3791 68.0487 49.348C68.0221 49.3303 68.0043 49.3081 67.9777 49.2904C67.96 49.2726 67.9378 49.2505 67.92 49.2372H67.9156C67.889 49.2105 67.8757 49.1928 67.8535 49.1751C67.8003 49.113 67.7426 49.042 67.6983 48.9666L67.6672 48.9222C67.6317 48.8779 67.6095 48.8335 67.5785 48.7847C67.5696 48.7714 67.5607 48.7492 67.5519 48.7359C67.5386 48.7049 67.5208 48.6827 67.5075 48.6516C67.4809 48.6028 67.4632 48.5585 67.4454 48.5097C67.4188 48.4609 67.4011 48.4165 67.3833 48.3633C67.37 48.3278 67.3567 48.3012 67.3478 48.2657C67.3478 48.2657 67.3478 48.2628 67.3478 48.2569C67.339 48.2214 67.3212 48.1992 67.3123 48.1637C67.3079 48.1593 67.3035 48.1504 67.3035 48.146L67.2902 48.0883C67.2902 48.0883 67.2857 48.0839 67.2857 48.0794V48.0705C67.2857 48.0705 67.2813 48.0705 67.2857 48.0661C67.2769 48.0351 67.268 48.004 67.2502 47.973V47.9463C67.2414 47.9109 67.2369 47.8931 67.2236 47.8621C67.2236 47.8443 67.2192 47.8221 67.2148 47.8088C67.2103 47.7955 67.2059 47.7734 67.2014 47.7556C67.1881 47.6846 67.1704 47.6137 67.1571 47.5383C67.1216 47.3564 67.0994 47.1701 67.0817 46.9794C67.0772 46.9483 67.0772 46.9173 67.0772 46.8862V46.8685C67.0772 46.8685 67.0684 46.864 67.0684 46.8552V46.8463L67.0728 46.8418H67.0684V46.8152C67.0684 46.7886 67.0639 46.7709 67.0639 46.7443V46.6733C67.0639 46.6733 67.0639 46.6378 67.0595 46.6245C67.0462 46.3894 67.0462 46.1366 67.0551 45.8926C67.0551 45.7373 67.0639 45.5732 67.0817 45.418C67.0817 45.418 67.0817 45.415 67.0817 45.4091H67.0861L67.0817 45.4047V45.3603C67.0817 45.3603 67.0906 45.3159 67.0906 45.2982C67.0906 45.245 67.095 45.205 67.1039 45.1518V45.1385C67.1039 45.1385 67.1039 45.103 67.1083 45.0853V45.0675C67.1083 45.0675 67.1127 45.0587 67.1127 45.0542C67.1127 45.0498 67.1172 45.0454 67.1172 45.0409C67.1172 45.0365 67.1127 45.0365 67.1127 45.0365C67.1172 45.0276 67.1172 45.0187 67.1172 45.0054C67.1172 44.9921 67.1216 44.9744 67.126 44.9611V44.9478C67.1349 44.8945 67.1394 44.8457 67.1438 44.7925C67.1527 44.7304 67.1571 44.6683 67.1704 44.6062C67.1748 44.5707 67.1793 44.5441 67.1881 44.5086C67.2059 44.3889 67.2325 44.2691 67.2591 44.1493C67.2547 44.1405 67.2591 44.1227 67.2636 44.1138L67.2769 44.0251C67.2857 43.9852 67.2902 43.9453 67.3035 43.9054V43.8965C67.3035 43.8965 67.3035 43.8921 67.3079 43.8876C67.3079 43.8832 67.3123 43.8832 67.3123 43.8832C67.3123 43.8566 67.3168 43.8433 67.3212 43.8255C67.3212 43.8167 67.3256 43.8078 67.3256 43.7945C67.3256 43.7945 67.3301 43.7856 67.3301 43.7812C67.3301 43.7812 67.3301 43.7767 67.3345 43.7767C67.3345 43.7679 67.3345 43.7634 67.339 43.7501C67.339 43.7501 67.3434 43.7324 67.3478 43.7191C67.3478 43.7102 67.3478 43.7013 67.3523 43.6836C67.3567 43.657 67.3611 43.6303 67.37 43.5993C67.37 43.5904 67.3745 43.5816 67.3789 43.5682C67.3745 43.5638 67.3789 43.5594 67.3833 43.5594C67.3922 43.5195 67.4011 43.4751 67.4144 43.4352V43.4263C67.4144 43.4263 67.4188 43.4086 67.4232 43.3953C67.4321 43.3509 67.441 43.311 67.4632 43.2711C67.4809 43.1956 67.5031 43.1247 67.5253 43.0537V43.0448C67.5253 43.0448 67.5253 43.0404 67.5297 43.0404C67.5297 43.036 67.5297 43.0315 67.5341 43.0315C67.5341 43.0315 67.5356 43.0286 67.5386 43.0227C67.5386 43.0227 67.5386 43.0093 67.543 43.0049C67.5519 42.9694 67.5608 42.9428 67.5741 42.9118C67.5785 42.8851 67.5874 42.863 67.6007 42.8408V42.8319C67.6007 42.8319 67.6051 42.823 67.6051 42.8142H67.6095C67.6095 42.8142 67.6184 42.7876 67.6184 42.7787H67.6228V42.7654V42.7565H67.6317V42.7476C67.6317 42.7476 67.645 42.7121 67.6583 42.6944C67.6761 42.6323 67.7027 42.5702 67.7293 42.5125C67.7382 42.4859 67.747 42.4682 67.7604 42.4416V42.4327C67.7604 42.4327 67.7692 42.4238 67.7692 42.4194L67.7825 42.4061C67.7825 42.4061 67.787 42.3883 67.787 42.3795C67.7914 42.375 67.7914 42.3706 67.7914 42.3662C67.7958 42.3617 67.7958 42.3573 67.7958 42.3573H67.8047V42.344C67.8047 42.344 67.8092 42.3351 67.8092 42.3307C67.8092 42.3307 67.8091 42.3218 67.8136 42.3218C67.8225 42.2952 67.8313 42.2774 67.8491 42.2508C67.8579 42.2242 67.8757 42.2065 67.8846 42.1799C67.9245 42.0956 67.9688 42.0157 68.0088 41.9448C68.0354 41.9093 68.0531 41.8738 68.0709 41.8427C68.0842 41.825 68.0975 41.8028 68.1108 41.7851C68.1374 41.7496 68.164 41.7097 68.1906 41.6742C68.1995 41.6653 68.2084 41.6476 68.2217 41.6387C68.2305 41.6298 68.235 41.6076 68.2527 41.5988C68.2572 41.5899 68.266 41.581 68.2705 41.5677C68.2971 41.5367 68.3193 41.5101 68.3414 41.4834L68.3681 41.4568C68.3681 41.4568 68.4035 41.4169 68.4302 41.3947C68.4346 41.3903 68.439 41.3814 68.4479 41.377C68.4656 41.3504 68.4923 41.3282 68.5189 41.3149C68.5366 41.2971 68.5632 41.275 68.5943 41.2617C68.5987 41.2572 68.5987 41.2528 68.6031 41.2483C68.6209 41.2395 68.6386 41.2217 68.6519 41.2129C68.683 41.1996 68.7007 41.1818 68.7318 41.1685L68.7628 41.1552C68.7939 41.1375 68.8205 41.1241 68.8515 41.1108C68.8826 41.102 68.9092 41.0931 68.9447 41.0842C68.9536 41.0798 68.958 41.0754 68.9713 41.0754C69.0024 41.0709 69.029 41.0665 69.0556 41.0665C69.0867 41.062 69.1088 41.062 69.1399 41.062C69.1532 41.0665 69.1665 41.0665 69.1798 41.0665H69.1842C69.1842 41.0665 69.2109 41.0665 69.2197 41.0709C69.2242 41.0665 69.233 41.0709 69.2375 41.0709C69.2508 41.0709 69.273 41.0753 69.2863 41.0798H69.2907C69.3262 41.0931 69.3617 41.1064 69.3927 41.1197C69.3927 41.1197 69.3942 41.1197 69.3972 41.1197C69.3972 41.1197 69.4016 41.1197 69.406 41.1241C69.4105 41.1241 69.4149 41.1286 69.4193 41.1286C69.4282 41.133 69.4326 41.1375 69.4459 41.1419C69.477 41.1508 69.4992 41.1685 69.5258 41.1818C69.5302 41.1818 69.5347 41.1818 69.5391 41.1862C69.548 41.1907 69.5568 41.1951 69.5702 41.204L69.6722 41.2617L69.721 41.2883C69.721 41.2883 69.7564 41.306 69.7698 41.3193C69.7875 41.3282 69.8052 41.3371 69.823 41.3504L69.8673 41.3814L70.0226 41.4701C70.0226 41.4701 70.0537 41.4834 70.067 41.4967H70.0714C70.0714 41.4967 70.1024 41.5101 70.1157 41.5234C70.1291 41.5322 70.1512 41.5411 70.169 41.5544C70.1778 41.5588 70.1823 41.5633 70.1956 41.5677C70.2222 41.5766 70.2444 41.5943 70.271 41.6076C70.2799 41.6121 70.2976 41.6165 70.3065 41.6254C70.3242 41.6387 70.3508 41.6564 70.3775 41.6697C70.3952 41.6786 70.4174 41.6964 70.4351 41.7097C70.4972 41.754 70.546 41.8117 70.5859 41.8827C70.6259 41.9581 70.6658 42.0335 70.6968 42.1178C70.7101 42.1444 70.7234 42.171 70.7279 42.202C70.7279 42.202 70.7294 42.205 70.7323 42.2109H70.7367V42.2242H70.7412C70.7589 42.2863 70.7811 42.3484 70.7944 42.4105C70.8122 42.4726 70.8299 42.5347 70.8432 42.6013C70.9142 42.8896 70.9408 43.2045 70.9497 43.5283C70.9541 43.5638 70.9541 43.6037 70.9541 43.6392L70.9408 43.6037Z' fill='%23E8D4BA'/%3E%3Cpath d='M69.5661 48.4299C69.7568 48.35 69.9298 48.2702 70.0363 48.2169C70.0319 48.2347 70.0274 48.2524 70.023 48.2702C70.023 48.2879 70.0141 48.3057 70.0097 48.3234C69.9875 48.4077 69.9653 48.4787 69.9476 48.5363C69.9343 48.5851 69.921 48.625 69.9121 48.6516C69.9121 48.6605 69.9121 48.665 69.9077 48.6738C69.9077 48.6827 69.9032 48.6871 69.9032 48.696V48.7093C69.9032 48.7093 69.8943 48.7182 69.8899 48.7226C69.8145 48.8513 69.7391 48.971 69.6548 49.0775C69.6282 49.1085 69.606 49.1396 69.5794 49.1706C69.5439 49.2106 69.5084 49.2505 69.473 49.286C69.473 49.286 69.4508 49.3081 69.433 49.3215L69.4108 49.3436C69.3754 49.3747 69.3399 49.4057 69.3044 49.4323C69.2645 49.4634 69.2246 49.49 69.1802 49.5122C69.1625 49.5211 69.1491 49.5299 69.1314 49.5388L69.0782 49.561C68.9983 49.5965 68.9096 49.6186 68.8253 49.6275C68.781 49.6275 68.7411 49.6275 68.6967 49.6275C68.679 49.6275 68.6568 49.6275 68.6346 49.6186C68.5947 49.6186 68.5503 49.6053 68.5104 49.592C68.4705 49.5832 68.435 49.5654 68.3995 49.5521C68.3906 49.5521 68.3818 49.5432 68.3729 49.5388C68.3729 49.5388 68.3463 49.5255 68.333 49.5211C68.333 49.5211 68.333 49.5211 68.3241 49.5211C68.2842 49.5033 68.2487 49.4856 68.2088 49.459C68.1866 49.4457 68.1644 49.4279 68.1422 49.4146C68.1067 49.3924 68.0668 49.3658 68.0358 49.3348C68.0136 49.317 67.9914 49.2993 67.9692 49.2771C67.9249 49.2372 67.8849 49.1972 67.845 49.1529C67.7874 49.0908 67.7341 49.0198 67.6853 48.9488C67.641 48.8912 67.6011 48.8291 67.5656 48.767C67.539 48.7226 67.5168 48.6783 67.4946 48.6339C67.4724 48.5895 67.4502 48.5408 67.4281 48.492C67.4059 48.4432 67.3837 48.3944 67.366 48.3411C67.2684 48.0883 67.193 47.8089 67.1397 47.5117C67.1043 47.3298 67.0821 47.1479 67.0643 46.9528C66.9667 45.9458 67.0643 44.797 67.3039 43.7812C67.3127 43.7368 67.3216 43.6925 67.3349 43.6481C67.3704 43.5062 67.4103 43.3687 67.4502 43.2311C67.5123 43.0271 67.5744 42.8364 67.6454 42.6501C67.6942 42.5259 67.743 42.4105 67.7962 42.2996C67.8229 42.242 67.8495 42.1887 67.8761 42.1311C67.916 42.0512 67.9604 41.9714 68.0003 41.9004C68.0225 41.8649 68.0402 41.8294 68.0624 41.794C68.0757 41.7762 68.0846 41.754 68.0979 41.7363C68.1245 41.6964 68.1511 41.6609 68.1777 41.621C68.1955 41.5944 68.2132 41.5722 68.2354 41.5456C68.2664 41.5056 68.2975 41.4701 68.3285 41.4347C68.3374 41.4258 68.3418 41.4214 68.3507 41.4125C68.3729 41.3903 68.3951 41.3681 68.4128 41.3459L68.4305 41.3282C68.4749 41.2838 68.5237 41.2439 68.5725 41.2084C68.5947 41.1907 68.6168 41.1774 68.6346 41.1641C68.6612 41.1463 68.6834 41.133 68.71 41.1197C68.7854 41.0754 68.8652 41.0443 68.9495 41.031C68.9761 41.031 69.0028 41.0221 69.0294 41.0177C69.0737 41.0133 69.1137 41.0133 69.1536 41.0177C69.229 41.0266 69.2955 41.0443 69.3665 41.0754C69.3709 41.0754 69.3754 41.0754 69.3798 41.0754C69.4153 41.0887 69.4552 41.1064 69.4863 41.1286C69.504 41.1375 69.5217 41.1463 69.5395 41.1596C69.7214 41.2705 69.881 41.3504 70.0452 41.448C68.9229 41.5322 68.191 43.515 68.1467 44.6018C68.1067 45.5422 68.0801 47.8355 68.4882 48.6162C68.5769 48.7847 69.1181 48.6073 69.5617 48.421L69.5661 48.4299Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M70.8254 42.5614C70.7988 42.5658 70.781 42.5702 70.7544 42.5791C70.6834 42.5969 70.6213 42.6235 70.5592 42.6501C70.4572 42.69 70.3596 42.7432 70.2665 42.8053C70.2576 42.8098 70.2487 42.8142 70.2354 42.8231C70.2044 42.8408 70.1822 42.863 70.1511 42.8807C69.8406 43.1158 69.6055 43.4397 69.437 43.7945C69.2729 44.1272 69.1797 44.4954 69.1353 44.8369V44.8458C69.1353 44.8724 69.1309 44.8946 69.1309 44.9168C69.1265 44.9966 69.122 45.0631 69.1176 45.1385C69.1087 45.418 69.1043 45.7773 69.122 46.1588C69.1309 46.3761 69.1486 46.6023 69.1708 46.8286C69.1886 46.9794 69.2108 47.1346 69.2329 47.2855C69.2462 47.3742 69.264 47.4585 69.2817 47.5427C69.2862 47.5738 69.2906 47.596 69.2995 47.627C69.2995 47.6359 69.2995 47.6536 69.3039 47.6625C69.3305 47.7911 69.3616 47.9065 69.3971 48.0262C69.3971 48.0307 69.4015 48.0351 69.4015 48.0395C69.4015 48.044 69.4015 48.044 69.4059 48.0484C69.4104 48.0661 69.4148 48.0928 69.4237 48.1105C69.4636 48.2214 69.5035 48.3279 69.5567 48.4254C69.5967 48.5142 69.641 48.5896 69.6898 48.6605C69.7253 48.7049 69.7874 48.7226 69.8761 48.7182C69.8672 48.736 69.8495 48.7581 69.8406 48.7714C69.8096 48.8158 69.7874 48.8602 69.7564 48.9045C69.7386 48.9356 69.7209 48.9622 69.7031 48.9888H69.6987C69.6809 49.0243 69.6588 49.0509 69.6366 49.0819C69.6277 49.0952 69.6188 49.113 69.6011 49.1219C69.5922 49.1352 69.5834 49.1529 69.5656 49.1662C69.5301 49.2106 69.4902 49.2505 69.4592 49.286C69.4592 49.286 69.4325 49.3126 69.4192 49.3259C69.4104 49.3303 69.4059 49.3392 69.3926 49.3437L69.3793 49.357C69.3793 49.357 69.3704 49.3614 69.366 49.3658C69.3394 49.3836 69.3128 49.4102 69.2862 49.4279H69.2817C69.2817 49.4279 69.2773 49.4368 69.2729 49.4368C69.2374 49.4679 69.1975 49.49 69.1664 49.5122C69.1575 49.5166 69.1398 49.5255 69.1309 49.53C69.1265 49.53 69.122 49.5344 69.1176 49.5344C69.1132 49.5388 69.1043 49.5388 69.0999 49.5433C69.0865 49.5477 69.0732 49.5521 69.0644 49.5566C69.0466 49.5477 69.0289 49.5433 69.0111 49.5388C68.9402 49.5211 68.8781 49.4945 68.816 49.4634C68.7583 49.4368 68.7051 49.4146 68.6474 49.3836C68.6164 49.3703 68.5942 49.3525 68.5631 49.3348C68.5498 49.3259 68.5277 49.317 68.5143 49.3037C68.5099 49.3037 68.501 49.2993 68.501 49.2949C68.4966 49.2904 68.4922 49.2904 68.4877 49.286C68.4877 49.286 68.4862 49.2845 68.4833 49.2816C68.4079 49.2372 68.3413 49.1884 68.2704 49.1352C68.2083 49.0819 68.1417 49.0243 68.0841 48.9577C68.0087 48.8823 67.9466 48.8069 67.8845 48.7182L67.8756 48.7093C67.8312 48.6517 67.7869 48.5896 67.747 48.523C67.7381 48.5097 67.7292 48.4875 67.7159 48.4742C67.7026 48.4476 67.6848 48.421 67.676 48.3944C67.5828 48.2391 67.503 48.0662 67.4409 47.8843C67.4276 47.8399 67.4054 47.7911 67.3921 47.7468C67.3655 47.6714 67.3477 47.6004 67.33 47.5206C67.3211 47.4806 67.3122 47.4407 67.2989 47.3964C67.2235 47.0947 67.1792 46.7887 67.157 46.4648V46.4294C67.1526 46.3451 67.1481 46.2608 67.1481 46.1765C67.1481 46.1765 67.1437 46.1721 67.1481 46.1676C67.1304 45.52 67.2014 44.8369 67.3477 44.1937C67.3477 44.1937 67.3522 44.176 67.3522 44.1627C67.3522 44.1582 67.3566 44.1494 67.361 44.1361C67.361 44.1316 67.361 44.1228 67.3655 44.1095C67.3965 43.9986 67.4187 43.8788 67.4542 43.7723C67.4542 43.7635 67.4586 43.759 67.4586 43.7457C67.4675 43.7147 67.4764 43.6881 67.4897 43.6526V43.6393C67.4897 43.6393 67.4941 43.626 67.4986 43.6126L67.5119 43.5683L67.5429 43.4796C67.574 43.3909 67.6006 43.3021 67.6316 43.2179C67.6316 43.2134 67.6361 43.209 67.6361 43.2046C67.6494 43.1691 67.6627 43.1336 67.676 43.1025H67.6804V43.0892C67.6804 43.0892 67.6849 43.0848 67.6849 43.0804H67.6893C67.6893 43.0804 67.6937 43.0626 67.6937 43.0537C67.7248 42.9916 67.747 42.9207 67.778 42.863C67.778 42.863 67.7824 42.8541 67.7824 42.8497C67.7913 42.832 67.7958 42.8142 67.8091 42.8009C67.8091 42.7965 67.8135 42.792 67.8135 42.7876C67.8179 42.7743 67.8224 42.761 67.8268 42.7521C67.8312 42.7432 67.8312 42.7388 67.8357 42.7344C67.8357 42.7299 67.8401 42.7255 67.8445 42.7211C67.8889 42.619 67.9377 42.5126 67.9909 42.4194C67.9998 42.4061 68.0042 42.3884 68.022 42.3751C68.0663 42.2819 68.1196 42.1976 68.1728 42.1134C68.5055 41.5944 68.9136 41.2129 69.3616 41.071C69.3616 41.071 69.363 41.071 69.366 41.071C69.366 41.071 69.3704 41.071 69.3749 41.0754C69.3793 41.0754 69.3838 41.0798 69.3882 41.0798C69.3971 41.0843 69.4015 41.0887 69.4148 41.0931C69.4414 41.0976 69.4592 41.1109 69.4858 41.1242C69.4902 41.1242 69.4902 41.1286 69.4946 41.1286C69.4991 41.1331 69.5035 41.1331 69.508 41.1375L69.539 41.1508C69.5745 41.1685 69.6144 41.1952 69.641 41.2129L69.6898 41.2395C69.6898 41.2395 69.7253 41.2573 69.7386 41.2706C69.7563 41.2794 69.7741 41.2883 69.7918 41.3016L69.8362 41.3327L69.9914 41.4214C69.9914 41.4214 70.0225 41.4347 70.0358 41.448H70.0402C70.0402 41.448 70.0713 41.4613 70.0846 41.4746C70.0979 41.4835 70.1201 41.4923 70.1378 41.5057C70.1467 41.5101 70.1511 41.5145 70.1644 41.519C70.1911 41.5278 70.2132 41.5456 70.2398 41.5589C70.2487 41.5633 70.2665 41.5678 70.2753 41.5766C70.302 41.5855 70.3197 41.6032 70.3463 41.6166L70.404 41.6609C70.4661 41.7053 70.5149 41.7629 70.5548 41.8339C70.5947 41.9093 70.6346 41.9847 70.6657 42.069C70.6745 42.1001 70.6923 42.1222 70.7012 42.1533V42.1622H70.7056V42.1755H70.71C70.7278 42.2376 70.75 42.2997 70.7633 42.3618C70.781 42.4239 70.7988 42.486 70.8121 42.5525L70.8254 42.5614Z' fill='%23CEB79B'/%3E%3Cpath d='M68.9361 46.1809C68.9805 46.5446 68.568 46.6644 68.4216 46.9083C68.4438 47.0148 68.4704 47.1079 68.5147 47.1922C68.6478 47.4406 68.8696 47.4539 69.0071 47.1745C69.1979 46.7841 69.4684 46.3095 69.3975 45.8615C69.3309 45.449 68.7543 43.9408 69.2821 43.7456C69.5705 43.6392 70.0673 45.063 70.2491 44.3267C70.3866 43.7589 70.2713 42.6056 69.8987 42.721C69.2378 42.9294 68.9228 43.1202 68.5281 43.9763C68.3817 44.3001 68.4172 44.5751 68.3861 44.8856C68.5857 45.0764 68.8918 45.7905 68.9361 46.1809Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M70.9413 43.6037C70.9457 43.7501 70.9457 43.8965 70.9413 44.0428C70.9324 44.2291 70.9236 44.4066 70.9058 44.5796C70.8969 44.6594 70.8969 44.726 70.8881 44.8058C70.8881 44.8102 70.8881 44.8147 70.8836 44.8191C70.8748 44.9744 70.8526 45.1207 70.8348 45.2494C70.8304 45.2849 70.8304 45.3248 70.8215 45.3558C70.8127 45.4268 70.8038 45.4889 70.7949 45.551L70.7816 45.6397V45.653L70.7772 45.6575C70.7772 45.6663 70.7772 45.6708 70.7728 45.6841C70.7683 45.7196 70.7594 45.7639 70.7461 45.8172C70.7107 45.9414 70.6707 46.0877 70.6219 46.2386C70.5421 46.0744 70.4046 45.9946 70.2538 45.968C70.2183 45.9591 70.1828 45.9547 70.1473 45.9502C70.0231 45.9458 69.9033 45.968 69.788 46.0123H69.7747C69.7747 46.0123 69.7481 46.0256 69.7348 46.0301C69.6993 46.0434 69.6727 46.0611 69.6416 46.0744C69.513 46.1454 69.4154 46.2252 69.371 46.3095V46.3228C69.371 46.3228 69.371 46.3273 69.3666 46.3273C69.3134 46.4293 69.2291 46.3361 69.1315 46.1543C69.0117 45.9369 68.8787 45.5998 68.75 45.3203C68.6879 45.1784 68.617 45.0542 68.5593 44.9699C68.5016 44.8856 68.4484 44.8413 68.3952 44.8768H68.3907C68.3907 44.8768 68.3774 44.7925 68.3641 44.6905C68.3597 44.6417 68.3553 44.5884 68.3553 44.5219C68.3508 44.4376 68.3508 44.34 68.3553 44.2336V44.2247C68.3597 44.1937 68.3597 44.1626 68.3641 44.1271C68.3774 43.9807 68.4085 43.8211 68.4617 43.6614C68.5105 43.4884 68.5815 43.3243 68.6835 43.1468C68.7678 42.9827 68.8787 42.8186 69.0295 42.6589C69.1714 42.5036 69.3089 42.3794 69.4464 42.2907C69.5973 42.1843 69.7525 42.1133 69.89 42.0734C69.8989 42.0689 69.9167 42.0689 69.93 42.0689C69.961 42.0601 69.9876 42.0556 70.0187 42.0512C70.1872 42.0246 70.3336 42.0379 70.4489 42.0645C70.5465 42.0955 70.6264 42.1266 70.6752 42.1488C70.7062 42.1665 70.7195 42.1754 70.7195 42.1754H70.724V42.1843H70.7284C70.7461 42.2419 70.7683 42.304 70.7816 42.3661C70.7994 42.4282 70.8171 42.4903 70.8304 42.5569C70.9014 42.8452 70.928 43.1601 70.9369 43.4839C70.9413 43.5194 70.9413 43.5594 70.9413 43.5948V43.6037Z' fill='%23CEB79B'/%3E%3Cpath d='M68.5952 47.5471C68.5952 47.5471 68.4976 48.0706 69.0565 48.1992C69.6155 48.3278 69.6687 47.5471 69.6687 47.5471H68.5952Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.3' d='M65.7201 32.4344C65.7068 32.7671 65.658 33.1131 65.556 33.4724C65.5471 33.4857 65.5383 33.4901 65.5294 33.5034C65.5205 33.5123 65.5161 33.5212 65.5028 33.53C65.1523 33.9204 64.6866 34.222 64.1543 34.4349C64.0966 34.4571 64.0168 34.4926 63.9236 34.5281C63.7684 34.5857 63.6087 34.6345 63.4357 34.6744C63.3381 34.6966 63.2361 34.7188 63.1296 34.7365C63.3692 34.3728 64.1587 33.1219 64.3539 31.8489C64.5092 30.8375 64.1543 29.112 63.4446 28.0119C63.7462 28.1716 64.0523 28.3446 64.3539 28.5354C64.3672 28.5442 64.3805 28.5531 64.3938 28.562C64.589 28.6862 64.7797 28.8237 64.9749 28.9656C65.2189 29.6931 65.7645 31.3698 65.7201 32.4388V32.4344Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M62.6376 34.7987C62.2695 34.8387 61.8747 34.8653 61.4888 34.883C61.2847 34.8919 61.0807 34.8963 60.8855 34.9008C61.2315 34.333 62.7175 31.8623 62.682 30.3364C62.6598 29.4004 62.682 28.6508 62.3227 27.5063C62.4735 27.564 62.6243 27.6261 62.7751 27.6927C63.4316 28.6508 63.5248 29.5867 63.6179 30.3364C63.8042 31.8357 63.0989 34.0092 62.6376 34.7987Z' fill='%23A05A07'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.6'%3E%3Cpath d='M68.0978 54.1475C68.0357 54.8262 67.9603 55.5048 67.8228 56.1702C67.8006 56.3654 67.7784 56.5472 67.7607 56.7247C67.7518 56.7823 67.7429 56.8444 67.7207 56.9154C67.703 56.9864 67.6764 57.0618 67.6498 57.1416C67.6098 57.2481 67.5566 57.359 67.499 57.4832C67.4945 57.4965 67.4856 57.5054 67.4812 57.5187C67.4058 57.6695 67.3171 57.8336 67.2195 58.0066C67.2018 58.0332 67.1885 58.0598 67.1707 58.0864C67.1707 58.0953 67.1618 58.1042 67.1574 58.1086C66.7981 58.7784 66.3368 59.3906 65.871 59.9983C65.8533 60.0204 65.8355 60.047 65.8178 60.0692C65.7823 60.118 65.7468 60.1668 65.7069 60.2156C65.7069 60.2289 65.7025 60.2467 65.698 60.26C65.6892 60.2999 65.6803 60.3398 65.6714 60.3797C65.6581 60.433 65.6448 60.4862 65.6315 60.5394C65.6049 60.6326 65.5738 60.7257 65.5383 60.8144C65.525 60.8544 65.5073 60.8898 65.4895 60.9298C65.4718 60.9741 65.4541 61.014 65.4319 61.054C65.4097 61.0983 65.3875 61.1427 65.3653 61.187C65.3432 61.2314 65.3166 61.2713 65.2944 61.3157C65.2722 61.3556 65.2456 61.4 65.219 61.4399C65.1923 61.4798 65.1657 61.5242 65.1391 61.5596C65.1036 61.6084 65.0726 61.6572 65.0371 61.706C64.9972 61.7548 64.9573 61.808 64.9173 61.8524L64.8952 61.879C64.8952 61.879 64.8818 61.8968 64.873 61.9056C64.8685 61.9145 64.8597 61.9234 64.8508 61.9278C64.8375 61.9411 64.8286 61.95 64.8197 61.9633C64.7843 61.9988 64.7532 62.0387 64.7177 62.0742C64.6778 62.1185 64.6335 62.1585 64.5935 62.1984C64.5536 62.2383 64.5093 62.2738 64.4693 62.3137C64.3318 62.4379 64.1943 62.5444 64.0701 62.6331C64.0169 62.6686 63.9681 62.7041 63.9237 62.7307C63.9015 62.7484 63.8749 62.7617 63.8572 62.775C63.8128 62.8061 63.7685 62.8327 63.7285 62.8549C63.5689 62.9968 63.4358 63.161 63.3781 63.3872C63.3781 63.396 63.3693 63.4005 63.3693 63.4094C63.3471 63.6001 63.316 63.7775 63.2805 63.9461C63.2761 63.9683 63.2717 63.9949 63.2628 64.0215C63.2628 64.0215 63.2628 64.0304 63.2628 64.0348C63.2584 64.0614 63.2495 64.088 63.2451 64.1146C63.2317 64.1767 63.2184 64.2344 63.2007 64.2965C63.183 64.3675 63.1608 64.4385 63.1386 64.505C63.1253 64.5493 63.1164 64.6425 63.0809 64.6735C63.0721 64.6913 63.0676 64.7135 63.0587 64.7357C63.0454 64.7711 63.0366 64.8066 63.0233 64.8377C63.0144 64.8599 63.0055 64.8776 63.0011 64.8998C62.9922 64.9131 62.9878 64.9308 62.9789 64.9486C62.97 64.9663 62.9656 64.9841 62.9567 65.0018C62.9567 65.0062 62.9479 65.0151 62.9479 65.0195C62.9479 65.024 62.9434 65.0328 62.939 65.0373C62.9124 65.0994 62.8858 65.1615 62.8547 65.2236C62.8414 65.2458 62.8325 65.2679 62.8237 65.2857C62.8237 65.2946 62.8148 65.3034 62.8103 65.3079C62.797 65.33 62.7882 65.3522 62.7749 65.3744C62.766 65.3921 62.7527 65.4143 62.7438 65.4321C62.7216 65.4809 62.695 65.5208 62.6728 65.5607C62.6595 65.5829 62.6462 65.6051 62.6329 65.6272L62.6152 65.6539C62.6152 65.6539 62.5974 65.6849 62.5886 65.7026C62.5575 65.7514 62.5265 65.7958 62.491 65.8402C62.4865 65.849 62.4821 65.8535 62.4777 65.8623C62.4777 65.8623 62.4732 65.8712 62.4688 65.8756C62.4688 65.8756 62.4688 65.8801 62.4688 65.8845C62.4511 65.9067 62.4333 65.9333 62.42 65.9555C62.42 65.9555 62.4156 65.9599 62.4111 65.9644L62.3978 65.9821C62.3978 65.9821 62.3756 66.0087 62.3668 66.022C62.3668 66.0309 62.3535 66.0398 62.349 66.0442C62.3313 66.0708 62.3135 66.093 62.2869 66.1196C62.2736 66.1329 62.2648 66.1462 62.2514 66.1595C62.2337 66.1817 62.216 66.1995 62.2026 66.2172C62.1672 66.2571 62.1317 66.297 62.0962 66.337C62.0962 66.337 62.0917 66.3414 62.0873 66.3458C62.074 66.3591 62.0651 66.3724 62.0518 66.3813C62.0474 66.3858 62.0385 66.3946 62.0341 66.3991L61.9498 66.4833C61.8611 66.5765 61.7679 66.6608 61.6703 66.7362C61.6925 66.785 61.7103 66.8382 61.728 66.8959C61.8478 67.2862 61.8833 67.7741 61.7901 68.1645C61.7901 68.1734 61.7901 68.1822 61.7812 68.1911C61.7458 68.2089 61.7147 68.2266 61.6792 68.2443C61.3554 68.404 61.0139 68.5105 60.6546 68.5415H60.6501C60.384 68.5637 60.109 68.5415 59.8295 68.4617C59.5412 68.3818 59.4303 68.1113 59.4613 67.6943C59.4613 67.681 59.4613 67.6633 59.4613 67.6499C59.4613 67.6455 59.4613 67.6366 59.4613 67.6322V67.6233C59.4835 67.3971 59.5456 67.131 59.6388 66.8382C59.661 66.7761 59.6787 66.7184 59.7009 66.6563C59.7763 66.439 59.865 66.2083 59.9715 65.9644C60.0824 65.7026 60.211 65.4276 60.3485 65.1393C60.455 64.9175 60.5703 64.6913 60.69 64.4606C61.8522 62.2561 63.6221 59.568 65.1569 57.4832C65.1879 57.4388 65.219 57.3945 65.2545 57.3501C66.5719 55.5669 67.6941 54.2539 68.0623 54.1342C68.0756 54.1342 68.0845 54.1253 68.0978 54.1253V54.1475Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M57.6736 49.8449C57.301 49.8449 56.9106 49.4989 56.64 49.2017C56.2231 48.7404 55.8239 48.869 55.8061 48.8735C55.7174 48.9045 55.611 48.8557 55.5799 48.7626C55.5489 48.6694 55.5932 48.5719 55.6864 48.5364C55.713 48.5275 56.3162 48.3146 56.9018 48.9578C57.2699 49.3614 57.5494 49.4945 57.6913 49.4856C57.8909 49.4679 58.1926 49.3126 58.3434 49.1485C58.6051 48.8602 59.062 48.5275 59.4967 48.5275C59.5943 48.5275 59.6741 48.6073 59.6741 48.7049C59.6741 48.8025 59.5943 48.8824 59.4967 48.8824C59.2394 48.8824 58.8757 49.0908 58.6051 49.388C58.4232 49.5921 58.0417 49.8139 57.7224 49.8405C57.7046 49.8405 57.6913 49.8405 57.6736 49.8405V49.8449Z' fill='%23CEB79B'/%3E%3Cpath d='M68.4922 49.5654C68.4922 49.7472 68.4922 49.9335 68.4833 50.1154C68.4833 50.1154 68.4833 50.1154 68.4833 50.1198C68.4833 50.1198 68.4833 50.1198 68.4833 50.1243C68.1152 53.5221 68.3414 57.3146 65.8707 59.9938C65.4404 61.1294 64.8549 62.2472 63.7282 62.8549C63.36 63.1255 63.3334 63.609 63.2625 64.0259C63.1205 64.6913 62.8544 65.3301 62.464 65.8845C61.2752 67.7875 58.9952 67.7919 57.0036 67.6056C54.0627 67.7298 52.4835 65.7115 51.8226 63.0678C50.7181 63.3606 50.1281 61.5463 49.6801 60.7213C47.0409 61.9367 46.5174 51.9873 46.4066 50.2973C46.4199 50.0311 46.4509 49.7383 46.4686 49.4766C46.9743 46.3184 47.032 43.1912 47.5332 40.0107C47.6574 39.3498 47.3602 37.9525 47.3114 37.2872C47.3602 37.2384 47.4135 37.1851 47.4534 37.1319C47.826 36.6972 48.0034 36.0673 48.2829 35.6104C48.0345 37.7219 47.1251 39.891 47.9236 41.9802C47.7151 42.1221 47.5155 42.5036 47.3203 42.8363C47.3203 42.8363 47.307 42.8674 47.2981 42.8807C47.3026 42.8762 47.3203 42.8629 47.3292 42.8585C47.3292 42.8585 47.8792 42.4681 47.9147 42.4415C47.9147 42.7387 47.9147 43.0315 47.9147 43.3198C47.8038 43.4129 47.6574 43.7811 47.6308 43.9231C47.6441 43.9142 47.9058 43.7323 47.9191 43.719C48.1587 45.6042 47.7994 50.071 50.1326 50.5767C49.9285 51.4905 50.1326 51.8897 50.8822 52.6393C51.0153 51.2421 51.8492 49.9025 54.4442 50.0134C54.2091 50.1819 53.8808 50.5767 54.0671 50.9493C54.2046 50.7852 55.2115 49.7029 55.7882 50.0843C57.8242 50.8429 60.7429 49.1085 61.3773 50.9493C61.5724 50.7497 61.8297 50.3061 61.3906 50.0134C62.7124 49.9956 64.5399 50.4259 64.4424 52.4486C65.7598 51.7921 66.1413 51.0513 65.9416 50.0134C67.503 49.9113 66.9441 44.9921 67.0772 43.719C67.157 43.7767 67.2813 43.8654 67.3655 43.9231C67.3345 43.7545 67.1925 43.4174 67.0816 43.3198C67.0816 43.027 67.0816 42.7387 67.0816 42.4415C67.1083 42.4593 67.5075 42.7476 67.5385 42.7653C67.5829 42.7964 67.6583 42.8496 67.6982 42.8807C67.5208 42.579 67.2946 42.1354 67.0728 41.9846C67.8801 39.7978 66.9574 37.7707 66.7135 35.6149C66.9929 36.0718 67.1704 36.6972 67.543 37.1363C67.5829 37.1896 67.6361 37.2428 67.6849 37.2916C67.5607 38.3784 67.3079 39.5893 67.543 40.6716C68.0132 43.4573 67.991 46.2962 68.4833 49.0907C68.4967 49.246 68.4967 49.4012 68.5011 49.5609L68.4922 49.5654Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M68.5013 49.6808C68.4924 49.8183 68.4835 49.9602 68.4702 50.0933C68.1597 52.5551 68.2041 55.1589 67.4766 57.5188C66.9975 58.468 66.3455 59.3552 65.7067 60.2201C65.6047 60.7613 65.3696 61.2714 65.0414 61.7105C64.6865 62.1763 64.2163 62.5755 63.7239 62.8683C63.2271 63.2542 63.3513 63.9861 63.134 64.5228C62.9876 65.0063 62.7569 65.4809 62.4597 65.8935C62.238 66.2173 61.9629 66.5056 61.6613 66.754C60.5657 67.6456 59.6075 67.8275 58.2369 67.65C56.9638 67.4726 55.5178 67.7565 54.3645 67.1532C54.187 67.0512 54.0274 66.9137 53.8677 66.7851C52.7942 65.8003 52.2353 64.3897 51.7962 63.0457C50.7893 63.6401 49.7823 60.8234 49.6759 60.7347C46.9745 61.7017 46.5309 52.147 46.389 50.3062C46.4023 50.0401 46.4333 49.7473 46.4511 49.4856C46.9567 46.3273 47.0144 43.2001 47.5157 40.0197C47.6399 39.5362 47.3737 38.1212 47.3338 37.6199C47.6177 37.0255 47.906 36.5819 48.0479 36.1428C48.2076 36.9501 47.8483 37.7175 47.7241 38.5204C47.356 39.6204 47.6487 40.9334 47.906 41.9803C47.6975 42.1222 47.4979 42.5037 47.3027 42.8364C47.3027 42.8364 47.2894 42.8674 47.2806 42.8807C47.285 42.8763 47.3027 42.863 47.3116 42.8586C47.3116 42.8586 47.8616 42.4682 47.8971 42.4416C47.8971 42.7388 47.8971 43.0315 47.8971 43.3199C47.7862 43.413 47.6399 43.7812 47.6133 43.9231C47.6266 43.9143 47.8883 43.7324 47.9016 43.7191C47.9903 45.6664 48.0879 48.1371 48.9883 49.9025C48.1633 51.8587 48.1455 54.4847 49.0549 56.5739C49.5206 57.6252 50.0662 58.4902 50.7493 59.4217C50.9268 59.0713 50.7493 58.3261 50.8735 57.8426C54.5685 62.2783 59.4257 63.476 59.958 56.2723C61.1512 57.7095 62.3267 56.9199 62.8767 55.4384C64.203 56.3255 64.2341 52.2446 64.274 51.4728C64.3671 51.739 64.4248 52.0628 64.4248 52.4531C65.7422 51.7966 66.1237 51.0558 65.9241 50.0179C65.9241 50.0622 66.4697 49.8538 66.554 49.6763C66.6382 49.5654 66.6915 49.4279 66.7403 49.2993C66.9931 48.4299 67.0064 47.5028 67.0463 46.5979C67.0463 46.5979 67.0463 46.5979 67.0463 46.5935C67.0685 45.6664 67.0685 44.6639 67.0685 43.7324C67.1483 43.7901 67.2726 43.8788 67.3524 43.9364C67.3169 43.7634 67.1883 43.4396 67.0729 43.3332C67.0729 43.0449 67.0729 42.7477 67.0729 42.4549C67.0907 42.4682 67.481 42.7477 67.4988 42.7565C67.552 42.7965 67.6363 42.8541 67.6895 42.894C67.6806 42.8807 67.6762 42.8674 67.6673 42.8586C67.6274 42.7831 67.5786 42.7122 67.5387 42.6368C67.3834 42.3662 67.2326 42.1178 67.0641 41.998C67.8536 39.8422 66.9709 37.8107 66.7048 35.6726C66.7048 35.6637 66.6959 35.5972 66.7225 35.6371C66.9221 36.023 67.0774 36.4622 67.3213 36.8392C67.379 36.9501 67.4633 37.061 67.5387 37.1586C67.5786 37.2118 67.6274 37.2651 67.6762 37.3094C67.6052 37.8861 67.4943 38.8264 67.4234 39.4075C67.4234 40.3169 67.6318 41.2218 67.7472 42.1133C67.898 43.0449 67.9867 43.9941 67.9645 44.97C67.9379 46.5802 68.5589 48.1016 68.4746 49.6985C68.4791 49.6985 68.4879 49.6896 68.4924 49.6852L68.5013 49.6808Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M68.4923 49.5653C68.3593 52.0405 68.031 54.4757 67.7205 56.9109C67.308 58.1263 66.4563 59.1776 65.7067 60.2156C65.5071 61.3423 64.6909 62.2915 63.7283 62.8593C63.3557 63.1254 63.3468 63.6267 63.2626 64.0303C63.1206 64.6957 62.8545 65.3344 62.4641 65.8889C62.2423 66.2083 61.9718 66.501 61.6657 66.7494C60.5789 67.6455 59.6075 67.8229 58.2457 67.6455C56.9726 67.468 55.5266 67.7519 54.3733 67.1487C54.1959 67.0466 54.0362 66.9224 53.8809 66.7849C57.7622 65.2723 60.7475 61.8524 61.404 57.7138C61.8209 59.7232 60.9249 61.95 60.3039 63.6355C62.3932 60.9608 64.6554 58.0908 64.9038 54.5733C65.4893 55.4249 65.0191 56.7779 65.2276 57.5231C66.2567 52.9542 67.2326 48.4386 67.0995 43.7101C67.1793 43.7633 67.3035 43.8565 67.3834 43.9141C67.339 43.7411 67.2193 43.4218 67.1039 43.3109C67.1039 43.0225 67.1039 42.7298 67.1039 42.4282C67.2237 42.5124 67.5697 42.7653 67.685 42.8451L67.7205 42.8717C67.6673 42.783 67.6185 42.6943 67.5653 42.6056C67.4144 42.3439 67.2592 42.091 67.0951 41.9757C67.8314 39.7844 66.9709 37.7706 66.7092 35.6193C66.9886 36.0761 67.166 36.7016 67.5386 37.1407C67.5786 37.194 67.6318 37.2472 67.6806 37.296C67.5564 38.3827 67.3035 39.5937 67.5386 40.676C68.0088 43.4617 67.9866 46.3006 68.479 49.0951C68.4923 49.2504 68.4923 49.4056 68.4968 49.5653H68.4923Z' fill='%23A05A07'/%3E%3Cpath d='M60.8098 64.6559C60.8009 64.3942 60.3928 64.3942 60.4017 64.6559C60.4239 65.2636 60.1444 65.8491 59.7275 66.2794C59.377 66.6431 58.8758 66.8117 58.4056 66.9803C58.9202 66.4613 59.2306 65.8802 59.244 65.1084C59.244 64.8466 58.8403 64.8466 58.8359 65.1084C58.8181 65.8669 58.4677 66.3859 57.9221 66.8782C57.7535 67.029 57.9398 67.2597 58.1217 67.2198C58.1084 67.3529 58.2104 67.4904 58.3701 67.4327C59 67.1976 59.6254 66.9891 60.1001 66.4923C60.557 66.0177 60.8408 65.3168 60.8187 64.6603H60.8142L60.8098 64.6559Z' fill='%23995A07'/%3E%3Cpath d='M57.2254 66.7141C56.5778 66.7451 55.9923 65.787 55.9657 65.2103C55.9523 64.9486 55.5443 64.9486 55.5576 65.2103C55.5842 65.8136 56.0233 66.6298 56.6222 66.9669C56.3871 66.8737 56.1386 66.8338 55.908 66.7141C55.5753 66.5411 55.3047 66.2927 55.0563 66.0132C54.5861 65.4853 54.1426 64.7091 54.249 63.9728C54.2889 63.7155 53.8941 63.6046 53.8542 63.8663C53.73 64.6913 54.1159 65.4676 54.6039 66.1064C54.8345 66.408 55.1051 66.6697 55.4156 66.8959C55.5797 67.0113 55.766 67.1177 55.9523 67.1887C56.1165 67.2508 56.3028 67.2685 56.458 67.3395C56.6798 67.4371 56.8705 67.1443 56.7109 67.0157C56.875 67.0911 57.0435 67.131 57.221 67.1221C57.4827 67.1088 57.4827 66.7007 57.221 66.7141H57.2254Z' fill='%23995A07'/%3E%3Cpath d='M58.6365 53.6551C58.5034 53.8192 58.0643 53.7527 57.8824 53.7394C57.6251 53.7261 57.3457 53.6995 57.1017 53.6019C56.8622 53.5087 56.7557 53.8947 56.9952 53.9878C57.3146 54.1164 57.7005 54.1342 58.0421 54.1475C58.3082 54.1564 58.7296 54.1652 58.9204 53.9346C59.0845 53.735 58.805 53.4511 58.6365 53.6507V53.6551Z' fill='%23995A07'/%3E%3Cpath d='M60.8053 51.8631C60.415 52.1115 59.7984 52.1337 59.3548 52.1869C58.8624 52.249 58.3612 52.2313 57.8688 52.2224C56.8397 52.2047 55.8106 52.1426 54.7948 51.9563C54.542 51.9075 54.4356 52.2934 54.6884 52.3422C55.8018 52.5507 56.9196 52.6083 58.0507 52.6261C58.5697 52.6349 59.0798 52.6261 59.5943 52.5551C60.0512 52.4886 60.6101 52.462 61.0094 52.2047C61.2267 52.0672 61.0271 51.7167 60.8053 51.8587V51.8631Z' fill='%23995A07'/%3E%3Cpath d='M61.4 67.6234V67.6323C61.2846 67.7743 61.1427 67.9118 60.9874 68.1202C60.9786 68.1336 60.9697 68.1424 60.9608 68.1557C60.8987 68.24 60.8366 68.3332 60.7745 68.4396C60.7923 68.4662 60.81 68.4929 60.8278 68.5195C60.8499 68.555 60.8721 68.5949 60.8943 68.6348C60.912 68.6658 60.9298 68.6969 60.9475 68.728C60.952 68.7324 60.9564 68.7368 60.9564 68.7457C60.9697 68.7767 60.9874 68.8078 61.0008 68.8388C61.0141 68.8699 61.0229 68.8965 61.0362 68.9231C61.0362 68.9276 61.0407 68.932 61.0451 68.9364C61.0584 68.9675 61.0717 68.9985 61.0806 69.0296V69.0385C61.0806 69.0385 61.0895 69.0384 61.0895 69.0473L61.1117 69.105C61.1117 69.105 61.1117 69.1094 61.1117 69.1139C61.1117 69.1139 61.1205 69.1405 61.125 69.1493V69.1671H61.1338V69.1804C61.1427 69.207 61.1516 69.2336 61.156 69.2558V69.2647L61.1826 69.3667C61.1915 69.4066 61.2004 69.4421 61.2092 69.482C61.2092 69.482 61.2137 69.5131 61.2181 69.5264L61.227 69.5885C61.227 69.5885 61.2359 69.6284 61.2359 69.6506L61.2447 69.7349V69.7437V69.7526C61.2447 69.7748 61.2492 69.8014 61.2536 69.8236C61.2536 69.8546 61.258 69.8901 61.2625 69.9212C61.2625 69.9433 61.2625 69.9611 61.2625 69.9833C61.2625 70.0188 61.2625 70.0542 61.2625 70.0897V70.1075C61.2625 70.1075 61.2625 70.1474 61.2625 70.1696C61.2625 70.7861 61.1028 71.4027 60.779 71.8995C61.3334 72.454 61.4798 73.6605 61.2004 74.4501C61.1871 74.49 61.1738 74.5255 61.156 74.561C61.1427 74.5965 61.125 74.6319 61.1072 74.663C61.0939 74.694 61.0762 74.7207 61.0628 74.7473C61.0407 74.7828 61.0185 74.8182 60.9963 74.8493C60.9786 74.8715 60.9653 74.8937 60.9475 74.9114C60.9298 74.9291 60.9165 74.9469 60.8987 74.9646C60.881 74.9824 60.8632 75.0001 60.8455 75.0134C60.8278 75.0267 60.8056 75.0445 60.7878 75.0578C60.7346 75.0977 60.6769 75.1288 60.6148 75.1509H60.6104C60.8588 76.0381 60.7657 76.8365 60.4995 77.493C60.4685 77.5684 60.4374 77.6438 60.4019 77.7192C60.3931 77.737 60.3842 77.7503 60.3798 77.768C60.3709 77.7858 60.362 77.7991 60.3531 77.8168C60.3354 77.8479 60.3221 77.8789 60.3043 77.91C60.3043 77.91 60.291 77.9366 60.2822 77.9499C60.2733 77.9676 60.26 77.9854 60.2511 78.0031C60.2289 78.0342 60.2156 78.0608 60.1979 78.0918C60.1624 78.1495 60.1225 78.2072 60.0826 78.2604C60.0426 78.3181 60.0027 78.3713 59.9628 78.4245C59.8918 78.5132 59.8208 78.5931 59.7454 78.6685C59.7366 78.6818 59.7233 78.6907 59.7144 78.704C59.6922 78.7306 59.6656 78.7483 59.639 78.775C59.6212 78.7927 59.6035 78.8104 59.5857 78.8282C59.5769 78.8371 59.5636 78.8504 59.5503 78.8592C59.5192 78.8903 59.4837 78.9169 59.4482 78.9435C59.4261 78.9657 59.4039 78.979 59.3817 78.9967C59.3728 79.0056 59.3595 79.0145 59.3507 79.0234C59.3373 79.0322 59.3285 79.0411 59.3152 79.05C59.3063 79.0544 59.3019 79.0588 59.293 79.0633L59.2841 79.0721C59.2619 79.0899 59.2353 79.1032 59.2131 79.1209L59.1821 79.1431C59.1821 79.1431 59.151 79.1653 59.1377 79.1697C59.12 79.1786 59.1067 79.1919 59.0845 79.2008C59.0756 79.2008 59.0668 79.2097 59.0623 79.2141C59.0535 79.2185 59.0446 79.223 59.0401 79.2274C59.0091 79.2451 58.9825 79.2584 58.9559 79.2718C58.9071 79.2939 58.8627 79.3161 58.8139 79.3339C58.7607 79.356 58.7075 79.3693 58.6542 79.3871C58.6232 79.396 58.5966 79.4004 58.57 79.4048H58.5611C58.5611 79.4048 58.5167 79.4137 58.4946 79.4137H58.4857C58.4857 79.4137 58.4768 79.4137 58.4679 79.4137C58.4502 79.4137 58.4324 79.4137 58.4147 79.4137C58.3703 79.4137 58.326 79.4137 58.2905 79.4048C58.2861 79.4048 58.2816 79.4048 58.2728 79.4048C58.2284 79.396 58.184 79.3871 58.1397 79.3826C58.0731 79.3738 58.0066 79.3738 57.9489 79.3826H57.9312C57.9312 79.3826 57.8913 79.3827 57.8735 79.3915C57.8558 79.3915 57.8381 79.3915 57.8203 79.4004C57.8159 79.4004 57.8114 79.4004 57.8026 79.4004C57.7937 79.4004 57.7893 79.4004 57.7804 79.4004C57.7582 79.4048 57.7316 79.4093 57.7094 79.4137H57.6828C57.6828 79.4137 57.6606 79.4226 57.6473 79.427C57.6163 79.4314 57.5852 79.4359 57.5542 79.4403H57.5497C57.5497 79.4403 57.5364 79.4403 57.5275 79.4403C57.5054 79.4403 57.4876 79.4447 57.4699 79.4447C57.4566 79.4447 57.4477 79.4447 57.4344 79.4447C57.4033 79.4447 57.3723 79.4448 57.3413 79.4359C57.3324 79.4359 57.3191 79.4359 57.3102 79.427C57.288 79.4226 57.2658 79.4181 57.2437 79.4048C57.2126 79.396 57.186 79.3827 57.1549 79.3649L57.1017 79.3339C57.0751 79.3161 57.0485 79.2984 57.0219 79.2762C56.9686 79.2363 56.911 79.183 56.8489 79.1209C56.7956 79.0677 56.7424 79.01 56.6892 78.9568C56.6892 78.9524 56.6803 78.9479 56.6759 78.9435C56.6626 78.9302 56.6493 78.9169 56.636 78.9036C56.6049 78.8637 56.5694 78.8326 56.5384 78.7927L56.5339 78.7838C56.4985 78.7483 56.4674 78.7084 56.4364 78.6729C56.3698 78.5931 56.3077 78.5177 56.2456 78.4378C56.2101 78.3935 56.1746 78.3447 56.1392 78.2959C56.0682 78.2027 56.0061 78.1051 55.944 78.0031C55.598 77.4531 55.354 76.8321 55.2298 76.047C55.221 76.007 55.2165 75.9627 55.2121 75.9183C55.2032 75.8651 55.1988 75.8163 55.1899 75.7675C55.1855 75.7098 55.181 75.6566 55.1722 75.6034C55.1722 75.5723 55.1633 75.5368 55.1633 75.5014C55.1633 75.4614 55.1544 75.426 55.1544 75.386C55.1544 75.3505 55.15 75.3106 55.1455 75.2707C55.1455 75.2707 55.1234 75.2308 55.1145 75.2086C55.1101 75.1997 55.1056 75.1864 55.0968 75.1775C55.0923 75.1687 55.0879 75.1554 55.079 75.1465C55.0613 75.1154 55.048 75.0888 55.0302 75.0578C55.0302 75.0489 55.0213 75.0445 55.0213 75.0356C55.0125 75.0223 55.008 75.009 54.9992 74.9957C54.9859 74.9735 54.9725 74.9513 54.9637 74.9247C54.9548 74.9158 54.9504 74.8981 54.9415 74.8848C54.9326 74.8715 54.9282 74.8537 54.9193 74.8449C54.906 74.8183 54.8927 74.7916 54.8794 74.7606C54.8705 74.734 54.8572 74.7029 54.8439 74.6719C54.8217 74.6275 54.8084 74.5787 54.7907 74.5299C54.7907 74.5211 54.7818 74.5077 54.7818 74.4989C54.7818 74.4944 54.7818 74.49 54.7774 74.4811C54.7596 74.4235 54.7419 74.3658 54.7286 74.3037C54.7286 74.2948 54.7242 74.2815 54.7197 74.2727C54.7064 74.1972 54.6931 74.1218 54.6842 74.042V74.0331C54.6842 73.9976 54.6754 73.9621 54.6754 73.9222C54.6754 73.8823 54.6754 73.8379 54.6754 73.798V73.767C54.6754 73.4254 54.7596 73.0395 54.9726 72.5959C54.9859 72.5649 54.9992 72.5383 55.0125 72.5117C55.0258 72.4806 55.0435 72.454 55.0568 72.4274C55.0701 72.3963 55.0879 72.3697 55.1056 72.3387C55.1234 72.3076 55.1411 72.281 55.1589 72.2499C55.1411 72.21 55.1234 72.1701 55.1056 72.1346C55.1056 72.1257 55.0968 72.1169 55.0968 72.108C55.0746 72.0548 55.0524 72.006 55.0302 71.9527C55.0258 71.9394 55.0213 71.9261 55.0169 71.9128C55.008 71.8906 54.9992 71.8685 54.9903 71.8463V71.8285C54.9681 71.7842 54.9548 71.7443 54.9415 71.7043C54.9238 71.66 54.9104 71.6112 54.8971 71.5624C54.8883 71.5402 54.8794 71.5136 54.875 71.4914C54.875 71.4781 54.8661 71.4692 54.8661 71.4559L54.8439 71.3805C54.835 71.3495 54.8262 71.3229 54.8217 71.2963C54.8217 71.2918 54.8217 71.2874 54.8217 71.2829C54.8129 71.2563 54.8129 71.2297 54.804 71.2075C54.7996 71.1854 54.7907 71.1587 54.7862 71.1366C54.6487 70.5244 54.631 69.8946 54.7996 69.349V69.3401C54.8306 69.2336 54.8705 69.1316 54.9193 69.034V69.0251C54.9193 69.0251 54.9238 69.0251 54.9238 69.0207C54.9238 69.0118 54.9282 69.0074 54.9326 68.9985C54.9326 68.9985 54.9371 68.9852 54.9415 68.9764C54.9592 68.9364 54.9814 68.8965 54.9992 68.861C54.9859 68.8255 54.9726 68.7901 54.9592 68.7546C54.8883 68.5594 54.8439 68.3997 54.8217 68.2622C54.804 68.1735 54.7996 68.0892 54.7996 68.0049V67.996C54.7996 67.9384 54.7996 67.8807 54.8129 67.8231C54.8173 67.761 54.8306 67.6989 54.8439 67.6368V67.6279H61.4V67.6234Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M59.9621 71.4825C59.9621 71.4825 59.9266 71.4958 59.9133 71.5002C59.8113 71.7442 59.6915 71.9881 59.5629 72.2232C59.554 72.2587 59.5319 72.2853 59.5141 72.3164C59.5097 72.3297 59.5052 72.3474 59.4964 72.3563C59.5097 72.3519 59.523 72.3386 59.5319 72.3208C59.5452 72.312 59.5629 72.2942 59.5762 72.2809C59.6117 72.2499 59.6383 72.2232 59.6694 72.1922H59.6738L59.6827 72.1789H59.6871C59.8113 71.9394 59.9266 71.6954 60.0242 71.4514C59.9976 71.4647 59.9799 71.478 59.9621 71.4825ZM58.5604 74.2016C58.5338 74.0641 58.5693 73.9266 58.6403 73.7979C58.5427 73.9221 58.4451 74.0419 58.3386 74.1617C58.312 74.1794 58.2943 74.2016 58.281 74.2193C58.281 74.2193 58.2987 74.2282 58.312 74.2282C58.4096 74.2593 58.5072 74.2814 58.6048 74.308C58.6004 74.308 58.6003 74.3036 58.6003 74.3036C58.587 74.2726 58.5693 74.2415 58.5604 74.2016ZM61.3372 73.1991C61.3328 73.0882 61.3195 72.9729 61.2884 72.862C61.2086 72.5382 61.0799 72.2543 60.9114 72.0236C60.8759 71.9837 60.8404 71.9482 60.8049 71.9127C60.8892 71.7885 60.9557 71.651 61.0178 71.518C61.0444 71.447 61.0711 71.3804 61.0977 71.3095C61.1154 71.2385 61.142 71.1631 61.1687 71.0966C61.213 70.9457 61.2441 70.7949 61.2574 70.6441C61.2884 70.4933 61.2973 70.3425 61.2973 70.1828H61.2884V69.992C61.2884 69.992 61.284 69.9477 61.284 69.9344C61.2751 69.9033 61.2751 69.8634 61.2751 69.8368C61.2751 69.8102 61.2707 69.7924 61.2707 69.7658C61.2707 69.7614 61.2662 69.7614 61.2662 69.7614C61.2662 69.7614 61.2662 69.7525 61.2618 69.7525V69.7215C61.2618 69.7215 61.2618 69.7082 61.2574 69.6949V69.6549C61.2574 69.6549 61.2485 69.6106 61.2485 69.5973C61.2441 69.584 61.2441 69.5706 61.2396 69.5618C61.2352 69.5529 61.2352 69.544 61.2352 69.5352C61.2352 69.5219 61.2263 69.4997 61.2263 69.4952V69.4864C61.2263 69.4864 61.2174 69.4509 61.213 69.4331L61.1997 69.3755C61.1997 69.3755 61.1953 69.3577 61.1953 69.3444C61.1953 69.3444 61.1908 69.3267 61.1908 69.3178C61.1864 69.3045 61.182 69.2823 61.182 69.269H61.1731V69.2601C61.1731 69.2601 61.1687 69.2335 61.1642 69.2202C61.1598 69.2069 61.1553 69.1936 61.1509 69.1847V69.1759C61.1509 69.1759 61.1553 69.1759 61.1509 69.1714C61.1509 69.167 61.1509 69.1581 61.1465 69.1537C61.1376 69.1404 61.1376 69.1359 61.1332 69.1182V69.1093C61.1243 69.0827 61.1199 69.0694 61.1066 69.0517C61.1066 69.0517 61.0977 69.0206 61.0977 69.0117C61.0932 69.0073 61.0932 68.9984 61.0888 68.994C61.0844 68.9851 61.0844 68.9763 61.0799 68.9674L61.0666 68.9363L61.0533 68.892C61.0533 68.892 61.0444 68.8654 61.0356 68.8521C61.0356 68.8476 61.0312 68.8432 61.0312 68.8388H61.0267C61.0267 68.8388 61.0178 68.8121 61.0134 68.8033C61.0134 68.8033 61.0104 68.8003 61.0045 68.7944C61.0045 68.7944 61.009 68.7944 61.0045 68.79C61.0045 68.7855 61.0001 68.7766 61.0001 68.7722C60.9957 68.7678 60.9957 68.7589 60.9912 68.7545H60.9868C60.9868 68.7545 60.9868 68.7367 60.9779 68.7279L60.9336 68.6347C60.9336 68.6347 60.9247 68.6214 60.9158 68.6037C60.9069 68.5859 60.8892 68.5637 60.8803 68.5504V68.5416H60.8759L60.8626 68.5238H60.8582C60.8448 68.4972 60.8271 68.4706 60.8138 68.444C60.8315 68.4085 60.8537 68.373 60.8759 68.3464C60.8848 68.3286 60.9025 68.3065 60.9114 68.2887C60.9202 68.2798 60.9291 68.2621 60.938 68.2532C60.9424 68.2488 60.9469 68.2399 60.9469 68.2355C60.9557 68.2266 60.9602 68.2177 60.9735 68.2C60.9824 68.1867 60.9868 68.1689 61.0001 68.1556H61.0045C61.0045 68.1556 61.0223 68.129 61.0312 68.1202H61.04V68.1113C61.04 68.1113 61.0533 68.0935 61.0578 68.0847C61.0666 68.0714 61.0755 68.0581 61.0844 68.0492C61.0932 68.0447 61.0977 68.0403 61.1021 68.0359C61.1021 68.0359 61.1036 68.0329 61.1066 68.027H61.111C61.111 68.027 61.111 68.0226 61.1154 68.0181C61.1199 68.0137 61.1243 68.0093 61.1243 68.0004H61.1287C61.1287 68.0004 61.1376 67.9871 61.1376 67.9738H61.1465C61.1465 67.9738 61.1775 67.9383 61.1908 67.9205C61.2086 67.8939 61.2308 67.8718 61.2485 67.8496C61.284 67.8097 61.3195 67.7697 61.3461 67.7387C61.3816 67.7032 61.4037 67.6677 61.4348 67.6367H54.8787C54.861 67.7076 54.8521 67.7653 54.8433 67.823C54.8433 67.854 54.8433 67.8851 54.8388 67.9161V68.0891C54.8388 68.0891 54.8388 68.1202 54.8433 68.129C54.8388 68.1379 54.8433 68.1468 54.8433 68.1601C54.8433 68.1956 54.8433 68.2133 54.8521 68.2444C54.8521 68.2444 54.8521 68.2532 54.8566 68.2577V68.2665L54.8654 68.3242V68.3331C54.8743 68.3597 54.8743 68.3774 54.8787 68.404C54.8876 68.4174 54.8876 68.4218 54.8876 68.444C54.8876 68.444 54.8876 68.4484 54.892 68.4573C54.9009 68.475 54.9054 68.5061 54.9187 68.5327C54.9187 68.5416 54.9231 68.5504 54.9275 68.5593C54.932 68.577 54.9364 68.5992 54.9453 68.617C54.9586 68.6613 54.9763 68.7101 54.9896 68.7545C54.9896 68.7545 54.9896 68.7855 54.9985 68.7855C55.0029 68.8121 55.0074 68.8299 55.0251 68.8565C55.0251 68.8609 55.0251 68.8654 55.0296 68.8698C55.0207 68.8831 55.0163 68.8875 55.0118 68.8964C55.0118 68.9008 55.0074 68.9009 55.0074 68.9009C55.0029 68.9053 55.0029 68.9142 55.0029 68.9186C55.0029 68.923 54.9985 68.923 54.9941 68.9275C54.9941 68.9363 54.9896 68.9452 54.9852 68.9541C54.9852 68.963 54.9808 68.963 54.9808 68.9674V68.9763C54.9808 68.9763 54.9763 68.9763 54.9763 68.9807L54.9675 68.9896C54.9675 68.9896 54.963 69.0073 54.9542 69.0206V69.0295H54.9453V69.0428C54.9453 69.0428 54.9408 69.0517 54.9408 69.0605C54.9364 69.065 54.932 69.0694 54.932 69.0738C54.932 69.0738 54.9305 69.0783 54.9275 69.0872C54.9275 69.0872 54.9142 69.1226 54.9009 69.1359C54.8965 69.167 54.8832 69.1892 54.8699 69.2202H54.8654C54.8654 69.2202 54.8566 69.2557 54.8477 69.2779C54.8433 69.2912 54.8344 69.3178 54.8344 69.3311C54.8344 69.3311 54.8344 69.3356 54.83 69.3356C54.9497 69.3444 55.0872 69.3622 55.207 69.3755H55.278C55.6683 69.4331 56.0542 69.5307 56.3692 69.7303C56.4224 69.7614 56.4712 69.7924 56.52 69.8324H56.5244C56.5244 69.8324 56.5288 69.8412 56.5333 69.8457C56.5688 69.8634 56.5954 69.89 56.6309 69.9255H56.6353V69.9388C56.6664 69.9521 56.6797 69.9699 56.693 69.9832C57.0656 70.378 57.1365 70.7328 57.0168 71.0167C56.968 71.1365 56.8793 71.2341 56.7728 71.3183C56.4534 71.5579 55.9167 71.6288 55.3889 71.4115C55.207 71.3361 55.0118 71.2429 54.8166 71.132C54.8166 71.1409 54.8166 71.1498 54.8211 71.1675C54.8255 71.1808 54.8255 71.1986 54.83 71.2119C54.8344 71.2208 54.8388 71.2296 54.8388 71.2474C54.8388 71.2562 54.8388 71.2651 54.8433 71.2829V71.2962C54.8433 71.2962 54.8477 71.3095 54.8521 71.3139C54.8521 71.3228 54.8566 71.3317 54.8566 71.3405C54.861 71.345 54.8654 71.3538 54.8654 71.3671C54.8654 71.3716 54.8699 71.376 54.8743 71.3849C54.8743 71.3937 54.8787 71.4115 54.8876 71.4248C54.8876 71.4337 54.8876 71.4425 54.892 71.4559V71.4647C54.892 71.4647 54.9009 71.4825 54.9009 71.4958C54.9009 71.5091 54.9054 71.5224 54.9098 71.5357C54.9142 71.5446 54.9187 71.5623 54.9187 71.5712C54.932 71.62 54.9542 71.6643 54.9675 71.7087C54.9808 71.7486 54.9985 71.793 55.0118 71.8329V71.8595C55.0118 71.8595 55.0384 71.9039 55.0429 71.9216C55.0517 71.9305 55.0562 71.9482 55.0562 71.9615C55.0651 71.9704 55.065 71.9748 55.0695 71.9881C55.0828 72.0192 55.0961 72.0458 55.1094 72.0769V72.0857C55.1094 72.0857 55.1183 72.1123 55.1227 72.1168C55.1227 72.1257 55.1316 72.1434 55.1316 72.1478C55.1493 72.1878 55.1671 72.2277 55.1804 72.2676C55.1804 72.272 55.1759 72.2809 55.1715 72.2942C55.1671 72.3075 55.1582 72.3208 55.1449 72.3341H55.1404V72.343C55.1404 72.343 55.136 72.3519 55.1316 72.3563C55.1183 72.3874 55.0961 72.414 55.0828 72.4406C55.0695 72.4716 55.0517 72.4983 55.0384 72.5337C55.0384 72.5382 55.034 72.5382 55.034 72.5426C55.0207 72.5692 55.0074 72.587 54.9985 72.6136C55.0517 72.618 55.0961 72.618 55.1449 72.6225C55.5752 72.6535 56.1208 72.7467 56.4401 73.0793C56.4401 73.0838 56.449 73.0838 56.449 73.0838C56.4623 73.1104 56.4668 73.1193 56.4845 73.1326C56.6309 73.3144 56.653 73.5495 56.5688 73.7624V73.7713C56.5377 73.86 56.4934 73.9399 56.4357 74.002L56.4268 74.0108C56.3736 74.0685 56.3204 74.1084 56.245 74.1484C56.1474 74.1927 56.0498 74.2193 55.9389 74.2238H55.93C55.93 74.2238 55.9167 74.2326 55.9123 74.2326H55.9078C55.5752 74.2593 55.2203 74.1262 54.9497 73.9576C54.9408 73.9576 54.9408 73.9532 54.932 73.9532C54.9275 73.9532 54.9275 73.9443 54.9275 73.9443C54.9187 73.9399 54.9098 73.9354 54.8965 73.9266C54.8255 73.8866 54.7634 73.8379 54.7057 73.7891V74.0064C54.7057 74.0064 54.7102 74.0242 54.7102 74.033C54.7102 74.0419 54.7146 74.0463 54.7146 74.0596V74.0685C54.7146 74.0685 54.7191 74.0863 54.7191 74.0951V74.1484C54.7279 74.1794 54.7324 74.2105 54.7324 74.2415C54.7324 74.2415 54.7338 74.2445 54.7368 74.2504C54.7368 74.2504 54.7412 74.2637 54.7412 74.2681C54.7457 74.277 54.7457 74.2814 54.7457 74.2947C54.7457 74.2947 54.7545 74.3258 54.7545 74.3302V74.3568C54.7545 74.3568 54.759 74.3657 54.759 74.3701C54.759 74.3968 54.7679 74.4145 54.7767 74.4322C54.7812 74.45 54.79 74.4766 54.7945 74.4944V74.5121C54.7945 74.5121 54.7989 74.5121 54.7989 74.5165C54.7989 74.5165 54.8033 74.521 54.8033 74.5254C54.8078 74.5254 54.8078 74.5343 54.8078 74.5387C54.8078 74.5431 54.8122 74.5476 54.8166 74.552C54.83 74.5964 54.8477 74.6496 54.8699 74.694C54.8743 74.6984 54.8743 74.7028 54.8743 74.7073C54.8743 74.7073 54.8787 74.7161 54.8832 74.7206C54.8832 74.725 54.8876 74.7339 54.892 74.7516C54.8965 74.7605 54.9009 74.7782 54.9009 74.7871C54.9142 74.8182 54.9275 74.8403 54.9408 74.8714C54.9453 74.8758 54.9497 74.8803 54.9497 74.8847C54.9541 74.8936 54.9586 74.9024 54.963 74.9024C54.9675 74.9113 54.9675 74.9202 54.9675 74.9291C54.9675 74.9379 54.9719 74.9424 54.9763 74.9424C54.9896 74.9734 54.9941 74.9956 55.0162 75.0222C55.0207 75.0266 55.0296 75.0399 55.034 75.0577C55.034 75.0666 55.0429 75.0666 55.0429 75.0843C55.0473 75.0843 55.0473 75.0932 55.0473 75.0976L55.0606 75.1109C55.0606 75.1109 55.065 75.1198 55.0695 75.1242C55.0739 75.1375 55.0828 75.1508 55.0961 75.1641C55.0961 75.1686 55.0961 75.173 55.1005 75.1775C55.1005 75.1863 55.105 75.1863 55.1094 75.1908C55.1094 75.1908 55.1109 75.1952 55.1138 75.2041C55.1138 75.2041 55.1227 75.2129 55.1227 75.2174C55.136 75.244 55.1405 75.2573 55.1538 75.2795C55.1538 75.2795 55.1582 75.3238 55.1582 75.3371C55.1582 75.346 55.1582 75.3549 55.1626 75.3682C55.1671 75.3771 55.1671 75.3859 55.1671 75.3948C55.1671 75.4259 55.1671 75.4658 55.1759 75.5013V75.5146C55.1759 75.5456 55.1804 75.5855 55.1804 75.6122C55.1804 75.621 55.1804 75.6299 55.1848 75.6476C55.1848 75.6565 55.1848 75.6743 55.1892 75.6831C55.1892 75.7142 55.1937 75.7408 55.1937 75.7718V75.7852C55.2026 75.8162 55.2026 75.8384 55.207 75.8694C55.207 75.896 55.207 75.9094 55.2159 75.9227C55.2159 75.9626 55.2203 76.0069 55.2292 76.0469V76.0602C55.2558 76.0469 55.2735 76.0291 55.3046 76.0202C55.5707 75.9182 55.8502 75.896 56.0897 76.0025H56.0941C56.0941 76.0025 56.0986 76.0025 56.103 76.0069C56.1208 76.0114 56.1429 76.0203 56.1607 76.038H56.1651C56.3159 76.109 56.4446 76.2332 56.5244 76.4195C56.7595 76.9118 56.7595 77.8611 56.0941 77.9942C56.0498 78.0075 56.001 78.0075 55.9478 78.0119H55.9433C55.9744 78.0563 56.0054 78.1095 56.0409 78.1583C56.072 78.2071 56.103 78.2559 56.1385 78.3002C56.1784 78.3535 56.2095 78.3978 56.245 78.4422C56.276 78.4821 56.3026 78.522 56.3381 78.5619C56.3692 78.6019 56.4002 78.6418 56.4357 78.6817C56.4712 78.7261 56.4934 78.7615 56.5333 78.7926V78.8015C56.5333 78.8015 56.5732 78.837 56.5865 78.8547C56.5998 78.8724 56.6176 78.8902 56.6309 78.9079L56.6708 78.9479C56.6708 78.9479 56.6841 78.9567 56.6841 78.9656C56.7373 79.0188 56.7817 79.0676 56.8394 79.1297C56.8394 79.1297 56.8748 79.1652 56.8881 79.1785C56.9014 79.1918 56.9192 79.2096 56.9325 79.2184C56.9635 79.2495 56.9857 79.2628 57.0168 79.2894C57.0212 79.2938 57.0212 79.2983 57.0256 79.2983C57.039 79.3116 57.0567 79.3249 57.0656 79.3293C57.0656 79.3293 57.0685 79.3308 57.0744 79.3338C57.0744 79.3338 57.0833 79.3426 57.0878 79.3426C57.0878 79.3426 57.0922 79.3471 57.0922 79.3515C57.1011 79.3559 57.1099 79.3559 57.1277 79.3693C57.1277 79.3693 57.1321 79.3693 57.141 79.3737C57.1499 79.3826 57.1543 79.3826 57.1676 79.3826C57.172 79.3914 57.1809 79.3959 57.1853 79.3959C57.1898 79.4003 57.1942 79.4003 57.1986 79.4003C57.2075 79.4092 57.2164 79.4092 57.2341 79.4092C57.2341 79.4136 57.243 79.418 57.2474 79.418C57.2519 79.4225 57.2563 79.4225 57.2608 79.4225C57.2741 79.4225 57.2785 79.4314 57.2962 79.4314C57.3051 79.4314 57.314 79.4358 57.3317 79.4358C57.3628 79.4447 57.3894 79.4447 57.4204 79.4447H57.4293C57.4293 79.4447 57.447 79.4447 57.4604 79.4358H57.5579C57.5846 79.4225 57.5979 79.4225 57.6156 79.4225H57.6555L57.6644 79.4092H57.6954C57.6954 79.4092 57.7398 79.3959 57.7709 79.3959H57.7797C57.7797 79.3959 57.7842 79.3959 57.7886 79.3914H57.793C57.793 79.3914 57.793 79.3914 57.7975 79.3914L57.8596 79.3826C57.8596 79.3826 57.8773 79.3826 57.8906 79.3781C57.8995 79.3826 57.9084 79.3781 57.9172 79.3737H58.0237C58.0547 79.3737 58.0858 79.3737 58.1169 79.3826C58.1346 79.3826 58.1523 79.3826 58.1656 79.387H58.1834C58.21 79.3914 58.2322 79.3914 58.2544 79.3959C58.2544 79.3959 58.2632 79.4047 58.2677 79.4047C58.2765 79.4047 58.281 79.4092 58.2943 79.4092H58.5161C58.5161 79.4092 58.5338 79.4047 58.5471 79.4047H58.556V79.3959C58.587 79.3959 58.6137 79.3914 58.6447 79.3826C58.6536 79.3826 58.6713 79.3737 58.6846 79.3737L58.729 79.3604C58.7556 79.3559 58.7733 79.3426 58.8088 79.3293C58.8443 79.316 58.8975 79.2894 58.9419 79.2717C58.9774 79.2628 58.9951 79.2451 59.0262 79.2273C59.035 79.2273 59.0395 79.2273 59.0617 79.2184C59.0617 79.2096 59.075 79.2096 59.0794 79.2051C59.0927 79.1963 59.1105 79.1785 59.1238 79.1741C59.1415 79.1652 59.1593 79.1608 59.1726 79.1475C59.1859 79.143 59.1903 79.1342 59.208 79.1208C59.2125 79.1164 59.2169 79.1164 59.2258 79.112C59.2302 79.1075 59.2391 79.1031 59.2435 79.1031L59.2568 79.0898C59.2568 79.0898 59.2657 79.0809 59.2702 79.0765C59.2702 79.0765 59.2746 79.0735 59.2835 79.0676C59.2835 79.0676 59.3012 79.0632 59.3101 79.0543C59.3189 79.0454 59.3367 79.0277 59.3411 79.0277C59.3544 79.0144 59.3677 79.01 59.381 78.9966C59.4077 78.9833 59.4254 78.9656 59.452 78.9434C59.4653 78.9301 59.4964 78.9124 59.5097 78.8946C59.523 78.8858 59.5407 78.868 59.5496 78.8591C59.5585 78.8547 59.5762 78.8414 59.5806 78.8281H59.5851C59.6294 78.7882 59.6649 78.7571 59.7093 78.7172V78.7083H59.7182C59.7182 78.7083 59.7315 78.6906 59.7492 78.6728L59.7803 78.6418L59.7891 78.6329C59.8157 78.6063 59.8291 78.5886 59.8468 78.5753L59.8601 78.5575C59.8601 78.5575 59.8956 78.5132 59.9089 78.4998C59.9222 78.4821 59.9444 78.4555 59.9666 78.4244C59.9799 78.4111 59.9976 78.3845 60.0109 78.3623C60.0375 78.3313 60.0597 78.3047 60.0819 78.2736C60.0908 78.2603 60.0952 78.247 60.1129 78.2337C60.1129 78.2293 60.1218 78.2071 60.1263 78.2026C60.1307 78.1982 60.1351 78.1982 60.1351 78.1938C60.1351 78.1938 60.1396 78.1893 60.144 78.1893C60.1529 78.176 60.1617 78.1583 60.175 78.1405L60.2061 78.0962C60.2061 78.0962 60.2194 78.0651 60.2371 78.0474C60.2416 78.0385 60.2505 78.0297 60.2638 78.0119C60.2638 78.0075 60.2682 77.9986 60.2726 77.9853C60.2726 77.9853 60.2726 77.9809 60.2771 77.9764C60.2815 77.972 60.2859 77.9631 60.2904 77.9587C60.2948 77.9542 60.2948 77.9454 60.3037 77.9276C60.317 77.8877 60.3436 77.8567 60.3569 77.83C60.3613 77.8034 60.3702 77.799 60.3747 77.7857C60.3747 77.7768 60.3835 77.7768 60.3835 77.7724C60.3835 77.7679 60.3835 77.7679 60.388 77.7679C60.388 77.7679 60.3894 77.7665 60.3924 77.7635H60.3968V77.7502H60.4013C60.4013 77.7502 60.4013 77.7413 60.4057 77.7369C60.4057 77.7236 60.4101 77.7103 60.419 77.697C60.419 77.697 60.4205 77.694 60.4234 77.6881C60.4234 77.6881 60.4367 77.657 60.4501 77.6393C60.4634 77.6083 60.4811 77.5639 60.4944 77.5328V77.5195C60.4944 77.5195 60.5033 77.5107 60.5033 77.5062C60.5077 77.5018 60.5077 77.4974 60.5077 77.4929C60.5122 77.4885 60.5166 77.484 60.5166 77.4752C60.521 77.4707 60.521 77.4663 60.521 77.4574C60.5255 77.4486 60.5299 77.4441 60.5299 77.4397C60.5299 77.4308 60.5343 77.4219 60.5388 77.4131V77.3998L60.5521 77.3732C60.5521 77.3732 60.5654 77.3421 60.5698 77.3288C60.5698 77.3199 60.5743 77.3111 60.5743 77.2977C60.5787 77.2889 60.5831 77.28 60.5831 77.2711C60.5964 77.2268 60.6186 77.1824 60.6231 77.1336C60.6319 77.0981 60.6497 77.0627 60.6497 77.036L60.6541 77.0183C60.663 77.005 60.663 76.9828 60.663 76.9695C60.6674 76.9562 60.6763 76.934 60.6763 76.9207V76.8941C60.6763 76.8941 60.6807 76.8808 60.6807 76.8764C60.6896 76.8276 60.6985 76.7832 60.7073 76.7344C60.7073 76.7211 60.7162 76.7034 60.7162 76.6901C60.7206 76.6501 60.7206 76.6368 60.7206 76.6058C60.7206 76.6058 60.7295 76.5747 60.7251 76.5659C60.7295 76.5614 60.7295 76.557 60.7295 76.5525C60.7339 76.5392 60.7339 76.5348 60.7339 76.5171C60.7339 76.4816 60.7339 76.4638 60.7428 76.4328V76.0336C60.7428 76.0336 60.7428 75.9892 60.7339 75.9626C60.7384 75.9582 60.7339 75.9537 60.7339 75.9493V75.865C60.7295 75.8251 60.7206 75.7896 60.7206 75.7408C60.7162 75.7231 60.7162 75.7053 60.7118 75.6876C60.7029 75.6122 60.6852 75.5368 60.6763 75.4613C60.6763 75.4569 60.6674 75.448 60.6674 75.4436V75.4303C60.663 75.3815 60.6497 75.3504 60.6364 75.3061C60.6364 75.3061 60.6364 75.2972 60.6319 75.2928C60.6231 75.2617 60.6186 75.2307 60.6053 75.1908H60.5964V75.1819H60.6053C60.6053 75.1819 60.6142 75.1775 60.6186 75.173C60.6186 75.1686 60.6231 75.1686 60.6275 75.1641C60.6275 75.1641 60.6319 75.1627 60.6408 75.1597H60.6452C60.6452 75.1597 60.6718 75.1508 60.6851 75.1464C60.7162 75.1331 60.7428 75.1065 60.7694 75.0932C60.796 75.0799 60.8094 75.0621 60.8271 75.0488H60.8315C60.8315 75.0488 60.867 75.0178 60.8803 75C60.8803 75 60.8833 74.9985 60.8892 74.9956C60.8892 74.9956 60.8981 74.9823 60.9025 74.9778C60.9025 74.9778 60.9158 74.9601 60.9203 74.9512C60.938 74.9379 60.9469 74.9246 60.9557 74.9113H60.9602V74.9024C60.9602 74.9024 60.969 74.898 60.9735 74.8891C61.0001 74.8581 61.0223 74.8182 61.0445 74.7871V74.7782L61.0578 74.7472C61.0578 74.7472 61.0844 74.7161 61.0888 74.7028C61.1065 74.6673 61.1243 74.6407 61.1376 74.6052L61.182 74.4855C61.2086 74.4145 61.2263 74.3524 61.2396 74.2859C61.2485 74.2415 61.2574 74.1971 61.2707 74.1484C61.2751 74.1217 61.2796 74.0996 61.2796 74.0685C61.2884 74.0197 61.2973 73.9709 61.2973 73.9266C61.3017 73.9088 61.3062 73.8866 61.3062 73.8689C61.3062 73.8512 61.3106 73.829 61.3062 73.8112V73.8024C61.315 73.7403 61.315 73.6693 61.315 73.6116C61.315 73.5362 61.315 73.4564 61.3062 73.3765C61.3062 73.3277 61.3062 73.2789 61.2973 73.2346L61.3372 73.1991ZM60.2992 74.2859L60.2904 74.2947C60.1706 74.3968 60.0331 74.481 59.8867 74.5343C59.8379 74.5476 59.7891 74.5653 59.7403 74.5875H59.6915C59.2347 74.6984 58.76 74.5919 58.6048 74.308C58.6004 74.308 58.6003 74.3036 58.6003 74.3036C58.587 74.2726 58.5693 74.2415 58.5604 74.2016C58.5338 74.0641 58.5693 73.9266 58.6403 73.7979C58.6403 73.7935 58.6447 73.7891 58.6491 73.7846C58.7024 73.6782 58.7822 73.585 58.8576 73.5096H58.8621C58.8621 73.5096 58.8665 73.5007 58.8709 73.5007C59.1548 73.2302 59.8424 72.8043 60.246 72.9374C60.3037 72.9551 60.3702 72.9862 60.4234 73.0261H60.4279C60.4279 73.0261 60.4412 73.035 60.4545 73.0394C60.6053 73.1503 60.694 73.3189 60.6763 73.5274C60.6585 73.7137 60.6053 73.8733 60.5255 74.0108C60.4678 74.1173 60.3924 74.2105 60.3037 74.2903L60.2992 74.2859ZM60.8936 70.378V70.4179C60.9114 70.5554 60.8581 70.6929 60.7872 70.8127C60.7339 70.9058 60.663 70.9812 60.5964 71.0433L60.5831 71.0566V71.0699C60.3968 71.2429 60.2061 71.376 60.0287 71.4514C60.002 71.4647 59.9843 71.478 59.9666 71.4825C59.9532 71.4913 59.9311 71.4958 59.9178 71.5002C59.5807 71.6377 59.2746 71.6067 59.1105 71.4425C59.1105 71.4425 59.109 71.4396 59.106 71.4337C58.9596 71.2829 58.9375 71.0256 59.1016 70.6707C59.1016 70.6663 59.106 70.6618 59.106 70.6574C59.4121 69.9699 59.9 69.8235 60.2948 69.9033C60.3037 69.9033 60.3126 69.9078 60.3214 69.9078C60.3658 69.9166 60.4057 69.9344 60.4501 69.9433C60.4634 69.9477 60.4767 69.9521 60.49 69.961C60.5077 69.9654 60.5255 69.9699 60.5388 69.9787C60.6763 70.0497 60.7827 70.1429 60.8493 70.2449C60.8537 70.2715 60.867 70.2848 60.8803 70.3025C60.8848 70.3114 60.8848 70.3159 60.8848 70.3292C60.8848 70.3292 60.9025 70.3602 60.9025 70.3735L60.8936 70.378ZM59.798 77.7103C59.727 77.7546 59.6605 77.799 59.5762 77.8389H59.5718C59.5718 77.8389 59.5452 77.8522 59.5319 77.8655C59.3234 77.9542 59.075 78.003 58.8532 77.9099C58.6669 77.8212 58.5471 77.5994 58.5471 77.3953C58.5471 76.934 59.0351 76.2997 59.6294 76.211H59.6339C59.6605 76.2066 59.6782 76.2065 59.7048 76.2065C59.7359 76.2021 59.7581 76.2021 59.7891 76.2021H59.8379C60.1085 76.2154 60.2992 76.4328 60.3125 76.6989C60.3214 76.8675 60.2948 77.0227 60.2327 77.1647C60.1484 77.3865 59.9976 77.5772 59.7936 77.7147L59.798 77.7103Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M60.8896 68.2489C60.8497 68.3066 60.8098 68.3687 60.7699 68.4396C60.7876 68.4662 60.8054 68.4929 60.8187 68.515C60.8408 68.5505 60.863 68.5904 60.8852 68.6304C60.9029 68.6614 60.9207 68.6925 60.9384 68.7235C60.9429 68.7279 60.9473 68.7324 60.9473 68.7413C60.9606 68.7723 60.9783 68.8034 60.9916 68.8344C61.005 68.8655 61.0227 68.9009 61.0316 68.932C61.0493 68.9675 61.0626 69.003 61.0715 69.0385C61.0715 69.0385 61.0715 69.0384 61.0715 69.0473C61.0804 69.0651 61.0848 69.0872 61.0937 69.105C61.0937 69.105 61.0937 69.1094 61.0937 69.1139C61.0981 69.1272 61.1025 69.136 61.107 69.1493C61.107 69.1582 61.1114 69.1627 61.1158 69.1715V69.1804C61.1247 69.207 61.1336 69.2336 61.138 69.2558C61.138 69.2558 61.138 69.2602 61.138 69.2647C61.138 69.2647 61.107 69.2558 61.0937 69.2469C60.9384 69.1893 60.7743 69.1449 60.6102 69.1094C60.2198 69.0251 59.8117 69.0118 59.417 69.1094C59.4569 69.0739 59.5012 69.0384 59.5412 69.0074C59.5722 68.9852 59.55 68.9364 59.5145 68.9453C59.1065 69.034 58.7028 69.1227 58.3746 69.3933C58.3923 69.3002 58.4233 69.207 58.4411 69.1094C58.4411 69.0828 58.4189 69.0562 58.3923 69.0739C58.2237 69.176 58.0951 69.3179 57.9931 69.4865C57.5451 68.9808 56.8886 68.8433 56.2365 68.8211C55.9083 68.8122 55.5889 68.7856 55.2651 68.7679C55.1631 68.7634 55.0566 68.759 54.9501 68.7679C54.9501 68.759 54.9457 68.7501 54.9413 68.7457C54.8703 68.5505 54.8259 68.3908 54.8038 68.2533C54.7638 68.036 54.7771 67.8541 54.8259 67.6279C54.8259 67.6279 54.8259 67.6279 54.8259 67.6234H61.3776C61.2667 67.7654 61.1292 67.9029 60.9739 68.1069C60.965 68.1202 60.9517 68.138 60.9384 68.1513C60.9296 68.1646 60.9162 68.1823 60.9074 68.1957C60.8941 68.2134 60.8852 68.2311 60.8719 68.2489H60.8896Z' fill='%23A05A07'/%3E%3Cpath d='M59.9978 82.2171C59.9845 82.5276 59.9224 82.8469 59.8204 83.1619C59.7893 83.2683 59.7494 83.3792 59.705 83.4813C59.6828 83.5301 59.6651 83.5744 59.6473 83.6232C59.5941 83.7474 59.5365 83.8672 59.4699 83.9869C59.4123 84.0978 59.3457 84.2087 59.2836 84.3152C59.2792 84.3241 59.2748 84.3329 59.2703 84.3418C59.2038 84.4483 59.1328 84.5547 59.0574 84.6567C59.053 84.6656 59.0441 84.6745 59.0397 84.6833C58.9687 84.7854 58.8888 84.883 58.809 84.9805C58.8001 84.9894 58.7957 84.9983 58.7868 85.0116C58.7114 85.1047 58.6316 85.1935 58.5473 85.2822C58.5384 85.2955 58.5251 85.3044 58.5162 85.3177C58.4364 85.4019 58.3566 85.4818 58.2723 85.5572C58.259 85.5705 58.2412 85.5838 58.2279 85.5971C58.1481 85.6681 58.0638 85.7391 57.9839 85.8056C57.9662 85.8233 57.944 85.8366 57.9263 85.8544C57.8464 85.9165 57.7666 85.9742 57.6868 86.0274C57.6734 86.0363 57.6646 86.0451 57.6513 86.054C57.5936 86.0895 57.5359 86.1338 57.4738 86.1693C57.6202 85.9209 57.6158 85.5882 57.5271 85.2866C57.3895 84.8209 56.1741 82.6119 56.3471 81.321C56.356 81.2368 56.3738 81.1614 56.3959 81.0904C56.4181 81.0194 56.4447 80.9484 56.4802 80.8863C56.5157 80.8242 56.5556 80.7621 56.6089 80.7089C56.6399 80.6779 56.671 80.6424 56.7109 80.6158C56.7109 80.6158 56.7552 80.5803 56.7774 80.567C57.4472 80.1367 58.3699 79.6931 59.1505 79.7641C59.1505 79.7641 59.1905 79.773 59.2038 79.773C59.2171 79.773 59.2348 79.7818 59.2437 79.7863C59.257 79.7907 59.2659 79.7996 59.2747 79.8084C59.2836 79.8173 59.2925 79.8218 59.2969 79.8306C59.3635 79.9193 59.3191 80.0746 59.3235 80.221C59.3235 80.2476 59.3235 80.2653 59.328 80.2831C59.328 80.2964 59.328 80.3097 59.3369 80.323C59.3457 80.354 59.3546 80.3762 59.3679 80.4028C59.3768 80.4161 59.3857 80.4295 59.3945 80.4383C59.3945 80.4383 59.4167 80.4649 59.43 80.4738C59.4433 80.4827 59.4566 80.4916 59.4699 80.5004C59.4921 80.5315 59.5143 80.5581 59.5365 80.5891C59.5365 80.5891 59.5453 80.6069 59.5542 80.6158C59.5897 80.6645 59.6207 80.7178 59.6518 80.771C59.6695 80.8021 59.6873 80.8331 59.7006 80.8642C59.7183 80.8952 59.7316 80.9263 59.7449 80.9573C59.7582 80.9884 59.7716 81.0194 59.7849 81.0505C59.7982 81.0815 59.8115 81.117 59.8204 81.148C59.8292 81.1791 59.8425 81.2146 59.8514 81.2456C59.8603 81.2811 59.8691 81.3122 59.878 81.3477C59.878 81.361 59.8824 81.3743 59.8869 81.3876C59.9002 81.4408 59.9135 81.494 59.9224 81.5473C59.9224 81.5606 59.9224 81.5739 59.9268 81.5828C59.9623 81.7912 59.9756 82.0086 59.9667 82.2259L59.9978 82.2171Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M59.483 80.496C59.1371 80.2964 59.554 79.7907 59.1504 79.7597C58.3697 79.6887 57.4426 80.1323 56.7772 80.5625C56.52 80.7311 56.3869 80.9972 56.3425 81.3211C57.3317 81.2456 58.4939 81.707 58.7511 82.7227C58.9818 83.6365 58.5338 84.4394 58.0991 85.2068C57.9394 85.4862 57.793 85.7701 57.6511 86.054C59.3588 84.9185 60.8226 82.1905 59.4875 80.496H59.483Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M59.9981 82.1949V82.2748C59.9892 82.3103 59.9892 82.3458 59.9848 82.3812C59.9848 82.4212 59.9759 82.4655 59.9715 82.5054C59.9715 82.5409 59.9626 82.572 59.9537 82.6075C59.9537 82.643 59.9449 82.6784 59.936 82.7139C59.8207 82.399 59.6654 82.0974 59.4569 81.8401C59.3948 81.7647 59.3283 81.6893 59.2617 81.6227C59.1065 81.463 58.9379 81.3255 58.7561 81.2102C58.7295 81.188 58.7028 81.1747 58.6718 81.157C58.5077 81.0549 58.3391 80.9707 58.1617 80.8997C58.0242 80.842 57.8822 80.7977 57.7403 80.7578C57.4076 80.6646 57.0616 80.6158 56.7112 80.6069C56.7112 80.6069 56.7555 80.5715 56.7777 80.5581C57.4475 80.1279 58.3702 79.6843 59.1509 79.7553C59.173 79.7553 59.1908 79.7597 59.2085 79.7641C59.2218 79.7641 59.2396 79.773 59.2484 79.7774C59.2617 79.7819 59.2706 79.7908 59.2795 79.7996C59.2884 79.8085 59.2972 79.8129 59.3017 79.8218C59.3017 79.8218 59.3105 79.844 59.315 79.8529C59.3416 79.9105 59.3372 79.9904 59.3283 80.0746C59.3238 80.1412 59.3194 80.2077 59.3283 80.2698C59.3283 80.2698 59.3283 80.3009 59.3372 80.3097C59.3372 80.3097 59.3372 80.3319 59.346 80.3408C59.346 80.3452 59.346 80.3497 59.3505 80.3541C59.3549 80.3674 59.3593 80.3763 59.3682 80.3896C59.3771 80.4029 59.386 80.4162 59.3948 80.4251C59.3948 80.4251 59.417 80.4517 59.4303 80.4606C59.4436 80.4694 59.4569 80.4783 59.4702 80.4872C59.4924 80.5182 59.5146 80.5448 59.5368 80.5759C59.5368 80.5759 59.5456 80.5936 59.5501 80.6025C59.5856 80.6513 59.6166 80.7045 59.6477 80.7578C59.6654 80.7888 59.6831 80.8199 59.6965 80.8509C59.7142 80.882 59.7275 80.913 59.7408 80.9441C59.7541 80.9751 59.7674 81.0062 59.7807 81.0372C59.794 81.0683 59.8073 81.1037 59.8162 81.1348C59.8251 81.1658 59.8384 81.2013 59.8473 81.2324C59.8561 81.2679 59.865 81.2989 59.8739 81.3344C59.9493 81.6094 59.9759 81.9022 59.9626 82.1949H59.9981Z' fill='%23A05A07'/%3E%3Cpath d='M59.0617 75.8162C58.7423 75.9538 58.4584 76.1933 58.2189 76.4905C58.0504 76.0691 57.8729 75.6654 57.5447 75.3239C57.2697 75.04 56.8571 74.6851 56.4357 74.7916C56.1873 74.8537 56.2894 75.2396 56.5422 75.1775C56.8172 75.111 57.141 75.4836 57.3096 75.6566C57.629 75.9892 57.7709 76.4239 57.935 76.8453C57.9395 76.8586 57.9483 76.872 57.9572 76.8853C57.5447 77.5994 57.3717 78.4999 57.5713 79.1874C57.6423 79.4358 58.0282 79.3294 57.9572 79.081C57.6689 78.0874 58.3076 76.5748 59.2702 76.1578C59.5053 76.0558 59.3013 75.7142 59.0706 75.8118L59.0617 75.8162Z' fill='%23995A07'/%3E%3Cpath d='M59.6779 72.1833C59.1944 72.3297 58.6266 72.6712 58.2096 73.1148C57.9258 72.6313 57.3979 72.1301 56.8523 72.1744C56.5995 72.1966 56.595 72.5958 56.8523 72.5737C57.3136 72.5382 57.7395 73.0527 57.9391 73.4475C57.7528 73.7181 57.6374 74.0108 57.6197 74.3125C57.6064 74.5697 58.0056 74.5697 58.0189 74.3125C58.0411 73.8645 58.4048 73.4963 58.7198 73.2168C59.0214 72.9418 59.394 72.6845 59.7843 72.5648C60.0283 72.4938 59.9219 72.1079 59.6779 72.1789V72.1833Z' fill='%23995A07'/%3E%3Cpath d='M59.3947 69.4952C59.0132 69.7791 58.5741 69.9654 58.2281 70.2892C57.9664 69.7303 57.4297 69.167 56.8175 69.167C56.5603 69.167 56.5603 69.5662 56.8175 69.5662C57.3276 69.5662 57.7712 70.165 57.9353 70.6263C57.7224 70.9324 57.5938 71.2828 57.5317 71.6554C57.4918 71.9083 57.8777 72.0147 57.9176 71.7619C57.993 71.2917 58.1793 70.9147 58.512 70.5687C58.818 70.2537 59.2528 70.0985 59.6032 69.8412C59.8072 69.6904 59.6076 69.3444 59.4036 69.4952H59.3947Z' fill='%23995A07'/%3E%3Cpath d='M59.2882 82.013C59.266 81.4895 59.1773 80.7399 58.6229 80.5004C58.3878 80.3983 58.1837 80.7443 58.4233 80.8464C58.8535 81.0282 58.8757 81.6803 58.8934 82.0795C58.9201 82.7626 58.7781 83.3836 58.4543 83.9869C58.3301 84.2131 58.6761 84.4127 58.8003 84.1865C59.1685 83.4989 59.3237 82.7892 59.2927 82.0085L59.2882 82.013Z' fill='%23995A07'/%3E%3Cpath d='M58.0145 80.3939C57.8948 80.1677 57.571 80.3939 57.6863 80.6245C58.0057 81.2234 57.3935 81.7024 57.0209 82.0972C56.8435 82.2835 57.1496 82.5408 57.3226 82.3545C57.8637 81.7867 58.4404 81.2101 58.0101 80.3983L58.0145 80.3939Z' fill='%23995A07'/%3E%3Cpath d='M61.9227 68.1467C61.9227 68.1467 61.9183 68.1645 61.9139 68.1734C61.8429 68.4395 61.7098 68.6524 61.4969 68.7456C61.3638 68.7456 61.2396 68.7456 61.1199 68.7456H60.9513C57.3672 68.7367 58.4939 68.7367 54.963 68.7456H54.9541C54.7989 68.7456 54.6348 68.7456 54.4573 68.7456C54.4041 68.7234 54.3509 68.6879 54.3065 68.648C54.2888 68.6347 54.2755 68.6214 54.2622 68.6036C54.2222 68.5593 54.1823 68.5105 54.1513 68.4528C54.138 68.4262 54.1202 68.3996 54.1114 68.3685C54.0847 68.3109 54.0626 68.2488 54.0448 68.1822C53.9206 67.7298 53.9827 67.1265 54.1601 66.7096C54.1601 66.7007 54.1646 66.6962 54.169 66.6874H54.1734C54.2666 66.6874 54.3597 66.6874 54.4485 66.6874C54.8299 66.6874 55.1671 66.6829 55.4687 66.6785C55.7215 66.6785 55.9433 66.6785 56.1429 66.6741C56.2849 66.6741 56.4135 66.6741 56.5333 66.6741C56.8039 66.6741 57.0256 66.6696 57.2164 66.6696C57.5579 66.6696 57.793 66.6652 58.0281 66.6652C58.1435 66.6652 58.2544 66.6652 58.383 66.6652C58.5338 66.6652 58.7024 66.6652 58.9064 66.6652C58.9907 66.6652 59.0838 66.6652 59.1859 66.6652C59.248 66.6652 59.3145 66.6652 59.3855 66.6652C59.4254 66.6652 59.4697 66.6652 59.5097 66.6652C59.6294 66.6652 59.7581 66.6652 59.8956 66.6652C59.9532 66.6652 60.0153 66.6652 60.0819 66.6652C60.5299 66.6652 61.0844 66.6741 61.7852 66.6785C61.7852 66.6785 61.7985 66.7184 61.8074 66.7362C61.8074 66.7362 61.8074 66.7406 61.8074 66.745C61.8296 66.7938 61.8473 66.8471 61.8606 66.9003C61.976 67.2818 62.007 67.7564 61.9183 68.1334L61.9227 68.1467Z' fill='%2300C55E'/%3E%3Cpath d='M61.927 68.1468C61.927 68.1468 61.927 68.1645 61.9181 68.1734C61.8472 68.4395 61.7141 68.6569 61.5012 68.75C61.3681 68.75 61.2395 68.75 61.1197 68.75H60.9556C57.3715 68.7412 58.5026 68.7412 54.9673 68.75H54.9584C54.8032 68.75 54.639 68.75 54.4661 68.75C54.4128 68.7234 54.3596 68.6924 54.3152 68.6525C54.2975 68.6391 54.2842 68.6258 54.2709 68.6081C54.231 68.5637 54.191 68.5149 54.16 68.4573C54.1467 68.4307 54.1289 68.4041 54.1201 68.373C54.0934 68.3153 54.0713 68.2532 54.0535 68.1867C54.0934 68.1956 54.1378 68.2 54.1733 68.2089C54.3906 68.2444 54.608 68.2577 54.8253 68.2532C55.2157 68.2532 55.6149 68.1911 55.9875 68.1024C56.4045 68.0048 56.8347 67.8584 57.2073 67.6278C57.2073 67.6278 57.2118 67.6278 57.2162 67.6234C57.2162 67.6234 57.2517 67.6012 57.2695 67.5879C57.2872 67.579 57.3049 67.5657 57.3227 67.5568C57.3759 67.5258 57.4203 67.4858 57.4691 67.4504C57.682 67.2818 57.8284 67.0423 57.957 66.8072C57.9792 66.7584 58.0058 66.7096 58.028 66.6608C58.1433 66.6608 58.2542 66.6608 58.3828 66.6608C58.5337 66.6608 58.7022 66.6608 58.9063 66.6608C58.9905 66.6608 59.0837 66.6608 59.1857 66.6608C59.2478 66.6608 59.3143 66.6608 59.3853 66.6608C59.4252 66.6608 59.4696 66.6608 59.5095 66.6608C59.6293 66.6608 59.7579 66.6608 59.8954 66.6608C59.9531 66.6608 60.0152 66.6608 60.0817 66.6608C60.5297 66.6608 61.0842 66.6697 61.7851 66.6741L61.8072 66.7318C61.8072 66.7318 61.8072 66.7318 61.8072 66.7362C61.8294 66.785 61.8472 66.8382 61.8605 66.8915C61.9758 67.2729 62.0113 67.7476 61.9181 68.1246L61.927 68.1468Z' fill='%2306B253'/%3E%3Cpath d='M59.7671 80.1456C59.7582 80.1899 59.7538 80.2298 59.7449 80.2698C59.7449 80.2786 59.7449 80.2875 59.7405 80.2964C59.7272 80.3496 59.7139 80.3984 59.7005 80.4427C59.6872 80.4827 59.6739 80.5137 59.6562 80.5448C59.6429 80.5714 59.6251 80.5936 59.6074 80.6113H59.5675C59.3412 80.6113 59.1549 80.6113 58.9997 80.6113C58.9287 80.6113 58.8622 80.6113 58.8001 80.6113C58.6093 80.6113 58.4718 80.6113 58.3565 80.6113C58.2633 80.6113 58.1879 80.6113 58.1081 80.6113C57.9883 80.6113 57.8641 80.6113 57.6823 80.6113C57.4693 80.6113 57.1766 80.6113 56.7153 80.6157H56.6931C56.6532 80.5758 56.6133 80.5093 56.5778 80.425C56.5689 80.4028 56.56 80.3851 56.5512 80.3629C56.5467 80.3496 56.5423 80.3319 56.5334 80.3185C56.5245 80.2919 56.5157 80.2609 56.5068 80.2343C56.4979 80.2032 56.489 80.1677 56.4802 80.1322C56.3737 79.6975 56.3294 79.0854 56.4092 78.6817H56.4358C56.9193 78.6729 57.2431 78.664 57.4827 78.6596C57.6468 78.6596 57.771 78.6596 57.8774 78.6596C58.0504 78.6596 58.1791 78.6596 58.3698 78.6684C58.3876 78.6684 58.4009 78.6684 58.4186 78.6684C58.4363 78.6684 58.4541 78.6684 58.4718 78.6684C58.5694 78.6684 58.6848 78.6729 58.8267 78.6773C58.9376 78.6773 59.0618 78.6818 59.2126 78.6862C59.257 78.6862 59.3013 78.6862 59.3457 78.6862C59.3945 78.6862 59.4477 78.6862 59.5009 78.6862C59.5719 78.6862 59.6429 78.6862 59.7183 78.6862C59.7183 78.6906 59.7183 78.6951 59.7183 78.6995C59.7227 78.7261 59.7271 78.7527 59.7316 78.7838C59.7405 78.8326 59.7449 78.8858 59.7538 78.939C59.7626 78.9923 59.7671 79.0499 59.7759 79.1076C59.807 79.4536 59.8026 79.8395 59.7626 80.1411L59.7671 80.1456Z' fill='%2300C55E'/%3E%3Cpath d='M59.767 80.1455C59.7581 80.1855 59.7537 80.2298 59.7448 80.2697C59.7448 80.2786 59.7448 80.2875 59.7404 80.2964C59.7271 80.3496 59.7138 80.3984 59.7005 80.4427C59.6872 80.4827 59.6739 80.5137 59.6561 80.5448C59.6428 80.5714 59.6251 80.5936 59.6073 80.6113H59.5674C59.3412 80.6113 59.1549 80.6113 58.9996 80.6113C58.9286 80.6113 58.8621 80.6113 58.8 80.6113C58.6093 80.6113 58.4718 80.6113 58.3564 80.6113C58.2633 80.6113 58.1879 80.6113 58.108 80.6113C57.9883 80.6113 57.8641 80.6113 57.6822 80.6113C57.4693 80.6113 57.1765 80.6113 56.7152 80.6157H56.693C56.6531 80.5758 56.6132 80.5093 56.5777 80.425C56.5688 80.4028 56.5599 80.3851 56.5511 80.3629C56.5466 80.3496 56.5422 80.3318 56.5333 80.3185C56.5245 80.2919 56.5156 80.2609 56.5067 80.2343C56.4978 80.2032 56.489 80.1677 56.4801 80.1322C56.9725 80.0213 57.4249 79.7641 57.7975 79.4003C57.7975 79.4003 57.8108 79.387 57.8197 79.3782C58.0282 79.1741 58.2234 78.9257 58.3653 78.664C58.383 78.664 58.3963 78.664 58.4141 78.664C58.4318 78.664 58.4496 78.664 58.4673 78.664C58.5649 78.664 58.6802 78.6684 58.8222 78.6729C58.9331 78.6729 59.0573 78.6773 59.2081 78.6817C59.2525 78.6817 59.2968 78.6817 59.3412 78.6817C59.3855 78.6817 59.4432 78.6817 59.4964 78.6817C59.5674 78.6817 59.6384 78.6817 59.7138 78.6817C59.7138 78.6817 59.7138 78.6906 59.7138 78.695C59.7182 78.7217 59.7226 78.7483 59.7271 78.7793C59.736 78.8281 59.7404 78.8814 59.7493 78.9346C59.7581 78.9922 59.7626 79.0499 59.767 79.1076C59.7981 79.4536 59.7936 79.8395 59.7537 80.1411L59.767 80.1455Z' fill='%2306B253'/%3E%3Cpath d='M57.8112 34.8297C57.4785 34.8164 57.1502 34.7942 56.8442 34.7676C55.4469 34.6567 54.0851 34.2797 52.8076 33.703C52.4705 33.5478 52.0979 33.4014 51.7164 33.2595C51.5124 33.1796 51.2995 33.1042 51.091 33.0288C51.0821 33.0288 51.0732 33.0244 51.0644 33.0199C51.0688 33.0199 51.0732 33.0111 51.0777 33.0111C51.0777 33.0111 51.0644 33.0111 51.0599 33.0199C51.0599 33.0199 51.0511 33.0199 51.0333 33.0288C50.9402 33.0554 50.7361 33.0998 50.4922 33.2151C50.3014 33.3038 50.0929 33.4325 49.8978 33.6232C49.4276 34.0934 48.9219 35.1935 48.6291 35.9564C47.9859 37.6597 47.6932 38.2053 47.5025 40.4543C47.5025 40.4543 47.1964 41.6874 47.1254 42.3306L46.7484 41.581C46.7218 41.5189 46.5621 41.2039 46.5798 40.4898L46.0963 37.5888L47.3295 37.9303C47.3295 37.9303 46.6286 35.9786 46.9835 35.9209C48.8598 35.606 47.223 32.7316 47.223 32.7316L47.4049 32.8159L48.4916 33.3127C48.4916 33.3127 48.6336 32.6606 48.9308 32.3457C49.015 32.257 49.1259 32.1683 49.2634 32.0884C49.8401 31.7424 50.8027 31.5206 51.4813 31.9287C53.3443 33.0421 56.4139 34.7499 57.8112 34.8253V34.8297Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M55.0217 52.2668C55.0217 52.2668 55.7447 51.7079 57.4347 51.5216C58.1932 51.4373 58.934 51.5216 59.4974 51.7079C60.0607 51.8942 60.8724 52.076 60.8414 52.2668C60.8103 52.4575 56.8714 52.2668 55.0217 52.2668Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M58.9339 53.7704C58.9339 53.7704 58.8408 54.4579 58.2109 54.6797C57.927 54.7773 57.6342 54.7507 57.4036 54.6398C57.1729 54.5289 56.8757 53.9079 56.8713 53.7615C56.8669 53.6151 58.4016 54.2583 58.9339 53.7659V53.7704Z' fill='%23A05A07'/%3E%3Cpath d='M69.7041 47.7644C69.6509 47.8797 69.5622 47.9817 69.4468 48.0394C69.398 48.066 69.3448 48.0838 69.2871 48.0926C68.9678 48.1459 68.6617 47.9108 68.604 47.5692C68.5552 47.2853 68.6883 47.0192 68.9145 46.8994C68.9633 46.8728 69.0166 46.855 69.0742 46.8462C69.3936 46.7929 69.6997 47.028 69.7573 47.3696C69.784 47.5115 69.7573 47.649 69.7041 47.7644Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M69.4468 48.035C69.398 48.0616 69.3448 48.0793 69.2871 48.0882C68.9678 48.1414 68.6617 47.9063 68.604 47.5648C68.5552 47.2809 68.6883 47.0148 68.9145 46.895C68.9145 46.895 68.5641 47.9197 69.4468 48.035Z' fill='%23474C2F'/%3E%3Cpath d='M69.7045 47.7644C68.6709 47.5781 69.0746 46.8417 69.0746 46.8417C69.394 46.7885 69.7 47.0236 69.7577 47.3651C69.7843 47.5071 69.7577 47.6446 69.7045 47.7599V47.7644Z' fill='%23949984'/%3E%3Cpath d='M53.3597 38.3379C53.4129 38.581 53.7319 38.7861 54.1649 38.8089C54.4992 38.8241 54.8866 38.7329 55.1449 38.5658C55.8057 38.148 55.3651 37.715 54.5827 37.715C53.9826 37.715 53.2686 37.9657 53.3597 38.3455V38.3379Z' fill='%23E8D4BA'/%3E%3Cpath d='M63.5697 28.2955C63.5165 28.1283 63.4785 28.0144 63.4633 27.9916C63.5089 28.0828 63.5393 28.1815 63.5697 28.2955Z' fill='%23C77500'/%3E%3Cpath d='M43.9404 38.1177C43.9404 38.1177 70.1476 38.9609 70.1248 38.733C68.4308 23.586 57.8947 25.0369 57.758 24.9913C55.2588 24.9381 50.9669 24.5963 47.7765 28.0146C46.0977 29.9137 44.7228 32.7927 44.0771 37.0846C44.0239 37.4188 43.9784 37.7607 43.9404 38.1177Z' fill='%23979E87'/%3E%3Cpath d='M43.9404 38.1177C43.9404 38.1177 70.1476 38.9609 70.1248 38.733C68.4308 23.586 57.8947 25.0369 57.758 24.9913C55.2588 24.9381 50.9669 24.5963 47.7765 28.0146C46.1053 29.8074 44.7304 32.6332 44.0771 37.0846C44.0239 37.4188 43.9784 37.7607 43.9404 38.1177Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M51.4231 26.5561C50.0481 26.389 47.1919 28.8426 48.0123 30.3163C48.2478 30.7416 48.7644 30.8556 49.2126 30.8328C51.2863 30.734 53.0411 28.1969 52.3954 27.1866C52.1827 26.8599 51.8181 26.6017 51.4231 26.5561Z' fill='%23C5CAB9'/%3E%3Cpath d='M70.0716 38.3303C70.0488 38.148 70.026 37.9733 70.0033 37.7986C69.9805 37.6467 69.9577 37.4947 69.9349 37.3428C69.9121 37.1909 69.8893 37.0466 69.8589 36.9022C69.8058 36.606 69.7526 36.3249 69.6994 36.0514C69.669 35.9147 69.6386 35.778 69.6082 35.6412C69.5779 35.5045 69.5475 35.3754 69.5171 35.2386C69.4867 35.1095 69.4487 34.9728 69.4183 34.8436C69.3879 34.7145 69.35 34.5854 69.312 34.4638C69.2816 34.3423 69.2436 34.2283 69.2056 34.1144V34.084C69.1601 33.9625 69.1221 33.8485 69.0841 33.727C69.0461 33.6054 69.0081 33.4915 68.9701 33.3776C68.8106 32.9142 68.6435 32.4812 68.4612 32.0634C68.4156 31.957 68.37 31.8583 68.3245 31.7595C68.2333 31.562 68.1346 31.3645 68.0434 31.1746C67.9978 31.0835 67.9446 30.9847 67.8991 30.8936C67.8383 30.7796 67.7775 30.6733 67.7168 30.5669C67.6788 30.4986 67.6332 30.4302 67.5952 30.3618C67.542 30.2707 67.4889 30.1871 67.4357 30.1036C67.3294 29.9364 67.223 29.7769 67.1167 29.6174C67.0635 29.5414 67.0103 29.4655 66.9571 29.3895C66.8508 29.2376 66.7368 29.0932 66.6229 28.9489L66.5166 28.8198C66.5166 28.8198 66.4862 28.7818 66.471 28.7666C66.471 28.7666 66.4558 28.7514 66.4482 28.7438C66.4026 28.6906 66.357 28.6299 66.3038 28.5767C66.2431 28.5007 66.1747 28.4248 66.1064 28.3488C65.9924 28.2197 65.8709 28.0981 65.7569 27.9842C65.6962 27.9234 65.6354 27.8702 65.5822 27.8095C65.286 27.5284 64.9897 27.2701 64.6859 27.0422C64.3212 26.7688 63.9566 26.5257 63.592 26.3206C63.2274 26.1155 62.8703 25.9332 62.5133 25.7889C61.8068 25.485 61.1232 25.2951 60.5079 25.1736C60.3939 25.1508 60.2876 25.128 60.1812 25.1128C60.0901 25.0976 59.9989 25.0824 59.9154 25.0672C59.9002 25.0672 59.885 25.0672 59.8774 25.0672C59.8242 25.0672 59.771 25.052 59.7179 25.0444C59.4672 25.014 59.2393 24.9912 59.0266 24.9837C58.8975 24.9837 58.7683 24.9685 58.6544 24.9685C58.1606 24.9609 57.8416 24.9912 57.7656 24.9837H57.7504C57.7049 24.9685 57.6669 24.9533 57.6213 24.9457C57.3326 24.8621 57.006 24.7937 56.6414 24.733C56.1476 24.657 55.5855 24.619 54.9854 24.6342C54.7955 24.7937 54.6815 24.9305 54.6436 24.9761L54.636 24.9912C54.636 24.9912 54.636 25.0064 54.636 25.0216C54.636 25.0216 54.636 25.0292 54.636 25.0368C54.636 25.052 54.636 25.0596 54.636 25.0748C54.636 25.0748 54.636 25.1204 54.636 25.1356C54.636 25.1812 54.6208 25.2267 54.6132 25.2799C55.1373 26.1687 55.3044 27.2246 55.1373 28.2652C55.0917 28.5387 55.031 28.8046 54.9474 29.0705C54.8638 29.3363 54.7727 29.587 54.6587 29.8453C54.636 29.8909 54.6208 29.9364 54.598 29.982C54.5372 30.1111 54.4764 30.2403 54.4081 30.3618C54.2334 30.6809 54.0358 30.9847 53.8231 31.281C53.7244 31.4177 53.6181 31.5544 53.5041 31.6836C53.223 32.0178 52.9116 32.3369 52.5774 32.6331C52.5546 32.6559 52.5318 32.6711 52.509 32.6863C52.3951 32.785 52.2735 32.8838 52.152 32.975C51.8405 33.2104 51.5215 33.4231 51.1796 33.6054C51.1721 33.6054 51.1569 33.613 51.1493 33.6206C50.9138 33.7498 50.6707 33.8637 50.42 33.9625C50.063 34.0992 49.6908 34.2056 49.3109 34.2663C49.0223 34.3119 48.7336 34.3347 48.445 34.3271C48.05 34.3271 47.6549 34.2587 47.2675 34.1296C47.2447 34.1296 47.222 34.1144 47.1916 34.1068C47.1004 34.0764 47.0169 34.0384 46.9257 34.0004C46.4472 33.7878 46.0521 33.4611 45.7711 33.0281C45.7027 32.9294 45.6495 32.8306 45.5964 32.7243C45.4976 32.5192 45.4292 32.3141 45.3685 32.1014C45.3305 32.2077 45.2925 32.3065 45.2545 32.4128C45.2317 32.4812 45.2089 32.542 45.1786 32.6103C45.1558 32.6787 45.1254 32.7547 45.1026 32.823C45.0267 33.0357 44.9583 33.2484 44.8899 33.4687C44.7912 33.7878 44.7 34.1144 44.6164 34.4562C44.4265 35.1855 44.267 35.9679 44.1379 36.8111C44.1151 36.9326 44.0999 37.0542 44.0847 37.1757C44.0467 37.4112 44.0163 37.6543 43.986 37.8898C43.9784 37.9581 43.9632 38.0341 43.9556 38.11C43.9556 38.11 44.1151 38.11 44.4113 38.1252C44.4569 38.1252 44.4949 38.1252 44.5481 38.1252C44.6316 38.1252 44.7228 38.1252 44.8215 38.1328C45.0722 38.1328 45.3685 38.148 45.7179 38.1632C45.9078 38.1632 46.1129 38.1784 46.3256 38.186C46.5003 38.186 46.6826 38.1936 46.8649 38.2012C46.8953 38.2012 46.9257 38.2012 46.9561 38.2012C47.108 38.2012 47.26 38.2088 47.4195 38.2164H47.4347H47.4802C47.4802 38.2164 47.5182 38.2164 47.541 38.2164C47.7461 38.2164 47.9664 38.2316 48.1791 38.2316C48.1791 38.2316 48.1791 38.2316 48.1943 38.2316C48.3234 38.2316 48.4602 38.2316 48.5969 38.2468C48.5969 38.2468 48.6045 38.2468 48.6121 38.2468C48.8172 38.2468 49.0299 38.262 49.2502 38.2696H49.2654C49.4857 38.2696 49.7059 38.2848 49.9262 38.2924H50.1769C50.5643 38.3151 50.9593 38.3227 51.362 38.3379C52.0228 38.3607 52.6989 38.3759 53.3978 38.3987C53.5801 38.3987 53.77 38.4063 53.9447 38.4139C54.0131 38.4139 54.089 38.4139 54.1574 38.4139H54.1802C54.5524 38.4215 54.917 38.4367 55.2892 38.4443C55.3652 38.4443 55.4412 38.4443 55.5095 38.4443C55.9729 38.4595 56.4287 38.4747 56.8921 38.4823C56.93 38.4823 56.9756 38.4823 57.0136 38.4823C57.0516 38.4823 57.0972 38.4823 57.1351 38.4823C57.1731 38.4823 57.2187 38.4823 57.2567 38.4823C57.363 38.4823 57.477 38.4823 57.5833 38.4899C58.4417 38.5126 59.2849 38.5354 60.1205 38.5582C60.7358 38.581 61.3435 38.5962 61.936 38.6038C61.9967 38.6038 62.0651 38.6038 62.1259 38.6038C62.1487 38.6038 62.1715 38.6038 62.1867 38.6038C62.2474 38.6038 62.3082 38.6038 62.3614 38.6038H62.3994C62.3994 38.6038 62.4221 38.6038 62.4373 38.6038C62.5133 38.6038 62.5817 38.6038 62.65 38.6038H62.6804C62.7488 38.6038 62.8247 38.6038 62.8931 38.6038H62.9311C63.0147 38.6038 63.0906 38.6038 63.1742 38.6038C63.2425 38.6038 63.3109 38.6038 63.3793 38.6038C63.554 38.6038 63.7211 38.6038 63.8882 38.6114C64.0478 38.6114 64.1997 38.6114 64.3516 38.619C64.42 38.619 64.4807 38.619 64.5491 38.619H64.5947C64.6554 38.619 64.7162 38.619 64.777 38.619H64.8074C64.8682 38.619 64.9365 38.619 64.9973 38.619C65.0809 38.619 65.1644 38.619 65.248 38.619C65.3087 38.619 65.3695 38.619 65.4303 38.619H65.5062C65.6961 38.619 65.8785 38.6266 66.0532 38.6342C66.1215 38.6342 66.1899 38.6342 66.2507 38.6342H66.2811C66.2811 38.6342 66.3418 38.6342 66.3722 38.6342H66.4406C66.4406 38.6342 66.4634 38.6342 66.471 38.6342C66.5165 38.6342 66.5545 38.6342 66.6001 38.6342H66.6305C66.6837 38.6342 66.7293 38.6342 66.7748 38.6342H66.8204C66.8204 38.6342 66.8584 38.6342 66.8736 38.6342C66.9571 38.6342 67.0407 38.6342 67.1243 38.6342H67.1394H67.1774C67.223 38.6342 67.2686 38.6342 67.3142 38.6342C67.8611 38.6342 68.3473 38.6494 68.7575 38.6494C68.7878 38.6494 68.8106 38.6494 68.841 38.6494C68.9626 38.6494 69.0841 38.6494 69.1904 38.6494C69.2284 38.6494 69.2664 38.6494 69.3044 38.6494C69.3652 38.6494 69.4259 38.6494 69.4791 38.6494H69.5019C69.8665 38.6494 70.0792 38.6342 70.102 38.619C70.0868 38.4747 70.0716 38.3455 70.0564 38.2088L70.0716 38.3303ZM56.4211 31.676C56.5654 31.8051 56.5882 31.9722 56.5502 32.1318C56.5426 32.1849 56.5198 32.2381 56.4971 32.2837C56.4363 32.4052 56.3451 32.5192 56.254 32.6103C56.254 32.6103 56.1856 32.6711 56.1476 32.7015C56.0413 32.7926 55.8969 32.8914 55.7526 32.9446C55.6387 32.9901 55.5171 33.0053 55.4108 32.9674C55.3728 32.9522 55.3348 32.9294 55.2968 32.899C55.2968 32.899 55.2816 32.8838 55.274 32.8762C55.1145 32.7091 55.1145 32.5116 55.1905 32.3217V32.3065C55.2133 32.2609 55.2361 32.2153 55.2589 32.1697C55.2589 32.1546 55.274 32.1394 55.2892 32.1242C55.4791 31.8203 55.8741 31.4253 56.2464 31.5696C56.3071 31.5924 56.3603 31.6304 56.4211 31.676ZM64.9441 27.8095C65.134 27.9006 65.3239 28.0222 65.4151 28.2273C65.5594 28.5463 65.6202 28.8957 65.643 29.2452C65.6582 29.5718 65.643 29.9136 65.5822 30.2403C65.5062 30.5897 65.3543 30.9164 65.0809 31.167C65.0429 31.1974 65.0125 31.2278 64.9669 31.2582C64.7162 31.4405 64.3288 31.4861 64.1237 31.205C63.911 30.924 63.9794 30.5517 64.0098 30.2251C64.0553 29.7617 63.987 29.3211 63.8958 28.9261C63.5692 27.5512 62.8475 26.7992 64.9441 27.8019V27.8095Z' fill='%23949984'/%3E%3Cpath opacity='0.4' d='M58.275 37.1756C56.7482 36.454 55.077 36.0362 53.3906 35.9222C51.4004 35.7855 49.3418 36.0134 47.4503 36.6743C46.6831 36.9401 45.9386 37.2896 45.2246 37.6922C44.9815 37.8289 44.746 37.9732 44.5181 38.1403C46.6451 38.2087 54.1958 38.4442 60.5539 38.6113C60.4704 38.543 60.3868 38.4822 60.3032 38.4214C59.6651 37.9428 58.9967 37.5251 58.275 37.1832V37.1756Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M66.3118 28.5919C66.5245 32.3445 65.7801 34.8741 61.2755 38.6267C66.1371 38.7482 69.8821 38.8242 69.8745 38.7406C69.3199 33.8106 68.0741 30.6278 66.3118 28.5919Z' fill='%23676D54'/%3E%3Cpath d='M70.3755 40.4648C70.3072 40.4648 70.2236 40.4572 70.1325 40.4572C70.0717 40.4572 70.0109 40.4572 69.9425 40.4572C69.9122 40.4572 69.8742 40.4572 69.8362 40.4572C69.7451 40.4572 69.6539 40.4572 69.5551 40.4496C69.54 40.4496 69.5172 40.4496 69.502 40.4496C67.8916 40.404 64.9518 40.3812 61.6398 40.3661C61.1081 40.3661 60.5687 40.3661 60.0218 40.3661C57.629 40.3585 55.1222 40.3585 52.8281 40.3509C48.0728 40.3509 44.2443 40.3585 44.2443 40.3585H43.6898C43.3327 40.123 43.3555 38.9455 43.4922 38.0416C45.3837 37.4035 55.1905 37.6238 62.3766 37.9276C62.4906 37.9276 62.6045 37.9352 62.7185 37.9428C62.9236 37.9504 63.1287 37.958 63.3338 37.9732C63.349 37.9732 63.3717 37.9732 63.3945 37.9732C63.592 37.9808 63.782 37.9884 63.9719 37.996C64.9974 38.0416 65.9393 38.0872 66.7673 38.1327C67.0028 38.1479 67.2307 38.1555 67.451 38.1707C67.846 38.1935 68.2106 38.2163 68.5372 38.2391C68.5904 38.2391 68.636 38.2391 68.6816 38.2467C68.8715 38.2619 69.0538 38.2695 69.2057 38.2847C69.2817 38.2847 69.3576 38.2999 69.4336 38.2999C69.5551 38.3075 69.6615 38.3151 69.7526 38.3227H69.8286C69.8286 38.3227 69.8438 38.3302 69.859 38.3302C69.8894 38.3302 69.9198 38.3302 69.9425 38.3378C69.9425 38.3378 69.9957 38.3378 70.0185 38.3454C70.1173 38.353 70.178 38.3682 70.2008 38.3758H70.2084C70.4515 38.6037 70.4135 40.0546 70.3755 40.48V40.4648Z' fill='%23C2C2AC'/%3E%3Cpath d='M60.0301 40.3434C57.6372 40.3358 55.1304 40.3358 52.8364 40.3282C52.9351 40.1687 53.0642 40.0244 53.1858 39.8952C53.4669 39.6066 53.8467 39.4394 54.2189 39.3255C55.6546 38.9001 59.4451 38.8925 60.0225 40.3434H60.0301Z' fill='%23BBB99D'/%3E%3Cpath d='M70.3761 40.4649C70.3078 40.4649 70.2242 40.4573 70.133 40.4573C70.0723 40.4573 70.0115 40.4573 69.9431 40.4573C69.9127 40.4573 69.8748 40.4573 69.8368 40.4573C69.7456 40.4573 69.6545 40.4573 69.5557 40.4497C69.5405 40.4497 69.5177 40.4497 69.5025 40.4497C67.8921 40.4041 64.9524 40.3813 61.6404 40.3661C61.7163 40.1914 61.7771 40.0167 61.8379 39.842C61.9746 39.4546 62.0734 39.0595 62.1113 38.6493C62.1341 38.4215 62.1417 38.1556 62.0962 37.9049C62.1873 37.9049 62.2861 37.9125 62.3772 37.9125C62.4912 37.9125 62.6051 37.9201 62.7191 37.9277C62.9242 37.9353 63.1293 37.9429 63.3344 37.9581C63.3496 37.9581 63.3723 37.9581 63.3951 37.9581C63.5926 37.9657 63.7825 37.9733 63.9724 37.9809C64.9979 38.0264 65.9399 38.072 66.7679 38.1176C67.0034 38.1328 67.2312 38.1404 67.4515 38.1556C67.8465 38.1784 68.2112 38.2012 68.5378 38.224C68.591 38.224 68.6366 38.224 68.6821 38.2315C68.872 38.2467 69.0544 38.2543 69.2063 38.2695C69.2822 38.2695 69.3582 38.2847 69.4342 38.2847C69.5557 38.2923 69.6621 38.2999 69.7532 38.3075C69.776 38.3075 69.8064 38.3075 69.8292 38.3075C69.8368 38.3075 69.8444 38.3075 69.8596 38.3075C69.89 38.3075 69.9203 38.3075 69.9431 38.3151C69.9431 38.3151 69.9963 38.3151 70.0191 38.3227C70.1178 38.3303 70.1786 38.3455 70.2014 38.3531H70.209C70.4521 38.581 70.4141 40.0319 70.3761 40.4573V40.4649Z' fill='%23BBB99D'/%3E%3Cpath d='M48.6271 39.5383C49.3867 39.599 50.1311 39.6218 50.8832 39.5079C51.7036 39.3863 52.5088 39.166 53.276 38.847C54.0128 38.5431 54.7193 38.1557 55.365 37.6696C50.1691 37.548 45.2391 37.5708 43.6819 37.9658C44.9884 39.1129 46.9711 39.4015 48.6271 39.5383Z' fill='%23C5CAB9'/%3E%3Cpath d='M46.265 38.6872C46.2422 38.6037 46.2042 38.5277 46.151 38.4594C45.9383 38.1935 45.3306 38.1251 45.0572 38.5277V38.5429C44.9964 38.6113 44.966 38.6948 44.9508 38.786C44.9432 38.8392 44.9356 38.8847 44.9432 38.9379C45.004 40.1457 46.5308 39.5076 46.2726 38.6872H46.265Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M45.2166 38.9227C45.2166 38.8696 45.2166 38.8164 45.2242 38.7708C45.2394 38.6872 45.2698 38.6037 45.323 38.5277V38.5125C45.4293 38.3682 45.5661 38.2846 45.7104 38.2467C45.4673 38.2163 45.2014 38.2922 45.0343 38.5277V38.5429C44.9736 38.6113 44.9432 38.6948 44.928 38.786C44.9204 38.8316 44.9128 38.8847 44.9204 38.9379C44.9508 39.5228 45.323 39.6748 45.6724 39.5836C45.4293 39.5456 45.2242 39.3481 45.2014 38.9227H45.2166Z' fill='%23676D54'/%3E%3Cpath d='M51.985 38.4821C51.628 38.1934 50.8988 38.5429 50.7544 38.991C50.6937 39.181 50.7544 39.3785 50.876 39.5228C51.1874 39.8874 51.985 39.819 52.1901 39.1886C52.2737 38.9227 52.1901 38.6416 51.985 38.4745V38.4821Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M51.0051 39.5306C50.8836 39.3863 50.8152 39.1888 50.8836 38.9988C50.9899 38.6722 51.3849 38.4063 51.7419 38.3835C51.3697 38.338 50.876 38.6342 50.7544 38.9988C50.6937 39.1888 50.7544 39.3863 50.876 39.5306C51.0127 39.6825 51.233 39.7661 51.4609 39.7509C51.2786 39.7357 51.1115 39.6597 51.0051 39.5382V39.5306Z' fill='%23676D54'/%3E%3Cpath d='M56.8008 38.6493C56.2842 39.1507 56.9451 40.3889 57.8338 39.652C58.6239 38.9987 57.4085 38.0644 56.8008 38.6493Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M56.6191 39.143C56.6419 39.6596 57.1737 40.1913 57.8346 39.6444C57.9409 39.5608 58.0093 39.4697 58.0472 39.3785C57.9789 39.3633 56.9154 39.0975 56.6191 39.143Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M56.9456 38.6646C57.1204 38.5203 57.3255 38.4823 57.5306 38.5051C57.2875 38.4216 57.0064 38.4443 56.8013 38.6494C56.3987 39.0369 56.7026 39.8649 57.2799 39.88C56.7633 39.7661 56.5127 39.0293 56.9456 38.6646Z' fill='%23676D54'/%3E%3Cpath d='M63.4246 38.7481C62.4903 38.5505 62.1637 40.0318 63.2271 40.0166C63.5234 40.0166 63.8045 39.8115 63.8424 39.295C63.8576 39.0367 63.6753 38.8012 63.4322 38.7481H63.4246Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M63.4252 38.7481C63.3264 38.7253 63.2352 38.7253 63.1517 38.7405C63.2048 38.7405 63.258 38.7405 63.3112 38.7557C63.5543 38.8089 63.7366 39.052 63.7214 39.3026C63.691 39.766 63.4631 39.9711 63.2125 40.0167H63.2276C63.5239 40.0167 63.805 39.8192 63.8429 39.295C63.8581 39.0368 63.6758 38.8013 63.4327 38.7481H63.4252Z' fill='%23676D54'/%3E%3Cpath d='M69.0313 38.733C68.8566 38.7102 68.6743 38.7862 68.5527 38.9153C68.3932 39.0824 68.3628 39.3027 68.3932 39.5154C68.4616 39.9484 68.9325 40.2978 69.3427 40.0092C69.4187 39.9864 69.4871 39.9408 69.5554 39.8876C70.0112 39.5002 69.5403 38.7862 69.0313 38.733Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M69.031 38.7329C68.9474 38.7253 68.8714 38.7329 68.7955 38.7557C69.2816 38.8621 69.6994 39.5305 69.2664 39.9027C69.1981 39.9559 69.1297 40.0015 69.0537 40.0243C69.0082 40.0547 68.955 40.0851 68.9094 40.1003C69.0461 40.1306 69.1981 40.1154 69.3424 40.0091C69.4183 39.9863 69.4867 39.9407 69.5551 39.8876C70.0109 39.5001 69.5399 38.7861 69.031 38.7329Z' fill='%23676D54'/%3E%3Cpath d='M54.2791 28.1815L54.3703 30.3693C54.3551 30.2401 54.3475 30.111 54.3323 29.9818C54.2715 29.3741 54.2639 28.7664 54.2791 28.1815Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.4' d='M58.0474 35.2765L58.1994 35.0866C58.3741 34.0838 58.7159 33.0583 58.9514 32.0632C59.1869 31.0681 59.3236 30.0578 59.354 29.0323C59.3844 28.136 59.3312 27.2472 59.2324 26.3584C59.1793 25.9026 59.1109 25.4393 59.0274 24.9835C59.4451 25.0063 59.9541 25.0595 60.5086 25.1734C61.3746 28.5537 60.0832 35.1093 58.055 35.2689L58.0474 35.2765Z' fill='%23676D54'/%3E%3Cpath d='M54.3094 27.4448C54.3778 28.1817 54.4842 29.0097 54.6209 29.8453C54.6209 29.8832 54.6361 29.9212 54.6361 29.9592C54.7728 30.7644 54.5373 31.4936 54.7652 32.2305C54.8336 32.4508 54.8944 33.3244 54.9323 33.5446C55.2742 35.4209 56.4896 35.7324 57.3024 35.6412C58.7837 35.4741 59.7408 32.8078 59.9155 30.1719C60.0826 27.6195 59.9003 25.0976 59.9003 25.0976C59.9003 25.0976 59.8927 25.09 59.8699 25.0672C59.8168 25.0672 59.7636 25.052 59.7104 25.0444C59.4597 25.014 59.2242 24.9912 59.0191 24.9836C58.2595 24.938 57.7733 24.9988 57.743 24.9836C57.0593 24.7709 56.087 24.6038 54.9703 24.6342C54.7576 24.8165 54.6361 24.9684 54.6209 24.9912V25.0216C54.5981 25.0976 54.5829 25.1811 54.5677 25.2875C54.5677 25.3179 54.5601 25.3482 54.5525 25.3862C54.5525 25.409 54.5449 25.4318 54.5373 25.4622C54.5373 25.4774 54.5373 25.5002 54.5297 25.5154C54.5221 25.5685 54.5145 25.6217 54.5069 25.6749C54.4841 25.8116 54.4614 25.9559 54.4462 26.1155C54.4386 26.1838 54.431 26.2598 54.4158 26.3358C54.4006 26.4421 54.393 26.5485 54.3778 26.6548C54.3778 26.7004 54.3702 26.746 54.3626 26.7915C54.3474 26.9055 54.3398 27.027 54.3322 27.1486C54.3246 27.2473 54.317 27.3385 54.3094 27.4372V27.4448Z' fill='%23676D54'/%3E%3Cpath d='M59.7789 29.0628C59.7713 29.3895 59.7561 29.7237 59.7333 30.0579C59.5814 32.4128 58.5255 34.9499 57.2418 35.3829C57.1126 35.4285 56.9759 35.4513 56.8391 35.4513C55.6085 35.4361 54.9932 34.2587 54.6286 32.2457C54.5223 31.6835 54.4463 31.0606 54.3704 30.3694C54.3552 30.2402 54.3476 30.1111 54.3324 29.982C54.3096 29.7769 54.2944 29.5642 54.2868 29.3515V29.2071C54.264 28.8577 54.264 28.5159 54.2792 28.1816C54.2792 27.931 54.2944 27.6879 54.3172 27.4448C54.3172 27.3461 54.3324 27.2549 54.34 27.1561C54.3476 27.0346 54.3628 26.9131 54.3704 26.7991C54.3704 26.7535 54.378 26.708 54.3856 26.6624C54.4008 26.5484 54.4083 26.4421 54.4235 26.3433C54.4311 26.2674 54.4387 26.1914 54.4539 26.1231C54.4767 25.9635 54.4995 25.8192 54.5147 25.6825C54.5223 25.6293 54.5299 25.5685 54.5375 25.5229C54.5375 25.5078 54.5375 25.485 54.5451 25.4698C54.5451 25.447 54.5527 25.4166 54.5603 25.3938C54.5603 25.3634 54.5679 25.3254 54.5755 25.2951C54.5831 25.2419 54.5907 25.1963 54.5983 25.1507C54.5983 25.1127 54.6134 25.0748 54.6134 25.0444V25.0292C54.6134 25.0292 54.6134 25.014 54.621 25.0064C54.621 25.0064 55.2363 24.186 55.6921 23.9733C55.996 23.829 56.2846 23.7454 56.5505 23.6998C57.4544 23.5479 58.1685 23.867 58.6775 24.1556C59.0193 24.3531 59.3535 24.6494 59.703 25.052C59.703 25.1355 59.8397 26.9738 59.7637 29.0704L59.7789 29.0628Z' fill='%23C2C2AC'/%3E%3Cpath d='M59.779 29.0627C59.7714 29.3894 59.7562 29.7236 59.7334 30.0579C59.5815 32.4127 58.5256 34.9499 57.2418 35.3829C57.1127 35.4284 56.976 35.4512 56.8392 35.4512C55.6086 35.436 54.9933 34.2586 54.6287 32.2456C55.0161 32.3292 58.0015 32.8153 59.7866 29.0703L59.779 29.0627Z' fill='%23BBB99D'/%3E%3Cpath d='M54.2868 29.3515V29.2071C54.264 28.8577 54.264 28.5159 54.2792 28.1816C54.2792 27.931 54.2944 27.6879 54.3172 27.4448C54.3172 27.3461 54.3324 27.2549 54.34 27.1561C54.3476 27.0346 54.3628 26.9131 54.3704 26.7991C54.3704 26.7535 54.378 26.708 54.3856 26.6624C54.4008 26.5484 54.4083 26.4421 54.4235 26.3433C54.4311 26.2674 54.4387 26.1914 54.4539 26.1231C54.4767 25.9635 54.4995 25.8192 54.5147 25.6825C54.5223 25.6293 54.5299 25.5685 54.5375 25.5229C54.5375 25.5077 54.5375 25.485 54.5451 25.4698C54.5451 25.447 54.5527 25.4166 54.5603 25.3938C54.5603 25.3634 54.5679 25.3254 54.5755 25.2951C54.5831 25.2419 54.5907 25.1963 54.5983 25.1507C54.5983 25.1127 54.6134 25.0748 54.6134 25.0444V25.0292C54.6134 25.0292 54.6134 25.014 54.621 25.0064C54.621 25.0064 55.2363 24.186 55.6921 23.9733C55.996 23.829 56.2846 23.7454 56.5505 23.6998C57.4544 23.5479 58.1685 23.867 58.6775 24.1556C58.9281 27.6499 54.2792 29.3591 54.2792 29.3591L54.2868 29.3515Z' fill='%23C5CAB9'/%3E%3Cpath d='M57.629 31.1897C57.4087 30.734 56.8618 30.734 56.5883 30.9087C55.9958 31.3037 56.1629 32.5419 57.0061 32.4203C57.4771 32.352 57.8341 31.6303 57.6214 31.1897H57.629Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M57.6294 31.1896C57.5307 30.9921 57.3787 30.8782 57.2116 30.8326C57.2876 30.8934 57.3559 30.9769 57.4091 31.0833C57.6218 31.5239 57.2572 32.2455 56.7938 32.3139C56.6875 32.3291 56.5963 32.3215 56.5128 32.2987C56.6343 32.3974 56.8014 32.4506 57.0141 32.4202C57.4851 32.3519 57.8421 31.6302 57.6294 31.1896Z' fill='%23676D54'/%3E%3Cpath d='M57.3252 27.2548C57.2568 27.2016 57.1885 27.1636 57.0973 27.1636C56.9606 27.1332 56.8086 27.1484 56.6567 27.232C55.6768 27.7941 57.1733 29.4273 57.6822 28.341C57.8645 27.9612 57.6518 27.4751 57.3176 27.2624L57.3252 27.2548Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M57.325 27.2548C57.325 27.2548 57.3098 27.2472 57.3022 27.2396C57.5225 27.4903 57.6365 27.8625 57.4921 28.1663C57.287 28.5993 56.9224 28.5993 56.6262 28.4094C56.9452 28.7437 57.439 28.8728 57.6896 28.3335C57.8719 27.9536 57.6593 27.4675 57.325 27.2548Z' fill='%23676D54'/%3E%3Cpath d='M57.8039 24.4516C57.7203 24.1022 56.9607 23.5173 56.6188 24.125C56.4593 24.4061 56.596 24.7555 56.786 24.9682C56.9303 25.1277 57.1886 25.272 57.4089 25.2341C57.576 25.2037 57.6975 25.1201 57.7811 24.9682C57.8646 24.8163 57.8419 24.6188 57.8039 24.4592V24.4516Z' fill='%23979E87'/%3E%3Cpath opacity='0.4' d='M57.8039 24.452C57.7431 24.1937 57.3253 23.8215 56.9759 23.8594C57.2797 23.9202 57.5912 24.2241 57.6368 24.4368C57.6748 24.5963 57.7052 24.7938 57.614 24.9457C57.5304 25.0976 57.4089 25.1812 57.2418 25.2116C57.2342 25.2116 57.2266 25.2116 57.219 25.2116C57.2873 25.2268 57.3481 25.2268 57.4089 25.2116C57.576 25.1812 57.6976 25.0976 57.7811 24.9457C57.8647 24.7938 57.8419 24.5963 57.8039 24.4368V24.452Z' fill='%23676D54'/%3E%3Cpath d='M65.3873 39.2301C63.9279 38.9462 61.3907 39.4475 59.8736 39.8866L59.8914 40.5298L59.47 40.0152C58.7824 40.2681 58.7736 40.5209 59.1196 41.0887C59.7805 42.1843 59.6829 42.0823 60.0245 42.0335C62.1137 41.1463 64.4868 40.6983 65.7466 40.7516C65.8708 40.583 65.9639 39.3366 65.3917 39.2301H65.3873Z' fill='%23CE8000'/%3E%3Cpath opacity='0.6' d='M65.387 39.2303C65.0055 39.1549 64.5486 39.1371 64.0562 39.1549C64.0695 39.2835 64.0784 39.4077 64.0695 39.5186C64.0518 40.0287 63.8566 40.5166 63.5683 40.9691C64.4288 40.805 65.1918 40.734 65.7418 40.7562C65.866 40.5876 65.9592 39.3412 65.3914 39.2347L65.387 39.2303Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M65.3789 39.2259C64.8643 39.1283 64.2123 39.1238 63.5247 39.1815C63.3384 39.5364 63.0545 39.8646 62.7352 40.1263C62.6154 40.2239 62.3226 40.5167 62.1275 40.4058C61.9855 40.3259 61.9589 40.1662 61.95 40.011C61.6883 40.5211 61.1072 40.8804 60.6149 41.2353C60.3177 41.4526 60.0249 41.7631 59.7011 42.0115C59.7898 42.0914 59.8519 42.0559 60.0072 42.0337C62.0964 41.1465 64.4696 40.6985 65.7293 40.7518C65.8535 40.5832 65.9467 39.3368 65.3744 39.2303L65.3789 39.2259Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M62.305 41.182C62.2606 41.213 62.2163 41.2485 62.1763 41.284C62.8772 41.0888 63.5558 40.9513 64.168 40.8582C64.199 40.6098 64.1769 40.348 64.1236 40.1263C63.893 40.3126 63.6224 40.5388 63.2986 40.561C63.2764 40.561 63.2587 40.5477 63.2542 40.5299L63.232 40.348C63.0369 40.6985 62.6465 40.9336 62.3094 41.182H62.305Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M64.5931 40.0331C64.5975 40.0864 64.5754 40.2416 64.633 40.2283C64.6907 40.2194 64.7484 40.2017 64.8016 40.1795C64.9347 40.1174 65.0544 40.0331 65.1609 39.9355C65.325 39.7803 65.4891 39.5807 65.6133 39.3678C65.5512 39.2968 65.4758 39.2436 65.3782 39.2258C65.1076 39.1726 64.7971 39.146 64.46 39.1415C64.5044 39.4387 64.5665 39.7315 64.5931 40.0287V40.0331Z' fill='%23C77500'/%3E%3Cpath d='M55.2729 39.9443L54.9136 40.3435L54.9934 39.8378C53.6317 39.412 50.775 38.9418 49.5286 39.3321C49.4487 39.3543 49.2136 40.7959 49.6439 40.7604C49.6705 40.7604 49.6971 40.7604 49.7282 40.7604C49.7947 40.7072 49.8746 40.654 49.9677 40.6185C50.5754 40.3834 51.1432 40.4588 51.1432 40.4588C51.1432 40.4588 50.9569 40.6318 50.7351 40.8802C52.2477 41.1508 54.6386 41.8028 55.3172 42.0424C55.7165 42.1843 56.0979 41.5544 56.2443 40.9689C56.4306 40.2104 56.333 40.2903 55.2684 39.9487L55.2729 39.9443Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M55.2729 39.9486L54.9136 40.3478L54.9935 39.8421C54.8959 39.8111 54.8781 39.8067 54.7628 39.7756C54.612 39.8732 54.4878 39.9575 54.3547 40.024C53.8579 40.2724 53.33 40.4631 52.7844 40.574C52.1546 40.7027 51.5069 40.7648 50.8638 40.7426C50.8238 40.7825 50.7839 40.8313 50.7396 40.8801C52.2522 41.1507 54.6475 41.8027 55.3261 42.0423C55.7254 42.1842 56.1068 41.5543 56.2532 40.9688C56.4395 40.2103 56.3464 40.2902 55.2774 39.9486H55.2729Z' fill='%23C77500'/%3E%3Cpath opacity='0.6' d='M55.7479 40.0995C55.5837 40.5919 55.2865 41.0177 54.8563 41.3548C54.6833 41.4879 54.5058 41.621 54.324 41.7407C54.7631 41.8649 55.118 41.9714 55.322 42.0424C55.7212 42.1843 56.1027 41.5544 56.2491 40.9689C56.4043 40.3435 56.3644 40.2902 55.7479 40.0995Z' fill='%23A05A07'/%3E%3Cpath d='M26.0353 88.2001H30.1601L21.0597 73.0151C20.6875 72.8936 10.2274 76.7069 6.62677 86.3086C13.5318 84.6602 22.8828 89.3319 26.0353 92.6135V88.2001Z' fill='%239EA58E'/%3E%3Cpath d='M26.0807 92.6894C26.3466 92.4995 28.0862 90.9878 28.3368 90.7827C28.4964 90.6536 28.6559 90.5169 28.8078 90.3801C29.3775 89.8788 29.9093 89.3318 30.3954 88.7393L20.8621 72.8251C20.4899 72.7036 10.0298 76.5169 6.42914 86.1186C13.5241 84.4246 23.1866 89.4002 26.0807 92.6894Z' fill='%239EA58E'/%3E%3Cpath d='M14.0635 81.7508C12.1644 81.3558 8.99677 83.027 7.83454 85.4047C7.75098 85.5794 7.65982 85.7465 7.56866 85.9136C9.90073 85.5946 12.4379 85.8984 14.8839 86.5593C15.484 84.7134 15.9626 82.1535 14.0635 81.7508Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M20.8623 72.8251C20.5964 72.734 15.0283 74.7166 10.6149 79.4643C10.6377 79.4643 10.668 79.4643 10.6908 79.4719C14.3295 79.9125 18.477 82.2293 21.9182 89.5142C23.7489 90.5776 25.215 91.7095 26.0809 92.6894C26.3468 92.4995 28.0864 90.9878 28.337 90.7827C28.4966 90.6536 28.6561 90.5169 28.808 90.3801C29.3777 89.8788 29.9095 89.3243 30.3956 88.7393L20.8623 72.8251Z' fill='%23949984'/%3E%3Cpath d='M28.808 90.3803C29.3777 89.8789 29.9095 89.332 30.3956 88.7395L20.8623 72.8252C20.6344 72.7493 16.5096 74.1926 12.5595 77.5957C18.9404 79.791 24.9187 85.2148 28.3674 90.7601C28.5193 90.6385 28.6713 90.5094 28.8156 90.3803H28.808Z' fill='%23949984'/%3E%3Cpath d='M30.4631 90.6689C30.577 90.5018 30.7973 90.4258 30.9796 90.3574C31.2151 90.2739 31.4582 90.2055 31.6937 90.1144C32.4381 89.8257 33.1902 89.5446 33.965 89.3244C34.322 89.2256 34.6866 89.142 35.0513 89.0585C35.3475 88.9825 35.6514 88.9066 35.9552 88.8838C36.2439 88.861 36.5553 88.861 36.8136 88.9977H36.8288H36.844C37.4213 88.5951 37.9531 88.1393 38.4468 87.6456C37.5353 81.9408 27.8804 67.1508 27.8804 67.1508C20.3221 66.9609 12.4371 69.4525 8.57819 73.8735C18.7648 74.6407 26.3459 82.8295 29.9921 90.8436C30.1441 90.8816 30.3188 90.7752 30.4555 90.6765L30.4631 90.6689Z' fill='%239EA58E'/%3E%3Cpath d='M36.7832 88.671C37.3605 88.2684 37.8922 87.8126 38.386 87.3189C37.4744 81.6141 27.8196 66.8241 27.8196 66.8241C20.2613 66.6342 12.3763 69.1258 8.5174 73.5468C18.8256 74.3216 26.4826 82.7383 30.0757 90.8436C32.4609 90.7752 34.8157 90.0308 36.7756 88.6634L36.7832 88.671Z' fill='%239EA58E'/%3E%3Cpath d='M17.1169 72.2097C15.2102 71.3969 11.4576 72.4983 10.1131 73.7365C12.9845 74.1771 15.6356 75.2178 18.0208 76.6611C19.0691 74.9595 18.8336 72.9541 17.1169 72.2173V72.2097Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M27.8203 66.8316C23.1106 66.7177 18.2717 67.6368 14.3672 69.4144C19.3884 71.2147 24.9717 76.0307 24.9033 82.6015C27.0834 85.1615 28.823 88.0253 30.0764 90.8435C32.4616 90.7751 34.8165 90.0307 36.7763 88.6634C37.3536 88.2608 37.8854 87.805 38.3791 87.3112C37.4676 81.6064 27.8127 66.8164 27.8127 66.8164L27.8203 66.8316Z' fill='%23949984'/%3E%3Cpath d='M27.8196 66.8317C23.5733 66.7253 19.2282 67.4697 15.544 68.9206C20.869 69.1409 31.4734 81.9711 33.4333 90.1599C33.4409 90.2055 33.4561 90.2434 33.4637 90.289C34.6411 89.9244 35.7577 89.385 36.7756 88.6786C37.3529 88.276 37.8847 87.8202 38.3785 87.3265C37.4669 81.6216 27.812 66.8317 27.812 66.8317H27.8196Z' fill='%23949984'/%3E%3Cpath d='M13.4029 67.675C13.1826 67.7433 13.2965 67.9408 13.0762 68.0168C23.787 68.3282 33.1836 77.4894 35.3638 90.9044L35.4169 90.9272L40.4989 90.9044V65.2441C34.08 64.0363 21.8196 65.0542 13.3953 67.6826L13.4029 67.675Z' fill='%239EA58E'/%3E%3Cpath d='M41.418 91.3678C44.3426 85.9896 48.2167 72.8784 44.5704 66.8089C42.3675 63.1399 24.182 64.0363 13.0838 67.6901C23.8857 68.0092 33.3507 77.3146 35.4245 90.9196C37.9617 91.3602 39.8076 91.4665 41.418 91.3678Z' fill='%239EA58E'/%3E%3Cpath d='M26.9546 70.9186C26.3924 70.4248 25.686 70.1893 24.9643 70.0526C24.3414 69.931 23.6957 69.8703 23.1108 69.6196C22.5259 69.3689 22.1157 68.9207 21.9258 68.313C21.7511 67.7281 21.47 67.1128 20.9459 66.7634C20.4749 66.4519 19.9052 66.3836 19.3507 66.4064C18.5986 66.4367 17.8618 66.5811 17.1402 66.7482C16.0691 66.9913 14.9676 67.2875 13.9497 67.7509C18.9329 68.1231 23.597 70.4096 27.3268 74.1394C27.4103 73.9951 27.4787 73.8507 27.5395 73.6988C27.9345 72.7265 27.7598 71.6402 26.9546 70.9262V70.9186Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M44.5701 66.809C43.4611 64.9555 38.2728 64.2718 31.9831 64.5149C32.0742 65.0542 32.1046 65.6088 32.1198 66.1557C32.135 67.1356 32.0666 68.1231 31.8919 69.0879C31.5881 70.7211 30.9955 72.3239 30.0156 73.676C29.5674 74.2989 29.0433 74.8459 28.4736 75.3472C31.9603 79.3277 34.4746 84.6679 35.4318 90.9196C37.9689 91.3602 39.8148 91.4666 41.4252 91.3678C44.3498 85.9896 48.2239 72.8784 44.5777 66.809H44.5701Z' fill='%23949984'/%3E%3Cpath d='M40.7871 83.3082C40.149 86.1265 39.0323 88.8915 37.308 91.2008C38.926 91.3983 40.225 91.4363 41.41 91.3679C44.3345 85.9897 48.2087 72.8785 44.5624 66.8091C44.0231 65.9127 42.5266 65.2898 40.4149 64.91C40.5972 65.776 40.7491 66.6496 40.8858 67.5307C41.3492 70.5313 41.5771 73.5698 41.5391 76.6083C41.5087 78.8568 41.2808 81.1205 40.7795 83.3158L40.7871 83.3082Z' fill='%23949984'/%3E%3Cpath d='M39.1687 65.6465C39.6245 65.8136 41.0298 66.4137 40.9158 66.8847C39.9359 67.2341 37.9761 66.9834 36.9278 66.991C28.3516 67.0062 26.3462 69.0041 24.1584 68.3128C23.9077 68.2368 24.7661 67.143 24.8877 67.067C26.3006 66.2314 28.1693 66.0187 29.7645 65.7453C32.1041 65.3502 36.9354 64.8185 39.1611 65.6389L39.1687 65.6465Z' fill='%23949984'/%3E%3Cpath opacity='0.63' d='M24.7436 68.4494C24.417 68.4494 24.0296 68.3886 23.8852 68.1C23.7941 67.9177 23.8245 67.6974 23.9232 67.5227C24.022 67.348 24.1815 67.2112 24.3486 67.0973C24.6677 66.8694 25.0323 66.7023 25.4121 66.6035C25.8451 66.4896 26.3389 66.4668 26.7035 66.7099C28.2683 67.7582 26.4528 68.4418 24.7436 68.457V68.4494Z' fill='%23676D54'/%3E%3Cpath opacity='0.63' d='M39.8748 66.201C39.9508 66.3681 40.0723 66.5125 40.0571 66.6948C39.9964 67.3557 37.2769 67.1885 36.5477 66.7404C36.2666 66.5732 35.9779 66.315 36.0007 65.9883C36.0159 65.7908 36.1678 65.6161 36.3426 65.5174C36.5173 65.4186 37.4668 65.2971 37.6643 65.2819C38.0517 65.2591 38.4543 65.3123 38.8265 65.4186C39.2519 65.5477 39.6849 65.7832 39.8672 66.1934L39.8748 66.201Z' fill='%23676D54'/%3E%3Cpath d='M28.7312 60.4809C27.8425 61.0355 25.7383 62.1369 25.1458 61.271C24.9407 60.9747 25.0926 60.5645 25.2445 60.2455C25.6699 59.3643 26.1333 58.4755 26.8322 57.7919C27.3563 57.2829 27.9868 56.8955 28.6097 56.5233C29.5592 55.946 30.5088 55.3762 31.5419 54.9736C32.5142 54.5938 33.5397 54.3735 34.5576 54.1608C35.1501 54.0393 35.7502 53.9102 36.3427 54.0013C34.9146 56.3865 33.3954 58.8705 31.0253 60.329C29.0123 61.5672 27.7285 60.8228 28.7312 60.4961V60.4809Z' fill='%2334381B'/%3E%3Cpath d='M39.8375 40.0242C41.6302 42.3107 43.4077 46.2152 39.4121 50.2868C39.3589 50.34 39.2981 50.3703 39.245 50.3779C37.9916 53.5684 35.6291 56.9032 36.0773 58.4376C36.3052 59.2124 36.647 59.9948 35.8646 60.5646C34.0035 61.9243 31.5803 59.2732 31.2841 56.9791C28.1544 58.6123 26.3768 58.1413 24.4626 57.8831C24.379 58.111 24.2879 58.3313 24.1967 58.5515C23.8245 59.4327 23.08 61.0887 21.8646 60.8684C20.7556 60.6633 20.4745 58.8782 20.315 57.9818C19.4262 58.6807 18.3855 59.1441 17.6259 60.0252C16.7675 61.0127 14.238 64.0133 14.3595 62.0155C14.3747 61.7648 14.4962 61.5369 14.6178 61.3242C14.4279 61.6205 14.2152 61.9091 13.9873 62.175C13.5695 62.6687 13.0605 62.4181 13.1289 61.5217C13.4252 57.8299 17.2157 47.9471 19.3731 44.7719C20.9683 42.417 23.1028 40.1685 25.8831 39.2798C25.8527 38.5657 26.1186 35.3677 23.7257 34.5473C23.5054 34.4713 23.7257 33.856 23.8169 33.7041C23.5814 33.2255 23.4675 32.6862 23.3155 32.1848C23.1788 31.7366 22.9737 31.3188 22.7762 30.8934C22.7078 30.8783 22.6471 30.8327 22.6015 30.7415C22.5103 30.5364 22.4572 30.3389 22.4496 30.149C22.3812 29.9591 22.3204 29.7692 22.2748 29.5717C22.2141 29.283 22.5179 29.1235 22.7154 29.2147C23.6954 27.6878 30.175 24.0948 34.2466 31.5771C37.3231 37.2288 33.9428 32.4659 39.8527 40.0166L39.8375 40.0242Z' fill='%23676D54'/%3E%3Cpath d='M26.7257 28.9792C25.9357 29.7844 24.0063 30.0807 24.3329 28.9944C24.8494 27.2624 28.4577 27.2169 26.7257 28.9792Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M39.8374 40.0242C33.9275 32.4735 37.3079 37.2364 34.2314 31.5847C30.1598 24.1024 23.6801 27.6954 22.7002 29.2223C22.5027 29.1311 22.1912 29.2907 22.2596 29.5793C22.3052 29.7768 22.3659 29.9667 22.4343 30.1566C22.4419 30.3465 22.4951 30.544 22.5862 30.7491C22.6242 30.8403 22.6926 30.8859 22.761 30.9011C22.9585 31.3265 23.1636 31.7443 23.3003 32.1924C23.4522 32.6938 23.5662 33.2331 23.8017 33.7117C23.7105 33.8636 23.4826 34.4789 23.7105 34.5549C26.1033 35.3677 25.8375 38.5657 25.8678 39.2874C24.7968 39.6292 23.8169 40.1761 22.9281 40.8522C23.1712 40.9965 23.3915 41.1789 23.5662 41.4067C23.6953 41.5739 23.7789 41.7638 23.8548 41.9613C23.9536 42.2196 24.0447 42.4778 24.1131 42.7513C24.2954 43.4957 24.3562 44.3161 24.0827 45.0454C23.946 45.4176 23.7257 45.7442 23.4978 46.0709C23.2775 46.3899 23.042 46.7014 22.7838 46.9976C22.2672 47.5977 21.6823 48.1371 21.0594 48.6156C20.5352 49.0182 19.9807 49.3905 19.3958 49.7019C18.8033 50.0133 18.1728 50.2792 17.5119 50.4235C17.1853 50.4919 16.8434 50.5451 16.5092 50.5375C14.8532 54.5255 13.3036 59.2352 13.1213 61.5369C13.0529 62.4333 13.5619 62.684 13.9797 62.1902C14.2075 61.9243 14.4202 61.6357 14.6101 61.3394C14.4886 61.5597 14.3671 61.7876 14.3519 62.0307C14.2303 64.0285 16.7675 61.028 17.6183 60.0405C18.3779 59.1517 19.4186 58.6959 20.3074 57.997C20.4669 58.8934 20.7479 60.6785 21.857 60.8836C23.0724 61.1039 23.8169 59.4479 24.1891 58.5668C24.2802 58.3541 24.3714 58.1262 24.4549 57.8983C26.3768 58.149 28.1543 58.6275 31.2764 56.9943C31.5727 59.2884 33.9959 61.9395 35.857 60.5798C36.647 60.0025 36.2976 59.2201 36.0697 58.4528C35.6215 56.9184 37.9763 53.5836 39.2373 50.3932C39.2981 50.3856 39.3513 50.3552 39.4044 50.302C43.4001 46.2304 41.6226 42.3259 39.8298 40.0394L39.8374 40.0242ZM27.0301 28.6906C26.8022 29.0704 26.4148 29.3514 26.0122 29.5261C25.5868 29.7085 24.9563 29.8984 24.5157 29.6705C24.2195 29.5185 24.1891 29.1843 24.3106 28.8957C24.5081 28.4019 25.0019 27.9309 25.5488 27.7714L25.4652 27.7866C25.4652 27.7866 25.4121 27.7334 25.45 27.7258C25.7463 27.6802 26.0426 27.6271 26.3464 27.6195C26.5895 27.6195 26.9465 27.6195 27.1136 27.8246C27.3111 28.0677 27.182 28.4475 27.0377 28.6906H27.0301Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M26.7645 30.3921C27.0076 30.4529 27 30.7264 26.9848 30.9315C26.962 31.1973 26.8481 31.4176 26.6354 31.5771C26.2707 31.8582 25.7314 31.805 25.4047 31.4936C24.6679 30.8099 25.0933 29.9591 26.7645 30.3845V30.3921Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M22.4344 30.1566C22.3661 29.9667 22.3053 29.7768 22.2597 29.5793C22.199 29.2906 22.5028 29.1311 22.7003 29.2222C22.7535 29.1463 22.8142 29.0627 22.8902 28.9792C25.8376 32.0101 26.7491 34.0231 26.7036 35.4512C26.6808 36.1273 26.1414 36.3248 25.4958 36.3855C25.1995 35.6031 24.6678 34.8891 23.7106 34.5624C23.4903 34.4865 23.7106 33.8712 23.8018 33.7192C23.5663 33.2407 23.4523 32.7013 23.3004 32.2C23.1637 31.7518 22.9586 31.334 22.7611 30.9086C22.6927 30.8934 22.6319 30.8478 22.5864 30.7567C22.4952 30.5516 22.442 30.3541 22.4344 30.1642V30.1566Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M24.7969 35.2309C24.5158 34.9422 24.1588 34.6991 23.7106 34.5472C23.4903 34.4713 23.7106 33.856 23.8018 33.704C23.5663 33.2255 23.4523 32.6861 23.3004 32.1848C23.1637 31.7366 22.9586 31.3188 22.7611 30.8934C22.6927 30.8782 22.6319 30.8326 22.5864 30.7415C22.4952 30.5364 22.442 30.3389 22.4344 30.149C22.3661 29.9591 22.3053 29.7692 22.2597 29.5716C22.199 29.283 22.5028 29.1235 22.7003 29.2146C22.7383 29.1539 22.7915 29.0855 22.8522 29.0171C24.0904 30.4072 26.2174 33.5369 25.3742 34.8511C25.2603 35.0258 25.0324 35.1853 24.7969 35.2309Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M13.7593 62.3573C13.8352 62.3194 13.9036 62.251 13.9796 62.175C14.0935 62.0459 14.1999 61.9092 14.3062 61.7648C14.4126 61.6281 14.5113 61.4762 14.6024 61.3318C14.5721 61.385 14.5417 61.4382 14.5189 61.4914C14.5037 61.5218 14.4885 61.5445 14.4733 61.5749C14.405 61.7193 14.3518 61.8636 14.3442 62.0231C14.3062 62.646 14.5265 62.7827 14.8759 62.646C15.6432 62.3422 17.0257 60.709 17.6106 60.0329C17.8993 59.6986 18.2259 59.4252 18.5677 59.1821C18.9627 58.8934 19.3805 58.6428 19.7907 58.3617C19.9654 58.2402 20.1325 58.1186 20.2997 57.9895C20.4592 58.8858 20.7403 60.671 21.8493 60.8761C22.1076 60.9216 22.3431 60.8837 22.5558 60.7925C22.6165 60.7697 22.6697 60.7393 22.7229 60.7014C22.8672 60.6102 22.9964 60.5039 23.1255 60.3747C23.2015 60.2988 23.2698 60.2152 23.3382 60.124C23.361 60.0937 23.3838 60.0633 23.4066 60.0329C23.4749 59.9417 23.5357 59.8506 23.5965 59.7518C23.6345 59.6835 23.6724 59.6227 23.7028 59.5619C23.7256 59.5239 23.7408 59.4935 23.7636 59.4556C23.794 59.3948 23.8319 59.3264 23.8623 59.2657C23.9231 59.1289 23.9839 59.0074 24.0371 58.8934C24.0902 58.7719 24.1358 58.658 24.1814 58.5592C24.2725 58.3389 24.3637 58.1186 24.4473 57.8907C26.3691 58.1414 28.1466 58.62 31.2687 56.9868C31.5574 59.2277 33.8819 61.8104 35.7202 60.6558C35.7657 60.6254 35.8113 60.595 35.8493 60.5646C35.9632 60.4811 36.0544 60.3899 36.1304 60.2988C36.1531 60.2608 36.1835 60.2304 36.1987 60.1924C36.2215 60.1544 36.2443 60.1164 36.2595 60.0785C36.4646 59.5847 36.2291 59.015 36.062 58.4453C35.8949 57.8755 36.1152 57.0551 36.5254 56.0904C36.5861 55.9461 36.6545 55.7942 36.7229 55.6422C36.7912 55.4827 36.8672 55.3232 36.9508 55.1637C37.0267 55.0041 37.1027 54.8446 37.1862 54.6775C37.3078 54.4192 37.4369 54.1685 37.566 53.9103C38.1358 52.7784 38.7511 51.5782 39.222 50.3932C39.2828 50.3856 39.336 50.3552 39.3892 50.302C39.6094 50.0741 39.8145 49.8463 40.0045 49.6184C40.0956 49.5044 40.1868 49.3981 40.2703 49.2841C43.081 45.5847 41.4478 42.1284 39.807 40.0394C38.5764 38.467 37.7484 37.4339 37.1862 36.7199C35.3327 34.403 36.2595 35.588 35.0213 33.142C34.8162 32.7394 34.5503 32.2305 34.2085 31.5924C32.8943 29.1767 31.3219 27.9158 29.7722 27.3612C28.8987 27.0574 28.0327 26.9738 27.2123 27.0346C34.0186 34.479 29.8786 51.8061 25.6779 48.0839C23.1407 51.7833 19.616 53.7659 15.9622 51.8061C15.2026 53.728 14.5037 55.7258 13.9796 57.4957C13.501 59.1137 13.1668 60.5418 13.0908 61.5294C13.03 62.2738 13.3719 62.57 13.7365 62.3649L13.7593 62.3573Z' fill='%23464C2E'/%3E%3Cpath opacity='0.7' d='M13.7592 62.3573C13.8352 62.3193 13.9035 62.251 13.9795 62.175C14.0934 62.0459 14.1998 61.9091 14.3061 61.7648C14.4125 61.6281 14.5112 61.4762 14.6024 61.3318C14.572 61.385 14.5416 61.4382 14.5188 61.4914C14.5036 61.5217 14.4884 61.5445 14.4732 61.5749C14.4049 61.7192 14.3593 61.8636 14.3441 62.0231C14.3289 62.3118 14.3669 62.5017 14.4505 62.6004C14.4656 62.6156 14.4808 62.6308 14.496 62.646C14.5112 62.6612 14.5264 62.6688 14.5416 62.6688C14.6328 62.7068 14.7467 62.6992 14.8758 62.646C15.6431 62.3421 17.0256 60.7089 17.6105 60.0329C17.8992 59.6986 18.2258 59.4252 18.5676 59.1821C18.9626 58.8934 19.3804 58.6427 19.7906 58.3617C19.9654 58.2401 20.1325 58.1186 20.2996 57.9895H20.3072C20.4667 58.8782 20.7478 60.6709 21.8568 60.8685C21.9632 60.8912 22.0695 60.8912 22.1759 60.8836C22.2063 60.8836 22.2367 60.876 22.267 60.8685H22.2746C22.2746 60.8685 22.3354 60.8533 22.3658 60.8457C22.4114 60.8305 22.4569 60.8153 22.5101 60.8001C22.5253 60.8001 22.5481 60.7925 22.5633 60.7849C22.6241 60.7545 22.6772 60.7317 22.7304 60.6937C22.7912 60.6558 22.8444 60.6178 22.8975 60.5722C22.9279 60.5494 22.9507 60.5266 22.9811 60.5038C23.0343 60.4583 23.0874 60.4127 23.133 60.3595C23.209 60.2835 23.2773 60.2 23.3457 60.1088C23.3685 60.0784 23.3913 60.0481 23.4141 60.0177C23.4824 59.9265 23.5432 59.8354 23.604 59.7366C23.642 59.6682 23.68 59.6075 23.7103 59.5467C23.7331 59.5087 23.7483 59.4783 23.7711 59.4404C23.8015 59.3796 23.8395 59.3112 23.8699 59.2504C23.9306 59.1213 23.9914 58.9922 24.0446 58.8782C24.0978 58.7567 24.1509 58.6427 24.1965 58.5364C24.2876 58.3237 24.3712 58.0958 24.4624 57.8755C25.6398 58.0274 26.764 58.2705 28.1845 58.0502C28.2605 58.035 28.3441 58.0198 28.4276 58.0047C29.2556 57.8527 30.1824 57.5337 31.2838 56.964C31.5041 58.6427 32.8639 60.5266 34.3148 60.8609C34.4667 60.8988 34.6186 60.914 34.7629 60.914C34.8085 60.914 34.8541 60.914 34.8997 60.914C34.9376 60.914 34.9832 60.9064 35.0212 60.8988C35.0364 60.8988 35.0592 60.8988 35.0744 60.8912C35.1124 60.8912 35.1428 60.876 35.1807 60.8685C35.2339 60.8533 35.2947 60.8381 35.3478 60.8153H35.3631C35.4846 60.7697 35.6137 60.7089 35.7353 60.633C35.7808 60.6026 35.8264 60.5722 35.8644 60.5418C35.9784 60.4583 36.0695 60.3671 36.1455 60.2759C36.1683 60.238 36.1986 60.2076 36.2138 60.1696C36.2366 60.1316 36.2594 60.0936 36.2746 60.0557C36.2898 60.0253 36.2974 59.9949 36.305 59.9645V59.9493C36.4493 59.4783 36.2442 58.9466 36.0847 58.4225C35.9176 57.8527 36.1379 57.0323 36.5481 56.0676C36.6088 55.9233 36.6772 55.7713 36.7456 55.6194C36.8139 55.4599 36.8899 55.3004 36.9735 55.1408C37.0494 54.9813 37.1254 54.8218 37.2089 54.6547C37.3305 54.3964 37.4596 54.1457 37.5888 53.8875C38.1585 52.7556 38.7814 51.5554 39.2447 50.3704C39.2979 50.3552 39.3587 50.3324 39.4119 50.2792C39.6322 50.0513 39.8373 49.8234 40.0272 49.5956C40.1183 49.4816 40.2095 49.3753 40.293 49.2613C41.5616 47.5901 41.9262 45.9645 41.7895 44.4984V44.4833C41.7743 44.3693 41.7667 44.2478 41.7439 44.1338C41.5844 43.0476 41.159 42.0524 40.6425 41.1941L40.5589 41.0497C40.4981 40.951 40.445 40.8674 40.3842 40.7763C40.2019 40.5028 40.0196 40.2445 39.8297 40.009C39.6094 39.728 39.3967 39.4621 39.1992 39.2114C38.3104 38.0796 37.6723 37.282 37.2089 36.6971C37.8926 39.1203 39.2296 42.9564 36.738 47.9472C35.0212 51.3807 31.9447 53.3177 29.0657 53.7051C26.6577 54.0242 24.0522 53.7127 25.2524 51.9048C25.8601 50.9857 26.3994 49.9298 26.331 48.8283C25.3283 52.1251 22.381 54.837 16.3799 53.1582C16.1065 53.0823 15.8254 52.9987 15.5519 52.9075C14.9594 54.4724 14.4201 56.0524 13.9947 57.4805C13.5161 59.0985 13.1895 60.5266 13.1135 61.5065C13.0527 62.251 13.3946 62.5472 13.7516 62.3497L13.7592 62.3573Z' fill='%23464C2E'/%3E%3Cpath opacity='0.7' d='M14.4505 62.5928C14.4505 62.5928 14.4809 62.6232 14.5037 62.6384C14.5189 62.6536 14.5341 62.6612 14.5493 62.6612C15.157 62.9118 16.9269 60.8153 17.6181 60.0252C18.3854 59.1365 19.4185 58.6807 20.3072 57.9818C20.4744 58.8858 20.7554 60.6633 21.8569 60.8684H21.8645C21.9708 60.8912 22.0772 60.8912 22.1835 60.8836C22.2139 60.8836 22.2443 60.876 22.2747 60.8684H22.2823C22.2823 60.8684 22.343 60.8532 22.3734 60.8456C22.5633 60.7925 22.7381 60.7013 22.8976 60.5722C22.928 60.5494 22.9507 60.5266 22.9811 60.5038C23.5584 60.0025 23.9535 59.1137 24.189 58.544C24.2801 58.3237 24.3712 58.1034 24.4548 57.8755C25.6322 58.035 26.7565 58.2705 28.177 58.0502C28.253 58.035 28.3365 58.0198 28.4201 58.0046C29.2481 57.8527 30.1748 57.5337 31.2763 56.9639C31.4966 58.6503 32.8639 60.5342 34.3148 60.8684C34.4667 60.9064 34.6187 60.9216 34.763 60.9216C34.8086 60.9216 34.8541 60.9216 34.8997 60.9216C34.9377 60.9216 34.9833 60.914 35.0212 60.9064C35.0364 60.9064 35.0592 60.9064 35.0744 60.8988C35.1124 60.8988 35.1428 60.8836 35.1808 60.876C35.4163 60.8229 35.6442 60.7165 35.8568 60.557C36.6469 59.9797 36.2974 59.1972 36.0771 58.4224C35.629 56.888 37.9838 53.5532 39.2448 50.3628C39.3056 50.3552 39.3587 50.3248 39.4119 50.2716C41.5389 48.1067 42.025 45.9949 41.7592 44.1414C41.5996 43.0551 41.1743 42.06 40.6577 41.2016L40.5741 41.0573C40.5134 40.9585 40.4602 40.8674 40.3994 40.7838C40.2171 40.5104 40.0348 40.2521 39.8449 40.0166C39.6246 39.7355 39.4119 39.4697 39.2144 39.219C39.2448 41.1257 39.2448 42.7665 39.2448 42.7741C39.146 51.2135 30.9648 56.6297 22.9128 53.9558C22.89 54.0166 15.6583 61.8104 14.4657 62.5928H14.4505Z' fill='%23464C2E'/%3E%3Cpath d='M24.7742 34.8284C24.7134 34.9044 24.6147 34.9348 24.4932 34.8816C20.2013 33.1192 12.8708 37.0693 13.8583 35.5121C14.7775 34.0688 16.0157 31.9494 17.4058 30.7948C18.0591 30.2478 18.7655 29.6933 19.6391 29.5794L22.822 29.1996C23.6196 29.9136 25.6022 34.5777 24.7818 34.8284H24.7742Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M22.8136 29.192C23.6112 29.906 25.5938 34.5625 24.7734 34.8208C24.7127 34.8968 24.6139 34.9272 24.4924 34.874C20.7018 33.3167 14.5488 36.2109 13.8423 35.8463C13.9487 35.8311 14.0551 35.8159 14.1614 35.8007C14.5944 35.7324 15.0274 35.6336 15.4452 35.5045C16.2808 35.2538 17.086 34.8892 17.8608 34.479C18.2482 34.2739 18.628 34.046 19.0002 33.8181C19.3421 33.6054 19.6915 33.3927 20.003 33.1268C20.5803 32.6179 21.0057 31.957 21.3855 31.2885C21.6589 30.8024 22.0312 29.9592 21.9172 29.3135L22.8212 29.2071L22.8136 29.192Z' fill='%2334381B'/%3E%3Cpath opacity='0.3' d='M24.7733 34.8283C24.7125 34.9042 24.6138 34.9346 24.4922 34.8814C22.7831 34.1826 20.6029 34.3801 18.6507 34.7827C19.1141 34.5092 19.623 34.2889 20.094 34.1218C20.6333 33.9319 21.1955 33.8179 21.7424 33.6584C22.2513 33.5065 22.7755 33.309 23.1629 32.9368C23.6187 32.4962 23.6718 31.8809 23.5655 31.2884C23.4895 30.8478 23.3528 30.4148 23.2237 29.9894C23.1705 29.8071 23.1021 29.6324 23.0262 29.4653C23.9149 30.6731 25.5177 34.6004 24.7657 34.8359L24.7733 34.8283Z' fill='%2334381B'/%3E%3Cpath opacity='0.4' d='M14.4957 35.2688C14.3514 35.3296 14.1691 35.3448 14.0248 35.2688C14.0476 35.2233 14.078 35.1701 14.1007 35.1245C14.4882 34.5092 14.9135 33.8179 15.3845 33.1419C15.4605 33.2558 15.5136 33.3698 15.5516 33.4609C15.8175 34.2813 14.83 35.1245 14.4957 35.2764V35.2688Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M17.3979 30.7947C18.0512 30.2477 18.7577 29.6932 19.6312 29.5793L21.0897 29.4045C21.0897 29.4045 21.1201 29.4425 21.1277 29.4653C21.5531 30.1718 21.2796 31.4631 19.8287 32.124C17.7701 33.066 16.6991 33.5901 16.494 31.6986C16.7902 31.3644 17.0941 31.0529 17.4055 30.7947H17.3979Z' fill='%23676D54'/%3E%3Cpath d='M26.3843 30.6731C26.5742 30.6503 26.7717 30.6275 26.9768 30.5744C27.0832 30.7643 27.1211 30.977 27.068 31.1973C26.9768 31.5619 26.6274 31.9113 26.2248 31.8809C25.769 31.843 25.4044 31.4403 25.3968 30.9846C25.3968 30.8934 25.4044 30.8099 25.4348 30.7187C25.7538 30.7187 26.0729 30.7035 26.3919 30.6731H26.3843Z' fill='%23464C2E'/%3E%3Cpath d='M27.0601 31.205C26.969 31.5696 26.6195 31.919 26.2169 31.8886C26.1409 31.8886 26.0726 31.8658 26.0042 31.843C26.1182 31.7291 26.2169 31.5924 26.3005 31.4632C26.4448 31.2429 26.5132 30.9315 26.4524 30.6732C26.6195 30.6504 26.7942 30.6276 26.9689 30.5821C27.0753 30.772 27.1133 30.9847 27.0601 31.205Z' fill='%2334381B'/%3E%3Cpath d='M14.2909 35.8538C15.3088 35.3752 16.2507 34.7295 17.2231 34.1674C17.7928 33.8332 18.3625 33.5141 18.955 33.2255C19.2437 33.0811 19.5475 32.9596 19.8438 32.8304C20.1552 32.6861 20.4667 32.6633 20.8085 32.6102C20.9604 32.5874 21.1199 32.5646 21.2719 32.5646C21.5529 32.5646 21.8416 32.6178 22.1075 32.5114C22.2822 32.443 22.4189 32.3139 22.586 32.2379C22.7532 32.162 22.9886 32.1772 23.0798 32.3291C23.1709 32.4886 23.0646 32.6937 22.9051 32.7849C22.7456 32.8684 22.5556 32.8608 22.3733 32.8456C21.0516 32.7697 19.7526 33.2179 18.5676 33.7952C17.9067 34.1142 17.2686 34.4712 16.6229 34.8283C16.1064 35.1169 15.4911 35.5803 14.9062 35.7246C14.6707 35.7854 14.458 35.831 14.2909 35.8538Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M38.1734 52.71C36.996 55.0876 35.735 57.2678 36.0693 58.43C36.206 58.901 36.3883 59.3795 36.3351 59.8049C36.3199 59.7821 36.3047 59.7594 36.2896 59.7366C35.9401 59.2352 35.5147 58.7794 35.0437 58.392C34.4816 57.9211 33.8132 57.5944 33.1067 57.4121C32.5294 57.2678 31.9369 57.2754 31.3595 57.4121C31.3216 57.2678 31.2988 57.1234 31.276 56.9791C31.1469 57.0475 31.0177 57.1082 30.8962 57.169C31.2 56.9183 31.4355 56.5917 31.7925 56.4018C32.1648 56.2043 32.5826 56.1131 32.9928 56.022C33.798 55.8245 34.5576 55.4826 35.2717 55.0572C35.9477 54.6622 36.5706 54.1837 37.1707 53.6823C37.5278 53.3861 37.8772 53.067 38.181 52.71H38.1734Z' fill='%2334381B'/%3E%3Cpath d='M25.8751 39.2798C25.8751 39.1887 26.1029 40.1382 25.6624 41.1713C25.5788 41.3764 25.4649 41.5815 25.2825 41.7106C25.1078 41.8474 24.8496 41.8929 24.6597 41.7866C24.4166 41.6499 24.3558 41.3232 24.3558 41.0422C24.3558 40.7611 24.3634 40.4496 24.1887 40.2294C24.1507 40.1762 24.0975 40.1306 24.0444 40.1002C24.6217 39.766 25.2294 39.4849 25.8751 39.2798Z' fill='%23464C2E'/%3E%3Cpath d='M41.5313 46.9216C41.1894 48.0079 40.5286 49.1397 39.4043 50.2792C39.3511 50.3324 39.2904 50.3627 39.2372 50.3703C39.2372 50.3703 39.7233 49.3296 40.1108 47.3394C40.4982 45.3492 40.4602 43.5717 40.4602 43.5717C40.4602 43.5717 41.3414 45.1973 41.5389 46.9216H41.5313Z' fill='%2334381B'/%3E%3Cpath opacity='0.32' d='M14.5869 58.3237C14.8908 58.4376 15.2706 58.2325 15.5061 58.0122C15.4833 58.149 15.4453 58.2933 15.3845 58.4528C15.1035 59.258 14.3135 59.5923 14.4046 58.7263C14.4198 58.5592 14.4502 58.3996 14.4806 58.2553C14.511 58.2781 14.5489 58.2933 14.5869 58.3085V58.3237Z' fill='%23676D54'/%3E%3Cpath opacity='0.32' d='M18.0961 55.627C18.438 55.8852 18.9773 55.7637 19.3571 55.5814C19.2812 55.7409 19.1748 55.908 19.0457 56.0903C18.4076 56.9943 17.2909 57.1234 17.7163 56.0751C17.7999 55.87 17.8834 55.6877 17.9746 55.5206C18.005 55.5586 18.043 55.5966 18.0886 55.6345L18.0961 55.627Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M29.5746 36.4007C29.3695 37.1376 28.3668 37.2591 28.1617 36.7881C28.1617 36.8793 29.3239 38.8467 29.5746 36.4007Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M29.9772 31.2885C29.9772 31.8278 29.3163 32.0937 29.0884 31.805C29.1036 31.8658 30.2506 32.99 29.9772 31.2885Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M28.0783 40.8825C27.7821 41.3915 27.0072 41.2927 26.9465 40.8977C26.9313 40.9585 27.4174 42.6601 28.0783 40.8825Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M34.4056 42.6069C34.1093 43.1159 33.3345 43.0171 33.2737 42.6221C33.2585 42.6829 33.7447 44.3845 34.4056 42.6069Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M30.6608 44.3465C30.3645 44.8554 29.5897 44.7567 29.5289 44.3617C29.5137 44.4225 29.9999 46.124 30.6608 44.3465Z' fill='%23464C2E'/%3E%3Cpath d='M27.1593 32.1392C27.0758 32.1392 26.9694 32.124 26.939 32.0404C26.8859 31.9265 27.0226 31.729 27.1137 31.6606C27.2505 31.5618 27.5316 31.5391 27.5847 31.7366C27.6455 31.9645 27.334 32.1164 27.1593 32.1316V32.1392Z' fill='%23676D54'/%3E%3Cpath d='M26.5668 64.8337C26.4149 64.902 26.2554 64.978 26.149 65.1147C25.9971 65.3122 26.0199 65.5857 26.0427 65.8364C26.0579 65.9883 26.0731 66.1326 26.0807 66.2846C25.7844 66.0263 25.5489 65.7072 25.3894 65.3426C25.2907 65.1223 25.3514 64.8641 25.5261 64.6969C25.6477 64.583 25.7768 64.4691 25.8984 64.3551C26.0655 64.2032 26.2402 64.0437 26.4453 63.9449C26.6504 63.8462 26.8935 63.8082 27.1062 63.8917C27.3189 63.9753 27.4784 64.2108 27.4252 64.4311C27.1365 64.5602 26.8479 64.6893 26.5592 64.8185L26.5668 64.8337Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M26.2552 64.4159C26.5971 64.2944 27.0528 64.2336 27.4327 64.3096C27.4327 64.3552 27.4327 64.4007 27.4327 64.4463C27.144 64.5755 26.8553 64.7046 26.5667 64.8337C26.4147 64.9021 26.2552 64.9781 26.1489 65.1148C25.997 65.3123 26.0197 65.5858 26.0425 65.8364C26.0577 65.9884 26.0729 66.1327 26.0805 66.2846C25.7919 66.0264 25.5488 65.7073 25.3893 65.3427C25.3057 65.1604 25.3285 64.9553 25.4424 64.7958C25.5032 64.7654 25.564 64.735 25.6095 64.7122C25.8222 64.6134 26.0274 64.4919 26.2552 64.4083V64.4159Z' fill='%2334381B'/%3E%3Cpath d='M37.4445 63.0865C37.8395 63.0562 37.8319 63.6714 37.4445 63.7018C37.0723 63.7246 36.4038 63.5043 36.1152 63.8158C36.024 63.9145 35.9101 63.9297 35.8189 63.8917C35.591 63.9145 35.3707 63.5955 35.5606 63.36C35.7505 63.1321 36.0772 62.9802 36.3506 62.8814C36.6241 62.7827 36.9887 62.6763 37.2546 62.8586C37.3458 62.9194 37.3837 63.003 37.3913 63.0941C37.4141 63.0941 37.4369 63.0941 37.4521 63.0941L37.4445 63.0865Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M37.2691 63.4055C37.345 63.4891 37.421 63.5878 37.4818 63.6942C37.4742 63.6942 37.4666 63.6942 37.4514 63.6942C37.0791 63.717 36.4107 63.4967 36.122 63.8081C36.0309 63.9069 35.9169 63.9221 35.8257 63.8841C35.5979 63.9069 35.3776 63.5878 35.5675 63.3523C35.6814 63.208 35.8561 63.1017 36.0309 63.0105C36.2208 62.9953 36.4183 62.9953 36.6006 63.0105C36.8665 63.0409 37.0867 63.2156 37.2615 63.4055H37.2691Z' fill='%2334381B'/%3E%3Cpath d='M23.6346 67.067C25.0019 62.8511 37.5738 61.6889 39.8754 65.1224C40.1565 65.5402 40.3616 66.0567 40.1489 66.5125C40.0425 66.7404 39.8602 66.9379 39.6172 67.0215C39.3817 67.0974 39.093 67.0367 38.9335 66.8392C38.8499 66.7328 38.8119 66.6037 38.7512 66.4821C38.0523 65.0312 31.6183 63.4512 25.4045 68.0774C24.9335 68.4344 24.1815 68.5407 23.7941 68.1001C23.551 67.8267 23.5206 67.4165 23.6346 67.067Z' fill='%23676D54'/%3E%3Cpath opacity='0.5' d='M39.8754 65.1146C40.1565 65.5324 40.3616 66.049 40.1489 66.5048C40.0425 66.7327 39.8602 66.9302 39.6172 67.0137C39.3817 67.0897 39.093 67.0289 38.9335 66.8314C38.8499 66.7251 38.8119 66.5959 38.7512 66.4744C38.0523 65.0235 31.6183 63.4435 25.4045 68.0696C24.9335 68.4266 24.1815 68.533 23.7941 68.0924C23.551 67.8189 23.5206 67.4087 23.6346 67.0593C23.6574 66.9985 23.6725 66.9378 23.7029 66.877C23.7713 66.9833 23.8473 67.0745 23.9384 67.1581C24.2651 67.4467 24.7132 67.4847 25.1082 67.3176C25.3817 67.196 25.6248 67.0061 25.8527 66.8086C26.1033 66.5883 26.3388 66.3301 26.4832 66.0186C26.7339 65.5021 26.5743 64.902 26.073 64.6589C27.5694 63.8992 29.5445 63.3979 31.5499 63.2004C31.5499 63.3295 31.5879 63.4587 31.679 63.5726C32.0209 64.0208 32.7045 64.1347 33.2211 64.2031C33.8288 64.2866 34.4517 64.3246 35.0518 64.1499C35.4696 64.0284 35.9254 63.7093 36.0241 63.2839C37.8016 63.5574 39.2373 64.1651 39.883 65.1222L39.8754 65.1146Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M27.0524 66.3301C27.1663 65.8971 27.2575 65.4489 27.2499 64.9932C27.2499 64.7273 27.1891 64.431 26.984 64.2487C27.9488 63.8689 29.0426 63.5803 30.1897 63.3828C30.4479 63.6334 30.5999 64.0588 30.6834 64.3779C30.767 64.6817 30.805 65.0008 30.8126 65.3198V65.4337C29.5288 65.768 28.169 66.3073 26.8017 67.1353C26.8929 66.8694 26.9764 66.6036 27.0524 66.3301Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M37.0263 64.4767C37.0718 64.2108 37.0794 63.793 36.9579 63.474C38.0897 63.7474 39.0165 64.1804 39.5938 64.7805C39.4343 65.3427 39.0165 65.8136 38.5303 66.1858C38.1885 65.844 37.5504 65.5174 36.692 65.2971C36.8743 65.0692 36.9807 64.7425 37.0187 64.4767H37.0263Z' fill='%23474C2F'/%3E%3Cpath d='M37.7032 62.2131C37.8856 62.5017 38.0679 62.8284 38.1134 63.155C37.9387 63.4437 37.2551 63.4816 37.2095 63.1702C37.2095 63.155 37.1943 63.1398 37.1791 63.1398C37.1335 62.9119 36.9512 62.722 36.7841 62.5549L35.0597 60.8457C35.0218 60.633 35.0977 60.3975 35.2344 60.2456C35.4699 59.9722 35.9029 60.0253 36.2144 60.1621C36.7461 60.8229 37.2475 61.5066 37.7032 62.2207V62.2131Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M37.7033 62.2132C37.8856 62.5018 38.068 62.8284 38.1135 63.1551C37.9388 63.4437 37.2551 63.4817 37.2096 63.1703C37.2096 63.1551 37.1944 63.1399 37.1792 63.1399C37.1488 62.9956 37.0728 62.874 36.9817 62.7601C37.0121 62.7601 37.0425 62.7449 37.0728 62.7297C37.2931 62.6234 37.3007 62.3423 37.3007 62.1296C37.3007 61.8865 37.2628 61.6738 37.1944 61.4535C37.3691 61.7042 37.5438 61.9549 37.7033 62.2132Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M36.206 60.1545C36.4263 60.4279 36.6466 60.709 36.8517 60.9901C36.7226 60.9521 36.5934 60.9217 36.4719 60.8913C36.3883 60.8761 36.2516 60.8533 36.1832 60.9217C36.1225 60.9825 36.1377 61.0584 36.1681 61.1344C35.9933 61.0053 35.7047 60.8153 35.6819 61.1344C35.6743 61.2483 35.6819 61.3547 35.6971 61.4686L35.0666 60.8457C35.0286 60.633 35.1046 60.3975 35.2413 60.2456C35.4768 59.9722 35.9098 60.0253 36.2212 60.1621L36.206 60.1545Z' fill='%2334381B'/%3E%3Cpath d='M38.2115 62.9042C38.6293 63.0257 40.2169 64.0057 40.0118 64.8185C39.9131 65.1983 39.0319 66.991 38.2191 66.7099C38.0596 66.6568 37.976 66.4744 38.0368 66.3225L39.0243 65.2135C39.1458 65.0995 39.237 64.9704 39.3206 64.826C39.4877 64.5374 38.1051 63.5119 38.014 63.4891C37.6342 63.3752 37.8393 62.7978 38.2191 62.9118L38.2115 62.9042Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M39.5334 63.7701C39.8601 64.0968 40.0956 64.469 40.012 64.8108C39.9133 65.1906 39.0321 66.9833 38.2193 66.7023C38.0598 66.6491 37.9762 66.4668 38.037 66.3149L39.0245 65.2058C39.146 65.0919 39.2372 64.9627 39.3207 64.8184C39.3739 64.7348 39.2752 64.5753 39.1232 64.4006C39.1384 64.4006 39.1536 64.4006 39.1612 64.393C39.3056 64.3474 39.4119 64.2107 39.4727 64.074C39.5031 64.0056 39.5335 63.8917 39.5486 63.7701H39.5334Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M39.5183 65.8136C39.1688 66.353 38.6827 66.8619 38.2193 66.7024C38.0598 66.6492 37.9762 66.4669 38.037 66.315L39.0245 65.2059C39.0853 65.1452 39.1384 65.0844 39.1916 65.016C39.1764 65.1755 39.1536 65.3275 39.222 65.4794C39.2828 65.6313 39.3967 65.7377 39.5258 65.8212L39.5183 65.8136Z' fill='%2334381B'/%3E%3Cpath d='M38.1134 62.9725C38.7743 63.5575 39.2605 64.469 39.2529 64.5298C39.2377 64.9476 38.6224 66.634 38.1362 66.6036C37.9843 66.596 37.1107 66.1402 37.4829 65.768C37.5133 65.7376 37.5437 65.7148 37.5817 65.7072C37.5969 65.692 37.612 65.6844 37.6272 65.6692C37.7412 65.6009 37.8703 65.6161 37.9615 65.692C38.0982 65.3502 38.3033 65.0311 38.4021 64.6817C38.3945 64.6589 38.3793 64.6437 38.3717 64.6209C38.3033 64.4462 38.1514 64.3019 38.0374 64.1576C37.9083 63.998 37.8096 63.8309 37.7488 63.6258C37.7336 63.5651 37.7336 63.5119 37.7488 63.4663C37.726 63.4435 37.6956 63.4207 37.6728 63.3979C37.3766 63.1321 37.8096 62.7067 38.1058 62.9649L38.1134 62.9725Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M39.1161 64.4768C39.1161 64.4768 39.1693 64.4236 39.1921 64.3932C39.2301 64.4692 39.2529 64.5224 39.2529 64.53C39.2377 64.9478 38.6224 66.6342 38.1362 66.6038C37.9843 66.5962 37.1107 66.1404 37.4829 65.7682C37.5133 65.7378 37.5437 65.715 37.5817 65.7074C37.5969 65.6922 37.612 65.6846 37.6272 65.6694C37.7412 65.6011 37.8703 65.6163 37.9615 65.6922C38.0982 65.3504 38.3033 65.0313 38.4021 64.6819C38.3945 64.6591 38.3793 64.6439 38.3717 64.6211C38.3717 64.6135 38.3641 64.6059 38.3565 64.5908C38.4249 64.6135 38.5008 64.6211 38.5692 64.6287C38.7591 64.6439 38.9718 64.5984 39.1161 64.4692V64.4768Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M38.3482 65.6084C38.3937 65.8211 38.4773 66.049 38.6216 66.2085C38.4621 66.4516 38.295 66.6187 38.1431 66.6111C37.9911 66.6035 37.1175 66.1477 37.4898 65.7755C37.5202 65.7451 37.5505 65.7224 37.5885 65.7148C37.6037 65.6996 37.6189 65.692 37.6341 65.6768C37.748 65.6084 37.8772 65.6236 37.9683 65.6996C38.0671 65.4641 38.1886 65.2286 38.295 64.9931C38.2874 65.1982 38.3026 65.4033 38.3405 65.6084H38.3482Z' fill='%2334381B'/%3E%3Cpath d='M38.1205 63.2385C38.6294 65.0009 37.847 66.3986 37.5203 66.5125C37.057 66.672 36.3885 65.7909 36.1074 65.168C36.5404 65.2439 36.9354 65.3503 37.2773 65.4718C37.2849 65.4946 37.2925 65.5098 37.3076 65.525C37.376 65.1984 37.4064 64.7958 37.4976 64.4463C37.5431 64.264 37.5203 64.0665 37.4064 63.907C37.3152 63.7779 37.2165 63.6487 37.1101 63.5272C36.8443 63.2385 37.2773 62.8055 37.5431 63.0942C37.5583 63.1094 37.5659 63.1246 37.5811 63.1322C37.7178 62.9651 38.0445 62.9575 38.1205 63.2309V63.2385Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M38.2267 64.4008C38.2267 64.4008 38.2647 64.378 38.2799 64.3628C38.2951 65.563 37.771 66.4214 37.5127 66.5125C37.0493 66.6721 36.3809 65.7909 36.0998 65.168C36.5328 65.244 36.9278 65.3503 37.2696 65.4718C37.2772 65.4946 37.2848 65.5098 37.3 65.525C37.3684 65.1984 37.3987 64.7958 37.4899 64.4463C37.4975 64.416 37.5051 64.378 37.5051 64.3476C37.7178 64.5071 37.9609 64.5755 38.2267 64.4008Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M37.4292 65.5782C37.452 65.8213 37.5052 66.1631 37.6495 66.4214C37.6039 66.467 37.5583 66.4973 37.5203 66.5049C37.452 66.5277 37.3836 66.5277 37.3153 66.5125C37.2849 65.9732 36.7607 65.3351 36.2366 65.4187C36.191 65.3275 36.1454 65.244 36.1074 65.1604C36.5404 65.2364 36.9354 65.3427 37.2773 65.4643C37.2849 65.487 37.2925 65.5022 37.3076 65.5174C37.376 65.1908 37.4064 64.7882 37.4976 64.4388C37.5052 64.4084 37.5127 64.3704 37.5127 64.34C37.5279 64.3476 37.5431 64.3628 37.5583 64.3704C37.5051 64.4767 37.4748 64.5983 37.452 64.7122C37.3912 64.9933 37.3912 65.2819 37.4216 65.563L37.4292 65.5782Z' fill='%2334381B'/%3E%3Cpath d='M30.6379 63.1928C30.9797 63.246 31.4583 65.3046 31.1696 65.7224C31.0101 65.9503 31.0025 65.8439 30.5087 66.3225C29.6807 67.1429 29.3389 66.7555 29.3541 66.5048C29.3541 66.4213 29.9618 65.7148 30.2353 65.4033C30.3188 65.3122 30.3492 65.1907 30.3264 65.0691C30.296 64.8944 30.2504 64.6361 30.2201 64.4462C30.1897 64.2791 30.0757 64.1348 29.9162 64.0664C29.8478 64.036 29.7719 64.0056 29.7035 63.9828C28.7768 63.6714 26.8245 62.9042 27.9032 62.7219C28.7084 62.5851 30.0378 63.1017 30.6379 63.2004V63.1928Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M31.1697 65.7149C31.0102 65.9428 31.0026 65.8364 30.5088 66.315C29.6808 67.1354 29.339 66.748 29.3542 66.4973C29.3542 66.4138 29.9619 65.7073 30.2354 65.3959C30.3189 65.3047 30.3493 65.1832 30.3265 65.0616C30.2961 64.8869 30.2505 64.6286 30.2201 64.4387C30.205 64.3476 30.167 64.264 30.1062 64.1956C30.2429 64.1653 30.3797 64.0969 30.5012 64.0057C30.6911 63.8614 30.8583 63.6487 30.8279 63.398V63.3752C31.1241 63.8994 31.4128 65.3731 31.1697 65.7149Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M30.638 66.201C30.638 66.201 30.562 66.2769 30.5164 66.3225C29.6884 67.1429 29.3466 66.7555 29.3618 66.5048C29.3618 66.4289 29.8784 65.8211 30.167 65.4869C30.205 65.6692 30.2886 65.8515 30.4025 65.9959C30.4633 66.0794 30.5468 66.1478 30.638 66.201Z' fill='%2334381B'/%3E%3Cpath d='M30.1902 64.4083C30.2206 64.8337 29.894 66.6113 29.4078 67.0518C29.104 67.3253 27.9493 66.8999 27.2505 66.8847C27.7594 66.6037 28.2684 66.353 28.7697 66.1403C28.8457 66.1631 28.9216 66.1175 28.9444 66.0415C29.0128 65.7605 29.0888 65.3275 29.1723 65.0008C29.2255 64.8109 29.1495 64.6058 28.99 64.4843C28.7241 64.2792 28.4583 64.0741 28.2076 63.8538C28.0101 64.2792 27.2505 64.3855 26.9466 64.3096C24.9792 63.8538 22.5711 62.0003 22.4876 62.0079C22.3508 62.0231 22.2065 62.0231 22.085 61.9547C21.8951 61.8484 21.8343 61.6129 21.8191 61.3926C21.8191 61.3774 21.728 61.1115 21.614 60.7241C21.6976 60.7545 21.7887 60.7697 21.8723 60.7849C22.1002 60.8229 22.3736 60.8381 22.6015 60.8001C22.7534 60.7697 22.8902 60.7241 23.0193 60.6482C23.0421 60.6861 23.0649 60.7241 23.1029 60.7469C23.5814 61.0584 26.468 62.3042 27.8354 62.57C28.0785 62.6156 28.276 62.7523 28.3443 62.9195C28.5722 62.9954 28.7849 63.1549 28.9596 63.2917C29.0736 63.3752 30.1978 64.264 30.2054 64.4007L30.1902 64.4083Z' fill='%23474C2F'/%3E%3Cpath opacity='0.25' d='M23.0877 60.7469C23.0497 60.7241 23.0193 60.6861 23.0041 60.6482C22.8826 60.7241 22.7383 60.7697 22.5863 60.8001C22.3584 60.8381 22.085 60.8153 21.8571 60.7849C21.7735 60.7697 21.6824 60.7545 21.5988 60.7241C21.7204 61.1115 21.8039 61.3774 21.8039 61.3926C21.8191 61.6053 21.8799 61.8484 22.0698 61.9547C22.1913 62.0231 22.3357 62.0155 22.4724 62.0079C22.5483 62.0079 24.4246 63.436 26.2097 64.0893C26.2629 63.6639 26.4832 63.2765 26.8251 62.9954C27.0682 62.7903 27.3872 62.608 27.7138 62.5472C26.3085 62.2434 23.5511 61.0508 23.0877 60.7469ZM26.0274 62.9878C25.8679 63.474 25.1691 63.3069 24.85 63.1246C24.5918 62.9726 24.379 62.7751 24.1739 62.5624C24.0524 62.4409 23.8245 62.2282 23.9536 62.0459C24.1967 61.6813 26.2174 62.4105 26.0274 62.9954V62.9878Z' fill='%2334381B'/%3E%3Cpath opacity='0.25' d='M23.9308 62.8207C23.8017 62.7827 23.6726 62.7371 23.5435 62.6992C22.9282 62.3118 22.5104 62.0079 22.48 62.0079C22.3432 62.0231 22.1989 62.0231 22.0774 61.9547C21.8875 61.8484 21.8267 61.6129 21.8115 61.3926C21.8115 61.3774 21.7203 61.1115 21.6064 60.7241C21.6899 60.7545 21.7811 60.7697 21.8647 60.7849C22.0925 60.8229 22.366 60.8381 22.5939 60.8001C22.7458 60.7697 22.8826 60.7241 23.0117 60.6482C23.0345 60.6861 23.0573 60.7241 23.0953 60.7469C23.3004 60.8837 23.946 61.1875 24.7209 61.5141C24.5993 61.5293 24.4854 61.5445 24.3714 61.5597C24.0752 61.5901 23.703 61.6661 23.4371 61.5217C23.4143 61.5141 23.3915 61.5217 23.3915 61.5445C23.4143 62.0155 23.6346 62.4637 23.9385 62.8207H23.9308Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M30.1899 64.4084C30.2203 64.8338 29.8937 66.6113 29.4075 67.0519C29.1037 67.3254 27.949 66.9 27.2502 66.8848C27.7591 66.6037 28.2681 66.353 28.7694 66.1404C28.8454 66.1631 28.9214 66.1176 28.9441 66.0416C29.0125 65.7605 29.0885 65.3275 29.172 65.0009C29.2252 64.811 29.1492 64.6059 28.9897 64.4844C28.9062 64.4236 28.8226 64.3628 28.7467 64.2945C28.7846 64.3096 28.815 64.3248 28.8454 64.3324C29.1264 64.4464 29.4303 64.492 29.6962 64.3324C29.7873 64.2793 29.8633 64.1881 29.9089 64.0818C30.076 64.2261 30.1899 64.3552 30.1975 64.4008L30.1899 64.4084Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M29.5215 66.0338C29.567 66.0642 29.7038 66.1554 29.8481 66.2237C29.7266 66.5808 29.5822 66.8922 29.4075 67.0441C29.1037 67.3176 27.949 66.8922 27.2502 66.877C27.7591 66.596 28.2681 66.3453 28.7694 66.1326C28.8454 66.1554 28.9214 66.1098 28.9441 66.0338C28.9897 65.8363 29.0429 65.5629 29.0961 65.3046C29.1568 65.5933 29.2936 65.8591 29.5291 66.0338H29.5215Z' fill='%2334381B'/%3E%3Cpath d='M28.9973 65.1071C28.9593 65.4945 28.7846 65.6996 28.5643 66.0415C28.5263 66.1022 28.4884 66.1706 28.4504 66.239C27.5768 68.1836 27.4021 67.5303 26.1943 67.5151C26.4525 67.348 26.7032 67.1885 26.9615 67.0366C27.0982 67.0062 27.2122 66.9074 27.2654 66.7783C27.4477 66.3453 27.873 65.335 27.873 65.335C27.9642 65.1223 27.9566 64.8716 27.8579 64.6665C26.5589 62.0078 29.0809 64.2031 28.9897 65.1071H28.9973Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M28.7694 64.4311C28.9214 64.6742 29.0125 64.9249 28.9973 65.1148C28.9593 65.5022 28.7846 65.7073 28.5643 66.0491C28.5263 66.1099 28.4884 66.1782 28.4504 66.2466C27.5768 68.1913 27.4021 67.538 26.1943 67.5228C26.4525 67.3557 26.7032 67.1961 26.9615 67.0442C27.0982 67.0138 27.2122 66.9151 27.2654 66.7859C27.4477 66.353 27.873 65.3426 27.873 65.3426C27.9414 65.1831 27.9566 65.0008 27.911 64.8337C27.9262 64.8413 27.9414 64.8565 27.9642 64.8641C28.2073 65.0008 28.4656 64.8945 28.6327 64.7046C28.7086 64.621 28.7542 64.5222 28.7618 64.4311H28.7694Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M27.592 66.5504C27.6452 66.7783 27.7895 67.0138 27.987 67.1277C27.4629 67.9405 27.1514 67.5227 26.1943 67.5151C26.4525 67.348 26.7032 67.1885 26.9615 67.0366C27.0982 67.0062 27.2122 66.9074 27.2654 66.7783C27.3413 66.596 27.4553 66.3225 27.5692 66.0566C27.554 66.2238 27.554 66.3909 27.592 66.5504Z' fill='%2334381B'/%3E%3Cpath d='M23.4444 62.1523C23.2089 62.0611 22.9886 61.9168 22.8139 61.7345C22.8139 62.0079 22.9202 62.2814 23.1025 62.4865C22.4568 62.4333 21.8567 62.0763 21.4238 61.5902C20.9908 61.104 20.7173 60.4963 20.5426 59.8658C20.3679 59.2353 20.2843 58.5896 20.2083 57.9439L20.178 57.6781C20.178 57.6781 20.178 57.6325 20.178 57.6097C20.1856 57.5869 20.216 57.5869 20.2236 57.5641C21.0212 56.1436 23.4672 55.8474 25.1231 55.9385C24.8345 57.397 24.2876 58.8099 23.5203 60.0861C23.4444 60.2076 23.3684 60.352 23.3988 60.4887C23.4216 60.5874 23.4976 60.671 23.5659 60.7394C23.7634 60.9369 23.9609 61.142 24.1584 61.3395C23.7102 61.2787 23.2697 61.1572 22.8443 60.9976C23.0646 61.3699 23.2621 61.7573 23.4368 62.1523H23.4444Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M23.5662 60.7468C23.4903 60.6709 23.4219 60.5949 23.3991 60.4961C23.3687 60.3518 23.4447 60.2151 23.5207 60.0935C24.2879 58.8174 24.8348 57.4044 25.1235 55.946C23.4675 55.8548 21.0215 56.1511 20.2239 57.5716C20.2163 57.5868 20.1859 57.5944 20.1783 57.6171C20.1707 57.6399 20.1707 57.6627 20.1783 57.6855L20.2087 57.9514C20.2846 58.5971 20.3682 59.2427 20.5429 59.8732C20.7176 60.4961 20.9987 61.1114 21.4241 61.5976C21.8571 62.0838 22.4572 62.4408 23.1029 62.494C22.9205 62.2889 22.8218 62.0154 22.8142 61.7419C22.9889 61.9318 23.2016 62.0762 23.4447 62.1597C23.27 61.7647 23.0649 61.3849 22.8522 61.0051C23.2776 61.1722 23.7182 61.2862 24.1664 61.3469C23.9689 61.1494 23.7713 60.9443 23.5738 60.7468H23.5662ZM23.3687 57.9818C23.3308 58.4755 23.0649 58.9541 22.7079 59.2883C22.404 59.5694 21.9482 59.8656 21.5152 59.7365C21.0215 59.5922 20.8468 58.9997 20.8392 58.5363C20.7708 56.1283 23.4827 56.4777 23.3687 57.9818Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M23.5741 60.747C23.7716 60.9445 23.9691 61.1496 24.1666 61.3471C23.7184 61.2863 23.2778 61.1648 22.8524 61.0052C23.0727 61.3775 23.2702 61.7649 23.4449 62.1599C23.2095 62.0687 22.9892 61.9244 22.8144 61.7421C22.8144 62.0155 22.9208 62.289 23.1031 62.4941C22.7385 62.4637 22.3891 62.3346 22.0776 62.1447C22.146 62.0763 22.2067 61.9928 22.2447 61.894C22.3435 61.6433 22.2447 61.3699 22.0776 61.1724C22.0396 61.1192 21.9637 61.0508 22.0548 60.9824C22.0852 60.9673 22.108 60.9521 22.1384 60.9293C22.1764 60.9065 22.1916 60.8685 22.2067 60.8305C22.2219 60.7773 22.2295 60.709 22.1612 60.6862C22.0928 60.6634 21.9941 60.7242 21.9333 60.7394C21.8421 60.7697 21.7054 60.7546 21.8041 60.6406C21.9485 60.4735 22.184 60.3747 22.3739 60.2836C22.5562 60.1924 22.7461 60.1089 22.9132 60.0025C23.2246 59.7974 23.4677 59.4936 23.6425 59.1669C23.9539 58.6124 24.1362 57.9591 24.2425 57.3438C24.3185 56.8804 24.4173 56.4019 24.4097 55.9309C24.6528 55.9309 24.8958 55.9309 25.1161 55.9461C24.8275 57.4046 24.2805 58.8175 23.5133 60.0937C23.4373 60.2152 23.3614 60.3595 23.3918 60.4963C23.4146 60.595 23.4905 60.6786 23.5589 60.747H23.5741Z' fill='%23464C2E'/%3E%3Cpath d='M36.2901 59.8126C36.2901 59.8126 36.2977 59.9493 36.518 60.5646C35.971 60.4279 35.766 60.3063 35.766 60.3063C35.8115 60.4431 35.8419 60.5874 35.8571 60.7317C35.6596 60.6178 35.4393 60.5418 35.2114 60.4962C35.2114 60.6861 35.2418 60.8684 35.3026 61.0508C35.0595 60.9672 35.1051 60.9824 34.5809 60.9368C34.6265 60.876 35.538 58.8934 36.2977 59.8202L36.2901 59.8126Z' fill='%23464C2E'/%3E%3Cg filter='url%28%23filter0_f_6029_1961%29'%3E%3Crect x='270' y='21.2284' width='3.13953' height='0.682508' fill='white'/%3E%3Crect x='271.911' y='19.9999' width='3.13953' height='0.682508' transform='rotate%2890 271.911 19.9999%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter1_f_6029_1961%29'%3E%3Crect x='179' y='12.0476' width='5.23256' height='1.13751' fill='white'/%3E%3Crect x='182.185' y='10' width='5.23256' height='1.13751' transform='rotate%2890 182.185 10%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter2_f_6029_1961%29'%3E%3Crect x='241' y='47.0474' width='5.23256' height='1.13751' fill='white'/%3E%3Crect x='244.185' y='45' width='5.23256' height='1.13751' transform='rotate%2890 244.185 45%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter3_f_6029_1961%29'%3E%3Crect x='205' y='40.7301' width='6.97674' height='1.51668' fill='white'/%3E%3Crect x='209.247' y='38' width='6.97674' height='1.51668' transform='rotate%2890 209.247 38%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter4_f_6029_1961%29'%3E%3Crect x='232' y='1.56522' width='4' height='0.869565' fill='white'/%3E%3Crect x='234.435' width='4' height='0.869565' transform='rotate%2890 234.435 0%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter5_f_6029_1961%29'%3E%3Crect x='116' y='24.174' width='3' height='0.652174' fill='white'/%3E%3Crect x='117.826' y='23' width='3' height='0.652174' transform='rotate%2890 117.826 23%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter6_f_6029_1961%29'%3E%3Crect x='253' y='71.7667' width='4.51471' height='0.981458' fill='white'/%3E%3Crect x='255.748' y='70' width='4.51471' height='0.981458' transform='rotate%2890 255.748 70%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter7_f_6029_1961%29'%3E%3Crect x='174' y='61.7667' width='4.51471' height='0.981458' fill='white'/%3E%3Crect x='176.748' y='60' width='4.51471' height='0.981458' transform='rotate%2890 176.748 60%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter8_f_6029_1961%29'%3E%3Crect x='292.216' y='80.0587' width='4.51471' height='0.981458' fill='white'/%3E%3Crect x='294.964' y='78.2923' width='4.51471' height='0.981458' transform='rotate%2890 294.964 78.2923%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter9_f_6029_1961%29'%3E%3Crect x='310' y='55.6411' width='4.19406' height='0.911752' fill='white'/%3E%3Crect x='312.553' y='54' width='4.19406' height='0.911752' transform='rotate%2890 312.553 54%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter10_f_6029_1961%29'%3E%3Crect x='213' y='91.5652' width='4' height='0.869565' fill='white'/%3E%3Crect x='215.435' y='90' width='4' height='0.869565' transform='rotate%2890 215.435 90%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter11_f_6029_1961%29'%3E%3Crect x='155' y='35.5312' width='3.91274' height='0.850597' fill='white'/%3E%3Crect x='157.382' y='34' width='3.91274' height='0.850597' transform='rotate%2890 157.382 34%29' fill='white'/%3E%3C/g%3E%3Cg filter='url%28%23filter12_f_6029_1961%29'%3E%3Crect x='127' y='83.5312' width='3.91274' height='0.850597' fill='white'/%3E%3Crect x='129.382' y='82' width='3.91274' height='0.850597' transform='rotate%2890 129.382 82%29' fill='white'/%3E%3C/g%3E%3C/g%3E%3Cdefs%3E%3Cfilter id='filter0_f_6029_1961' x='266' y='15.9999' width='11.1395' height='11.1395' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter1_f_6029_1961' x='175' y='6' width='13.2325' height='13.2325' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter2_f_6029_1961' x='237' y='41' width='13.2325' height='13.2325' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter3_f_6029_1961' x='201' y='34' width='14.9767' height='14.9767' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter4_f_6029_1961' x='228' y='-4' width='12' height='12' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter5_f_6029_1961' x='112' y='19' width='11' height='11' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter6_f_6029_1961' x='249' y='66' width='12.5147' height='12.5147' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter7_f_6029_1961' x='170' y='56' width='12.5147' height='12.5147' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter8_f_6029_1961' x='288.216' y='74.2923' width='12.5147' height='12.5147' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter9_f_6029_1961' x='306' y='50' width='12.194' height='12.1941' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter10_f_6029_1961' x='209' y='86' width='12' height='12' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter11_f_6029_1961' x='151' y='30' width='11.9127' height='11.9128' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3Cfilter id='filter12_f_6029_1961' x='123' y='78' width='11.9127' height='11.9128' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3E%3CfeFlood flood-opacity='0' result='BackgroundImageFix'/%3E%3CfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3E%3CfeGaussianBlur stdDeviation='2' result='effect1_foregroundBlur_6029_1961'/%3E%3C/filter%3E%3ClinearGradient id='paint0_linear_6029_1961' x1='160' y1='0' x2='160' y2='194' gradientUnits='userSpaceOnUse'%3E%3Cstop stop-color='%239AD2FF'/%3E%3Cstop offset='0.177083' stop-color='%23ACD7FA'/%3E%3Cstop offset='0.515625' stop-color='%23CBE0F4'/%3E%3Cstop offset='0.739583' stop-color='%23CCE0F4'/%3E%3C/linearGradient%3E%3ClinearGradient id='paint1_linear_6029_1961' x1='159' y1='195' x2='159' y2='0' gradientUnits='userSpaceOnUse'%3E%3Cstop offset='0.260417' stop-color='%231D2E69'/%3E%3Cstop offset='0.99' stop-color='%23020C2E'/%3E%3C/linearGradient%3E%3ClinearGradient id='paint2_linear_6029_1961' x1='160' y1='194' x2='160' y2='0' gradientUnits='userSpaceOnUse'%3E%3Cstop offset='0.260417' stop-color='%231D2E69'/%3E%3Cstop offset='0.99' stop-color='%23020C2E'/%3E%3C/linearGradient%3E%3CclipPath id='clip0_6029_1961'%3E%3Crect width='320' height='194' fill='white'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E\");\n    }\n\n.dark-mode .promo-notification__title {\n            color: #fff;\n        }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 84966:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".chart .tick text {\n        fill: var(--gray700);\n    }\n\n        @media (color-index: 48) {.chart .tick text {\n            fill: var(--gray300)\n    }\n        }\n\n        @media (color: 48842621) {.chart .tick text {\n            fill: var(--gray300)\n    }\n        }\n\n        @media (prefers-color-scheme: dark) {.chart .tick text {\n            fill: var(--gray300)\n    }\n        }\n    .chart .c3-line-data1 {\n        stroke-width: 4px;\n    }\n    .chart .c3-axis line,\n        .chart .c3-axis path {\n            stroke: rgba(0, 0, 0, 0);\n        }\n    .chart__tooltip {\n        font-size: 13px;\n        position: relative;\n        padding: 10px 20px;\n        font-weight: 500;\n        color: #fff;\n        border-radius: 8px;\n        background-color: var(--gray400);\n        filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.3));\n    }\n    .chart__tooltip:before {\n        content: \"\";\n        top: 99%;\n        left: 50%;\n        height: 0;\n        width: 0;\n        position: absolute;\n        pointer-events: none;\n        border: solid transparent;\n        border-color: rgba(255, 255, 255, 0);\n        border-top-color: var(--gray400);\n        border-width: 8px;\n        margin-left: -8px;\n    }\n\n\n.light-mode .tick text {\n        fill: var(--gray700);\n    }\n\n.dark-mode .tick text {\n        fill: var(--gray300);\n    }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 95191:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".stats-chart {\n    height: 100%;\n}\n\n    .stats-chart__filters {\n        padding: 10px 10px 27px 10px;\n        display: flex;\n        justify-content: space-between;\n    }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 66680:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".stats {\n    padding: 24px 20px 9px;\n}\n\n    .stats__list {\n        font-size: 13px;\n    }\n\n    .stats__item {\n        padding: 0;\n        list-style: none;\n        margin: 0 0 15px;\n        display: flex;\n    }\n\n    .stats__name {\n        outline: none;\n        color: rgba(34, 34, 34, 0.58);\n    }\n\n    @media (color-index: 48) {\n\n    .stats__name {\n            color: var(--gray300)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .stats__name {\n            color: var(--gray300)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .stats__name {\n            color: var(--gray300)\n    }\n        }\n\n    .stats__value {\n        outline: none;\n        margin-left: auto;\n        font-weight: 600;\n        color: var(--gray900);\n    }\n\n    @media (color-index: 48) {\n\n    .stats__value {\n            color: var(--grayd8)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .stats__value {\n            color: var(--grayd8)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .stats__value {\n            color: var(--grayd8)\n    }\n        }\n\n.light-mode .stats__name {\n            color: rgba(34, 34, 34, 0.58);\n        }\n\n.light-mode .stats__value {\n            color: var(--gray900);\n        }\n\n.dark-mode .stats__name {\n            color: var(--gray300);\n        }\n\n.dark-mode .stats__value {\n            color: var(--grayd8);\n        }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 95255:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".tabs__panel {\n        display: flex;\n        max-width: 288px;\n        padding: 4px;\n        border-radius: 12px;\n        margin: 0 auto;\n        background-color: var(--gray100);\n        overflow: hidden;\n    }\n\n        @media (color-index: 48) {.tabs__panel {\n            background: var(--gray900)\n    }\n        }\n\n        @media (color: 48842621) {.tabs__panel {\n            background: var(--gray900)\n    }\n        }\n\n        @media (prefers-color-scheme: dark) {.tabs__panel {\n            background: var(--gray900)\n    }\n        }\n    .tabs__content {\n        height: 168px;\n        overflow: auto;\n        scrollbar-width: thin;\n    }\n    .tabs__content::-webkit-scrollbar {\n            width: 12px;\n        }\n    .tabs__content::-webkit-scrollbar-track {\n            background: var(--gray100);\n        }\n    @media (color-index: 48) {\n    .tabs__content::-webkit-scrollbar-track {\n                background: var(--grayDark)\n        }\n            }\n    @media (color: 48842621) {\n    .tabs__content::-webkit-scrollbar-track {\n                background: var(--grayDark)\n        }\n            }\n    @media (prefers-color-scheme: dark) {\n    .tabs__content::-webkit-scrollbar-track {\n                background: var(--grayDark)\n        }\n            }\n    .tabs__content::-webkit-scrollbar-thumb {\n            background-color: var(--gray300);\n            border-radius: 20px;\n            border: 3px solid var(--gray100);\n        }\n    @media (color-index: 48) {\n    .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray700);\n                border: 3px solid var(--grayDark)\n        }\n            }\n    @media (color: 48842621) {\n    .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray700);\n                border: 3px solid var(--grayDark)\n        }\n            }\n    @media (prefers-color-scheme: dark) {\n    .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray700);\n                border: 3px solid var(--grayDark)\n        }\n            }\n    @media (color-index: 48) {\n    .tabs__content {\n            background-color: var(--black)\n    }\n        }\n    @media (color: 48842621) {\n    .tabs__content {\n            background-color: var(--black)\n    }\n        }\n    @media (prefers-color-scheme: dark) {\n    .tabs__content {\n            background-color: var(--black)\n    }\n        }\n    .tabs__tab {\n        font-size: 16px;\n        width: 50%;\n        padding: 6px 5px;\n        line-height: 20px;\n        border: 0;\n        color: var(--gray700);\n        cursor: pointer;\n        text-align: center;\n        transition: var(--t3) color;\n    }\n    .tabs__tab:hover {\n            color: var(--gray900);\n        }\n    @media (color-index: 48) {\n    .tabs__tab:hover {\n                color: var(--gray100)\n        }\n            }\n    @media (color: 48842621) {\n    .tabs__tab:hover {\n                color: var(--gray100)\n        }\n            }\n    @media (prefers-color-scheme: dark) {\n    .tabs__tab:hover {\n                color: var(--gray100)\n        }\n            }\n    @media (color-index: 48) {\n    .tabs__tab {\n            color: var(--gray400)\n    }\n        }\n    @media (color: 48842621) {\n    .tabs__tab {\n            color: var(--gray400)\n    }\n        }\n    @media (prefers-color-scheme: dark) {\n    .tabs__tab {\n            color: var(--gray400)\n    }\n        }\n    .tabs__tab_active {\n            border-radius: 8px;\n            background-color: var(--white);\n            color: var(--gray900);\n            box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.12), 0px 3px 1px rgba(0, 0, 0, 0.04);\n        }\n    @media (color-index: 48) {\n    .tabs__tab_active {\n                background-color: var(--black);\n                color: var(--gray300)\n        }\n            }\n    @media (color: 48842621) {\n    .tabs__tab_active {\n                background-color: var(--black);\n                color: var(--gray300)\n        }\n            }\n    @media (prefers-color-scheme: dark) {\n    .tabs__tab_active {\n                background-color: var(--black);\n                color: var(--gray300)\n        }\n            }\n\n.light-mode .tabs__panel {\n            background-color: var(--gray100);\n        }\n\n.light-mode .tabs__content {\n            background-color: var(--white);\n        }\n\n.light-mode .tabs__content::-webkit-scrollbar-track {\n                background: var(--gray100);\n            }\n\n.light-mode .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray300);\n                border-radius: 20px;\n                border: 3px solid var(--gray100);\n            }\n\n.light-mode .tabs__tab {\n            color: var(--gray700);\n        }\n\n.light-mode .tabs__tab:hover {\n                color: var(--gray900);\n            }\n\n.light-mode .tabs__tab_active {\n                background-color: var(--white);\n                color: var(--gray900);\n            }\n\n.dark-mode .tabs__panel {\n            background: var(--gray900);\n        }\n\n.dark-mode .tabs__content {\n            background-color: var(--black);\n        }\n\n.dark-mode .tabs__content::-webkit-scrollbar-track {\n                background: var(--grayDark);\n            }\n\n.dark-mode .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray700);\n                border-radius: 20px;\n                border: 3px solid var(--grayDark);\n            }\n\n.dark-mode .tabs__tab {\n            color: var(--gray400);\n        }\n\n.dark-mode .tabs__tab:hover {\n                color: var(--gray100);\n            }\n\n.dark-mode .tabs__tab_active {\n                background-color: var(--black);\n                color: var(--gray300);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 80493:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".icon {\n    display: inline-block;\n    vertical-align: middle;\n    flex-shrink: 0;\n}\n\n    .icon--loading {\n        pointer-events: none;\n        animation: loader-spin 1.7s infinite linear;\n        animation-fill-mode: forwards;\n    }\n\n    .icon--button {\n        width: 24px;\n        height: 24px;\n    }\n\n    .icon--update-filters {\n        width: 22px;\n        height: 22px;\n    }\n\n    .icon--settings {\n        width: 22px;\n        height: 22px;\n    }\n\n    .icon--pause {\n        width: 22px;\n        height: 22px;\n    }\n\n    .icon--logo {\n        width: 113px;\n        height: 25px;\n        color: #232323;\n    }\n\n    @media (color-index: 48) {\n\n    .icon--logo {\n            color: var(--gray300)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .icon--logo {\n            color: var(--gray300)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .icon--logo {\n            color: var(--gray300)\n    }\n        }\n\n    .icon--action {\n        width: 17px;\n        height: 17px;\n    }\n\n    .icon--cross {\n        width: 15px;\n        height: 15px;\n    }\n\n    .icon--play {\n        width: 24px;\n        height: 24px;\n    }\n\n    .icon--circle {\n        width: 24px;\n        height: 24px;\n    }\n\n    .icon--checkmark {\n        width: 24px;\n        height: 24px;\n    }\n\n    .icon--exclamation {\n        width: 4px;\n        height: 24px;\n    }\n\n    .icon--select {\n        width: 14px;\n        height: 8px;\n    }\n\n.light-mode .icon--logo {\n            color: #232323;\n        }\n\n.dark-mode .icon--logo {\n            color: var(--gray300);\n        }\n\n@keyframes loader-spin {\n    from {\n        -webkit-transform: rotate(0deg);\n    } \n    to {\n        -webkit-transform: rotate(360deg);\n    }\n}", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 41657:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "button {\n    cursor: pointer;\n    text-decoration: none;\n    display: inline-block;\n    border: none;\n    background-color: transparent;\n    border-radius: 0;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 37153:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\n:root {\n    color-scheme: light dark;\n}\n\nhtml,\nbody,\n#root {\n    height: 100%;\n    min-height: 100%;\n    width: auto;\n    min-width: 320px;\n    background-color: var(--width);\n}\n\n@media (color-index: 48) {\n\nhtml,\nbody,\n#root {\n        background-color: var(--black)\n}\n    }\n\n@media (color: 48842621) {\n\nhtml,\nbody,\n#root {\n        background-color: var(--black)\n}\n    }\n\n@media (prefers-color-scheme: dark) {\n\nhtml,\nbody,\n#root {\n        background-color: var(--black)\n}\n    }\n\nhtml {\n    font-size: 10px;\n    background-color: var(--width);\n}\n\n@media (color-index: 48) {\n\nhtml {\n        background-color: var(--black)\n}\n    }\n\n@media (color: 48842621) {\n\nhtml {\n        background-color: var(--black)\n}\n    }\n\n@media (prefers-color-scheme: dark) {\n\nhtml {\n        background-color: var(--black)\n}\n    }\n\nbody {\n    margin: 0;\n    font-size: 1.6rem;\n    line-height: 1.4;\n    font-family: 'Roboto Flex', 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Ubuntu, Arial, sans-serif;\n    font-optical-sizing: none;\n}\n\nul {\n    margin: 0;\n    padding: 0;\n}\n\n.hidden {\n    display: none;\n}\n\na {\n    color: currentColor;\n}\n\na.focus-visible {\n        outline: 2px solid var(--outline);\n    }\n\na:focus-visible {\n        outline: 2px solid var(--outline);\n    }\n\nbutton,\ninput,\ntextarea,\nselect {\n    font-family: inherit;\n}\n\nbutton.focus-visible, input.focus-visible, textarea.focus-visible, select.focus-visible {\n        outline: 2px solid var(--outline);\n    }\n\nbutton:focus-visible, input:focus-visible, textarea:focus-visible, select:focus-visible {\n        outline: 2px solid var(--outline);\n    }\n\n.light-mode {\n    color-scheme: light;\n    background-color: var(--width);\n}\n\n.light-mode body,\n    .light-mode #root {\n        background-color: var(--width);\n    }\n\n.dark-mode {\n    color-scheme: dark;\n    background-color: var(--black);\n}\n\n.dark-mode body,\n    .dark-mode #root {\n        background-color: var(--black);\n    }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 65201:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_styles_fonts_pcss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(84381);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_styles_vars_pcss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26834);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_buttons_pcss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41657);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_pcss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(37153);
// Imports






var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_styles_fonts_pcss__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z);
___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_styles_vars_pcss__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z);
___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_buttons_pcss__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z);
___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_pcss__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 25460:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*-- Chart --*/\n.c3 svg {\n  font: 10px sans-serif;\n  -webkit-tap-highlight-color: transparent; }\n\n.c3 path, .c3 line {\n  fill: none;\n  stroke: #000; }\n\n.c3 text {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none; }\n\n.c3-legend-item-tile,\n.c3-xgrid-focus,\n.c3-ygrid,\n.c3-event-rect,\n.c3-bars path {\n  shape-rendering: crispEdges; }\n\n.c3-chart-arc path {\n  stroke: #fff; }\n\n.c3-chart-arc text {\n  fill: #fff;\n  font-size: 13px; }\n\n/*-- Axis --*/\n/*-- Grid --*/\n.c3-grid line {\n  stroke: #aaa; }\n\n.c3-grid text {\n  fill: #aaa; }\n\n.c3-xgrid, .c3-ygrid {\n  stroke-dasharray: 3 3; }\n\n/*-- Text on Chart --*/\n.c3-text.c3-empty {\n  fill: #808080;\n  font-size: 2em; }\n\n/*-- Line --*/\n.c3-line {\n  stroke-width: 1px; }\n\n/*-- Point --*/\n.c3-circle._expanded_ {\n  stroke-width: 1px;\n  stroke: white; }\n\n.c3-selected-circle {\n  fill: white;\n  stroke-width: 2px; }\n\n/*-- Bar --*/\n.c3-bar {\n  stroke-width: 0; }\n\n.c3-bar._expanded_ {\n  fill-opacity: 1;\n  fill-opacity: 0.75; }\n\n/*-- Focus --*/\n.c3-target.c3-focused {\n  opacity: 1; }\n\n.c3-target.c3-focused path.c3-line, .c3-target.c3-focused path.c3-step {\n  stroke-width: 2px; }\n\n.c3-target.c3-defocused {\n  opacity: 0.3 !important; }\n\n/*-- Region --*/\n.c3-region {\n  fill: steelblue;\n  fill-opacity: .1; }\n\n/*-- Brush --*/\n.c3-brush .extent {\n  fill-opacity: .1; }\n\n/*-- Select - Drag --*/\n/*-- Legend --*/\n.c3-legend-item {\n  font-size: 12px; }\n\n.c3-legend-item-hidden {\n  opacity: 0.15; }\n\n.c3-legend-background {\n  opacity: 0.75;\n  fill: white;\n  stroke: lightgray;\n  stroke-width: 1; }\n\n/*-- Title --*/\n.c3-title {\n  font: 14px sans-serif; }\n\n/*-- Tooltip --*/\n.c3-tooltip-container {\n  z-index: 10; }\n\n.c3-tooltip {\n  border-collapse: collapse;\n  border-spacing: 0;\n  background-color: #fff;\n  empty-cells: show;\n  box-shadow: 7px 7px 12px -9px #777777;\n  opacity: 0.9; }\n\n.c3-tooltip tr {\n  border: 1px solid #CCC; }\n\n.c3-tooltip th {\n  background-color: #aaa;\n  font-size: 14px;\n  padding: 2px 5px;\n  text-align: left;\n  color: #FFF; }\n\n.c3-tooltip td {\n  font-size: 13px;\n  padding: 3px 6px;\n  background-color: #fff;\n  border-left: 1px dotted #999; }\n\n.c3-tooltip td > span {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin-right: 6px; }\n\n.c3-tooltip td.value {\n  text-align: right; }\n\n/*-- Area --*/\n.c3-area {\n  stroke-width: 0;\n  opacity: 0.2; }\n\n/*-- Arc --*/\n.c3-chart-arcs-title {\n  dominant-baseline: middle;\n  font-size: 1.3em; }\n\n.c3-chart-arcs .c3-chart-arcs-background {\n  fill: #e0e0e0;\n  stroke: none; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-unit {\n  fill: #000;\n  font-size: 16px; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-max {\n  fill: #777; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-min {\n  fill: #777; }\n\n.c3-chart-arc .c3-gauge-value {\n  fill: #000;\n  /*  font-size: 28px !important;*/ }\n\n.c3-chart-arc.c3-target g path {\n  opacity: 1; }\n\n.c3-chart-arc.c3-target.c3-focused g path {\n  opacity: 1; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 58396:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Iu": () => (/* binding */ translate)
/* harmony export */ });
/* unused harmony exports Translator, validator */
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

var NODE_TYPES;

(function (NODE_TYPES) {
  NODE_TYPES["PLACEHOLDER"] = "placeholder";
  NODE_TYPES["TEXT"] = "text";
  NODE_TYPES["TAG"] = "tag";
  NODE_TYPES["VOID_TAG"] = "void_tag";
})(NODE_TYPES || (NODE_TYPES = {}));

var isTextNode = function isTextNode(node) {
  return node.type === NODE_TYPES.TEXT;
};
var isTagNode = function isTagNode(node) {
  return node.type === NODE_TYPES.TAG;
};
var isPlaceholderNode = function isPlaceholderNode(node) {
  return node.type === NODE_TYPES.PLACEHOLDER;
};
var isVoidTagNode = function isVoidTagNode(node) {
  return node.type === NODE_TYPES.VOID_TAG;
};
var placeholderNode = function placeholderNode(value) {
  return {
    type: NODE_TYPES.PLACEHOLDER,
    value: value
  };
};
var textNode = function textNode(str) {
  return {
    type: NODE_TYPES.TEXT,
    value: str
  };
};
var tagNode = function tagNode(tagName, children) {
  var value = tagName.trim();
  return {
    type: NODE_TYPES.TAG,
    value: value,
    children: children
  };
};
var voidTagNode = function voidTagNode(tagName) {
  var value = tagName.trim();
  return {
    type: NODE_TYPES.VOID_TAG,
    value: value
  };
};
/**
 * Checks if target is node
 * @param target
 */

var isNode = function isNode(target) {
  if (typeof target === 'string') {
    return false;
  }

  return !!target.type;
};

var STATE;

(function (STATE) {
  /**
   * Parser function switches to the text state when parses simple text,
   * or content between open and close tags
   */
  STATE["TEXT"] = "text";
  /**
   * Parser function switches to the tag state when meets open tag brace ("<"), and switches back,
   * when meets closing tag brace (">")
   */

  STATE["TAG"] = "tag";
  /**
   * Parser function switches to the placeholder state when meets in the text
   * open placeholders brace ("{") and switches back to the text state,
   * when meets close placeholder brace ("}")
   */

  STATE["PLACEHOLDER"] = "placeholder";
})(STATE || (STATE = {}));

var CONTROL_CHARS = {
  TAG_OPEN_BRACE: '<',
  TAG_CLOSE_BRACE: '>',
  CLOSING_TAG_MARK: '/',
  PLACEHOLDER_MARK: '%'
};
/**
 * Checks if text length is enough to create text node
 * If text node created, then if stack is not empty it is pushed into stack,
 * otherwise into result
 * @param context
 */

var createTextNodeIfPossible = function createTextNodeIfPossible(context) {
  var text = context.text;

  if (text.length > 0) {
    var node = textNode(text);

    if (context.stack.length > 0) {
      context.stack.push(node);
    } else {
      context.result.push(node);
    }
  }

  context.text = '';
};
/**
 * Checks if lastFromStack tag has any attributes
 * @param lastFromStack
 */


var hasAttributes = function hasAttributes(lastFromStack) {
  // e.g. "a class" or "a href='#'"
  var tagStrParts = lastFromStack.split(' ');
  return tagStrParts.length > 1;
};
/**
 * Handles text state
 */


var textStateHandler = function textStateHandler(context) {
  var currChar = context.currChar,
      currIdx = context.currIdx; // switches to the tag state

  if (currChar === CONTROL_CHARS.TAG_OPEN_BRACE) {
    context.lastTextStateChangeIdx = currIdx;
    return STATE.TAG;
  } // switches to the placeholder state


  if (currChar === CONTROL_CHARS.PLACEHOLDER_MARK) {
    context.lastTextStateChangeIdx = currIdx;
    return STATE.PLACEHOLDER;
  } // remains in the text state


  context.text += currChar;
  return STATE.TEXT;
};
/**
 * Handles placeholder state
 * @param context
 */


var placeholderStateHandler = function placeholderStateHandler(context) {
  var currChar = context.currChar,
      currIdx = context.currIdx,
      lastTextStateChangeIdx = context.lastTextStateChangeIdx,
      placeholder = context.placeholder,
      stack = context.stack,
      result = context.result,
      str = context.str;

  if (currChar === CONTROL_CHARS.PLACEHOLDER_MARK) {
    // if distance between current index and last state change equal to 1,
    // it means that placeholder mark was escaped by itself e.g. "%%",
    // so we return to the text state
    if (currIdx - lastTextStateChangeIdx === 1) {
      context.text += str.substring(lastTextStateChangeIdx, currIdx);
      return STATE.TEXT;
    }

    createTextNodeIfPossible(context);
    var node = placeholderNode(placeholder); // push node to the appropriate stack

    if (stack.length > 0) {
      stack.push(node);
    } else {
      result.push(node);
    }

    context.placeholder = '';
    return STATE.TEXT;
  }

  context.placeholder += currChar;
  return STATE.PLACEHOLDER;
};
/**
 * Switches current state to the tag state and returns tag state handler
 */


var tagStateHandler = function tagStateHandler(context) {
  var currChar = context.currChar,
      text = context.text,
      stack = context.stack,
      result = context.result,
      lastTextStateChangeIdx = context.lastTextStateChangeIdx,
      currIdx = context.currIdx,
      str = context.str;
  var tag = context.tag; // if found tag end ">"

  if (currChar === CONTROL_CHARS.TAG_CLOSE_BRACE) {
    // if the tag is close tag e.g. </a>
    if (tag.indexOf(CONTROL_CHARS.CLOSING_TAG_MARK) === 0) {
      // remove slash from tag
      tag = tag.substring(1);
      var children = [];

      if (text.length > 0) {
        children.push(textNode(text));
        context.text = '';
      }

      var pairTagFound = false; // looking for the pair to the close tag

      while (!pairTagFound && stack.length > 0) {
        var lastFromStack = stack.pop(); // if tag from stack equal to close tag

        if (lastFromStack === tag) {
          // create tag node
          var node = tagNode(tag, children); // and add it to the appropriate stack

          if (stack.length > 0) {
            stack.push(node);
          } else {
            result.push(node);
          }

          children = [];
          pairTagFound = true;
        } else if (isNode(lastFromStack)) {
          // add nodes between close tag and open tag to the children
          children.unshift(lastFromStack);
        } else {
          if (typeof lastFromStack === 'string' && hasAttributes(lastFromStack)) {
            throw new Error("Tags in string should not have attributes: ".concat(str));
          } else {
            throw new Error("String has unbalanced tags: ".concat(str));
          }
        }

        if (stack.length === 0 && children.length > 0) {
          throw new Error("String has unbalanced tags: ".concat(str));
        }
      }

      context.tag = '';
      return STATE.TEXT;
    } // if the tag is void tag e.g. <img/>


    if (tag.lastIndexOf(CONTROL_CHARS.CLOSING_TAG_MARK) === tag.length - 1) {
      tag = tag.substring(0, tag.length - 1);
      createTextNodeIfPossible(context);

      var _node = voidTagNode(tag); // add node to the appropriate stack


      if (stack.length > 0) {
        stack.push(_node);
      } else {
        result.push(_node);
      }

      context.tag = '';
      return STATE.TEXT;
    }

    createTextNodeIfPossible(context);
    stack.push(tag);
    context.tag = '';
    return STATE.TEXT;
  } // If we meet open tag "<" it means that we wrongly moved into tag state


  if (currChar === CONTROL_CHARS.TAG_OPEN_BRACE) {
    context.text += str.substring(lastTextStateChangeIdx, currIdx);
    context.lastTextStateChangeIdx = currIdx;
    context.tag = '';
    return STATE.TAG;
  }

  context.tag += currChar;
  return STATE.TAG;
};
/**
 * Parses string into AST (abstract syntax tree) and returns it
 * e.g.
 * parse("String to <a>translate</a>") ->
 * ```
 *      [
 *           { type: 'text', value: 'String to ' },
 *           { type: 'tag', value: 'a', children: [{ type: 'text', value: 'translate' }] }
 *      ];
 * ```
 * Empty string is parsed into empty AST (abstract syntax tree): "[]"
 * If founds unbalanced tags, it throws error about it
 *
 * @param {string} str - message in simplified ICU like syntax without plural support
 */


var parser = function parser() {
  var _STATE_HANDLERS;

  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var context = {
    /**
     * Stack is used to keep and search nested tag nodes
     */
    stack: [],

    /**
     * Result is stack where function allocates nodes
     */
    result: [],

    /**
     * Current char index
     */
    currIdx: 0,

    /**
     * Saves index of the last state change from the text state,
     * used to restore parsed text if we moved into other state wrongly
     */
    lastTextStateChangeIdx: 0,

    /**
     * Accumulated tag value
     */
    tag: '',

    /**
     * Accumulated text value
     */
    text: '',

    /**
     * Accumulated placeholder value
     */
    placeholder: '',

    /**
     * Parsed string
     */
    str: str
  };
  var STATE_HANDLERS = (_STATE_HANDLERS = {}, _defineProperty(_STATE_HANDLERS, STATE.TEXT, textStateHandler), _defineProperty(_STATE_HANDLERS, STATE.PLACEHOLDER, placeholderStateHandler), _defineProperty(_STATE_HANDLERS, STATE.TAG, tagStateHandler), _STATE_HANDLERS); // Start from text state

  var currentState = STATE.TEXT;

  while (context.currIdx < str.length) {
    context.currChar = str[context.currIdx];
    var currentStateHandler = STATE_HANDLERS[currentState];
    currentState = currentStateHandler(context);
    context.currIdx += 1;
  }

  var result = context.result,
      text = context.text,
      stack = context.stack,
      lastTextStateChangeIdx = context.lastTextStateChangeIdx; // Means that tag or placeholder nodes were not closed, so we consider them as text

  if (currentState !== STATE.TEXT) {
    var restText = str.substring(lastTextStateChangeIdx);

    if ((restText + text).length > 0) {
      result.push(textNode(text + restText));
    }
  } else {
    // eslint-disable-next-line no-lonely-if
    if (text.length > 0) {
      result.push(textNode(text));
    }
  }

  if (stack.length > 0) {
    throw new Error("String has unbalanced tags: ".concat(context.str));
  }

  return result;
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Helper functions used by default to assemble strings from tag nodes
 * @param tagName
 * @param children
 */

var createStringElement = function createStringElement(tagName, children) {
  if (children) {
    return "<".concat(tagName, ">").concat(children, "</").concat(tagName, ">");
  }

  return "<".concat(tagName, "/>");
};
/**
 * Creates map with default values for tag converters
 */


var createDefaultValues = function createDefaultValues() {
  return {
    p: function p(children) {
      return createStringElement('p', children);
    },
    b: function b(children) {
      return createStringElement('b', children);
    },
    strong: function strong(children) {
      return createStringElement('strong', children);
    },
    tt: function tt(children) {
      return createStringElement('tt', children);
    },
    s: function s(children) {
      return createStringElement('s', children);
    },
    i: function i(children) {
      return createStringElement('i', children);
    }
  };
};
/**
 * This function accepts an AST (abstract syntax tree) which is a result
 * of the parser function call, and converts tree nodes into array of strings replacing node
 * values with provided values.
 * Values is a map with functions or strings, where each key is related to placeholder value
 * or tag value
 * e.g.
 * string "text <tag>tag text</tag> %placeholder%" is parsed into next AST
 *
 *      [
 *          { type: 'text', value: 'text ' },
 *          {
 *              type: 'tag',
 *              value: 'tag',
 *              children: [{ type: 'text', value: 'tag text' }],
 *          },
 *          { type: 'text', value: ' ' },
 *          { type: 'placeholder', value: 'placeholder' }
 *      ];
 *
 * this AST after format and next values
 *
 *      {
 *          // here used template strings, but it can be react components as well
 *          tag: (chunks) => `<b>${chunks}</b>`,
 *          placeholder: 'placeholder text'
 *      }
 *
 * will return next array
 *
 * [ 'text ', '<b>tag text</b>', ' ', 'placeholder text' ]
 *
 * as you can see, <tag> was replaced by <b>, and placeholder was replaced by placeholder text
 *
 * @param ast - AST (abstract syntax tree)
 * @param values
 */


var format = function format() {
  var ast = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var result = [];

  var tmplValues = _objectSpread(_objectSpread({}, createDefaultValues()), values);

  var i = 0;

  while (i < ast.length) {
    var currentNode = ast[i]; // if current node is text node, there is nothing to change, append value to the result

    if (isTextNode(currentNode)) {
      result.push(currentNode.value);
    } else if (isTagNode(currentNode)) {
      var children = _toConsumableArray(format(currentNode.children, tmplValues));

      var value = tmplValues[currentNode.value];

      if (value) {
        // TODO consider using strong typing
        if (typeof value === 'function') {
          result.push(value(children.join('')));
        } else {
          result.push(value);
        }
      } else {
        throw new Error("Value ".concat(currentNode.value, " wasn't provided"));
      }
    } else if (isVoidTagNode(currentNode)) {
      var _value = tmplValues[currentNode.value]; // TODO consider using strong typing

      if (_value && typeof _value === 'string') {
        result.push(_value);
      } else {
        throw new Error("Value ".concat(currentNode.value, " wasn't provided"));
      }
    } else if (isPlaceholderNode(currentNode)) {
      var _value2 = tmplValues[currentNode.value]; // TODO consider using strong typing

      if (_value2 && typeof _value2 === 'string') {
        result.push(_value2);
      } else {
        throw new Error("Value ".concat(currentNode.value, " wasn't provided"));
      }
    }

    i += 1;
  }

  return result;
};
/**
 * Function gets AST (abstract syntax tree) or string and formats messages,
 * replacing values accordingly
 * e.g.
 *      const message = formatter('<a>some text</a>', {
 *          a: (chunks) => `<a href="#">${chunks}</a>`,
 *      });
 *      console.log(message); // ['<a href="#">some text</a>']
 * @param message
 * @param [values]
 */


var formatter = function formatter(message, values) {
  var ast = parser(message);
  var preparedValues = {}; // convert values to strings if not a function

  if (values) {
    Object.keys(values).forEach(function (key) {
      var value = values[key]; // TODO consider using strong typing

      if (typeof value === 'function') {
        preparedValues[key] = value;
      } else {
        preparedValues[key] = String(value);
      }
    });
  }

  return format(ast, preparedValues);
};

var _pluralFormsCount;

var AvailableLocales;

(function (AvailableLocales) {
  AvailableLocales["az"] = "az";
  AvailableLocales["bo"] = "bo";
  AvailableLocales["dz"] = "dz";
  AvailableLocales["id"] = "id";
  AvailableLocales["ja"] = "ja";
  AvailableLocales["jv"] = "jv";
  AvailableLocales["ka"] = "ka";
  AvailableLocales["km"] = "km";
  AvailableLocales["kn"] = "kn";
  AvailableLocales["ko"] = "ko";
  AvailableLocales["ms"] = "ms";
  AvailableLocales["th"] = "th";
  AvailableLocales["tr"] = "tr";
  AvailableLocales["vi"] = "vi";
  AvailableLocales["zh"] = "zh";
  AvailableLocales["zh_cn"] = "zh_cn";
  AvailableLocales["zh_tw"] = "zh_tw";
  AvailableLocales["af"] = "af";
  AvailableLocales["bn"] = "bn";
  AvailableLocales["bg"] = "bg";
  AvailableLocales["ca"] = "ca";
  AvailableLocales["da"] = "da";
  AvailableLocales["de"] = "de";
  AvailableLocales["el"] = "el";
  AvailableLocales["en"] = "en";
  AvailableLocales["eo"] = "eo";
  AvailableLocales["es"] = "es";
  AvailableLocales["et"] = "et";
  AvailableLocales["eu"] = "eu";
  AvailableLocales["fa"] = "fa";
  AvailableLocales["fi"] = "fi";
  AvailableLocales["fo"] = "fo";
  AvailableLocales["fur"] = "fur";
  AvailableLocales["fy"] = "fy";
  AvailableLocales["gl"] = "gl";
  AvailableLocales["gu"] = "gu";
  AvailableLocales["ha"] = "ha";
  AvailableLocales["he"] = "he";
  AvailableLocales["hu"] = "hu";
  AvailableLocales["is"] = "is";
  AvailableLocales["it"] = "it";
  AvailableLocales["ku"] = "ku";
  AvailableLocales["lb"] = "lb";
  AvailableLocales["ml"] = "ml";
  AvailableLocales["mn"] = "mn";
  AvailableLocales["mr"] = "mr";
  AvailableLocales["nah"] = "nah";
  AvailableLocales["nb"] = "nb";
  AvailableLocales["ne"] = "ne";
  AvailableLocales["nl"] = "nl";
  AvailableLocales["nn"] = "nn";
  AvailableLocales["no"] = "no";
  AvailableLocales["oc"] = "oc";
  AvailableLocales["om"] = "om";
  AvailableLocales["or"] = "or";
  AvailableLocales["pa"] = "pa";
  AvailableLocales["pap"] = "pap";
  AvailableLocales["ps"] = "ps";
  AvailableLocales["pt"] = "pt";
  AvailableLocales["pt_pt"] = "pt_pt";
  AvailableLocales["pt_br"] = "pt_br";
  AvailableLocales["so"] = "so";
  AvailableLocales["sq"] = "sq";
  AvailableLocales["sv"] = "sv";
  AvailableLocales["sw"] = "sw";
  AvailableLocales["ta"] = "ta";
  AvailableLocales["te"] = "te";
  AvailableLocales["tk"] = "tk";
  AvailableLocales["ur"] = "ur";
  AvailableLocales["zu"] = "zu";
  AvailableLocales["am"] = "am";
  AvailableLocales["bh"] = "bh";
  AvailableLocales["fil"] = "fil";
  AvailableLocales["fr"] = "fr";
  AvailableLocales["gun"] = "gun";
  AvailableLocales["hi"] = "hi";
  AvailableLocales["hy"] = "hy";
  AvailableLocales["ln"] = "ln";
  AvailableLocales["mg"] = "mg";
  AvailableLocales["nso"] = "nso";
  AvailableLocales["xbr"] = "xbr";
  AvailableLocales["ti"] = "ti";
  AvailableLocales["wa"] = "wa";
  AvailableLocales["be"] = "be";
  AvailableLocales["bs"] = "bs";
  AvailableLocales["hr"] = "hr";
  AvailableLocales["ru"] = "ru";
  AvailableLocales["sr"] = "sr";
  AvailableLocales["uk"] = "uk";
  AvailableLocales["cs"] = "cs";
  AvailableLocales["sk"] = "sk";
  AvailableLocales["ga"] = "ga";
  AvailableLocales["lt"] = "lt";
  AvailableLocales["sl"] = "sl";
  AvailableLocales["mk"] = "mk";
  AvailableLocales["mt"] = "mt";
  AvailableLocales["lv"] = "lv";
  AvailableLocales["pl"] = "pl";
  AvailableLocales["cy"] = "cy";
  AvailableLocales["ro"] = "ro";
  AvailableLocales["ar"] = "ar";
})(AvailableLocales || (AvailableLocales = {}));

var getPluralFormId = function getPluralFormId(locale, number) {
  var _supportedForms;

  if (number === 0) {
    return 0;
  }

  var slavNum = number % 10 === 1 && number % 100 !== 11 ? 1 : number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 10 || number % 100 >= 20) ? 2 : 3;
  var supportedForms = (_supportedForms = {}, _defineProperty(_supportedForms, AvailableLocales.az, 1), _defineProperty(_supportedForms, AvailableLocales.bo, 1), _defineProperty(_supportedForms, AvailableLocales.dz, 1), _defineProperty(_supportedForms, AvailableLocales.id, 1), _defineProperty(_supportedForms, AvailableLocales.ja, 1), _defineProperty(_supportedForms, AvailableLocales.jv, 1), _defineProperty(_supportedForms, AvailableLocales.ka, 1), _defineProperty(_supportedForms, AvailableLocales.km, 1), _defineProperty(_supportedForms, AvailableLocales.kn, 1), _defineProperty(_supportedForms, AvailableLocales.ko, 1), _defineProperty(_supportedForms, AvailableLocales.ms, 1), _defineProperty(_supportedForms, AvailableLocales.th, 1), _defineProperty(_supportedForms, AvailableLocales.tr, 1), _defineProperty(_supportedForms, AvailableLocales.vi, 1), _defineProperty(_supportedForms, AvailableLocales.zh, 1), _defineProperty(_supportedForms, AvailableLocales.zh_tw, 1), _defineProperty(_supportedForms, AvailableLocales.zh_cn, 1), _defineProperty(_supportedForms, AvailableLocales.af, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.bn, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.bg, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ca, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.da, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.de, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.el, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.en, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.eo, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.es, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.et, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.eu, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fa, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fi, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fo, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fur, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fy, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.gl, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.gu, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ha, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.he, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.hu, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.is, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.it, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ku, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.lb, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ml, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.mn, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.mr, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.nah, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.nb, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ne, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.nl, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.nn, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.no, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.oc, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.om, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.or, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pa, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pap, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ps, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pt, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pt_pt, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pt_br, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.so, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.sq, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.sv, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.sw, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ta, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.te, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.tk, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ur, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.zu, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.am, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.bh, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.fil, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.fr, number === 0 || number >= 2 ? 2 : 1), _defineProperty(_supportedForms, AvailableLocales.gun, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.hi, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.hy, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.ln, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.mg, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.nso, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.xbr, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.ti, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.wa, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.be, slavNum), _defineProperty(_supportedForms, AvailableLocales.bs, slavNum), _defineProperty(_supportedForms, AvailableLocales.hr, slavNum), _defineProperty(_supportedForms, AvailableLocales.ru, slavNum), _defineProperty(_supportedForms, AvailableLocales.sr, slavNum), _defineProperty(_supportedForms, AvailableLocales.uk, slavNum), _defineProperty(_supportedForms, AvailableLocales.cs, number === 1 ? 1 : number >= 2 && number <= 4 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.sk, number === 1 ? 1 : number >= 2 && number <= 4 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.ga, number === 1 ? 1 : number === 2 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.lt, number % 10 === 1 && number % 100 !== 11 ? 1 : number % 10 >= 2 && (number % 100 < 10 || number % 100 >= 20) ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.sl, number % 100 === 1 ? 1 : number % 100 === 2 ? 2 : number % 100 === 3 || number % 100 === 4 ? 3 : 4), _defineProperty(_supportedForms, AvailableLocales.mk, number % 10 === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.mt, number === 1 ? 1 : number === 0 || number % 100 > 1 && number % 100 < 11 ? 2 : number % 100 > 10 && number % 100 < 20 ? 3 : 4), _defineProperty(_supportedForms, AvailableLocales.lv, number === 0 ? 0 : number % 10 === 1 && number % 100 !== 11 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pl, number === 1 ? 1 : number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 12 || number % 100 > 14) ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.cy, number === 1 ? 0 : number === 2 ? 1 : number === 8 || number === 11 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.ro, number === 1 ? 1 : number === 1 || number % 100 > 0 && number % 100 < 20 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.ar, number === 0 ? 0 : number === 1 ? 1 : number === 2 ? 2 : number % 100 >= 3 && number % 100 <= 10 ? 3 : number % 100 >= 11 && number % 100 <= 99 ? 4 : 5), _supportedForms);
  return supportedForms[locale];
};

var pluralFormsCount = (_pluralFormsCount = {}, _defineProperty(_pluralFormsCount, AvailableLocales.az, 2), _defineProperty(_pluralFormsCount, AvailableLocales.bo, 2), _defineProperty(_pluralFormsCount, AvailableLocales.dz, 2), _defineProperty(_pluralFormsCount, AvailableLocales.id, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ja, 2), _defineProperty(_pluralFormsCount, AvailableLocales.jv, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ka, 2), _defineProperty(_pluralFormsCount, AvailableLocales.km, 2), _defineProperty(_pluralFormsCount, AvailableLocales.kn, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ko, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ms, 2), _defineProperty(_pluralFormsCount, AvailableLocales.th, 2), _defineProperty(_pluralFormsCount, AvailableLocales.tr, 2), _defineProperty(_pluralFormsCount, AvailableLocales.vi, 2), _defineProperty(_pluralFormsCount, AvailableLocales.zh, 2), _defineProperty(_pluralFormsCount, AvailableLocales.zh_cn, 2), _defineProperty(_pluralFormsCount, AvailableLocales.zh_tw, 2), _defineProperty(_pluralFormsCount, AvailableLocales.af, 3), _defineProperty(_pluralFormsCount, AvailableLocales.bn, 3), _defineProperty(_pluralFormsCount, AvailableLocales.bg, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ca, 3), _defineProperty(_pluralFormsCount, AvailableLocales.da, 3), _defineProperty(_pluralFormsCount, AvailableLocales.de, 3), _defineProperty(_pluralFormsCount, AvailableLocales.el, 3), _defineProperty(_pluralFormsCount, AvailableLocales.en, 3), _defineProperty(_pluralFormsCount, AvailableLocales.eo, 3), _defineProperty(_pluralFormsCount, AvailableLocales.es, 3), _defineProperty(_pluralFormsCount, AvailableLocales.et, 3), _defineProperty(_pluralFormsCount, AvailableLocales.eu, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fa, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fi, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fo, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fur, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fy, 3), _defineProperty(_pluralFormsCount, AvailableLocales.gl, 3), _defineProperty(_pluralFormsCount, AvailableLocales.gu, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ha, 3), _defineProperty(_pluralFormsCount, AvailableLocales.he, 3), _defineProperty(_pluralFormsCount, AvailableLocales.hu, 3), _defineProperty(_pluralFormsCount, AvailableLocales.is, 3), _defineProperty(_pluralFormsCount, AvailableLocales.it, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ku, 3), _defineProperty(_pluralFormsCount, AvailableLocales.lb, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ml, 3), _defineProperty(_pluralFormsCount, AvailableLocales.mn, 3), _defineProperty(_pluralFormsCount, AvailableLocales.mr, 3), _defineProperty(_pluralFormsCount, AvailableLocales.nah, 3), _defineProperty(_pluralFormsCount, AvailableLocales.nb, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ne, 3), _defineProperty(_pluralFormsCount, AvailableLocales.nl, 3), _defineProperty(_pluralFormsCount, AvailableLocales.nn, 3), _defineProperty(_pluralFormsCount, AvailableLocales.no, 3), _defineProperty(_pluralFormsCount, AvailableLocales.oc, 3), _defineProperty(_pluralFormsCount, AvailableLocales.om, 3), _defineProperty(_pluralFormsCount, AvailableLocales.or, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pa, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pap, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ps, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pt, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pt_pt, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pt_br, 3), _defineProperty(_pluralFormsCount, AvailableLocales.so, 3), _defineProperty(_pluralFormsCount, AvailableLocales.sq, 3), _defineProperty(_pluralFormsCount, AvailableLocales.sv, 3), _defineProperty(_pluralFormsCount, AvailableLocales.sw, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ta, 3), _defineProperty(_pluralFormsCount, AvailableLocales.te, 3), _defineProperty(_pluralFormsCount, AvailableLocales.tk, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ur, 3), _defineProperty(_pluralFormsCount, AvailableLocales.zu, 3), _defineProperty(_pluralFormsCount, AvailableLocales.am, 2), _defineProperty(_pluralFormsCount, AvailableLocales.bh, 2), _defineProperty(_pluralFormsCount, AvailableLocales.fil, 2), _defineProperty(_pluralFormsCount, AvailableLocales.fr, 3), _defineProperty(_pluralFormsCount, AvailableLocales.gun, 2), _defineProperty(_pluralFormsCount, AvailableLocales.hi, 2), _defineProperty(_pluralFormsCount, AvailableLocales.hy, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ln, 2), _defineProperty(_pluralFormsCount, AvailableLocales.mg, 2), _defineProperty(_pluralFormsCount, AvailableLocales.nso, 2), _defineProperty(_pluralFormsCount, AvailableLocales.xbr, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ti, 2), _defineProperty(_pluralFormsCount, AvailableLocales.wa, 2), _defineProperty(_pluralFormsCount, AvailableLocales.be, 4), _defineProperty(_pluralFormsCount, AvailableLocales.bs, 4), _defineProperty(_pluralFormsCount, AvailableLocales.hr, 4), _defineProperty(_pluralFormsCount, AvailableLocales.ru, 4), _defineProperty(_pluralFormsCount, AvailableLocales.sr, 4), _defineProperty(_pluralFormsCount, AvailableLocales.uk, 4), _defineProperty(_pluralFormsCount, AvailableLocales.cs, 4), _defineProperty(_pluralFormsCount, AvailableLocales.sk, 4), _defineProperty(_pluralFormsCount, AvailableLocales.ga, 4), _defineProperty(_pluralFormsCount, AvailableLocales.lt, 4), _defineProperty(_pluralFormsCount, AvailableLocales.sl, 5), _defineProperty(_pluralFormsCount, AvailableLocales.mk, 3), _defineProperty(_pluralFormsCount, AvailableLocales.mt, 5), _defineProperty(_pluralFormsCount, AvailableLocales.lv, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pl, 4), _defineProperty(_pluralFormsCount, AvailableLocales.cy, 4), _defineProperty(_pluralFormsCount, AvailableLocales.ro, 4), _defineProperty(_pluralFormsCount, AvailableLocales.ar, 6), _pluralFormsCount);
var PLURAL_STRING_DELIMITER = '|';

var checkForms = function checkForms(str, locale, key) {
  var forms = str.split(PLURAL_STRING_DELIMITER);

  if (forms.length !== pluralFormsCount[locale]) {
    throw new Error("Invalid plural string \"".concat(key, "\" for locale ").concat(locale, ": ").concat(forms.length, " given; need: ").concat(pluralFormsCount[locale]));
  }
};
/**
 * Checks if plural forms are valid
 * @param str - message string
 * @param locale - message locale
 * @param key - message key, used for clearer log message
 */


var isPluralFormValid = function isPluralFormValid(str, locale, key) {
  try {
    checkForms(str, locale, key);
    return true;
  } catch (error) {
    return false;
  }
};
/**
 * Returns plural form corresponding to number
 * @param str
 * @param number
 * @param locale - current locale
 * @param key - message key
 */

var getForm = function getForm(str, number, locale, key) {
  checkForms(str, locale, key);
  var forms = str.split(PLURAL_STRING_DELIMITER);
  var currentForm = getPluralFormId(locale, number);
  return forms[currentForm].trim();
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultMessageConstructor = function defaultMessageConstructor(formatted) {
  return formatted.join('');
};

var Translator = /*#__PURE__*/function () {
  function Translator(i18n, messageConstructor, values) {
    _classCallCheck(this, Translator);

    this.i18n = i18n;
    this.messageConstructor = messageConstructor || defaultMessageConstructor;
    this.values = values || {};
  }
  /**
   * Retrieves message and translates it, substituting parameters where necessary
   * @param key - translation message key
   * @param params - values used to substitute placeholders and tags
   */


  _createClass(Translator, [{
    key: "getMessage",
    value: function getMessage(key) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var message = this.i18n.getMessage(key);

      if (!message) {
        message = this.i18n.getBaseMessage(key);

        if (!message) {
          throw new Error("Was unable to find message for key: \"".concat(key, "\""));
        }
      }

      var formatted = formatter(message, _objectSpread$1(_objectSpread$1({}, this.values), params));
      return this.messageConstructor(formatted);
    }
    /**
     * Retrieves correct plural form and translates it
     * @param key - translation message key
     * @param number - plural form number
     * @param params - values used to substitute placeholders or tags if necessary,
     * if params has "count" property it will be overridden by number (plural form number)
     */

  }, {
    key: "getPlural",
    value: function getPlural(key, number) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var message = this.i18n.getMessage(key);
      var language = this.i18n.getUILanguage();

      if (!message) {
        message = this.i18n.getBaseMessage(key);

        if (!message) {
          throw new Error("Was unable to find message for key: \"".concat(key, "\""));
        }

        language = this.i18n.getBaseUILanguage();
      }

      var form = getForm(message, number, language, key);
      var formatted = formatter(form, _objectSpread$1(_objectSpread$1(_objectSpread$1({}, this.values), params), {}, {
        count: number
      }));
      return this.messageConstructor(formatted);
    }
  }]);

  return Translator;
}();

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Creates translation function for strings used in the React components
 * We do not import React directly, because translator module can be used
 * in the modules without React too
 *
 * e.g.
 * const translateReact = createReactTranslator(getMessage, React);
 * in locales folder you should have messages.json file
 * ```
 * message:
 *     "popup_auth_agreement_consent": {
 *          "message": "You agree to our <eula>EULA</eula>",
 *      },
 * ```
 *
 * this message can be retrieved and translated into react components next way:
 *
 * const component = translateReact('popup_auth_agreement_consent', {
 *          eula: (chunks) => (
 *              <button
 *                  className="auth__privacy-link"
 *                  onClick={handleEulaClick}
 *              >
 *                  {chunks}
 *              </button>
 *          ),
 *       });
 *
 * Note how functions in the values argument can be used with handlers
 *
 * @param i18n - object with methods which get translated message by key and return current locale
 * @param React - instance of react library
 */

var createReactTranslator = function createReactTranslator(i18n, react, defaults) {
  /**
   * Helps to build nodes without values
   *
   * @param tagName
   * @param children
   */
  var createReactElement = function createReactElement(tagName, children) {
    if (children) {
      return react.createElement(tagName, null, react.Children.toArray(children));
    }

    return react.createElement(tagName, null);
  };
  /**
   * Function creates default values to be used if user didn't provide function values for tags
   */


  var createDefaultValues = function createDefaultValues() {
    var externalDefaults = {};

    if (defaults) {
      defaults.tags.forEach(function (t) {
        externalDefaults[t.key] = function (children) {
          return createReactElement(t.createdTag, children);
        };
      });
    }

    if (defaults !== null && defaults !== void 0 && defaults.override) {
      return externalDefaults;
    }

    return _objectSpread$2({
      p: function p(children) {
        return createReactElement('p', children);
      },
      b: function b(children) {
        return createReactElement('b', children);
      },
      strong: function strong(children) {
        return createReactElement('strong', children);
      },
      tt: function tt(children) {
        return createReactElement('tt', children);
      },
      s: function s(children) {
        return createReactElement('s', children);
      },
      i: function i(children) {
        return createReactElement('i', children);
      }
    }, externalDefaults);
  };

  var reactMessageConstructor = function reactMessageConstructor(formatted) {
    var reactChildren = react.Children.toArray(formatted); // if there is only strings in the array we join them

    if (reactChildren.every(function (child) {
      return typeof child === 'string';
    })) {
      return reactChildren.join('');
    }

    return reactChildren;
  };

  var defaultValues = createDefaultValues();
  return new Translator(i18n, reactMessageConstructor, defaultValues);
};

var r,
    f;

function A(n, l) {
  return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function (n) {
    A(n, l);
  }) : l.push(n)), l;
}

r = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f = 0;

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Creates translation function for strings used in the Preact components
 * We do not import Preact directly, because translator module can be used
 * in the modules without Preact too
 *
 * e.g.
 * const translatePreact = createPreactTranslator(getMessage, Preact);
 * in locales folder you should have messages.json file
 * ```
 * message:
 *     "popup_auth_agreement_consent": {
 *          "message": "You agree to our <eula>EULA</eula>",
 *      },
 * ```
 *
 * this message can be retrieved and translated into preact components next way:
 *
 * const component = translatePreact('popup_auth_agreement_consent', {
 *          eula: (chunks) => (
 *              <button
 *                  className="auth__privacy-link"
 *                  onClick={handleEulaClick}
 *              >
 *                  {chunks}
 *              </button>
 *          ),
 *       });
 *
 * Note how functions in the values argument can be used with handlers
 *
 * @param i18n - object with methods which get translated message by key and return current locale
 * @param Preact - instance of preact library
 */

var createPreactTranslator = function createPreactTranslator(i18n, preact, defaults) {
  /**
   * Helps to build nodes without values
   *
   * @param tagName
   * @param children
   */
  var createPreactElement = function createPreactElement(tagName, children) {
    if (children) {
      return preact.createElement(tagName, null, A(children));
    }

    return preact.createElement(tagName, null);
  };
  /**
   * Function creates default values to be used if user didn't provide function values for tags
   */


  var createDefaultValues = function createDefaultValues() {
    var externalDefaults = {};

    if (defaults) {
      defaults.tags.forEach(function (t) {
        externalDefaults[t.key] = function (children) {
          return createPreactElement(t.createdTag, children);
        };
      });
    }

    if (defaults !== null && defaults !== void 0 && defaults.override) {
      return externalDefaults;
    }

    return _objectSpread$3({
      p: function p(children) {
        return createPreactElement('p', children);
      },
      b: function b(children) {
        return createPreactElement('b', children);
      },
      strong: function strong(children) {
        return createPreactElement('strong', children);
      },
      tt: function tt(children) {
        return createPreactElement('tt', children);
      },
      s: function s(children) {
        return createPreactElement('s', children);
      },
      i: function i(children) {
        return createPreactElement('i', children);
      }
    }, externalDefaults);
  };

  var preactMessageConstructor = function preactMessageConstructor(formatted) {
    var preactChildren = A(formatted); // if there is only strings in the array we join them

    if (preactChildren.every(function (child) {
      return typeof child === 'string';
    })) {
      return preactChildren.join('');
    }

    return preactChildren;
  };

  var defaultValues = createDefaultValues();
  return new Translator(i18n, preactMessageConstructor, defaultValues);
};

/**
 * Creates translator instance strings, by default for simple strings
 * @param i18n - function which returns translated message by key
 * @param messageConstructor - function that will collect messages
 * @param values - map with default values for tag converters
 */

var createTranslator = function createTranslator(i18n, messageConstructor, values) {
  return new Translator(i18n, messageConstructor, values);
};

var translate = {
  createTranslator: createTranslator,
  createReactTranslator: createReactTranslator,
  createPreactTranslator: createPreactTranslator
};

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/**
 * Compares two AST (abstract syntax tree) structures,
 * view tests for examples
 * @param baseAst
 * @param targetAst
 */

var areAstStructuresSame = function areAstStructuresSame(baseAst, targetAst) {
  var textNodeFilter = function textNodeFilter(node) {
    return !isTextNode(node);
  };

  var filteredBaseAst = baseAst.filter(textNodeFilter);
  var filteredTargetAst = targetAst.filter(textNodeFilter); // if AST structures have different lengths, they are not equal

  if (filteredBaseAst.length !== filteredTargetAst.length) {
    return false;
  }

  var _loop = function _loop(i) {
    var baseNode = filteredBaseAst[i];
    var targetNode = filteredTargetAst.find(function (node) {
      return node.type === baseNode.type && node.value === baseNode.value;
    });

    if (!targetNode) {
      return {
        v: false
      };
    }

    if (targetNode.children && baseNode.children) {
      var areChildrenSame = areAstStructuresSame(baseNode.children, targetNode.children);

      if (!areChildrenSame) {
        return {
          v: false
        };
      }
    }
  };

  for (var i = 0; i < filteredBaseAst.length; i += 1) {
    var _ret = _loop(i);

    if (_typeof(_ret) === "object") return _ret.v;
  }

  return true;
};
/**
 * Validates translation against base string by AST (abstract syntax tree) structure
 * @param baseMessage - base message
 * @param translatedMessage - translated message
 */


var isTranslationValid = function isTranslationValid(baseMessage, translatedMessage) {
  var baseMessageAst = parser(baseMessage);
  var translatedMessageAst = parser(translatedMessage);
  return areAstStructuresSame(baseMessageAst, translatedMessageAst);
};
var validator = {
  isTranslationValid: isTranslationValid,
  isPluralFormValid: isPluralFormValid
};




/***/ }),

/***/ 36554:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

(function (global, factory) {
	 true ? module.exports = factory() :
	0;
}(this, (function () { 'use strict';

var CLASS = {
    target: 'c3-target',
    chart: 'c3-chart',
    chartLine: 'c3-chart-line',
    chartLines: 'c3-chart-lines',
    chartBar: 'c3-chart-bar',
    chartBars: 'c3-chart-bars',
    chartText: 'c3-chart-text',
    chartTexts: 'c3-chart-texts',
    chartArc: 'c3-chart-arc',
    chartArcs: 'c3-chart-arcs',
    chartArcsTitle: 'c3-chart-arcs-title',
    chartArcsBackground: 'c3-chart-arcs-background',
    chartArcsGaugeUnit: 'c3-chart-arcs-gauge-unit',
    chartArcsGaugeMax: 'c3-chart-arcs-gauge-max',
    chartArcsGaugeMin: 'c3-chart-arcs-gauge-min',
    selectedCircle: 'c3-selected-circle',
    selectedCircles: 'c3-selected-circles',
    eventRect: 'c3-event-rect',
    eventRects: 'c3-event-rects',
    eventRectsSingle: 'c3-event-rects-single',
    eventRectsMultiple: 'c3-event-rects-multiple',
    zoomRect: 'c3-zoom-rect',
    brush: 'c3-brush',
    focused: 'c3-focused',
    defocused: 'c3-defocused',
    region: 'c3-region',
    regions: 'c3-regions',
    title: 'c3-title',
    tooltipContainer: 'c3-tooltip-container',
    tooltip: 'c3-tooltip',
    tooltipName: 'c3-tooltip-name',
    shape: 'c3-shape',
    shapes: 'c3-shapes',
    line: 'c3-line',
    lines: 'c3-lines',
    bar: 'c3-bar',
    bars: 'c3-bars',
    circle: 'c3-circle',
    circles: 'c3-circles',
    arc: 'c3-arc',
    arcs: 'c3-arcs',
    area: 'c3-area',
    areas: 'c3-areas',
    empty: 'c3-empty',
    text: 'c3-text',
    texts: 'c3-texts',
    gaugeValue: 'c3-gauge-value',
    grid: 'c3-grid',
    gridLines: 'c3-grid-lines',
    xgrid: 'c3-xgrid',
    xgrids: 'c3-xgrids',
    xgridLine: 'c3-xgrid-line',
    xgridLines: 'c3-xgrid-lines',
    xgridFocus: 'c3-xgrid-focus',
    ygrid: 'c3-ygrid',
    ygrids: 'c3-ygrids',
    ygridLine: 'c3-ygrid-line',
    ygridLines: 'c3-ygrid-lines',
    axis: 'c3-axis',
    axisX: 'c3-axis-x',
    axisXLabel: 'c3-axis-x-label',
    axisY: 'c3-axis-y',
    axisYLabel: 'c3-axis-y-label',
    axisY2: 'c3-axis-y2',
    axisY2Label: 'c3-axis-y2-label',
    legendBackground: 'c3-legend-background',
    legendItem: 'c3-legend-item',
    legendItemEvent: 'c3-legend-item-event',
    legendItemTile: 'c3-legend-item-tile',
    legendItemHidden: 'c3-legend-item-hidden',
    legendItemFocused: 'c3-legend-item-focused',
    dragarea: 'c3-dragarea',
    EXPANDED: '_expanded_',
    SELECTED: '_selected_',
    INCLUDED: '_included_'
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var isValue = function isValue(v) {
    return v || v === 0;
};
var isFunction = function isFunction(o) {
    return typeof o === 'function';
};
var isArray = function isArray(o) {
    return Array.isArray(o);
};
var isString = function isString(o) {
    return typeof o === 'string';
};
var isUndefined = function isUndefined(v) {
    return typeof v === 'undefined';
};
var isDefined = function isDefined(v) {
    return typeof v !== 'undefined';
};
var ceil10 = function ceil10(v) {
    return Math.ceil(v / 10) * 10;
};
var asHalfPixel = function asHalfPixel(n) {
    return Math.ceil(n) + 0.5;
};
var diffDomain = function diffDomain(d) {
    return d[1] - d[0];
};
var isEmpty = function isEmpty(o) {
    return typeof o === 'undefined' || o === null || isString(o) && o.length === 0 || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && Object.keys(o).length === 0;
};
var notEmpty = function notEmpty(o) {
    return !c3_chart_internal_fn.isEmpty(o);
};
var getOption = function getOption(options, key, defaultValue) {
    return isDefined(options[key]) ? options[key] : defaultValue;
};
var hasValue = function hasValue(dict, value) {
    var found = false;
    Object.keys(dict).forEach(function (key) {
        if (dict[key] === value) {
            found = true;
        }
    });
    return found;
};
var sanitise = function sanitise(str) {
    return typeof str === 'string' ? str.replace(/</g, '&lt;').replace(/>/g, '&gt;') : str;
};
var getPathBox = function getPathBox(path) {
    var box = path.getBoundingClientRect(),
        items = [path.pathSegList.getItem(0), path.pathSegList.getItem(1)],
        minX = items[0].x,
        minY = Math.min(items[0].y, items[1].y);
    return { x: minX, y: minY, width: box.width, height: box.height };
};

// Features:
// 1. category axis
// 2. ceil values of translate/x/y to int for half pixel antialiasing
// 3. multiline tick text
var tickTextCharSize;
function c3_axis(d3, params) {
    var scale = d3.scale.linear(),
        orient = "bottom",
        innerTickSize = 6,
        outerTickSize,
        tickPadding = 3,
        tickValues = null,
        tickFormat,
        tickArguments;

    var tickOffset = 0,
        tickCulling = true,
        tickCentered;

    params = params || {};
    outerTickSize = params.withOuterTick ? 6 : 0;

    function axisX(selection, x) {
        selection.attr("transform", function (d) {
            return "translate(" + Math.ceil(x(d) + tickOffset) + ", 0)";
        });
    }
    function axisY(selection, y) {
        selection.attr("transform", function (d) {
            return "translate(0," + Math.ceil(y(d)) + ")";
        });
    }
    function scaleExtent(domain) {
        var start = domain[0],
            stop = domain[domain.length - 1];
        return start < stop ? [start, stop] : [stop, start];
    }
    function generateTicks(scale) {
        var i,
            domain,
            ticks = [];
        if (scale.ticks) {
            return scale.ticks.apply(scale, tickArguments);
        }
        domain = scale.domain();
        for (i = Math.ceil(domain[0]); i < domain[1]; i++) {
            ticks.push(i);
        }
        if (ticks.length > 0 && ticks[0] > 0) {
            ticks.unshift(ticks[0] - (ticks[1] - ticks[0]));
        }
        return ticks;
    }
    function copyScale() {
        var newScale = scale.copy(),
            domain;
        if (params.isCategory) {
            domain = scale.domain();
            newScale.domain([domain[0], domain[1] - 1]);
        }
        return newScale;
    }
    function textFormatted(v) {
        var formatted = tickFormat ? tickFormat(v) : v;
        return typeof formatted !== 'undefined' ? formatted : '';
    }
    function getSizeFor1Char(tick) {
        if (tickTextCharSize) {
            return tickTextCharSize;
        }
        var size = {
            h: 11.5,
            w: 5.5
        };
        tick.select('text').text(textFormatted).each(function (d) {
            var box = this.getBoundingClientRect(),
                text = textFormatted(d),
                h = box.height,
                w = text ? box.width / text.length : undefined;
            if (h && w) {
                size.h = h;
                size.w = w;
            }
        }).text('');
        tickTextCharSize = size;
        return size;
    }
    function transitionise(selection) {
        return params.withoutTransition ? selection : d3.transition(selection);
    }
    function axis(g) {
        g.each(function () {
            var g = axis.g = d3.select(this);

            var scale0 = this.__chart__ || scale,
                scale1 = this.__chart__ = copyScale();

            var ticks = tickValues ? tickValues : generateTicks(scale1),
                tick = g.selectAll(".tick").data(ticks, scale1),
                tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", 1e-6),

            // MEMO: No exit transition. The reason is this transition affects max tick width calculation because old tick will be included in the ticks.
            tickExit = tick.exit().remove(),
                tickUpdate = transitionise(tick).style("opacity", 1),
                tickTransform,
                tickX,
                tickY;

            var range = scale.rangeExtent ? scale.rangeExtent() : scaleExtent(scale.range()),
                path = g.selectAll(".domain").data([0]),
                pathUpdate = (path.enter().append("path").attr("class", "domain"), transitionise(path));
            tickEnter.append("line");
            tickEnter.append("text");

            var lineEnter = tickEnter.select("line"),
                lineUpdate = tickUpdate.select("line"),
                textEnter = tickEnter.select("text"),
                textUpdate = tickUpdate.select("text");

            if (params.isCategory) {
                tickOffset = Math.ceil((scale1(1) - scale1(0)) / 2);
                tickX = tickCentered ? 0 : tickOffset;
                tickY = tickCentered ? tickOffset : 0;
            } else {
                tickOffset = tickX = 0;
            }

            var text,
                tspan,
                sizeFor1Char = getSizeFor1Char(g.select('.tick')),
                counts = [];
            var tickLength = Math.max(innerTickSize, 0) + tickPadding,
                isVertical = orient === 'left' || orient === 'right';

            // this should be called only when category axis
            function splitTickText(d, maxWidth) {
                var tickText = textFormatted(d),
                    subtext,
                    spaceIndex,
                    textWidth,
                    splitted = [];

                if (Object.prototype.toString.call(tickText) === "[object Array]") {
                    return tickText;
                }

                if (!maxWidth || maxWidth <= 0) {
                    maxWidth = isVertical ? 95 : params.isCategory ? Math.ceil(scale1(ticks[1]) - scale1(ticks[0])) - 12 : 110;
                }

                function split(splitted, text) {
                    spaceIndex = undefined;
                    for (var i = 1; i < text.length; i++) {
                        if (text.charAt(i) === ' ') {
                            spaceIndex = i;
                        }
                        subtext = text.substr(0, i + 1);
                        textWidth = sizeFor1Char.w * subtext.length;
                        // if text width gets over tick width, split by space index or crrent index
                        if (maxWidth < textWidth) {
                            return split(splitted.concat(text.substr(0, spaceIndex ? spaceIndex : i)), text.slice(spaceIndex ? spaceIndex + 1 : i));
                        }
                    }
                    return splitted.concat(text);
                }

                return split(splitted, tickText + "");
            }

            function tspanDy(d, i) {
                var dy = sizeFor1Char.h;
                if (i === 0) {
                    if (orient === 'left' || orient === 'right') {
                        dy = -((counts[d.index] - 1) * (sizeFor1Char.h / 2) - 3);
                    } else {
                        dy = ".71em";
                    }
                }
                return dy;
            }

            function tickSize(d) {
                var tickPosition = scale(d) + (tickCentered ? 0 : tickOffset);
                return range[0] < tickPosition && tickPosition < range[1] ? innerTickSize : 0;
            }

            text = tick.select("text");
            tspan = text.selectAll('tspan').data(function (d, i) {
                var splitted = params.tickMultiline ? splitTickText(d, params.tickWidth) : [].concat(textFormatted(d));
                counts[i] = splitted.length;
                return splitted.map(function (s) {
                    return { index: i, splitted: s };
                });
            });
            tspan.enter().append('tspan');
            tspan.exit().remove();
            tspan.text(function (d) {
                return d.splitted;
            });

            var rotate = params.tickTextRotate;

            function textAnchorForText(rotate) {
                if (!rotate) {
                    return 'middle';
                }
                return rotate > 0 ? "start" : "end";
            }
            function textTransform(rotate) {
                if (!rotate) {
                    return '';
                }
                return "rotate(" + rotate + ")";
            }
            function dxForText(rotate) {
                if (!rotate) {
                    return 0;
                }
                return 8 * Math.sin(Math.PI * (rotate / 180));
            }
            function yForText(rotate) {
                if (!rotate) {
                    return tickLength;
                }
                return 11.5 - 2.5 * (rotate / 15) * (rotate > 0 ? 1 : -1);
            }

            switch (orient) {
                case "bottom":
                    {
                        tickTransform = axisX;
                        lineEnter.attr("y2", innerTickSize);
                        textEnter.attr("y", tickLength);
                        lineUpdate.attr("x1", tickX).attr("x2", tickX).attr("y2", tickSize);
                        textUpdate.attr("x", 0).attr("y", yForText(rotate)).style("text-anchor", textAnchorForText(rotate)).attr("transform", textTransform(rotate));
                        tspan.attr('x', 0).attr("dy", tspanDy).attr('dx', dxForText(rotate));
                        pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
                        break;
                    }
                case "top":
                    {
                        // TODO: rotated tick text
                        tickTransform = axisX;
                        lineEnter.attr("y2", -innerTickSize);
                        textEnter.attr("y", -tickLength);
                        lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
                        textUpdate.attr("x", 0).attr("y", -tickLength);
                        text.style("text-anchor", "middle");
                        tspan.attr('x', 0).attr("dy", "0em");
                        pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
                        break;
                    }
                case "left":
                    {
                        tickTransform = axisY;
                        lineEnter.attr("x2", -innerTickSize);
                        textEnter.attr("x", -tickLength);
                        lineUpdate.attr("x2", -innerTickSize).attr("y1", tickY).attr("y2", tickY);
                        textUpdate.attr("x", -tickLength).attr("y", tickOffset);
                        text.style("text-anchor", "end");
                        tspan.attr('x', -tickLength).attr("dy", tspanDy);
                        pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
                        break;
                    }
                case "right":
                    {
                        tickTransform = axisY;
                        lineEnter.attr("x2", innerTickSize);
                        textEnter.attr("x", tickLength);
                        lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
                        textUpdate.attr("x", tickLength).attr("y", 0);
                        text.style("text-anchor", "start");
                        tspan.attr('x', tickLength).attr("dy", tspanDy);
                        pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
                        break;
                    }
            }
            if (scale1.rangeBand) {
                var x = scale1,
                    dx = x.rangeBand() / 2;
                scale0 = scale1 = function scale1(d) {
                    return x(d) + dx;
                };
            } else if (scale0.rangeBand) {
                scale0 = scale1;
            } else {
                tickExit.call(tickTransform, scale1);
            }
            tickEnter.call(tickTransform, scale0);
            tickUpdate.call(tickTransform, scale1);
        });
    }
    axis.scale = function (x) {
        if (!arguments.length) {
            return scale;
        }
        scale = x;
        return axis;
    };
    axis.orient = function (x) {
        if (!arguments.length) {
            return orient;
        }
        orient = x in { top: 1, right: 1, bottom: 1, left: 1 } ? x + "" : "bottom";
        return axis;
    };
    axis.tickFormat = function (format) {
        if (!arguments.length) {
            return tickFormat;
        }
        tickFormat = format;
        return axis;
    };
    axis.tickCentered = function (isCentered) {
        if (!arguments.length) {
            return tickCentered;
        }
        tickCentered = isCentered;
        return axis;
    };
    axis.tickOffset = function () {
        return tickOffset;
    };
    axis.tickInterval = function () {
        var interval, length;
        if (params.isCategory) {
            interval = tickOffset * 2;
        } else {
            length = axis.g.select('path.domain').node().getTotalLength() - outerTickSize * 2;
            interval = length / axis.g.selectAll('line').size();
        }
        return interval === Infinity ? 0 : interval;
    };
    axis.ticks = function () {
        if (!arguments.length) {
            return tickArguments;
        }
        tickArguments = arguments;
        return axis;
    };
    axis.tickCulling = function (culling) {
        if (!arguments.length) {
            return tickCulling;
        }
        tickCulling = culling;
        return axis;
    };
    axis.tickValues = function (x) {
        if (typeof x === 'function') {
            tickValues = function tickValues() {
                return x(scale.domain());
            };
        } else {
            if (!arguments.length) {
                return tickValues;
            }
            tickValues = x;
        }
        return axis;
    };
    return axis;
}

function Axis(owner) {
    API.call(this, owner);
}

inherit(API, Axis);

Axis.prototype.init = function init() {

    var $$ = this.owner,
        config = $$.config,
        main = $$.main;
    $$.axes.x = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisX).attr("clip-path", $$.clipPathForXAxis).attr("transform", $$.getTranslate('x')).style("visibility", config.axis_x_show ? 'visible' : 'hidden');
    $$.axes.x.append("text").attr("class", CLASS.axisXLabel).attr("transform", config.axis_rotated ? "rotate(-90)" : "").style("text-anchor", this.textAnchorForXAxisLabel.bind(this));
    $$.axes.y = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisY).attr("clip-path", config.axis_y_inner ? "" : $$.clipPathForYAxis).attr("transform", $$.getTranslate('y')).style("visibility", config.axis_y_show ? 'visible' : 'hidden');
    $$.axes.y.append("text").attr("class", CLASS.axisYLabel).attr("transform", config.axis_rotated ? "" : "rotate(-90)").style("text-anchor", this.textAnchorForYAxisLabel.bind(this));

    $$.axes.y2 = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisY2
    // clip-path?
    ).attr("transform", $$.getTranslate('y2')).style("visibility", config.axis_y2_show ? 'visible' : 'hidden');
    $$.axes.y2.append("text").attr("class", CLASS.axisY2Label).attr("transform", config.axis_rotated ? "" : "rotate(-90)").style("text-anchor", this.textAnchorForY2AxisLabel.bind(this));
};
Axis.prototype.getXAxis = function getXAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
    var $$ = this.owner,
        config = $$.config,
        axisParams = {
        isCategory: $$.isCategorized(),
        withOuterTick: withOuterTick,
        tickMultiline: config.axis_x_tick_multiline,
        tickWidth: config.axis_x_tick_width,
        tickTextRotate: withoutRotateTickText ? 0 : config.axis_x_tick_rotate,
        withoutTransition: withoutTransition
    },
        axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient);

    if ($$.isTimeSeries() && tickValues && typeof tickValues !== "function") {
        tickValues = tickValues.map(function (v) {
            return $$.parseDate(v);
        });
    }

    // Set tick
    axis.tickFormat(tickFormat).tickValues(tickValues);
    if ($$.isCategorized()) {
        axis.tickCentered(config.axis_x_tick_centered);
        if (isEmpty(config.axis_x_tick_culling)) {
            config.axis_x_tick_culling = false;
        }
    }

    return axis;
};
Axis.prototype.updateXAxisTickValues = function updateXAxisTickValues(targets, axis) {
    var $$ = this.owner,
        config = $$.config,
        tickValues;
    if (config.axis_x_tick_fit || config.axis_x_tick_count) {
        tickValues = this.generateTickValues($$.mapTargetsToUniqueXs(targets), config.axis_x_tick_count, $$.isTimeSeries());
    }
    if (axis) {
        axis.tickValues(tickValues);
    } else {
        $$.xAxis.tickValues(tickValues);
        $$.subXAxis.tickValues(tickValues);
    }
    return tickValues;
};
Axis.prototype.getYAxis = function getYAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
    var $$ = this.owner,
        config = $$.config,
        axisParams = {
        withOuterTick: withOuterTick,
        withoutTransition: withoutTransition,
        tickTextRotate: withoutRotateTickText ? 0 : config.axis_y_tick_rotate
    },
        axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient).tickFormat(tickFormat);
    if ($$.isTimeSeriesY()) {
        axis.ticks($$.d3.time[config.axis_y_tick_time_value], config.axis_y_tick_time_interval);
    } else {
        axis.tickValues(tickValues);
    }
    return axis;
};
Axis.prototype.getId = function getId(id) {
    var config = this.owner.config;
    return id in config.data_axes ? config.data_axes[id] : 'y';
};
Axis.prototype.getXAxisTickFormat = function getXAxisTickFormat() {
    var $$ = this.owner,
        config = $$.config,
        format = $$.isTimeSeries() ? $$.defaultAxisTimeFormat : $$.isCategorized() ? $$.categoryName : function (v) {
        return v < 0 ? v.toFixed(0) : v;
    };
    if (config.axis_x_tick_format) {
        if (isFunction(config.axis_x_tick_format)) {
            format = config.axis_x_tick_format;
        } else if ($$.isTimeSeries()) {
            format = function format(date) {
                return date ? $$.axisTimeFormat(config.axis_x_tick_format)(date) : "";
            };
        }
    }
    return isFunction(format) ? function (v) {
        return format.call($$, v);
    } : format;
};
Axis.prototype.getTickValues = function getTickValues(tickValues, axis) {
    return tickValues ? tickValues : axis ? axis.tickValues() : undefined;
};
Axis.prototype.getXAxisTickValues = function getXAxisTickValues() {
    return this.getTickValues(this.owner.config.axis_x_tick_values, this.owner.xAxis);
};
Axis.prototype.getYAxisTickValues = function getYAxisTickValues() {
    return this.getTickValues(this.owner.config.axis_y_tick_values, this.owner.yAxis);
};
Axis.prototype.getY2AxisTickValues = function getY2AxisTickValues() {
    return this.getTickValues(this.owner.config.axis_y2_tick_values, this.owner.y2Axis);
};
Axis.prototype.getLabelOptionByAxisId = function getLabelOptionByAxisId(axisId) {
    var $$ = this.owner,
        config = $$.config,
        option;
    if (axisId === 'y') {
        option = config.axis_y_label;
    } else if (axisId === 'y2') {
        option = config.axis_y2_label;
    } else if (axisId === 'x') {
        option = config.axis_x_label;
    }
    return option;
};
Axis.prototype.getLabelText = function getLabelText(axisId) {
    var option = this.getLabelOptionByAxisId(axisId);
    return isString(option) ? option : option ? option.text : null;
};
Axis.prototype.setLabelText = function setLabelText(axisId, text) {
    var $$ = this.owner,
        config = $$.config,
        option = this.getLabelOptionByAxisId(axisId);
    if (isString(option)) {
        if (axisId === 'y') {
            config.axis_y_label = text;
        } else if (axisId === 'y2') {
            config.axis_y2_label = text;
        } else if (axisId === 'x') {
            config.axis_x_label = text;
        }
    } else if (option) {
        option.text = text;
    }
};
Axis.prototype.getLabelPosition = function getLabelPosition(axisId, defaultPosition) {
    var option = this.getLabelOptionByAxisId(axisId),
        position = option && (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option.position ? option.position : defaultPosition;
    return {
        isInner: position.indexOf('inner') >= 0,
        isOuter: position.indexOf('outer') >= 0,
        isLeft: position.indexOf('left') >= 0,
        isCenter: position.indexOf('center') >= 0,
        isRight: position.indexOf('right') >= 0,
        isTop: position.indexOf('top') >= 0,
        isMiddle: position.indexOf('middle') >= 0,
        isBottom: position.indexOf('bottom') >= 0
    };
};
Axis.prototype.getXAxisLabelPosition = function getXAxisLabelPosition() {
    return this.getLabelPosition('x', this.owner.config.axis_rotated ? 'inner-top' : 'inner-right');
};
Axis.prototype.getYAxisLabelPosition = function getYAxisLabelPosition() {
    return this.getLabelPosition('y', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');
};
Axis.prototype.getY2AxisLabelPosition = function getY2AxisLabelPosition() {
    return this.getLabelPosition('y2', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');
};
Axis.prototype.getLabelPositionById = function getLabelPositionById(id) {
    return id === 'y2' ? this.getY2AxisLabelPosition() : id === 'y' ? this.getYAxisLabelPosition() : this.getXAxisLabelPosition();
};
Axis.prototype.textForXAxisLabel = function textForXAxisLabel() {
    return this.getLabelText('x');
};
Axis.prototype.textForYAxisLabel = function textForYAxisLabel() {
    return this.getLabelText('y');
};
Axis.prototype.textForY2AxisLabel = function textForY2AxisLabel() {
    return this.getLabelText('y2');
};
Axis.prototype.xForAxisLabel = function xForAxisLabel(forHorizontal, position) {
    var $$ = this.owner;
    if (forHorizontal) {
        return position.isLeft ? 0 : position.isCenter ? $$.width / 2 : $$.width;
    } else {
        return position.isBottom ? -$$.height : position.isMiddle ? -$$.height / 2 : 0;
    }
};
Axis.prototype.dxForAxisLabel = function dxForAxisLabel(forHorizontal, position) {
    if (forHorizontal) {
        return position.isLeft ? "0.5em" : position.isRight ? "-0.5em" : "0";
    } else {
        return position.isTop ? "-0.5em" : position.isBottom ? "0.5em" : "0";
    }
};
Axis.prototype.textAnchorForAxisLabel = function textAnchorForAxisLabel(forHorizontal, position) {
    if (forHorizontal) {
        return position.isLeft ? 'start' : position.isCenter ? 'middle' : 'end';
    } else {
        return position.isBottom ? 'start' : position.isMiddle ? 'middle' : 'end';
    }
};
Axis.prototype.xForXAxisLabel = function xForXAxisLabel() {
    return this.xForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
};
Axis.prototype.xForYAxisLabel = function xForYAxisLabel() {
    return this.xForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
};
Axis.prototype.xForY2AxisLabel = function xForY2AxisLabel() {
    return this.xForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
};
Axis.prototype.dxForXAxisLabel = function dxForXAxisLabel() {
    return this.dxForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
};
Axis.prototype.dxForYAxisLabel = function dxForYAxisLabel() {
    return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
};
Axis.prototype.dxForY2AxisLabel = function dxForY2AxisLabel() {
    return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
};
Axis.prototype.dyForXAxisLabel = function dyForXAxisLabel() {
    var $$ = this.owner,
        config = $$.config,
        position = this.getXAxisLabelPosition();
    if (config.axis_rotated) {
        return position.isInner ? "1.2em" : -25 - this.getMaxTickWidth('x');
    } else {
        return position.isInner ? "-0.5em" : config.axis_x_height ? config.axis_x_height - 10 : "3em";
    }
};
Axis.prototype.dyForYAxisLabel = function dyForYAxisLabel() {
    var $$ = this.owner,
        position = this.getYAxisLabelPosition();
    if ($$.config.axis_rotated) {
        return position.isInner ? "-0.5em" : "3em";
    } else {
        return position.isInner ? "1.2em" : -10 - ($$.config.axis_y_inner ? 0 : this.getMaxTickWidth('y') + 10);
    }
};
Axis.prototype.dyForY2AxisLabel = function dyForY2AxisLabel() {
    var $$ = this.owner,
        position = this.getY2AxisLabelPosition();
    if ($$.config.axis_rotated) {
        return position.isInner ? "1.2em" : "-2.2em";
    } else {
        return position.isInner ? "-0.5em" : 15 + ($$.config.axis_y2_inner ? 0 : this.getMaxTickWidth('y2') + 15);
    }
};
Axis.prototype.textAnchorForXAxisLabel = function textAnchorForXAxisLabel() {
    var $$ = this.owner;
    return this.textAnchorForAxisLabel(!$$.config.axis_rotated, this.getXAxisLabelPosition());
};
Axis.prototype.textAnchorForYAxisLabel = function textAnchorForYAxisLabel() {
    var $$ = this.owner;
    return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getYAxisLabelPosition());
};
Axis.prototype.textAnchorForY2AxisLabel = function textAnchorForY2AxisLabel() {
    var $$ = this.owner;
    return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getY2AxisLabelPosition());
};
Axis.prototype.getMaxTickWidth = function getMaxTickWidth(id, withoutRecompute) {
    var $$ = this.owner,
        config = $$.config,
        maxWidth = 0,
        targetsToShow,
        scale,
        axis,
        dummy,
        svg;
    if (withoutRecompute && $$.currentMaxTickWidths[id]) {
        return $$.currentMaxTickWidths[id];
    }
    if ($$.svg) {
        targetsToShow = $$.filterTargetsToShow($$.data.targets);
        if (id === 'y') {
            scale = $$.y.copy().domain($$.getYDomain(targetsToShow, 'y'));
            axis = this.getYAxis(scale, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, false, true, true);
        } else if (id === 'y2') {
            scale = $$.y2.copy().domain($$.getYDomain(targetsToShow, 'y2'));
            axis = this.getYAxis(scale, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, false, true, true);
        } else {
            scale = $$.x.copy().domain($$.getXDomain(targetsToShow));
            axis = this.getXAxis(scale, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, false, true, true);
            this.updateXAxisTickValues(targetsToShow, axis);
        }
        dummy = $$.d3.select('body').append('div').classed('c3', true);
        svg = dummy.append("svg").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0), svg.append('g').call(axis).each(function () {
            $$.d3.select(this).selectAll('text').each(function () {
                var box = this.getBoundingClientRect();
                if (maxWidth < box.width) {
                    maxWidth = box.width;
                }
            });
            dummy.remove();
        });
    }
    $$.currentMaxTickWidths[id] = maxWidth <= 0 ? $$.currentMaxTickWidths[id] : maxWidth;
    return $$.currentMaxTickWidths[id];
};

Axis.prototype.updateLabels = function updateLabels(withTransition) {
    var $$ = this.owner;
    var axisXLabel = $$.main.select('.' + CLASS.axisX + ' .' + CLASS.axisXLabel),
        axisYLabel = $$.main.select('.' + CLASS.axisY + ' .' + CLASS.axisYLabel),
        axisY2Label = $$.main.select('.' + CLASS.axisY2 + ' .' + CLASS.axisY2Label);
    (withTransition ? axisXLabel.transition() : axisXLabel).attr("x", this.xForXAxisLabel.bind(this)).attr("dx", this.dxForXAxisLabel.bind(this)).attr("dy", this.dyForXAxisLabel.bind(this)).text(this.textForXAxisLabel.bind(this));
    (withTransition ? axisYLabel.transition() : axisYLabel).attr("x", this.xForYAxisLabel.bind(this)).attr("dx", this.dxForYAxisLabel.bind(this)).attr("dy", this.dyForYAxisLabel.bind(this)).text(this.textForYAxisLabel.bind(this));
    (withTransition ? axisY2Label.transition() : axisY2Label).attr("x", this.xForY2AxisLabel.bind(this)).attr("dx", this.dxForY2AxisLabel.bind(this)).attr("dy", this.dyForY2AxisLabel.bind(this)).text(this.textForY2AxisLabel.bind(this));
};
Axis.prototype.getPadding = function getPadding(padding, key, defaultValue, domainLength) {
    var p = typeof padding === 'number' ? padding : padding[key];
    if (!isValue(p)) {
        return defaultValue;
    }
    if (padding.unit === 'ratio') {
        return padding[key] * domainLength;
    }
    // assume padding is pixels if unit is not specified
    return this.convertPixelsToAxisPadding(p, domainLength);
};
Axis.prototype.convertPixelsToAxisPadding = function convertPixelsToAxisPadding(pixels, domainLength) {
    var $$ = this.owner,
        length = $$.config.axis_rotated ? $$.width : $$.height;
    return domainLength * (pixels / length);
};
Axis.prototype.generateTickValues = function generateTickValues(values, tickCount, forTimeSeries) {
    var tickValues = values,
        targetCount,
        start,
        end,
        count,
        interval,
        i,
        tickValue;
    if (tickCount) {
        targetCount = isFunction(tickCount) ? tickCount() : tickCount;
        // compute ticks according to tickCount
        if (targetCount === 1) {
            tickValues = [values[0]];
        } else if (targetCount === 2) {
            tickValues = [values[0], values[values.length - 1]];
        } else if (targetCount > 2) {
            count = targetCount - 2;
            start = values[0];
            end = values[values.length - 1];
            interval = (end - start) / (count + 1);
            // re-construct unique values
            tickValues = [start];
            for (i = 0; i < count; i++) {
                tickValue = +start + interval * (i + 1);
                tickValues.push(forTimeSeries ? new Date(tickValue) : tickValue);
            }
            tickValues.push(end);
        }
    }
    if (!forTimeSeries) {
        tickValues = tickValues.sort(function (a, b) {
            return a - b;
        });
    }
    return tickValues;
};
Axis.prototype.generateTransitions = function generateTransitions(duration) {
    var $$ = this.owner,
        axes = $$.axes;
    return {
        axisX: duration ? axes.x.transition().duration(duration) : axes.x,
        axisY: duration ? axes.y.transition().duration(duration) : axes.y,
        axisY2: duration ? axes.y2.transition().duration(duration) : axes.y2,
        axisSubX: duration ? axes.subx.transition().duration(duration) : axes.subx
    };
};
Axis.prototype.redraw = function redraw(transitions, isHidden) {
    var $$ = this.owner;
    $$.axes.x.style("opacity", isHidden ? 0 : 1);
    $$.axes.y.style("opacity", isHidden ? 0 : 1);
    $$.axes.y2.style("opacity", isHidden ? 0 : 1);
    $$.axes.subx.style("opacity", isHidden ? 0 : 1);
    transitions.axisX.call($$.xAxis);
    transitions.axisY.call($$.yAxis);
    transitions.axisY2.call($$.y2Axis);
    transitions.axisSubX.call($$.subXAxis);
};

var c3$1 = { version: "0.4.15" };

var c3_chart_fn;
var c3_chart_internal_fn;
var c3_chart_internal_axis_fn;

function API(owner) {
    this.owner = owner;
}

function inherit(base, derived) {

    if (Object.create) {
        derived.prototype = Object.create(base.prototype);
    } else {
        var f = function f() {};
        f.prototype = base.prototype;
        derived.prototype = new f();
    }

    derived.prototype.constructor = derived;

    return derived;
}

function Chart(config) {
    var $$ = this.internal = new ChartInternal(this);
    $$.loadConfig(config);

    $$.beforeInit(config);
    $$.init();
    $$.afterInit(config);

    // bind "this" to nested API
    (function bindThis(fn, target, argThis) {
        Object.keys(fn).forEach(function (key) {
            target[key] = fn[key].bind(argThis);
            if (Object.keys(fn[key]).length > 0) {
                bindThis(fn[key], target[key], argThis);
            }
        });
    })(c3_chart_fn, this, this);
}

function ChartInternal(api) {
    var $$ = this;
    $$.d3 = window.d3 ? window.d3 :  true ? __webpack_require__(92846) : 0;
    $$.api = api;
    $$.config = $$.getDefaultConfig();
    $$.data = {};
    $$.cache = {};
    $$.axes = {};
}

c3$1.generate = function (config) {
    return new Chart(config);
};

c3$1.chart = {
    fn: Chart.prototype,
    internal: {
        fn: ChartInternal.prototype,
        axis: {
            fn: Axis.prototype
        }
    }
};
c3_chart_fn = c3$1.chart.fn;
c3_chart_internal_fn = c3$1.chart.internal.fn;
c3_chart_internal_axis_fn = c3$1.chart.internal.axis.fn;

c3_chart_internal_fn.beforeInit = function () {
    // can do something
};
c3_chart_internal_fn.afterInit = function () {
    // can do something
};
c3_chart_internal_fn.init = function () {
    var $$ = this,
        config = $$.config;

    $$.initParams();

    if (config.data_url) {
        $$.convertUrlToData(config.data_url, config.data_mimeType, config.data_headers, config.data_keys, $$.initWithData);
    } else if (config.data_json) {
        $$.initWithData($$.convertJsonToData(config.data_json, config.data_keys));
    } else if (config.data_rows) {
        $$.initWithData($$.convertRowsToData(config.data_rows));
    } else if (config.data_columns) {
        $$.initWithData($$.convertColumnsToData(config.data_columns));
    } else {
        throw Error('url or json or rows or columns is required.');
    }
};

c3_chart_internal_fn.initParams = function () {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;

    // MEMO: clipId needs to be unique because it conflicts when multiple charts exist
    $$.clipId = "c3-" + +new Date() + '-clip', $$.clipIdForXAxis = $$.clipId + '-xaxis', $$.clipIdForYAxis = $$.clipId + '-yaxis', $$.clipIdForGrid = $$.clipId + '-grid', $$.clipIdForSubchart = $$.clipId + '-subchart', $$.clipPath = $$.getClipPath($$.clipId), $$.clipPathForXAxis = $$.getClipPath($$.clipIdForXAxis), $$.clipPathForYAxis = $$.getClipPath($$.clipIdForYAxis);
    $$.clipPathForGrid = $$.getClipPath($$.clipIdForGrid), $$.clipPathForSubchart = $$.getClipPath($$.clipIdForSubchart), $$.dragStart = null;
    $$.dragging = false;
    $$.flowing = false;
    $$.cancelClick = false;
    $$.mouseover = false;
    $$.transiting = false;

    $$.color = $$.generateColor();
    $$.levelColor = $$.generateLevelColor();

    $$.dataTimeFormat = config.data_xLocaltime ? d3.time.format : d3.time.format.utc;
    $$.axisTimeFormat = config.axis_x_localtime ? d3.time.format : d3.time.format.utc;
    $$.defaultAxisTimeFormat = $$.axisTimeFormat.multi([[".%L", function (d) {
        return d.getMilliseconds();
    }], [":%S", function (d) {
        return d.getSeconds();
    }], ["%I:%M", function (d) {
        return d.getMinutes();
    }], ["%I %p", function (d) {
        return d.getHours();
    }], ["%-m/%-d", function (d) {
        return d.getDay() && d.getDate() !== 1;
    }], ["%-m/%-d", function (d) {
        return d.getDate() !== 1;
    }], ["%-m/%-d", function (d) {
        return d.getMonth();
    }], ["%Y/%-m/%-d", function () {
        return true;
    }]]);

    $$.hiddenTargetIds = [];
    $$.hiddenLegendIds = [];
    $$.focusedTargetIds = [];
    $$.defocusedTargetIds = [];

    $$.xOrient = config.axis_rotated ? "left" : "bottom";
    $$.yOrient = config.axis_rotated ? config.axis_y_inner ? "top" : "bottom" : config.axis_y_inner ? "right" : "left";
    $$.y2Orient = config.axis_rotated ? config.axis_y2_inner ? "bottom" : "top" : config.axis_y2_inner ? "left" : "right";
    $$.subXOrient = config.axis_rotated ? "left" : "bottom";

    $$.isLegendRight = config.legend_position === 'right';
    $$.isLegendInset = config.legend_position === 'inset';
    $$.isLegendTop = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'top-right';
    $$.isLegendLeft = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'bottom-left';
    $$.legendStep = 0;
    $$.legendItemWidth = 0;
    $$.legendItemHeight = 0;

    $$.currentMaxTickWidths = {
        x: 0,
        y: 0,
        y2: 0
    };

    $$.rotated_padding_left = 30;
    $$.rotated_padding_right = config.axis_rotated && !config.axis_x_show ? 0 : 30;
    $$.rotated_padding_top = 5;

    $$.withoutFadeIn = {};

    $$.intervalForObserveInserted = undefined;

    $$.axes.subx = d3.selectAll([]); // needs when excluding subchart.js
};

c3_chart_internal_fn.initChartElements = function () {
    if (this.initBar) {
        this.initBar();
    }
    if (this.initLine) {
        this.initLine();
    }
    if (this.initArc) {
        this.initArc();
    }
    if (this.initGauge) {
        this.initGauge();
    }
    if (this.initText) {
        this.initText();
    }
};

c3_chart_internal_fn.initWithData = function (data) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;
    var defs,
        main,
        binding = true;

    $$.axis = new Axis($$);

    if ($$.initPie) {
        $$.initPie();
    }
    if ($$.initBrush) {
        $$.initBrush();
    }
    if ($$.initZoom) {
        $$.initZoom();
    }

    if (!config.bindto) {
        $$.selectChart = d3.selectAll([]);
    } else if (typeof config.bindto.node === 'function') {
        $$.selectChart = config.bindto;
    } else {
        $$.selectChart = d3.select(config.bindto);
    }
    if ($$.selectChart.empty()) {
        $$.selectChart = d3.select(document.createElement('div')).style('opacity', 0);
        $$.observeInserted($$.selectChart);
        binding = false;
    }
    $$.selectChart.html("").classed("c3", true);

    // Init data as targets
    $$.data.xs = {};
    $$.data.targets = $$.convertDataToTargets(data);

    if (config.data_filter) {
        $$.data.targets = $$.data.targets.filter(config.data_filter);
    }

    // Set targets to hide if needed
    if (config.data_hide) {
        $$.addHiddenTargetIds(config.data_hide === true ? $$.mapToIds($$.data.targets) : config.data_hide);
    }
    if (config.legend_hide) {
        $$.addHiddenLegendIds(config.legend_hide === true ? $$.mapToIds($$.data.targets) : config.legend_hide);
    }

    // when gauge, hide legend // TODO: fix
    if ($$.hasType('gauge')) {
        config.legend_show = false;
    }

    // Init sizes and scales
    $$.updateSizes();
    $$.updateScales();

    // Set domains for each scale
    $$.x.domain(d3.extent($$.getXDomain($$.data.targets)));
    $$.y.domain($$.getYDomain($$.data.targets, 'y'));
    $$.y2.domain($$.getYDomain($$.data.targets, 'y2'));
    $$.subX.domain($$.x.domain());
    $$.subY.domain($$.y.domain());
    $$.subY2.domain($$.y2.domain());

    // Save original x domain for zoom update
    $$.orgXDomain = $$.x.domain();

    // Set initialized scales to brush and zoom
    if ($$.brush) {
        $$.brush.scale($$.subX);
    }
    if (config.zoom_enabled) {
        $$.zoom.scale($$.x);
    }

    /*-- Basic Elements --*/

    // Define svgs
    $$.svg = $$.selectChart.append("svg").style("overflow", "hidden").on('mouseenter', function () {
        return config.onmouseover.call($$);
    }).on('mouseleave', function () {
        return config.onmouseout.call($$);
    });

    if ($$.config.svg_classname) {
        $$.svg.attr('class', $$.config.svg_classname);
    }

    // Define defs
    defs = $$.svg.append("defs");
    $$.clipChart = $$.appendClip(defs, $$.clipId);
    $$.clipXAxis = $$.appendClip(defs, $$.clipIdForXAxis);
    $$.clipYAxis = $$.appendClip(defs, $$.clipIdForYAxis);
    $$.clipGrid = $$.appendClip(defs, $$.clipIdForGrid);
    $$.clipSubchart = $$.appendClip(defs, $$.clipIdForSubchart);
    $$.updateSvgSize();

    // Define regions
    main = $$.main = $$.svg.append("g").attr("transform", $$.getTranslate('main'));

    if ($$.initSubchart) {
        $$.initSubchart();
    }
    if ($$.initTooltip) {
        $$.initTooltip();
    }
    if ($$.initLegend) {
        $$.initLegend();
    }
    if ($$.initTitle) {
        $$.initTitle();
    }

    /*-- Main Region --*/

    // text when empty
    main.append("text").attr("class", CLASS.text + ' ' + CLASS.empty).attr("text-anchor", "middle" // horizontal centering of text at x position in all browsers.
    ).attr("dominant-baseline", "middle"); // vertical centering of text at y position in all browsers, except IE.

    // Regions
    $$.initRegion();

    // Grids
    $$.initGrid();

    // Define g for chart area
    main.append('g').attr("clip-path", $$.clipPath).attr('class', CLASS.chart);

    // Grid lines
    if (config.grid_lines_front) {
        $$.initGridLines();
    }

    // Cover whole with rects for events
    $$.initEventRect();

    // Define g for chart
    $$.initChartElements();

    // if zoom privileged, insert rect to forefront
    // TODO: is this needed?
    main.insert('rect', config.zoom_privileged ? null : 'g.' + CLASS.regions).attr('class', CLASS.zoomRect).attr('width', $$.width).attr('height', $$.height).style('opacity', 0).on("dblclick.zoom", null);

    // Set default extent if defined
    if (config.axis_x_extent) {
        $$.brush.extent($$.getDefaultExtent());
    }

    // Add Axis
    $$.axis.init();

    // Set targets
    $$.updateTargets($$.data.targets);

    // Draw with targets
    if (binding) {
        $$.updateDimension();
        $$.config.oninit.call($$);
        $$.redraw({
            withTransition: false,
            withTransform: true,
            withUpdateXDomain: true,
            withUpdateOrgXDomain: true,
            withTransitionForAxis: false
        });
    }

    // Bind resize event
    $$.bindResize();

    // export element of the chart
    $$.api.element = $$.selectChart.node();
};

c3_chart_internal_fn.smoothLines = function (el, type) {
    var $$ = this;
    if (type === 'grid') {
        el.each(function () {
            var g = $$.d3.select(this),
                x1 = g.attr('x1'),
                x2 = g.attr('x2'),
                y1 = g.attr('y1'),
                y2 = g.attr('y2');
            g.attr({
                'x1': Math.ceil(x1),
                'x2': Math.ceil(x2),
                'y1': Math.ceil(y1),
                'y2': Math.ceil(y2)
            });
        });
    }
};

c3_chart_internal_fn.updateSizes = function () {
    var $$ = this,
        config = $$.config;
    var legendHeight = $$.legend ? $$.getLegendHeight() : 0,
        legendWidth = $$.legend ? $$.getLegendWidth() : 0,
        legendHeightForBottom = $$.isLegendRight || $$.isLegendInset ? 0 : legendHeight,
        hasArc = $$.hasArcType(),
        xAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight('x'),
        subchartHeight = config.subchart_show && !hasArc ? config.subchart_size_height + xAxisHeight : 0;

    $$.currentWidth = $$.getCurrentWidth();
    $$.currentHeight = $$.getCurrentHeight();

    // for main
    $$.margin = config.axis_rotated ? {
        top: $$.getHorizontalAxisHeight('y2') + $$.getCurrentPaddingTop(),
        right: hasArc ? 0 : $$.getCurrentPaddingRight(),
        bottom: $$.getHorizontalAxisHeight('y') + legendHeightForBottom + $$.getCurrentPaddingBottom(),
        left: subchartHeight + (hasArc ? 0 : $$.getCurrentPaddingLeft())
    } : {
        top: 4 + $$.getCurrentPaddingTop(), // for top tick text
        right: hasArc ? 0 : $$.getCurrentPaddingRight(),
        bottom: xAxisHeight + subchartHeight + legendHeightForBottom + $$.getCurrentPaddingBottom(),
        left: hasArc ? 0 : $$.getCurrentPaddingLeft()
    };

    // for subchart
    $$.margin2 = config.axis_rotated ? {
        top: $$.margin.top,
        right: NaN,
        bottom: 20 + legendHeightForBottom,
        left: $$.rotated_padding_left
    } : {
        top: $$.currentHeight - subchartHeight - legendHeightForBottom,
        right: NaN,
        bottom: xAxisHeight + legendHeightForBottom,
        left: $$.margin.left
    };

    // for legend
    $$.margin3 = {
        top: 0,
        right: NaN,
        bottom: 0,
        left: 0
    };
    if ($$.updateSizeForLegend) {
        $$.updateSizeForLegend(legendHeight, legendWidth);
    }

    $$.width = $$.currentWidth - $$.margin.left - $$.margin.right;
    $$.height = $$.currentHeight - $$.margin.top - $$.margin.bottom;
    if ($$.width < 0) {
        $$.width = 0;
    }
    if ($$.height < 0) {
        $$.height = 0;
    }

    $$.width2 = config.axis_rotated ? $$.margin.left - $$.rotated_padding_left - $$.rotated_padding_right : $$.width;
    $$.height2 = config.axis_rotated ? $$.height : $$.currentHeight - $$.margin2.top - $$.margin2.bottom;
    if ($$.width2 < 0) {
        $$.width2 = 0;
    }
    if ($$.height2 < 0) {
        $$.height2 = 0;
    }

    // for arc
    $$.arcWidth = $$.width - ($$.isLegendRight ? legendWidth + 10 : 0);
    $$.arcHeight = $$.height - ($$.isLegendRight ? 0 : 10);
    if ($$.hasType('gauge') && !config.gauge_fullCircle) {
        $$.arcHeight += $$.height - $$.getGaugeLabelHeight();
    }
    if ($$.updateRadius) {
        $$.updateRadius();
    }

    if ($$.isLegendRight && hasArc) {
        $$.margin3.left = $$.arcWidth / 2 + $$.radiusExpanded * 1.1;
    }
};

c3_chart_internal_fn.updateTargets = function (targets) {
    var $$ = this;

    /*-- Main --*/

    //-- Text --//
    $$.updateTargetsForText(targets);

    //-- Bar --//
    $$.updateTargetsForBar(targets);

    //-- Line --//
    $$.updateTargetsForLine(targets);

    //-- Arc --//
    if ($$.hasArcType() && $$.updateTargetsForArc) {
        $$.updateTargetsForArc(targets);
    }

    /*-- Sub --*/

    if ($$.updateTargetsForSubchart) {
        $$.updateTargetsForSubchart(targets);
    }

    // Fade-in each chart
    $$.showTargets();
};
c3_chart_internal_fn.showTargets = function () {
    var $$ = this;
    $$.svg.selectAll('.' + CLASS.target).filter(function (d) {
        return $$.isTargetToShow(d.id);
    }).transition().duration($$.config.transition_duration).style("opacity", 1);
};

c3_chart_internal_fn.redraw = function (options, transitions) {
    var $$ = this,
        main = $$.main,
        d3 = $$.d3,
        config = $$.config;
    var areaIndices = $$.getShapeIndices($$.isAreaType),
        barIndices = $$.getShapeIndices($$.isBarType),
        lineIndices = $$.getShapeIndices($$.isLineType);
    var withY, withSubchart, withTransition, withTransitionForExit, withTransitionForAxis, withTransform, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain, withLegend, withEventRect, withDimension, withUpdateXAxis;
    var hideAxis = $$.hasArcType();
    var drawArea, drawBar, drawLine, xForText, yForText;
    var duration, durationForExit, durationForAxis;
    var waitForDraw, flow;
    var targetsToShow = $$.filterTargetsToShow($$.data.targets),
        tickValues,
        i,
        intervalForCulling,
        xDomainForZoom;
    var xv = $$.xv.bind($$),
        cx,
        cy;

    options = options || {};
    withY = getOption(options, "withY", true);
    withSubchart = getOption(options, "withSubchart", true);
    withTransition = getOption(options, "withTransition", true);
    withTransform = getOption(options, "withTransform", false);
    withUpdateXDomain = getOption(options, "withUpdateXDomain", false);
    withUpdateOrgXDomain = getOption(options, "withUpdateOrgXDomain", false);
    withTrimXDomain = getOption(options, "withTrimXDomain", true);
    withUpdateXAxis = getOption(options, "withUpdateXAxis", withUpdateXDomain);
    withLegend = getOption(options, "withLegend", false);
    withEventRect = getOption(options, "withEventRect", true);
    withDimension = getOption(options, "withDimension", true);
    withTransitionForExit = getOption(options, "withTransitionForExit", withTransition);
    withTransitionForAxis = getOption(options, "withTransitionForAxis", withTransition);

    duration = withTransition ? config.transition_duration : 0;
    durationForExit = withTransitionForExit ? duration : 0;
    durationForAxis = withTransitionForAxis ? duration : 0;

    transitions = transitions || $$.axis.generateTransitions(durationForAxis);

    // update legend and transform each g
    if (withLegend && config.legend_show) {
        $$.updateLegend($$.mapToIds($$.data.targets), options, transitions);
    } else if (withDimension) {
        // need to update dimension (e.g. axis.y.tick.values) because y tick values should change
        // no need to update axis in it because they will be updated in redraw()
        $$.updateDimension(true);
    }

    // MEMO: needed for grids calculation
    if ($$.isCategorized() && targetsToShow.length === 0) {
        $$.x.domain([0, $$.axes.x.selectAll('.tick').size()]);
    }

    if (targetsToShow.length) {
        $$.updateXDomain(targetsToShow, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain);
        if (!config.axis_x_tick_values) {
            tickValues = $$.axis.updateXAxisTickValues(targetsToShow);
        }
    } else {
        $$.xAxis.tickValues([]);
        $$.subXAxis.tickValues([]);
    }

    if (config.zoom_rescale && !options.flow) {
        xDomainForZoom = $$.x.orgDomain();
    }

    $$.y.domain($$.getYDomain(targetsToShow, 'y', xDomainForZoom));
    $$.y2.domain($$.getYDomain(targetsToShow, 'y2', xDomainForZoom));

    if (!config.axis_y_tick_values && config.axis_y_tick_count) {
        $$.yAxis.tickValues($$.axis.generateTickValues($$.y.domain(), config.axis_y_tick_count));
    }
    if (!config.axis_y2_tick_values && config.axis_y2_tick_count) {
        $$.y2Axis.tickValues($$.axis.generateTickValues($$.y2.domain(), config.axis_y2_tick_count));
    }

    // axes
    $$.axis.redraw(transitions, hideAxis);

    // Update axis label
    $$.axis.updateLabels(withTransition);

    // show/hide if manual culling needed
    if ((withUpdateXDomain || withUpdateXAxis) && targetsToShow.length) {
        if (config.axis_x_tick_culling && tickValues) {
            for (i = 1; i < tickValues.length; i++) {
                if (tickValues.length / i < config.axis_x_tick_culling_max) {
                    intervalForCulling = i;
                    break;
                }
            }
            $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').each(function (e) {
                var index = tickValues.indexOf(e);
                if (index >= 0) {
                    d3.select(this).style('display', index % intervalForCulling ? 'none' : 'block');
                }
            });
        } else {
            $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').style('display', 'block');
        }
    }

    // setup drawer - MEMO: these must be called after axis updated
    drawArea = $$.generateDrawArea ? $$.generateDrawArea(areaIndices, false) : undefined;
    drawBar = $$.generateDrawBar ? $$.generateDrawBar(barIndices) : undefined;
    drawLine = $$.generateDrawLine ? $$.generateDrawLine(lineIndices, false) : undefined;
    xForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, true);
    yForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, false);

    // Update sub domain
    if (withY) {
        $$.subY.domain($$.getYDomain(targetsToShow, 'y'));
        $$.subY2.domain($$.getYDomain(targetsToShow, 'y2'));
    }

    // xgrid focus
    $$.updateXgridFocus();

    // Data empty label positioning and text.
    main.select("text." + CLASS.text + '.' + CLASS.empty).attr("x", $$.width / 2).attr("y", $$.height / 2).text(config.data_empty_label_text).transition().style('opacity', targetsToShow.length ? 0 : 1);

    // grid
    $$.updateGrid(duration);

    // rect for regions
    $$.updateRegion(duration);

    // bars
    $$.updateBar(durationForExit);

    // lines, areas and cricles
    $$.updateLine(durationForExit);
    $$.updateArea(durationForExit);
    $$.updateCircle();

    // text
    if ($$.hasDataLabel()) {
        $$.updateText(durationForExit);
    }

    // title
    if ($$.redrawTitle) {
        $$.redrawTitle();
    }

    // arc
    if ($$.redrawArc) {
        $$.redrawArc(duration, durationForExit, withTransform);
    }

    // subchart
    if ($$.redrawSubchart) {
        $$.redrawSubchart(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices);
    }

    // circles for select
    main.selectAll('.' + CLASS.selectedCircles).filter($$.isBarType.bind($$)).selectAll('circle').remove();

    // event rects will redrawn when flow called
    if (config.interaction_enabled && !options.flow && withEventRect) {
        $$.redrawEventRect();
        if ($$.updateZoom) {
            $$.updateZoom();
        }
    }

    // update circleY based on updated parameters
    $$.updateCircleY();

    // generate circle x/y functions depending on updated params
    cx = ($$.config.axis_rotated ? $$.circleY : $$.circleX).bind($$);
    cy = ($$.config.axis_rotated ? $$.circleX : $$.circleY).bind($$);

    if (options.flow) {
        flow = $$.generateFlow({
            targets: targetsToShow,
            flow: options.flow,
            duration: options.flow.duration,
            drawBar: drawBar,
            drawLine: drawLine,
            drawArea: drawArea,
            cx: cx,
            cy: cy,
            xv: xv,
            xForText: xForText,
            yForText: yForText
        });
    }

    if ((duration || flow) && $$.isTabVisible()) {
        // Only use transition if tab visible. See #938.
        // transition should be derived from one transition
        d3.transition().duration(duration).each(function () {
            var transitionsToWait = [];

            // redraw and gather transitions
            [$$.redrawBar(drawBar, true), $$.redrawLine(drawLine, true), $$.redrawArea(drawArea, true), $$.redrawCircle(cx, cy, true), $$.redrawText(xForText, yForText, options.flow, true), $$.redrawRegion(true), $$.redrawGrid(true)].forEach(function (transitions) {
                transitions.forEach(function (transition) {
                    transitionsToWait.push(transition);
                });
            });

            // Wait for end of transitions to call flow and onrendered callback
            waitForDraw = $$.generateWait();
            transitionsToWait.forEach(function (t) {
                waitForDraw.add(t);
            });
        }).call(waitForDraw, function () {
            if (flow) {
                flow();
            }
            if (config.onrendered) {
                config.onrendered.call($$);
            }
        });
    } else {
        $$.redrawBar(drawBar);
        $$.redrawLine(drawLine);
        $$.redrawArea(drawArea);
        $$.redrawCircle(cx, cy);
        $$.redrawText(xForText, yForText, options.flow);
        $$.redrawRegion();
        $$.redrawGrid();
        if (config.onrendered) {
            config.onrendered.call($$);
        }
    }

    // update fadein condition
    $$.mapToIds($$.data.targets).forEach(function (id) {
        $$.withoutFadeIn[id] = true;
    });
};

c3_chart_internal_fn.updateAndRedraw = function (options) {
    var $$ = this,
        config = $$.config,
        transitions;
    options = options || {};
    // same with redraw
    options.withTransition = getOption(options, "withTransition", true);
    options.withTransform = getOption(options, "withTransform", false);
    options.withLegend = getOption(options, "withLegend", false);
    // NOT same with redraw
    options.withUpdateXDomain = true;
    options.withUpdateOrgXDomain = true;
    options.withTransitionForExit = false;
    options.withTransitionForTransform = getOption(options, "withTransitionForTransform", options.withTransition);
    // MEMO: this needs to be called before updateLegend and it means this ALWAYS needs to be called)
    $$.updateSizes();
    // MEMO: called in updateLegend in redraw if withLegend
    if (!(options.withLegend && config.legend_show)) {
        transitions = $$.axis.generateTransitions(options.withTransitionForAxis ? config.transition_duration : 0);
        // Update scales
        $$.updateScales();
        $$.updateSvgSize();
        // Update g positions
        $$.transformAll(options.withTransitionForTransform, transitions);
    }
    // Draw with new sizes & scales
    $$.redraw(options, transitions);
};
c3_chart_internal_fn.redrawWithoutRescale = function () {
    this.redraw({
        withY: false,
        withSubchart: false,
        withEventRect: false,
        withTransitionForAxis: false
    });
};

c3_chart_internal_fn.isTimeSeries = function () {
    return this.config.axis_x_type === 'timeseries';
};
c3_chart_internal_fn.isCategorized = function () {
    return this.config.axis_x_type.indexOf('categor') >= 0;
};
c3_chart_internal_fn.isCustomX = function () {
    var $$ = this,
        config = $$.config;
    return !$$.isTimeSeries() && (config.data_x || notEmpty(config.data_xs));
};

c3_chart_internal_fn.isTimeSeriesY = function () {
    return this.config.axis_y_type === 'timeseries';
};

c3_chart_internal_fn.getTranslate = function (target) {
    var $$ = this,
        config = $$.config,
        x,
        y;
    if (target === 'main') {
        x = asHalfPixel($$.margin.left);
        y = asHalfPixel($$.margin.top);
    } else if (target === 'context') {
        x = asHalfPixel($$.margin2.left);
        y = asHalfPixel($$.margin2.top);
    } else if (target === 'legend') {
        x = $$.margin3.left;
        y = $$.margin3.top;
    } else if (target === 'x') {
        x = 0;
        y = config.axis_rotated ? 0 : $$.height;
    } else if (target === 'y') {
        x = 0;
        y = config.axis_rotated ? $$.height : 0;
    } else if (target === 'y2') {
        x = config.axis_rotated ? 0 : $$.width;
        y = config.axis_rotated ? 1 : 0;
    } else if (target === 'subx') {
        x = 0;
        y = config.axis_rotated ? 0 : $$.height2;
    } else if (target === 'arc') {
        x = $$.arcWidth / 2;
        y = $$.arcHeight / 2;
    }
    return "translate(" + x + "," + y + ")";
};
c3_chart_internal_fn.initialOpacity = function (d) {
    return d.value !== null && this.withoutFadeIn[d.id] ? 1 : 0;
};
c3_chart_internal_fn.initialOpacityForCircle = function (d) {
    return d.value !== null && this.withoutFadeIn[d.id] ? this.opacityForCircle(d) : 0;
};
c3_chart_internal_fn.opacityForCircle = function (d) {
    var isPointShouldBeShown = isFunction(this.config.point_show) ? this.config.point_show(d) : this.config.point_show;
    var opacity = isPointShouldBeShown ? 1 : 0;
    return isValue(d.value) ? this.isScatterType(d) ? 0.5 : opacity : 0;
};
c3_chart_internal_fn.opacityForText = function () {
    return this.hasDataLabel() ? 1 : 0;
};
c3_chart_internal_fn.xx = function (d) {
    return d ? this.x(d.x) : null;
};
c3_chart_internal_fn.xv = function (d) {
    var $$ = this,
        value = d.value;
    if ($$.isTimeSeries()) {
        value = $$.parseDate(d.value);
    } else if ($$.isCategorized() && typeof d.value === 'string') {
        value = $$.config.axis_x_categories.indexOf(d.value);
    }
    return Math.ceil($$.x(value));
};
c3_chart_internal_fn.yv = function (d) {
    var $$ = this,
        yScale = d.axis && d.axis === 'y2' ? $$.y2 : $$.y;
    return Math.ceil(yScale(d.value));
};
c3_chart_internal_fn.subxx = function (d) {
    return d ? this.subX(d.x) : null;
};

c3_chart_internal_fn.transformMain = function (withTransition, transitions) {
    var $$ = this,
        xAxis,
        yAxis,
        y2Axis;
    if (transitions && transitions.axisX) {
        xAxis = transitions.axisX;
    } else {
        xAxis = $$.main.select('.' + CLASS.axisX);
        if (withTransition) {
            xAxis = xAxis.transition();
        }
    }
    if (transitions && transitions.axisY) {
        yAxis = transitions.axisY;
    } else {
        yAxis = $$.main.select('.' + CLASS.axisY);
        if (withTransition) {
            yAxis = yAxis.transition();
        }
    }
    if (transitions && transitions.axisY2) {
        y2Axis = transitions.axisY2;
    } else {
        y2Axis = $$.main.select('.' + CLASS.axisY2);
        if (withTransition) {
            y2Axis = y2Axis.transition();
        }
    }
    (withTransition ? $$.main.transition() : $$.main).attr("transform", $$.getTranslate('main'));
    xAxis.attr("transform", $$.getTranslate('x'));
    yAxis.attr("transform", $$.getTranslate('y'));
    y2Axis.attr("transform", $$.getTranslate('y2'));
    $$.main.select('.' + CLASS.chartArcs).attr("transform", $$.getTranslate('arc'));
};
c3_chart_internal_fn.transformAll = function (withTransition, transitions) {
    var $$ = this;
    $$.transformMain(withTransition, transitions);
    if ($$.config.subchart_show) {
        $$.transformContext(withTransition, transitions);
    }
    if ($$.legend) {
        $$.transformLegend(withTransition);
    }
};

c3_chart_internal_fn.updateSvgSize = function () {
    var $$ = this,
        brush = $$.svg.select(".c3-brush .background");
    $$.svg.attr('width', $$.currentWidth).attr('height', $$.currentHeight);
    $$.svg.selectAll(['#' + $$.clipId, '#' + $$.clipIdForGrid]).select('rect').attr('width', $$.width).attr('height', $$.height);
    $$.svg.select('#' + $$.clipIdForXAxis).select('rect').attr('x', $$.getXAxisClipX.bind($$)).attr('y', $$.getXAxisClipY.bind($$)).attr('width', $$.getXAxisClipWidth.bind($$)).attr('height', $$.getXAxisClipHeight.bind($$));
    $$.svg.select('#' + $$.clipIdForYAxis).select('rect').attr('x', $$.getYAxisClipX.bind($$)).attr('y', $$.getYAxisClipY.bind($$)).attr('width', $$.getYAxisClipWidth.bind($$)).attr('height', $$.getYAxisClipHeight.bind($$));
    $$.svg.select('#' + $$.clipIdForSubchart).select('rect').attr('width', $$.width).attr('height', brush.size() ? brush.attr('height') : 0);
    $$.svg.select('.' + CLASS.zoomRect).attr('width', $$.width).attr('height', $$.height);
    // MEMO: parent div's height will be bigger than svg when <!DOCTYPE html>
    $$.selectChart.style('max-height', $$.currentHeight + "px");
};

c3_chart_internal_fn.updateDimension = function (withoutAxis) {
    var $$ = this;
    if (!withoutAxis) {
        if ($$.config.axis_rotated) {
            $$.axes.x.call($$.xAxis);
            $$.axes.subx.call($$.subXAxis);
        } else {
            $$.axes.y.call($$.yAxis);
            $$.axes.y2.call($$.y2Axis);
        }
    }
    $$.updateSizes();
    $$.updateScales();
    $$.updateSvgSize();
    $$.transformAll(false);
};

c3_chart_internal_fn.observeInserted = function (selection) {
    var $$ = this,
        observer;
    if (typeof MutationObserver === 'undefined') {
        window.console.error("MutationObserver not defined.");
        return;
    }
    observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
            if (mutation.type === 'childList' && mutation.previousSibling) {
                observer.disconnect();
                // need to wait for completion of load because size calculation requires the actual sizes determined after that completion
                $$.intervalForObserveInserted = window.setInterval(function () {
                    // parentNode will NOT be null when completed
                    if (selection.node().parentNode) {
                        window.clearInterval($$.intervalForObserveInserted);
                        $$.updateDimension();
                        if ($$.brush) {
                            $$.brush.update();
                        }
                        $$.config.oninit.call($$);
                        $$.redraw({
                            withTransform: true,
                            withUpdateXDomain: true,
                            withUpdateOrgXDomain: true,
                            withTransition: false,
                            withTransitionForTransform: false,
                            withLegend: true
                        });
                        selection.transition().style('opacity', 1);
                    }
                }, 10);
            }
        });
    });
    observer.observe(selection.node(), { attributes: true, childList: true, characterData: true });
};

c3_chart_internal_fn.bindResize = function () {
    var $$ = this,
        config = $$.config;

    $$.resizeFunction = $$.generateResize();

    $$.resizeFunction.add(function () {
        config.onresize.call($$);
    });
    if (config.resize_auto) {
        $$.resizeFunction.add(function () {
            if ($$.resizeTimeout !== undefined) {
                window.clearTimeout($$.resizeTimeout);
            }
            $$.resizeTimeout = window.setTimeout(function () {
                delete $$.resizeTimeout;
                $$.api.flush();
            }, 100);
        });
    }
    $$.resizeFunction.add(function () {
        config.onresized.call($$);
    });

    if (window.attachEvent) {
        window.attachEvent('onresize', $$.resizeFunction);
    } else if (window.addEventListener) {
        window.addEventListener('resize', $$.resizeFunction, false);
    } else {
        // fallback to this, if this is a very old browser
        var wrapper = window.onresize;
        if (!wrapper) {
            // create a wrapper that will call all charts
            wrapper = $$.generateResize();
        } else if (!wrapper.add || !wrapper.remove) {
            // there is already a handler registered, make sure we call it too
            wrapper = $$.generateResize();
            wrapper.add(window.onresize);
        }
        // add this graph to the wrapper, we will be removed if the user calls destroy
        wrapper.add($$.resizeFunction);
        window.onresize = wrapper;
    }
};

c3_chart_internal_fn.generateResize = function () {
    var resizeFunctions = [];
    function callResizeFunctions() {
        resizeFunctions.forEach(function (f) {
            f();
        });
    }
    callResizeFunctions.add = function (f) {
        resizeFunctions.push(f);
    };
    callResizeFunctions.remove = function (f) {
        for (var i = 0; i < resizeFunctions.length; i++) {
            if (resizeFunctions[i] === f) {
                resizeFunctions.splice(i, 1);
                break;
            }
        }
    };
    return callResizeFunctions;
};

c3_chart_internal_fn.endall = function (transition, callback) {
    var n = 0;
    transition.each(function () {
        ++n;
    }).each("end", function () {
        if (! --n) {
            callback.apply(this, arguments);
        }
    });
};
c3_chart_internal_fn.generateWait = function () {
    var transitionsToWait = [],
        f = function f(transition, callback) {
        var timer = setInterval(function () {
            var done = 0;
            transitionsToWait.forEach(function (t) {
                if (t.empty()) {
                    done += 1;
                    return;
                }
                try {
                    t.transition();
                } catch (e) {
                    done += 1;
                }
            });
            if (done === transitionsToWait.length) {
                clearInterval(timer);
                if (callback) {
                    callback();
                }
            }
        }, 10);
    };
    f.add = function (transition) {
        transitionsToWait.push(transition);
    };
    return f;
};

c3_chart_internal_fn.parseDate = function (date) {
    var $$ = this,
        parsedDate;
    if (date instanceof Date) {
        parsedDate = date;
    } else if (typeof date === 'string') {
        parsedDate = $$.dataTimeFormat($$.config.data_xFormat).parse(date);
    } else if ((typeof date === 'undefined' ? 'undefined' : _typeof(date)) === 'object') {
        parsedDate = new Date(+date);
    } else if (typeof date === 'number' && !isNaN(date)) {
        parsedDate = new Date(+date);
    }
    if (!parsedDate || isNaN(+parsedDate)) {
        window.console.error("Failed to parse x '" + date + "' to Date object");
    }
    return parsedDate;
};

c3_chart_internal_fn.isTabVisible = function () {
    var hidden;
    if (typeof document.hidden !== "undefined") {
        // Opera 12.10 and Firefox 18 and later support
        hidden = "hidden";
    } else if (typeof document.mozHidden !== "undefined") {
        hidden = "mozHidden";
    } else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
    } else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
    }

    return document[hidden] ? false : true;
};

c3_chart_internal_fn.isValue = isValue;
c3_chart_internal_fn.isFunction = isFunction;
c3_chart_internal_fn.isString = isString;
c3_chart_internal_fn.isUndefined = isUndefined;
c3_chart_internal_fn.isDefined = isDefined;
c3_chart_internal_fn.ceil10 = ceil10;
c3_chart_internal_fn.asHalfPixel = asHalfPixel;
c3_chart_internal_fn.diffDomain = diffDomain;
c3_chart_internal_fn.isEmpty = isEmpty;
c3_chart_internal_fn.notEmpty = notEmpty;
c3_chart_internal_fn.notEmpty = notEmpty;
c3_chart_internal_fn.getOption = getOption;
c3_chart_internal_fn.hasValue = hasValue;
c3_chart_internal_fn.sanitise = sanitise;
c3_chart_internal_fn.getPathBox = getPathBox;
c3_chart_internal_fn.CLASS = CLASS;

/* jshint ignore:start */

// PhantomJS doesn't have support for Function.prototype.bind, which has caused confusion. Use
// this polyfill to avoid the confusion.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill

if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
        if (typeof this !== 'function') {
            // closest thing possible to the ECMAScript 5
            // internal IsCallable function
            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
        }

        var aArgs = Array.prototype.slice.call(arguments, 1),
            fToBind = this,
            fNOP = function fNOP() {},
            fBound = function fBound() {
            return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
        };

        fNOP.prototype = this.prototype;
        fBound.prototype = new fNOP();

        return fBound;
    };
}

// SVGPathSeg API polyfill
// https://github.com/progers/pathseg
//
// This is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
// SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
// changes which were implemented in Firefox 43 and Chrome 46.

(function () {
    "use strict";

    if (!("SVGPathSeg" in window)) {
        // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSeg
        window.SVGPathSeg = function (type, typeAsLetter, owningPathSegList) {
            this.pathSegType = type;
            this.pathSegTypeAsLetter = typeAsLetter;
            this._owningPathSegList = owningPathSegList;
        };

        window.SVGPathSeg.prototype.classname = "SVGPathSeg";

        window.SVGPathSeg.PATHSEG_UNKNOWN = 0;
        window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;
        window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
        window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;
        window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;
        window.SVGPathSeg.PATHSEG_LINETO_REL = 5;
        window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
        window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
        window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
        window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
        window.SVGPathSeg.PATHSEG_ARC_ABS = 10;
        window.SVGPathSeg.PATHSEG_ARC_REL = 11;
        window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
        window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
        window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
        window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
        window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
        window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
        window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
        window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

        // Notify owning PathSegList on any changes so they can be synchronized back to the path element.
        window.SVGPathSeg.prototype._segmentChanged = function () {
            if (this._owningPathSegList) this._owningPathSegList.segmentChanged(this);
        };

        window.SVGPathSegClosePath = function (owningPathSegList) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, "z", owningPathSegList);
        };
        window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegClosePath.prototype.toString = function () {
            return "[object SVGPathSegClosePath]";
        };
        window.SVGPathSegClosePath.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter;
        };
        window.SVGPathSegClosePath.prototype.clone = function () {
            return new window.SVGPathSegClosePath(undefined);
        };

        window.SVGPathSegMovetoAbs = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, "M", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegMovetoAbs.prototype.toString = function () {
            return "[object SVGPathSegMovetoAbs]";
        };
        window.SVGPathSegMovetoAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegMovetoAbs.prototype.clone = function () {
            return new window.SVGPathSegMovetoAbs(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegMovetoRel = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, "m", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegMovetoRel.prototype.toString = function () {
            return "[object SVGPathSegMovetoRel]";
        };
        window.SVGPathSegMovetoRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegMovetoRel.prototype.clone = function () {
            return new window.SVGPathSegMovetoRel(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegMovetoRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegMovetoRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoAbs = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, "L", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoAbs.prototype.toString = function () {
            return "[object SVGPathSegLinetoAbs]";
        };
        window.SVGPathSegLinetoAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegLinetoAbs.prototype.clone = function () {
            return new window.SVGPathSegLinetoAbs(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoRel = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, "l", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoRel.prototype.toString = function () {
            return "[object SVGPathSegLinetoRel]";
        };
        window.SVGPathSegLinetoRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegLinetoRel.prototype.clone = function () {
            return new window.SVGPathSegLinetoRel(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegLinetoRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegLinetoRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoCubicAbs = function (owningPathSegList, x, y, x1, y1, x2, y2) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, "C", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x1 = x1;
            this._y1 = y1;
            this._x2 = x2;
            this._y2 = y2;
        };
        window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoCubicAbs.prototype.toString = function () {
            return "[object SVGPathSegCurvetoCubicAbs]";
        };
        window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoCubicAbs.prototype.clone = function () {
            return new window.SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
        };
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x1", { get: function get() {
                return this._x1;
            }, set: function set(x1) {
                this._x1 = x1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y1", { get: function get() {
                return this._y1;
            }, set: function set(y1) {
                this._y1 = y1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x2", { get: function get() {
                return this._x2;
            }, set: function set(x2) {
                this._x2 = x2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y2", { get: function get() {
                return this._y2;
            }, set: function set(y2) {
                this._y2 = y2;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoCubicRel = function (owningPathSegList, x, y, x1, y1, x2, y2) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, "c", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x1 = x1;
            this._y1 = y1;
            this._x2 = x2;
            this._y2 = y2;
        };
        window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoCubicRel.prototype.toString = function () {
            return "[object SVGPathSegCurvetoCubicRel]";
        };
        window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoCubicRel.prototype.clone = function () {
            return new window.SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
        };
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x1", { get: function get() {
                return this._x1;
            }, set: function set(x1) {
                this._x1 = x1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y1", { get: function get() {
                return this._y1;
            }, set: function set(y1) {
                this._y1 = y1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x2", { get: function get() {
                return this._x2;
            }, set: function set(x2) {
                this._x2 = x2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y2", { get: function get() {
                return this._y2;
            }, set: function set(y2) {
                this._y2 = y2;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoQuadraticAbs = function (owningPathSegList, x, y, x1, y1) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, "Q", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x1 = x1;
            this._y1 = y1;
        };
        window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function () {
            return "[object SVGPathSegCurvetoQuadraticAbs]";
        };
        window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function () {
            return new window.SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1);
        };
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "x1", { get: function get() {
                return this._x1;
            }, set: function set(x1) {
                this._x1 = x1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "y1", { get: function get() {
                return this._y1;
            }, set: function set(y1) {
                this._y1 = y1;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoQuadraticRel = function (owningPathSegList, x, y, x1, y1) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, "q", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x1 = x1;
            this._y1 = y1;
        };
        window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function () {
            return "[object SVGPathSegCurvetoQuadraticRel]";
        };
        window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function () {
            return new window.SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1);
        };
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "x1", { get: function get() {
                return this._x1;
            }, set: function set(x1) {
                this._x1 = x1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "y1", { get: function get() {
                return this._y1;
            }, set: function set(y1) {
                this._y1 = y1;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegArcAbs = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, "A", owningPathSegList);
            this._x = x;
            this._y = y;
            this._r1 = r1;
            this._r2 = r2;
            this._angle = angle;
            this._largeArcFlag = largeArcFlag;
            this._sweepFlag = sweepFlag;
        };
        window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegArcAbs.prototype.toString = function () {
            return "[object SVGPathSegArcAbs]";
        };
        window.SVGPathSegArcAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y;
        };
        window.SVGPathSegArcAbs.prototype.clone = function () {
            return new window.SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
        };
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "r1", { get: function get() {
                return this._r1;
            }, set: function set(r1) {
                this._r1 = r1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "r2", { get: function get() {
                return this._r2;
            }, set: function set(r2) {
                this._r2 = r2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "angle", { get: function get() {
                return this._angle;
            }, set: function set(angle) {
                this._angle = angle;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "largeArcFlag", { get: function get() {
                return this._largeArcFlag;
            }, set: function set(largeArcFlag) {
                this._largeArcFlag = largeArcFlag;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "sweepFlag", { get: function get() {
                return this._sweepFlag;
            }, set: function set(sweepFlag) {
                this._sweepFlag = sweepFlag;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegArcRel = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, "a", owningPathSegList);
            this._x = x;
            this._y = y;
            this._r1 = r1;
            this._r2 = r2;
            this._angle = angle;
            this._largeArcFlag = largeArcFlag;
            this._sweepFlag = sweepFlag;
        };
        window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegArcRel.prototype.toString = function () {
            return "[object SVGPathSegArcRel]";
        };
        window.SVGPathSegArcRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y;
        };
        window.SVGPathSegArcRel.prototype.clone = function () {
            return new window.SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
        };
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "r1", { get: function get() {
                return this._r1;
            }, set: function set(r1) {
                this._r1 = r1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "r2", { get: function get() {
                return this._r2;
            }, set: function set(r2) {
                this._r2 = r2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "angle", { get: function get() {
                return this._angle;
            }, set: function set(angle) {
                this._angle = angle;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "largeArcFlag", { get: function get() {
                return this._largeArcFlag;
            }, set: function set(largeArcFlag) {
                this._largeArcFlag = largeArcFlag;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "sweepFlag", { get: function get() {
                return this._sweepFlag;
            }, set: function set(sweepFlag) {
                this._sweepFlag = sweepFlag;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoHorizontalAbs = function (owningPathSegList, x) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, "H", owningPathSegList);
            this._x = x;
        };
        window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function () {
            return "[object SVGPathSegLinetoHorizontalAbs]";
        };
        window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x;
        };
        window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function () {
            return new window.SVGPathSegLinetoHorizontalAbs(undefined, this._x);
        };
        Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoHorizontalRel = function (owningPathSegList, x) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, "h", owningPathSegList);
            this._x = x;
        };
        window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoHorizontalRel.prototype.toString = function () {
            return "[object SVGPathSegLinetoHorizontalRel]";
        };
        window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x;
        };
        window.SVGPathSegLinetoHorizontalRel.prototype.clone = function () {
            return new window.SVGPathSegLinetoHorizontalRel(undefined, this._x);
        };
        Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoVerticalAbs = function (owningPathSegList, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, "V", owningPathSegList);
            this._y = y;
        };
        window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoVerticalAbs.prototype.toString = function () {
            return "[object SVGPathSegLinetoVerticalAbs]";
        };
        window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._y;
        };
        window.SVGPathSegLinetoVerticalAbs.prototype.clone = function () {
            return new window.SVGPathSegLinetoVerticalAbs(undefined, this._y);
        };
        Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoVerticalRel = function (owningPathSegList, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, "v", owningPathSegList);
            this._y = y;
        };
        window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoVerticalRel.prototype.toString = function () {
            return "[object SVGPathSegLinetoVerticalRel]";
        };
        window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._y;
        };
        window.SVGPathSegLinetoVerticalRel.prototype.clone = function () {
            return new window.SVGPathSegLinetoVerticalRel(undefined, this._y);
        };
        Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoCubicSmoothAbs = function (owningPathSegList, x, y, x2, y2) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, "S", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x2 = x2;
            this._y2 = y2;
        };
        window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function () {
            return "[object SVGPathSegCurvetoCubicSmoothAbs]";
        };
        window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function () {
            return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2);
        };
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "x2", { get: function get() {
                return this._x2;
            }, set: function set(x2) {
                this._x2 = x2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "y2", { get: function get() {
                return this._y2;
            }, set: function set(y2) {
                this._y2 = y2;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoCubicSmoothRel = function (owningPathSegList, x, y, x2, y2) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, "s", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x2 = x2;
            this._y2 = y2;
        };
        window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function () {
            return "[object SVGPathSegCurvetoCubicSmoothRel]";
        };
        window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function () {
            return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2);
        };
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "x2", { get: function get() {
                return this._x2;
            }, set: function set(x2) {
                this._x2 = x2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "y2", { get: function get() {
                return this._y2;
            }, set: function set(y2) {
                this._y2 = y2;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoQuadraticSmoothAbs = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, "T", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function () {
            return "[object SVGPathSegCurvetoQuadraticSmoothAbs]";
        };
        window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function () {
            return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoQuadraticSmoothRel = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, "t", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function () {
            return "[object SVGPathSegCurvetoQuadraticSmoothRel]";
        };
        window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function () {
            return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        // Add createSVGPathSeg* functions to window.SVGPathElement.
        // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-Interfacewindow.SVGPathElement.
        window.SVGPathElement.prototype.createSVGPathSegClosePath = function () {
            return new window.SVGPathSegClosePath(undefined);
        };
        window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function (x, y) {
            return new window.SVGPathSegMovetoAbs(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function (x, y) {
            return new window.SVGPathSegMovetoRel(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function (x, y) {
            return new window.SVGPathSegLinetoAbs(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function (x, y) {
            return new window.SVGPathSegLinetoRel(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function (x, y, x1, y1, x2, y2) {
            return new window.SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function (x, y, x1, y1, x2, y2) {
            return new window.SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function (x, y, x1, y1) {
            return new window.SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function (x, y, x1, y1) {
            return new window.SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1);
        };
        window.SVGPathElement.prototype.createSVGPathSegArcAbs = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
            return new window.SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);
        };
        window.SVGPathElement.prototype.createSVGPathSegArcRel = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
            return new window.SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function (x) {
            return new window.SVGPathSegLinetoHorizontalAbs(undefined, x);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function (x) {
            return new window.SVGPathSegLinetoHorizontalRel(undefined, x);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function (y) {
            return new window.SVGPathSegLinetoVerticalAbs(undefined, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function (y) {
            return new window.SVGPathSegLinetoVerticalRel(undefined, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function (x, y, x2, y2) {
            return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function (x, y, x2, y2) {
            return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function (x, y) {
            return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function (x, y) {
            return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y);
        };

        if (!("getPathSegAtLength" in window.SVGPathElement.prototype)) {
            // Add getPathSegAtLength to SVGPathElement.
            // Spec: https://www.w3.org/TR/SVG11/single-page.html#paths-__svg__SVGPathElement__getPathSegAtLength
            // This polyfill requires SVGPathElement.getTotalLength to implement the distance-along-a-path algorithm.
            window.SVGPathElement.prototype.getPathSegAtLength = function (distance) {
                if (distance === undefined || !isFinite(distance)) throw "Invalid arguments.";

                var measurementElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
                measurementElement.setAttribute("d", this.getAttribute("d"));
                var lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;

                // If the path is empty, return 0.
                if (lastPathSegment <= 0) return 0;

                do {
                    measurementElement.pathSegList.removeItem(lastPathSegment);
                    if (distance > measurementElement.getTotalLength()) break;
                    lastPathSegment--;
                } while (lastPathSegment > 0);
                return lastPathSegment;
            };
        }
    }

    if (!("SVGPathSegList" in window)) {
        // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSegList
        window.SVGPathSegList = function (pathElement) {
            this._pathElement = pathElement;
            this._list = this._parsePath(this._pathElement.getAttribute("d"));

            // Use a MutationObserver to catch changes to the path's "d" attribute.
            this._mutationObserverConfig = { "attributes": true, "attributeFilter": ["d"] };
            this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
            this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
        };

        window.SVGPathSegList.prototype.classname = "SVGPathSegList";

        Object.defineProperty(window.SVGPathSegList.prototype, "numberOfItems", {
            get: function get() {
                this._checkPathSynchronizedToList();
                return this._list.length;
            },
            enumerable: true
        });

        // Add the pathSegList accessors to window.SVGPathElement.
        // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGAnimatedPathData
        Object.defineProperty(window.SVGPathElement.prototype, "pathSegList", {
            get: function get() {
                if (!this._pathSegList) this._pathSegList = new window.SVGPathSegList(this);
                return this._pathSegList;
            },
            enumerable: true
        });
        // FIXME: The following are not implemented and simply return window.SVGPathElement.pathSegList.
        Object.defineProperty(window.SVGPathElement.prototype, "normalizedPathSegList", { get: function get() {
                return this.pathSegList;
            }, enumerable: true });
        Object.defineProperty(window.SVGPathElement.prototype, "animatedPathSegList", { get: function get() {
                return this.pathSegList;
            }, enumerable: true });
        Object.defineProperty(window.SVGPathElement.prototype, "animatedNormalizedPathSegList", { get: function get() {
                return this.pathSegList;
            }, enumerable: true });

        // Process any pending mutations to the path element and update the list as needed.
        // This should be the first call of all public functions and is needed because
        // MutationObservers are not synchronous so we can have pending asynchronous mutations.
        window.SVGPathSegList.prototype._checkPathSynchronizedToList = function () {
            this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
        };

        window.SVGPathSegList.prototype._updateListFromPathMutations = function (mutationRecords) {
            if (!this._pathElement) return;
            var hasPathMutations = false;
            mutationRecords.forEach(function (record) {
                if (record.attributeName == "d") hasPathMutations = true;
            });
            if (hasPathMutations) this._list = this._parsePath(this._pathElement.getAttribute("d"));
        };

        // Serialize the list and update the path's 'd' attribute.
        window.SVGPathSegList.prototype._writeListToPath = function () {
            this._pathElementMutationObserver.disconnect();
            this._pathElement.setAttribute("d", window.SVGPathSegList._pathSegArrayAsString(this._list));
            this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
        };

        // When a path segment changes the list needs to be synchronized back to the path element.
        window.SVGPathSegList.prototype.segmentChanged = function (pathSeg) {
            this._writeListToPath();
        };

        window.SVGPathSegList.prototype.clear = function () {
            this._checkPathSynchronizedToList();

            this._list.forEach(function (pathSeg) {
                pathSeg._owningPathSegList = null;
            });
            this._list = [];
            this._writeListToPath();
        };

        window.SVGPathSegList.prototype.initialize = function (newItem) {
            this._checkPathSynchronizedToList();

            this._list = [newItem];
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
        };

        window.SVGPathSegList.prototype._checkValidIndex = function (index) {
            if (isNaN(index) || index < 0 || index >= this.numberOfItems) throw "INDEX_SIZE_ERR";
        };

        window.SVGPathSegList.prototype.getItem = function (index) {
            this._checkPathSynchronizedToList();

            this._checkValidIndex(index);
            return this._list[index];
        };

        window.SVGPathSegList.prototype.insertItemBefore = function (newItem, index) {
            this._checkPathSynchronizedToList();

            // Spec: If the index is greater than or equal to numberOfItems, then the new item is appended to the end of the list.
            if (index > this.numberOfItems) index = this.numberOfItems;
            if (newItem._owningPathSegList) {
                // SVG2 spec says to make a copy.
                newItem = newItem.clone();
            }
            this._list.splice(index, 0, newItem);
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
        };

        window.SVGPathSegList.prototype.replaceItem = function (newItem, index) {
            this._checkPathSynchronizedToList();

            if (newItem._owningPathSegList) {
                // SVG2 spec says to make a copy.
                newItem = newItem.clone();
            }
            this._checkValidIndex(index);
            this._list[index] = newItem;
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
        };

        window.SVGPathSegList.prototype.removeItem = function (index) {
            this._checkPathSynchronizedToList();

            this._checkValidIndex(index);
            var item = this._list[index];
            this._list.splice(index, 1);
            this._writeListToPath();
            return item;
        };

        window.SVGPathSegList.prototype.appendItem = function (newItem) {
            this._checkPathSynchronizedToList();

            if (newItem._owningPathSegList) {
                // SVG2 spec says to make a copy.
                newItem = newItem.clone();
            }
            this._list.push(newItem);
            newItem._owningPathSegList = this;
            // TODO: Optimize this to just append to the existing attribute.
            this._writeListToPath();
            return newItem;
        };

        window.SVGPathSegList._pathSegArrayAsString = function (pathSegArray) {
            var string = "";
            var first = true;
            pathSegArray.forEach(function (pathSeg) {
                if (first) {
                    first = false;
                    string += pathSeg._asPathString();
                } else {
                    string += " " + pathSeg._asPathString();
                }
            });
            return string;
        };

        // This closely follows SVGPathParser::parsePath from Source/core/svg/SVGPathParser.cpp.
        window.SVGPathSegList.prototype._parsePath = function (string) {
            if (!string || string.length == 0) return [];

            var owningPathSegList = this;

            var Builder = function Builder() {
                this.pathSegList = [];
            };

            Builder.prototype.appendSegment = function (pathSeg) {
                this.pathSegList.push(pathSeg);
            };

            var Source = function Source(string) {
                this._string = string;
                this._currentIndex = 0;
                this._endIndex = this._string.length;
                this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;

                this._skipOptionalSpaces();
            };

            Source.prototype._isCurrentSpace = function () {
                var character = this._string[this._currentIndex];
                return character <= " " && (character == " " || character == "\n" || character == "\t" || character == "\r" || character == "\f");
            };

            Source.prototype._skipOptionalSpaces = function () {
                while (this._currentIndex < this._endIndex && this._isCurrentSpace()) {
                    this._currentIndex++;
                }return this._currentIndex < this._endIndex;
            };

            Source.prototype._skipOptionalSpacesOrDelimiter = function () {
                if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ",") return false;
                if (this._skipOptionalSpaces()) {
                    if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ",") {
                        this._currentIndex++;
                        this._skipOptionalSpaces();
                    }
                }
                return this._currentIndex < this._endIndex;
            };

            Source.prototype.hasMoreData = function () {
                return this._currentIndex < this._endIndex;
            };

            Source.prototype.peekSegmentType = function () {
                var lookahead = this._string[this._currentIndex];
                return this._pathSegTypeFromChar(lookahead);
            };

            Source.prototype._pathSegTypeFromChar = function (lookahead) {
                switch (lookahead) {
                    case "Z":
                    case "z":
                        return window.SVGPathSeg.PATHSEG_CLOSEPATH;
                    case "M":
                        return window.SVGPathSeg.PATHSEG_MOVETO_ABS;
                    case "m":
                        return window.SVGPathSeg.PATHSEG_MOVETO_REL;
                    case "L":
                        return window.SVGPathSeg.PATHSEG_LINETO_ABS;
                    case "l":
                        return window.SVGPathSeg.PATHSEG_LINETO_REL;
                    case "C":
                        return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
                    case "c":
                        return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
                    case "Q":
                        return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
                    case "q":
                        return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
                    case "A":
                        return window.SVGPathSeg.PATHSEG_ARC_ABS;
                    case "a":
                        return window.SVGPathSeg.PATHSEG_ARC_REL;
                    case "H":
                        return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
                    case "h":
                        return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
                    case "V":
                        return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
                    case "v":
                        return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
                    case "S":
                        return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
                    case "s":
                        return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
                    case "T":
                        return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
                    case "t":
                        return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
                    default:
                        return window.SVGPathSeg.PATHSEG_UNKNOWN;
                }
            };

            Source.prototype._nextCommandHelper = function (lookahead, previousCommand) {
                // Check for remaining coordinates in the current command.
                if ((lookahead == "+" || lookahead == "-" || lookahead == "." || lookahead >= "0" && lookahead <= "9") && previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {
                    if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS) return window.SVGPathSeg.PATHSEG_LINETO_ABS;
                    if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL) return window.SVGPathSeg.PATHSEG_LINETO_REL;
                    return previousCommand;
                }
                return window.SVGPathSeg.PATHSEG_UNKNOWN;
            };

            Source.prototype.initialCommandIsMoveTo = function () {
                // If the path is empty it is still valid, so return true.
                if (!this.hasMoreData()) return true;
                var command = this.peekSegmentType();
                // Path must start with moveTo.
                return command == window.SVGPathSeg.PATHSEG_MOVETO_ABS || command == window.SVGPathSeg.PATHSEG_MOVETO_REL;
            };

            // Parse a number from an SVG path. This very closely follows genericParseNumber(...) from Source/core/svg/SVGParserUtilities.cpp.
            // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-PathDataBNF
            Source.prototype._parseNumber = function () {
                var exponent = 0;
                var integer = 0;
                var frac = 1;
                var decimal = 0;
                var sign = 1;
                var expsign = 1;

                var startIndex = this._currentIndex;

                this._skipOptionalSpaces();

                // Read the sign.
                if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "+") this._currentIndex++;else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "-") {
                    this._currentIndex++;
                    sign = -1;
                }

                if (this._currentIndex == this._endIndex || (this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") && this._string.charAt(this._currentIndex) != ".")
                    // The first character of a number must be one of [0-9+-.].
                    return undefined;

                // Read the integer part, build right-to-left.
                var startIntPartIndex = this._currentIndex;
                while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                    this._currentIndex++;
                } // Advance to first non-digit.

                if (this._currentIndex != startIntPartIndex) {
                    var scanIntPartIndex = this._currentIndex - 1;
                    var multiplier = 1;
                    while (scanIntPartIndex >= startIntPartIndex) {
                        integer += multiplier * (this._string.charAt(scanIntPartIndex--) - "0");
                        multiplier *= 10;
                    }
                }

                // Read the decimals.
                if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ".") {
                    this._currentIndex++;

                    // There must be a least one digit following the .
                    if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") return undefined;
                    while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                        frac *= 10;
                        decimal += (this._string.charAt(this._currentIndex) - "0") / frac;
                        this._currentIndex += 1;
                    }
                }

                // Read the exponent part.
                if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == "e" || this._string.charAt(this._currentIndex) == "E") && this._string.charAt(this._currentIndex + 1) != "x" && this._string.charAt(this._currentIndex + 1) != "m") {
                    this._currentIndex++;

                    // Read the sign of the exponent.
                    if (this._string.charAt(this._currentIndex) == "+") {
                        this._currentIndex++;
                    } else if (this._string.charAt(this._currentIndex) == "-") {
                        this._currentIndex++;
                        expsign = -1;
                    }

                    // There must be an exponent.
                    if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") return undefined;

                    while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                        exponent *= 10;
                        exponent += this._string.charAt(this._currentIndex) - "0";
                        this._currentIndex++;
                    }
                }

                var number = integer + decimal;
                number *= sign;

                if (exponent) number *= Math.pow(10, expsign * exponent);

                if (startIndex == this._currentIndex) return undefined;

                this._skipOptionalSpacesOrDelimiter();

                return number;
            };

            Source.prototype._parseArcFlag = function () {
                if (this._currentIndex >= this._endIndex) return undefined;
                var flag = false;
                var flagChar = this._string.charAt(this._currentIndex++);
                if (flagChar == "0") flag = false;else if (flagChar == "1") flag = true;else return undefined;

                this._skipOptionalSpacesOrDelimiter();
                return flag;
            };

            Source.prototype.parseSegment = function () {
                var lookahead = this._string[this._currentIndex];
                var command = this._pathSegTypeFromChar(lookahead);
                if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {
                    // Possibly an implicit command. Not allowed if this is the first command.
                    if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN) return null;
                    command = this._nextCommandHelper(lookahead, this._previousCommand);
                    if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) return null;
                } else {
                    this._currentIndex++;
                }

                this._previousCommand = command;

                switch (command) {
                    case window.SVGPathSeg.PATHSEG_MOVETO_REL:
                        return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_MOVETO_ABS:
                        return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_REL:
                        return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_ABS:
                        return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
                        return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
                        return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
                        return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
                        return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_CLOSEPATH:
                        this._skipOptionalSpaces();
                        return new window.SVGPathSegClosePath(owningPathSegList);
                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
                        var points = { x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
                        var points = { x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
                        return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
                        return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_ARC_REL:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
                    case window.SVGPathSeg.PATHSEG_ARC_ABS:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
                    default:
                        throw "Unknown path seg type.";
                }
            };

            var builder = new Builder();
            var source = new Source(string);

            if (!source.initialCommandIsMoveTo()) return [];
            while (source.hasMoreData()) {
                var pathSeg = source.parseSegment();
                if (!pathSeg) return [];
                builder.appendSegment(pathSeg);
            }

            return builder.pathSegList;
        };
    }
})();

/* jshint ignore:end */

c3_chart_fn.axis = function () {};
c3_chart_fn.axis.labels = function (labels) {
    var $$ = this.internal;
    if (arguments.length) {
        Object.keys(labels).forEach(function (axisId) {
            $$.axis.setLabelText(axisId, labels[axisId]);
        });
        $$.axis.updateLabels();
    }
    // TODO: return some values?
};
c3_chart_fn.axis.max = function (max) {
    var $$ = this.internal,
        config = $$.config;
    if (arguments.length) {
        if ((typeof max === 'undefined' ? 'undefined' : _typeof(max)) === 'object') {
            if (isValue(max.x)) {
                config.axis_x_max = max.x;
            }
            if (isValue(max.y)) {
                config.axis_y_max = max.y;
            }
            if (isValue(max.y2)) {
                config.axis_y2_max = max.y2;
            }
        } else {
            config.axis_y_max = config.axis_y2_max = max;
        }
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
    } else {
        return {
            x: config.axis_x_max,
            y: config.axis_y_max,
            y2: config.axis_y2_max
        };
    }
};
c3_chart_fn.axis.min = function (min) {
    var $$ = this.internal,
        config = $$.config;
    if (arguments.length) {
        if ((typeof min === 'undefined' ? 'undefined' : _typeof(min)) === 'object') {
            if (isValue(min.x)) {
                config.axis_x_min = min.x;
            }
            if (isValue(min.y)) {
                config.axis_y_min = min.y;
            }
            if (isValue(min.y2)) {
                config.axis_y2_min = min.y2;
            }
        } else {
            config.axis_y_min = config.axis_y2_min = min;
        }
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
    } else {
        return {
            x: config.axis_x_min,
            y: config.axis_y_min,
            y2: config.axis_y2_min
        };
    }
};
c3_chart_fn.axis.range = function (range) {
    if (arguments.length) {
        if (isDefined(range.max)) {
            this.axis.max(range.max);
        }
        if (isDefined(range.min)) {
            this.axis.min(range.min);
        }
    } else {
        return {
            max: this.axis.max(),
            min: this.axis.min()
        };
    }
};

c3_chart_fn.category = function (i, category) {
    var $$ = this.internal,
        config = $$.config;
    if (arguments.length > 1) {
        config.axis_x_categories[i] = category;
        $$.redraw();
    }
    return config.axis_x_categories[i];
};
c3_chart_fn.categories = function (categories) {
    var $$ = this.internal,
        config = $$.config;
    if (!arguments.length) {
        return config.axis_x_categories;
    }
    config.axis_x_categories = categories;
    $$.redraw();
    return config.axis_x_categories;
};

c3_chart_fn.resize = function (size) {
    var $$ = this.internal,
        config = $$.config;
    config.size_width = size ? size.width : null;
    config.size_height = size ? size.height : null;
    this.flush();
};

c3_chart_fn.flush = function () {
    var $$ = this.internal;
    $$.updateAndRedraw({ withLegend: true, withTransition: false, withTransitionForTransform: false });
};

c3_chart_fn.destroy = function () {
    var $$ = this.internal;

    window.clearInterval($$.intervalForObserveInserted);

    if ($$.resizeTimeout !== undefined) {
        window.clearTimeout($$.resizeTimeout);
    }

    if (window.detachEvent) {
        window.detachEvent('onresize', $$.resizeFunction);
    } else if (window.removeEventListener) {
        window.removeEventListener('resize', $$.resizeFunction);
    } else {
        var wrapper = window.onresize;
        // check if no one else removed our wrapper and remove our resizeFunction from it
        if (wrapper && wrapper.add && wrapper.remove) {
            wrapper.remove($$.resizeFunction);
        }
    }

    $$.selectChart.classed('c3', false).html("");

    // MEMO: this is needed because the reference of some elements will not be released, then memory leak will happen.
    Object.keys($$).forEach(function (key) {
        $$[key] = null;
    });

    return null;
};

// TODO: fix
c3_chart_fn.color = function (id) {
    var $$ = this.internal;
    return $$.color(id); // more patterns
};

c3_chart_fn.data = function (targetIds) {
    var targets = this.internal.data.targets;
    return typeof targetIds === 'undefined' ? targets : targets.filter(function (t) {
        return [].concat(targetIds).indexOf(t.id) >= 0;
    });
};
c3_chart_fn.data.shown = function (targetIds) {
    return this.internal.filterTargetsToShow(this.data(targetIds));
};
c3_chart_fn.data.values = function (targetId) {
    var targets,
        values = null;
    if (targetId) {
        targets = this.data(targetId);
        values = targets[0] ? targets[0].values.map(function (d) {
            return d.value;
        }) : null;
    }
    return values;
};
c3_chart_fn.data.names = function (names) {
    this.internal.clearLegendItemTextBoxCache();
    return this.internal.updateDataAttributes('names', names);
};
c3_chart_fn.data.colors = function (colors) {
    return this.internal.updateDataAttributes('colors', colors);
};
c3_chart_fn.data.axes = function (axes) {
    return this.internal.updateDataAttributes('axes', axes);
};

c3_chart_fn.flow = function (args) {
    var $$ = this.internal,
        targets,
        data,
        notfoundIds = [],
        orgDataCount = $$.getMaxDataCount(),
        dataCount,
        domain,
        baseTarget,
        baseValue,
        length = 0,
        tail = 0,
        diff,
        to;

    if (args.json) {
        data = $$.convertJsonToData(args.json, args.keys);
    } else if (args.rows) {
        data = $$.convertRowsToData(args.rows);
    } else if (args.columns) {
        data = $$.convertColumnsToData(args.columns);
    } else {
        return;
    }
    targets = $$.convertDataToTargets(data, true);

    // Update/Add data
    $$.data.targets.forEach(function (t) {
        var found = false,
            i,
            j;
        for (i = 0; i < targets.length; i++) {
            if (t.id === targets[i].id) {
                found = true;

                if (t.values[t.values.length - 1]) {
                    tail = t.values[t.values.length - 1].index + 1;
                }
                length = targets[i].values.length;

                for (j = 0; j < length; j++) {
                    targets[i].values[j].index = tail + j;
                    if (!$$.isTimeSeries()) {
                        targets[i].values[j].x = tail + j;
                    }
                }
                t.values = t.values.concat(targets[i].values);

                targets.splice(i, 1);
                break;
            }
        }
        if (!found) {
            notfoundIds.push(t.id);
        }
    });

    // Append null for not found targets
    $$.data.targets.forEach(function (t) {
        var i, j;
        for (i = 0; i < notfoundIds.length; i++) {
            if (t.id === notfoundIds[i]) {
                tail = t.values[t.values.length - 1].index + 1;
                for (j = 0; j < length; j++) {
                    t.values.push({
                        id: t.id,
                        index: tail + j,
                        x: $$.isTimeSeries() ? $$.getOtherTargetX(tail + j) : tail + j,
                        value: null
                    });
                }
            }
        }
    });

    // Generate null values for new target
    if ($$.data.targets.length) {
        targets.forEach(function (t) {
            var i,
                missing = [];
            for (i = $$.data.targets[0].values[0].index; i < tail; i++) {
                missing.push({
                    id: t.id,
                    index: i,
                    x: $$.isTimeSeries() ? $$.getOtherTargetX(i) : i,
                    value: null
                });
            }
            t.values.forEach(function (v) {
                v.index += tail;
                if (!$$.isTimeSeries()) {
                    v.x += tail;
                }
            });
            t.values = missing.concat(t.values);
        });
    }
    $$.data.targets = $$.data.targets.concat(targets); // add remained

    // check data count because behavior needs to change when it's only one
    dataCount = $$.getMaxDataCount();
    baseTarget = $$.data.targets[0];
    baseValue = baseTarget.values[0];

    // Update length to flow if needed
    if (isDefined(args.to)) {
        length = 0;
        to = $$.isTimeSeries() ? $$.parseDate(args.to) : args.to;
        baseTarget.values.forEach(function (v) {
            if (v.x < to) {
                length++;
            }
        });
    } else if (isDefined(args.length)) {
        length = args.length;
    }

    // If only one data, update the domain to flow from left edge of the chart
    if (!orgDataCount) {
        if ($$.isTimeSeries()) {
            if (baseTarget.values.length > 1) {
                diff = baseTarget.values[baseTarget.values.length - 1].x - baseValue.x;
            } else {
                diff = baseValue.x - $$.getXDomain($$.data.targets)[0];
            }
        } else {
            diff = 1;
        }
        domain = [baseValue.x - diff, baseValue.x];
        $$.updateXDomain(null, true, true, false, domain);
    } else if (orgDataCount === 1) {
        if ($$.isTimeSeries()) {
            diff = (baseTarget.values[baseTarget.values.length - 1].x - baseValue.x) / 2;
            domain = [new Date(+baseValue.x - diff), new Date(+baseValue.x + diff)];
            $$.updateXDomain(null, true, true, false, domain);
        }
    }

    // Set targets
    $$.updateTargets($$.data.targets);

    // Redraw with new targets
    $$.redraw({
        flow: {
            index: baseValue.index,
            length: length,
            duration: isValue(args.duration) ? args.duration : $$.config.transition_duration,
            done: args.done,
            orgDataCount: orgDataCount
        },
        withLegend: true,
        withTransition: orgDataCount > 1,
        withTrimXDomain: false,
        withUpdateXAxis: true
    });
};

c3_chart_internal_fn.generateFlow = function (args) {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3;

    return function () {
        var targets = args.targets,
            flow = args.flow,
            drawBar = args.drawBar,
            drawLine = args.drawLine,
            drawArea = args.drawArea,
            cx = args.cx,
            cy = args.cy,
            xv = args.xv,
            xForText = args.xForText,
            yForText = args.yForText,
            duration = args.duration;

        var translateX,
            scaleX = 1,
            transform,
            flowIndex = flow.index,
            flowLength = flow.length,
            flowStart = $$.getValueOnIndex($$.data.targets[0].values, flowIndex),
            flowEnd = $$.getValueOnIndex($$.data.targets[0].values, flowIndex + flowLength),
            orgDomain = $$.x.domain(),
            domain,
            durationForFlow = flow.duration || duration,
            done = flow.done || function () {},
            wait = $$.generateWait();

        var xgrid = $$.xgrid || d3.selectAll([]),
            xgridLines = $$.xgridLines || d3.selectAll([]),
            mainRegion = $$.mainRegion || d3.selectAll([]),
            mainText = $$.mainText || d3.selectAll([]),
            mainBar = $$.mainBar || d3.selectAll([]),
            mainLine = $$.mainLine || d3.selectAll([]),
            mainArea = $$.mainArea || d3.selectAll([]),
            mainCircle = $$.mainCircle || d3.selectAll([]);

        // set flag
        $$.flowing = true;

        // remove head data after rendered
        $$.data.targets.forEach(function (d) {
            d.values.splice(0, flowLength);
        });

        // update x domain to generate axis elements for flow
        domain = $$.updateXDomain(targets, true, true);
        // update elements related to x scale
        if ($$.updateXGrid) {
            $$.updateXGrid(true);
        }

        // generate transform to flow
        if (!flow.orgDataCount) {
            // if empty
            if ($$.data.targets[0].values.length !== 1) {
                translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
            } else {
                if ($$.isTimeSeries()) {
                    flowStart = $$.getValueOnIndex($$.data.targets[0].values, 0);
                    flowEnd = $$.getValueOnIndex($$.data.targets[0].values, $$.data.targets[0].values.length - 1);
                    translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);
                } else {
                    translateX = diffDomain(domain) / 2;
                }
            }
        } else if (flow.orgDataCount === 1 || (flowStart && flowStart.x) === (flowEnd && flowEnd.x)) {
            translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
        } else {
            if ($$.isTimeSeries()) {
                translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
            } else {
                translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);
            }
        }
        scaleX = diffDomain(orgDomain) / diffDomain(domain);
        transform = 'translate(' + translateX + ',0) scale(' + scaleX + ',1)';

        $$.hideXGridFocus();

        d3.transition().ease('linear').duration(durationForFlow).each(function () {
            wait.add($$.axes.x.transition().call($$.xAxis));
            wait.add(mainBar.transition().attr('transform', transform));
            wait.add(mainLine.transition().attr('transform', transform));
            wait.add(mainArea.transition().attr('transform', transform));
            wait.add(mainCircle.transition().attr('transform', transform));
            wait.add(mainText.transition().attr('transform', transform));
            wait.add(mainRegion.filter($$.isRegionOnX).transition().attr('transform', transform));
            wait.add(xgrid.transition().attr('transform', transform));
            wait.add(xgridLines.transition().attr('transform', transform));
        }).call(wait, function () {
            var i,
                shapes = [],
                texts = [],
                eventRects = [];

            // remove flowed elements
            if (flowLength) {
                for (i = 0; i < flowLength; i++) {
                    shapes.push('.' + CLASS.shape + '-' + (flowIndex + i));
                    texts.push('.' + CLASS.text + '-' + (flowIndex + i));
                    eventRects.push('.' + CLASS.eventRect + '-' + (flowIndex + i));
                }
                $$.svg.selectAll('.' + CLASS.shapes).selectAll(shapes).remove();
                $$.svg.selectAll('.' + CLASS.texts).selectAll(texts).remove();
                $$.svg.selectAll('.' + CLASS.eventRects).selectAll(eventRects).remove();
                $$.svg.select('.' + CLASS.xgrid).remove();
            }

            // draw again for removing flowed elements and reverting attr
            xgrid.attr('transform', null).attr($$.xgridAttr);
            xgridLines.attr('transform', null);
            xgridLines.select('line').attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv);
            xgridLines.select('text').attr("x", config.axis_rotated ? $$.width : 0).attr("y", xv);
            mainBar.attr('transform', null).attr("d", drawBar);
            mainLine.attr('transform', null).attr("d", drawLine);
            mainArea.attr('transform', null).attr("d", drawArea);
            mainCircle.attr('transform', null).attr("cx", cx).attr("cy", cy);
            mainText.attr('transform', null).attr('x', xForText).attr('y', yForText).style('fill-opacity', $$.opacityForText.bind($$));
            mainRegion.attr('transform', null);
            mainRegion.select('rect').filter($$.isRegionOnX).attr("x", $$.regionX.bind($$)).attr("width", $$.regionWidth.bind($$));

            if (config.interaction_enabled) {
                $$.redrawEventRect();
            }

            // callback for end of flow
            done();

            $$.flowing = false;
        });
    };
};

c3_chart_fn.focus = function (targetIds) {
    var $$ = this.internal,
        candidates;

    targetIds = $$.mapToTargetIds(targetIds);
    candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))), this.revert();
    this.defocus();
    candidates.classed(CLASS.focused, true).classed(CLASS.defocused, false);
    if ($$.hasArcType()) {
        $$.expandArc(targetIds);
    }
    $$.toggleFocusLegend(targetIds, true);

    $$.focusedTargetIds = targetIds;
    $$.defocusedTargetIds = $$.defocusedTargetIds.filter(function (id) {
        return targetIds.indexOf(id) < 0;
    });
};

c3_chart_fn.defocus = function (targetIds) {
    var $$ = this.internal,
        candidates;

    targetIds = $$.mapToTargetIds(targetIds);
    candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))), candidates.classed(CLASS.focused, false).classed(CLASS.defocused, true);
    if ($$.hasArcType()) {
        $$.unexpandArc(targetIds);
    }
    $$.toggleFocusLegend(targetIds, false);

    $$.focusedTargetIds = $$.focusedTargetIds.filter(function (id) {
        return targetIds.indexOf(id) < 0;
    });
    $$.defocusedTargetIds = targetIds;
};

c3_chart_fn.revert = function (targetIds) {
    var $$ = this.internal,
        candidates;

    targetIds = $$.mapToTargetIds(targetIds);
    candidates = $$.svg.selectAll($$.selectorTargets(targetIds)); // should be for all targets

    candidates.classed(CLASS.focused, false).classed(CLASS.defocused, false);
    if ($$.hasArcType()) {
        $$.unexpandArc(targetIds);
    }
    if ($$.config.legend_show) {
        $$.showLegend(targetIds.filter($$.isLegendToShow.bind($$)));
        $$.legend.selectAll($$.selectorLegends(targetIds)).filter(function () {
            return $$.d3.select(this).classed(CLASS.legendItemFocused);
        }).classed(CLASS.legendItemFocused, false);
    }

    $$.focusedTargetIds = [];
    $$.defocusedTargetIds = [];
};

c3_chart_fn.xgrids = function (grids) {
    var $$ = this.internal,
        config = $$.config;
    if (!grids) {
        return config.grid_x_lines;
    }
    config.grid_x_lines = grids;
    $$.redrawWithoutRescale();
    return config.grid_x_lines;
};
c3_chart_fn.xgrids.add = function (grids) {
    var $$ = this.internal;
    return this.xgrids($$.config.grid_x_lines.concat(grids ? grids : []));
};
c3_chart_fn.xgrids.remove = function (params) {
    // TODO: multiple
    var $$ = this.internal;
    $$.removeGridLines(params, true);
};

c3_chart_fn.ygrids = function (grids) {
    var $$ = this.internal,
        config = $$.config;
    if (!grids) {
        return config.grid_y_lines;
    }
    config.grid_y_lines = grids;
    $$.redrawWithoutRescale();
    return config.grid_y_lines;
};
c3_chart_fn.ygrids.add = function (grids) {
    var $$ = this.internal;
    return this.ygrids($$.config.grid_y_lines.concat(grids ? grids : []));
};
c3_chart_fn.ygrids.remove = function (params) {
    // TODO: multiple
    var $$ = this.internal;
    $$.removeGridLines(params, false);
};

c3_chart_fn.groups = function (groups) {
    var $$ = this.internal,
        config = $$.config;
    if (isUndefined(groups)) {
        return config.data_groups;
    }
    config.data_groups = groups;
    $$.redraw();
    return config.data_groups;
};

c3_chart_fn.legend = function () {};
c3_chart_fn.legend.show = function (targetIds) {
    var $$ = this.internal;
    $$.showLegend($$.mapToTargetIds(targetIds));
    $$.updateAndRedraw({ withLegend: true });
};
c3_chart_fn.legend.hide = function (targetIds) {
    var $$ = this.internal;
    $$.hideLegend($$.mapToTargetIds(targetIds));
    $$.updateAndRedraw({ withLegend: true });
};

c3_chart_fn.load = function (args) {
    var $$ = this.internal,
        config = $$.config;
    // update xs if specified
    if (args.xs) {
        $$.addXs(args.xs);
    }
    // update names if exists
    if ('names' in args) {
        c3_chart_fn.data.names.bind(this)(args.names);
    }
    // update classes if exists
    if ('classes' in args) {
        Object.keys(args.classes).forEach(function (id) {
            config.data_classes[id] = args.classes[id];
        });
    }
    // update categories if exists
    if ('categories' in args && $$.isCategorized()) {
        config.axis_x_categories = args.categories;
    }
    // update axes if exists
    if ('axes' in args) {
        Object.keys(args.axes).forEach(function (id) {
            config.data_axes[id] = args.axes[id];
        });
    }
    // update colors if exists
    if ('colors' in args) {
        Object.keys(args.colors).forEach(function (id) {
            config.data_colors[id] = args.colors[id];
        });
    }
    // use cache if exists
    if ('cacheIds' in args && $$.hasCaches(args.cacheIds)) {
        $$.load($$.getCaches(args.cacheIds), args.done);
        return;
    }
    // unload if needed
    if ('unload' in args) {
        // TODO: do not unload if target will load (included in url/rows/columns)
        $$.unload($$.mapToTargetIds(typeof args.unload === 'boolean' && args.unload ? null : args.unload), function () {
            $$.loadFromArgs(args);
        });
    } else {
        $$.loadFromArgs(args);
    }
};

c3_chart_fn.unload = function (args) {
    var $$ = this.internal;
    args = args || {};
    if (args instanceof Array) {
        args = { ids: args };
    } else if (typeof args === 'string') {
        args = { ids: [args] };
    }
    $$.unload($$.mapToTargetIds(args.ids), function () {
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
        if (args.done) {
            args.done();
        }
    });
};

c3_chart_fn.regions = function (regions) {
    var $$ = this.internal,
        config = $$.config;
    if (!regions) {
        return config.regions;
    }
    config.regions = regions;
    $$.redrawWithoutRescale();
    return config.regions;
};
c3_chart_fn.regions.add = function (regions) {
    var $$ = this.internal,
        config = $$.config;
    if (!regions) {
        return config.regions;
    }
    config.regions = config.regions.concat(regions);
    $$.redrawWithoutRescale();
    return config.regions;
};
c3_chart_fn.regions.remove = function (options) {
    var $$ = this.internal,
        config = $$.config,
        duration,
        classes,
        regions;

    options = options || {};
    duration = $$.getOption(options, "duration", config.transition_duration);
    classes = $$.getOption(options, "classes", [CLASS.region]);

    regions = $$.main.select('.' + CLASS.regions).selectAll(classes.map(function (c) {
        return '.' + c;
    }));
    (duration ? regions.transition().duration(duration) : regions).style('opacity', 0).remove();

    config.regions = config.regions.filter(function (region) {
        var found = false;
        if (!region['class']) {
            return true;
        }
        region['class'].split(' ').forEach(function (c) {
            if (classes.indexOf(c) >= 0) {
                found = true;
            }
        });
        return !found;
    });

    return config.regions;
};

c3_chart_fn.selected = function (targetId) {
    var $$ = this.internal,
        d3 = $$.d3;
    return d3.merge($$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(targetId)).selectAll('.' + CLASS.shape).filter(function () {
        return d3.select(this).classed(CLASS.SELECTED);
    }).map(function (d) {
        return d.map(function (d) {
            var data = d.__data__;return data.data ? data.data : data;
        });
    }));
};
c3_chart_fn.select = function (ids, indices, resetOther) {
    var $$ = this.internal,
        d3 = $$.d3,
        config = $$.config;
    if (!config.data_selection_enabled) {
        return;
    }
    $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {
        var shape = d3.select(this),
            id = d.data ? d.data.id : d.id,
            toggle = $$.getToggle(this, d).bind($$),
            isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,
            isTargetIndex = !indices || indices.indexOf(i) >= 0,
            isSelected = shape.classed(CLASS.SELECTED);
        // line/area selection not supported yet
        if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
            return;
        }
        if (isTargetId && isTargetIndex) {
            if (config.data_selection_isselectable(d) && !isSelected) {
                toggle(true, shape.classed(CLASS.SELECTED, true), d, i);
            }
        } else if (isDefined(resetOther) && resetOther) {
            if (isSelected) {
                toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
            }
        }
    });
};
c3_chart_fn.unselect = function (ids, indices) {
    var $$ = this.internal,
        d3 = $$.d3,
        config = $$.config;
    if (!config.data_selection_enabled) {
        return;
    }
    $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {
        var shape = d3.select(this),
            id = d.data ? d.data.id : d.id,
            toggle = $$.getToggle(this, d).bind($$),
            isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,
            isTargetIndex = !indices || indices.indexOf(i) >= 0,
            isSelected = shape.classed(CLASS.SELECTED);
        // line/area selection not supported yet
        if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
            return;
        }
        if (isTargetId && isTargetIndex) {
            if (config.data_selection_isselectable(d)) {
                if (isSelected) {
                    toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
                }
            }
        }
    });
};

c3_chart_fn.show = function (targetIds, options) {
    var $$ = this.internal,
        targets;

    targetIds = $$.mapToTargetIds(targetIds);
    options = options || {};

    $$.removeHiddenTargetIds(targetIds);
    targets = $$.svg.selectAll($$.selectorTargets(targetIds));

    targets.transition().style('opacity', 1, 'important').call($$.endall, function () {
        targets.style('opacity', null).style('opacity', 1);
    });

    if (options.withLegend) {
        $$.showLegend(targetIds);
    }

    $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
};

c3_chart_fn.hide = function (targetIds, options) {
    var $$ = this.internal,
        targets;

    targetIds = $$.mapToTargetIds(targetIds);
    options = options || {};

    $$.addHiddenTargetIds(targetIds);
    targets = $$.svg.selectAll($$.selectorTargets(targetIds));

    targets.transition().style('opacity', 0, 'important').call($$.endall, function () {
        targets.style('opacity', null).style('opacity', 0);
    });

    if (options.withLegend) {
        $$.hideLegend(targetIds);
    }

    $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
};

c3_chart_fn.toggle = function (targetIds, options) {
    var that = this,
        $$ = this.internal;
    $$.mapToTargetIds(targetIds).forEach(function (targetId) {
        $$.isTargetToShow(targetId) ? that.hide(targetId, options) : that.show(targetId, options);
    });
};

c3_chart_fn.tooltip = function () {};
c3_chart_fn.tooltip.show = function (args) {
    var $$ = this.internal,
        index,
        mouse;

    // determine mouse position on the chart
    if (args.mouse) {
        mouse = args.mouse;
    }

    // determine focus data
    if (args.data) {
        if ($$.isMultipleX()) {
            // if multiple xs, target point will be determined by mouse
            mouse = [$$.x(args.data.x), $$.getYScale(args.data.id)(args.data.value)];
            index = null;
        } else {
            // TODO: when tooltip_grouped = false
            index = isValue(args.data.index) ? args.data.index : $$.getIndexByX(args.data.x);
        }
    } else if (typeof args.x !== 'undefined') {
        index = $$.getIndexByX(args.x);
    } else if (typeof args.index !== 'undefined') {
        index = args.index;
    }

    // emulate mouse events to show
    $$.dispatchEvent('mouseover', index, mouse);
    $$.dispatchEvent('mousemove', index, mouse);

    $$.config.tooltip_onshow.call($$, args.data);
};
c3_chart_fn.tooltip.hide = function () {
    // TODO: get target data by checking the state of focus
    this.internal.dispatchEvent('mouseout', 0);

    this.internal.config.tooltip_onhide.call(this);
};

c3_chart_fn.transform = function (type, targetIds) {
    var $$ = this.internal,
        options = ['pie', 'donut'].indexOf(type) >= 0 ? { withTransform: true } : null;
    $$.transformTo(targetIds, type, options);
};

c3_chart_internal_fn.transformTo = function (targetIds, type, optionsForRedraw) {
    var $$ = this,
        withTransitionForAxis = !$$.hasArcType(),
        options = optionsForRedraw || { withTransitionForAxis: withTransitionForAxis };
    options.withTransitionForTransform = false;
    $$.transiting = false;
    $$.setTargetType(targetIds, type);
    $$.updateTargets($$.data.targets); // this is needed when transforming to arc
    $$.updateAndRedraw(options);
};

c3_chart_fn.x = function (x) {
    var $$ = this.internal;
    if (arguments.length) {
        $$.updateTargetX($$.data.targets, x);
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
    }
    return $$.data.xs;
};
c3_chart_fn.xs = function (xs) {
    var $$ = this.internal;
    if (arguments.length) {
        $$.updateTargetXs($$.data.targets, xs);
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
    }
    return $$.data.xs;
};

c3_chart_fn.zoom = function (domain) {
    var $$ = this.internal;
    if (domain) {
        if ($$.isTimeSeries()) {
            domain = domain.map(function (x) {
                return $$.parseDate(x);
            });
        }
        $$.brush.extent(domain);
        $$.redraw({ withUpdateXDomain: true, withY: $$.config.zoom_rescale });
        $$.config.zoom_onzoom.call(this, $$.x.orgDomain());
    }
    return $$.brush.extent();
};
c3_chart_fn.zoom.enable = function (enabled) {
    var $$ = this.internal;
    $$.config.zoom_enabled = enabled;
    $$.updateAndRedraw();
};
c3_chart_fn.unzoom = function () {
    var $$ = this.internal;
    $$.brush.clear().update();
    $$.redraw({ withUpdateXDomain: true });
};

c3_chart_fn.zoom.max = function (max) {
    var $$ = this.internal,
        config = $$.config,
        d3 = $$.d3;
    if (max === 0 || max) {
        config.zoom_x_max = d3.max([$$.orgXDomain[1], max]);
    } else {
        return config.zoom_x_max;
    }
};

c3_chart_fn.zoom.min = function (min) {
    var $$ = this.internal,
        config = $$.config,
        d3 = $$.d3;
    if (min === 0 || min) {
        config.zoom_x_min = d3.min([$$.orgXDomain[0], min]);
    } else {
        return config.zoom_x_min;
    }
};

c3_chart_fn.zoom.range = function (range) {
    if (arguments.length) {
        if (isDefined(range.max)) {
            this.domain.max(range.max);
        }
        if (isDefined(range.min)) {
            this.domain.min(range.min);
        }
    } else {
        return {
            max: this.domain.max(),
            min: this.domain.min()
        };
    }
};

c3_chart_internal_fn.initPie = function () {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;
    $$.pie = d3.layout.pie().value(function (d) {
        return d.values.reduce(function (a, b) {
            return a + b.value;
        }, 0);
    });
    if (!config.data_order) {
        $$.pie.sort(null);
    }
};

c3_chart_internal_fn.updateRadius = function () {
    var $$ = this,
        config = $$.config,
        w = config.gauge_width || config.donut_width;
    $$.radiusExpanded = Math.min($$.arcWidth, $$.arcHeight) / 2;
    $$.radius = $$.radiusExpanded * 0.95;
    $$.innerRadiusRatio = w ? ($$.radius - w) / $$.radius : 0.6;
    $$.innerRadius = $$.hasType('donut') || $$.hasType('gauge') ? $$.radius * $$.innerRadiusRatio : 0;
};

c3_chart_internal_fn.updateArc = function () {
    var $$ = this;
    $$.svgArc = $$.getSvgArc();
    $$.svgArcExpanded = $$.getSvgArcExpanded();
    $$.svgArcExpandedSub = $$.getSvgArcExpanded(0.98);
};

c3_chart_internal_fn.updateAngle = function (d) {
    var $$ = this,
        config = $$.config,
        found = false,
        index = 0,
        gMin,
        gMax,
        gTic,
        gValue;

    if (!config) {
        return null;
    }

    $$.pie($$.filterTargetsToShow($$.data.targets)).forEach(function (t) {
        if (!found && t.data.id === d.data.id) {
            found = true;
            d = t;
            d.index = index;
        }
        index++;
    });
    if (isNaN(d.startAngle)) {
        d.startAngle = 0;
    }
    if (isNaN(d.endAngle)) {
        d.endAngle = d.startAngle;
    }
    if ($$.isGaugeType(d.data)) {
        gMin = config.gauge_min;
        gMax = config.gauge_max;
        gTic = Math.PI * (config.gauge_fullCircle ? 2 : 1) / (gMax - gMin);
        gValue = d.value < gMin ? 0 : d.value < gMax ? d.value - gMin : gMax - gMin;
        d.startAngle = config.gauge_startingAngle;
        d.endAngle = d.startAngle + gTic * gValue;
    }
    return found ? d : null;
};

c3_chart_internal_fn.getSvgArc = function () {
    var $$ = this,
        arc = $$.d3.svg.arc().outerRadius($$.radius).innerRadius($$.innerRadius),
        newArc = function newArc(d, withoutUpdate) {
        var updated;
        if (withoutUpdate) {
            return arc(d);
        } // for interpolate
        updated = $$.updateAngle(d);
        return updated ? arc(updated) : "M 0 0";
    };
    // TODO: extends all function
    newArc.centroid = arc.centroid;
    return newArc;
};

c3_chart_internal_fn.getSvgArcExpanded = function (rate) {
    var $$ = this,
        arc = $$.d3.svg.arc().outerRadius($$.radiusExpanded * (rate ? rate : 1)).innerRadius($$.innerRadius);
    return function (d) {
        var updated = $$.updateAngle(d);
        return updated ? arc(updated) : "M 0 0";
    };
};

c3_chart_internal_fn.getArc = function (d, withoutUpdate, force) {
    return force || this.isArcType(d.data) ? this.svgArc(d, withoutUpdate) : "M 0 0";
};

c3_chart_internal_fn.transformForArcLabel = function (d) {
    var $$ = this,
        config = $$.config,
        updated = $$.updateAngle(d),
        c,
        x,
        y,
        h,
        ratio,
        translate = "";
    if (updated && !$$.hasType('gauge')) {
        c = this.svgArc.centroid(updated);
        x = isNaN(c[0]) ? 0 : c[0];
        y = isNaN(c[1]) ? 0 : c[1];
        h = Math.sqrt(x * x + y * y);
        if ($$.hasType('donut') && config.donut_label_ratio) {
            ratio = isFunction(config.donut_label_ratio) ? config.donut_label_ratio(d, $$.radius, h) : config.donut_label_ratio;
        } else if ($$.hasType('pie') && config.pie_label_ratio) {
            ratio = isFunction(config.pie_label_ratio) ? config.pie_label_ratio(d, $$.radius, h) : config.pie_label_ratio;
        } else {
            ratio = $$.radius && h ? (36 / $$.radius > 0.375 ? 1.175 - 36 / $$.radius : 0.8) * $$.radius / h : 0;
        }
        translate = "translate(" + x * ratio + ',' + y * ratio + ")";
    }
    return translate;
};

c3_chart_internal_fn.getArcRatio = function (d) {
    var $$ = this,
        config = $$.config,
        whole = Math.PI * ($$.hasType('gauge') && !config.gauge_fullCircle ? 1 : 2);
    return d ? (d.endAngle - d.startAngle) / whole : null;
};

c3_chart_internal_fn.convertToArcData = function (d) {
    return this.addName({
        id: d.data.id,
        value: d.value,
        ratio: this.getArcRatio(d),
        index: d.index
    });
};

c3_chart_internal_fn.textForArcLabel = function (d) {
    var $$ = this,
        updated,
        value,
        ratio,
        id,
        format;
    if (!$$.shouldShowArcLabel()) {
        return "";
    }
    updated = $$.updateAngle(d);
    value = updated ? updated.value : null;
    ratio = $$.getArcRatio(updated);
    id = d.data.id;
    if (!$$.hasType('gauge') && !$$.meetsArcLabelThreshold(ratio)) {
        return "";
    }
    format = $$.getArcLabelFormat();
    return format ? format(value, ratio, id) : $$.defaultArcValueFormat(value, ratio);
};

c3_chart_internal_fn.textForGaugeMinMax = function (value, isMax) {
    var $$ = this,
        format = $$.getGaugeLabelExtents();

    return format ? format(value, isMax) : value;
};

c3_chart_internal_fn.expandArc = function (targetIds) {
    var $$ = this,
        interval;

    // MEMO: avoid to cancel transition
    if ($$.transiting) {
        interval = window.setInterval(function () {
            if (!$$.transiting) {
                window.clearInterval(interval);
                if ($$.legend.selectAll('.c3-legend-item-focused').size() > 0) {
                    $$.expandArc(targetIds);
                }
            }
        }, 10);
        return;
    }

    targetIds = $$.mapToTargetIds(targetIds);

    $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).each(function (d) {
        if (!$$.shouldExpand(d.data.id)) {
            return;
        }
        $$.d3.select(this).selectAll('path').transition().duration($$.expandDuration(d.data.id)).attr("d", $$.svgArcExpanded).transition().duration($$.expandDuration(d.data.id) * 2).attr("d", $$.svgArcExpandedSub).each(function (d) {
            if ($$.isDonutType(d.data)) {
                // callback here
            }
        });
    });
};

c3_chart_internal_fn.unexpandArc = function (targetIds) {
    var $$ = this;

    if ($$.transiting) {
        return;
    }

    targetIds = $$.mapToTargetIds(targetIds);

    $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).selectAll('path').transition().duration(function (d) {
        return $$.expandDuration(d.data.id);
    }).attr("d", $$.svgArc);
    $$.svg.selectAll('.' + CLASS.arc);
};

c3_chart_internal_fn.expandDuration = function (id) {
    var $$ = this,
        config = $$.config;

    if ($$.isDonutType(id)) {
        return config.donut_expand_duration;
    } else if ($$.isGaugeType(id)) {
        return config.gauge_expand_duration;
    } else if ($$.isPieType(id)) {
        return config.pie_expand_duration;
    } else {
        return 50;
    }
};

c3_chart_internal_fn.shouldExpand = function (id) {
    var $$ = this,
        config = $$.config;
    return $$.isDonutType(id) && config.donut_expand || $$.isGaugeType(id) && config.gauge_expand || $$.isPieType(id) && config.pie_expand;
};

c3_chart_internal_fn.shouldShowArcLabel = function () {
    var $$ = this,
        config = $$.config,
        shouldShow = true;
    if ($$.hasType('donut')) {
        shouldShow = config.donut_label_show;
    } else if ($$.hasType('pie')) {
        shouldShow = config.pie_label_show;
    }
    // when gauge, always true
    return shouldShow;
};

c3_chart_internal_fn.meetsArcLabelThreshold = function (ratio) {
    var $$ = this,
        config = $$.config,
        threshold = $$.hasType('donut') ? config.donut_label_threshold : config.pie_label_threshold;
    return ratio >= threshold;
};

c3_chart_internal_fn.getArcLabelFormat = function () {
    var $$ = this,
        config = $$.config,
        format = config.pie_label_format;
    if ($$.hasType('gauge')) {
        format = config.gauge_label_format;
    } else if ($$.hasType('donut')) {
        format = config.donut_label_format;
    }
    return format;
};

c3_chart_internal_fn.getGaugeLabelExtents = function () {
    var $$ = this,
        config = $$.config;
    return config.gauge_label_extents;
};

c3_chart_internal_fn.getArcTitle = function () {
    var $$ = this;
    return $$.hasType('donut') ? $$.config.donut_title : "";
};

c3_chart_internal_fn.updateTargetsForArc = function (targets) {
    var $$ = this,
        main = $$.main,
        mainPieUpdate,
        mainPieEnter,
        classChartArc = $$.classChartArc.bind($$),
        classArcs = $$.classArcs.bind($$),
        classFocus = $$.classFocus.bind($$);
    mainPieUpdate = main.select('.' + CLASS.chartArcs).selectAll('.' + CLASS.chartArc).data($$.pie(targets)).attr("class", function (d) {
        return classChartArc(d) + classFocus(d.data);
    });
    mainPieEnter = mainPieUpdate.enter().append("g").attr("class", classChartArc);
    mainPieEnter.append('g').attr('class', classArcs);
    mainPieEnter.append("text").attr("dy", $$.hasType('gauge') ? "-.1em" : ".35em").style("opacity", 0).style("text-anchor", "middle").style("pointer-events", "none");
    // MEMO: can not keep same color..., but not bad to update color in redraw
    //mainPieUpdate.exit().remove();
};

c3_chart_internal_fn.initArc = function () {
    var $$ = this;
    $$.arcs = $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartArcs).attr("transform", $$.getTranslate('arc'));
    $$.arcs.append('text').attr('class', CLASS.chartArcsTitle).style("text-anchor", "middle").text($$.getArcTitle());
};

c3_chart_internal_fn.redrawArc = function (duration, durationForExit, withTransform) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        main = $$.main,
        mainArc;
    mainArc = main.selectAll('.' + CLASS.arcs).selectAll('.' + CLASS.arc).data($$.arcData.bind($$));
    mainArc.enter().append('path').attr("class", $$.classArc.bind($$)).style("fill", function (d) {
        return $$.color(d.data);
    }).style("cursor", function (d) {
        return config.interaction_enabled && config.data_selection_isselectable(d) ? "pointer" : null;
    }).each(function (d) {
        if ($$.isGaugeType(d.data)) {
            d.startAngle = d.endAngle = config.gauge_startingAngle;
        }
        this._current = d;
    });
    mainArc.attr("transform", function (d) {
        return !$$.isGaugeType(d.data) && withTransform ? "scale(0)" : "";
    }).on('mouseover', config.interaction_enabled ? function (d) {
        var updated, arcData;
        if ($$.transiting) {
            // skip while transiting
            return;
        }
        updated = $$.updateAngle(d);
        if (updated) {
            arcData = $$.convertToArcData(updated);
            // transitions
            $$.expandArc(updated.data.id);
            $$.api.focus(updated.data.id);
            $$.toggleFocusLegend(updated.data.id, true);
            $$.config.data_onmouseover(arcData, this);
        }
    } : null).on('mousemove', config.interaction_enabled ? function (d) {
        var updated = $$.updateAngle(d),
            arcData,
            selectedData;
        if (updated) {
            arcData = $$.convertToArcData(updated), selectedData = [arcData];
            $$.showTooltip(selectedData, this);
        }
    } : null).on('mouseout', config.interaction_enabled ? function (d) {
        var updated, arcData;
        if ($$.transiting) {
            // skip while transiting
            return;
        }
        updated = $$.updateAngle(d);
        if (updated) {
            arcData = $$.convertToArcData(updated);
            // transitions
            $$.unexpandArc(updated.data.id);
            $$.api.revert();
            $$.revertLegend();
            $$.hideTooltip();
            $$.config.data_onmouseout(arcData, this);
        }
    } : null).on('click', config.interaction_enabled ? function (d, i) {
        var updated = $$.updateAngle(d),
            arcData;
        if (updated) {
            arcData = $$.convertToArcData(updated);
            if ($$.toggleShape) {
                $$.toggleShape(this, arcData, i);
            }
            $$.config.data_onclick.call($$.api, arcData, this);
        }
    } : null).each(function () {
        $$.transiting = true;
    }).transition().duration(duration).attrTween("d", function (d) {
        var updated = $$.updateAngle(d),
            interpolate;
        if (!updated) {
            return function () {
                return "M 0 0";
            };
        }
        //                if (this._current === d) {
        //                    this._current = {
        //                        startAngle: Math.PI*2,
        //                        endAngle: Math.PI*2,
        //                    };
        //                }
        if (isNaN(this._current.startAngle)) {
            this._current.startAngle = 0;
        }
        if (isNaN(this._current.endAngle)) {
            this._current.endAngle = this._current.startAngle;
        }
        interpolate = d3.interpolate(this._current, updated);
        this._current = interpolate(0);
        return function (t) {
            var interpolated = interpolate(t);
            interpolated.data = d.data; // data.id will be updated by interporator
            return $$.getArc(interpolated, true);
        };
    }).attr("transform", withTransform ? "scale(1)" : "").style("fill", function (d) {
        return $$.levelColor ? $$.levelColor(d.data.values[0].value) : $$.color(d.data.id);
    } // Where gauge reading color would receive customization.
    ).call($$.endall, function () {
        $$.transiting = false;
    });
    mainArc.exit().transition().duration(durationForExit).style('opacity', 0).remove();
    main.selectAll('.' + CLASS.chartArc).select('text').style("opacity", 0).attr('class', function (d) {
        return $$.isGaugeType(d.data) ? CLASS.gaugeValue : '';
    }).text($$.textForArcLabel.bind($$)).attr("transform", $$.transformForArcLabel.bind($$)).style('font-size', function (d) {
        return $$.isGaugeType(d.data) ? Math.round($$.radius / 5) + 'px' : '';
    }).transition().duration(duration).style("opacity", function (d) {
        return $$.isTargetToShow(d.data.id) && $$.isArcType(d.data) ? 1 : 0;
    });
    main.select('.' + CLASS.chartArcsTitle).style("opacity", $$.hasType('donut') || $$.hasType('gauge') ? 1 : 0);

    if ($$.hasType('gauge')) {
        $$.arcs.select('.' + CLASS.chartArcsBackground).attr("d", function () {
            var d = {
                data: [{ value: config.gauge_max }],
                startAngle: config.gauge_startingAngle,
                endAngle: -1 * config.gauge_startingAngle
            };
            return $$.getArc(d, true, true);
        });
        $$.arcs.select('.' + CLASS.chartArcsGaugeUnit).attr("dy", ".75em").text(config.gauge_label_show ? config.gauge_units : '');
        $$.arcs.select('.' + CLASS.chartArcsGaugeMin).attr("dx", -1 * ($$.innerRadius + ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2)) + "px").attr("dy", "1.2em").text(config.gauge_label_show ? $$.textForGaugeMinMax(config.gauge_min, false) : '');
        $$.arcs.select('.' + CLASS.chartArcsGaugeMax).attr("dx", $$.innerRadius + ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2) + "px").attr("dy", "1.2em").text(config.gauge_label_show ? $$.textForGaugeMinMax(config.gauge_max, true) : '');
    }
};
c3_chart_internal_fn.initGauge = function () {
    var arcs = this.arcs;
    if (this.hasType('gauge')) {
        arcs.append('path').attr("class", CLASS.chartArcsBackground);
        arcs.append("text").attr("class", CLASS.chartArcsGaugeUnit).style("text-anchor", "middle").style("pointer-events", "none");
        arcs.append("text").attr("class", CLASS.chartArcsGaugeMin).style("text-anchor", "middle").style("pointer-events", "none");
        arcs.append("text").attr("class", CLASS.chartArcsGaugeMax).style("text-anchor", "middle").style("pointer-events", "none");
    }
};
c3_chart_internal_fn.getGaugeLabelHeight = function () {
    return this.config.gauge_label_show ? 20 : 0;
};

c3_chart_internal_fn.hasCaches = function (ids) {
    for (var i = 0; i < ids.length; i++) {
        if (!(ids[i] in this.cache)) {
            return false;
        }
    }
    return true;
};
c3_chart_internal_fn.addCache = function (id, target) {
    this.cache[id] = this.cloneTarget(target);
};
c3_chart_internal_fn.getCaches = function (ids) {
    var targets = [],
        i;
    for (i = 0; i < ids.length; i++) {
        if (ids[i] in this.cache) {
            targets.push(this.cloneTarget(this.cache[ids[i]]));
        }
    }
    return targets;
};

c3_chart_internal_fn.categoryName = function (i) {
    var config = this.config;
    return i < config.axis_x_categories.length ? config.axis_x_categories[i] : i;
};

c3_chart_internal_fn.generateClass = function (prefix, targetId) {
    return " " + prefix + " " + prefix + this.getTargetSelectorSuffix(targetId);
};
c3_chart_internal_fn.classText = function (d) {
    return this.generateClass(CLASS.text, d.index);
};
c3_chart_internal_fn.classTexts = function (d) {
    return this.generateClass(CLASS.texts, d.id);
};
c3_chart_internal_fn.classShape = function (d) {
    return this.generateClass(CLASS.shape, d.index);
};
c3_chart_internal_fn.classShapes = function (d) {
    return this.generateClass(CLASS.shapes, d.id);
};
c3_chart_internal_fn.classLine = function (d) {
    return this.classShape(d) + this.generateClass(CLASS.line, d.id);
};
c3_chart_internal_fn.classLines = function (d) {
    return this.classShapes(d) + this.generateClass(CLASS.lines, d.id);
};
c3_chart_internal_fn.classCircle = function (d) {
    return this.classShape(d) + this.generateClass(CLASS.circle, d.index);
};
c3_chart_internal_fn.classCircles = function (d) {
    return this.classShapes(d) + this.generateClass(CLASS.circles, d.id);
};
c3_chart_internal_fn.classBar = function (d) {
    return this.classShape(d) + this.generateClass(CLASS.bar, d.index);
};
c3_chart_internal_fn.classBars = function (d) {
    return this.classShapes(d) + this.generateClass(CLASS.bars, d.id);
};
c3_chart_internal_fn.classArc = function (d) {
    return this.classShape(d.data) + this.generateClass(CLASS.arc, d.data.id);
};
c3_chart_internal_fn.classArcs = function (d) {
    return this.classShapes(d.data) + this.generateClass(CLASS.arcs, d.data.id);
};
c3_chart_internal_fn.classArea = function (d) {
    return this.classShape(d) + this.generateClass(CLASS.area, d.id);
};
c3_chart_internal_fn.classAreas = function (d) {
    return this.classShapes(d) + this.generateClass(CLASS.areas, d.id);
};
c3_chart_internal_fn.classRegion = function (d, i) {
    return this.generateClass(CLASS.region, i) + ' ' + ('class' in d ? d['class'] : '');
};
c3_chart_internal_fn.classEvent = function (d) {
    return this.generateClass(CLASS.eventRect, d.index);
};
c3_chart_internal_fn.classTarget = function (id) {
    var $$ = this;
    var additionalClassSuffix = $$.config.data_classes[id],
        additionalClass = '';
    if (additionalClassSuffix) {
        additionalClass = ' ' + CLASS.target + '-' + additionalClassSuffix;
    }
    return $$.generateClass(CLASS.target, id) + additionalClass;
};
c3_chart_internal_fn.classFocus = function (d) {
    return this.classFocused(d) + this.classDefocused(d);
};
c3_chart_internal_fn.classFocused = function (d) {
    return ' ' + (this.focusedTargetIds.indexOf(d.id) >= 0 ? CLASS.focused : '');
};
c3_chart_internal_fn.classDefocused = function (d) {
    return ' ' + (this.defocusedTargetIds.indexOf(d.id) >= 0 ? CLASS.defocused : '');
};
c3_chart_internal_fn.classChartText = function (d) {
    return CLASS.chartText + this.classTarget(d.id);
};
c3_chart_internal_fn.classChartLine = function (d) {
    return CLASS.chartLine + this.classTarget(d.id);
};
c3_chart_internal_fn.classChartBar = function (d) {
    return CLASS.chartBar + this.classTarget(d.id);
};
c3_chart_internal_fn.classChartArc = function (d) {
    return CLASS.chartArc + this.classTarget(d.data.id);
};
c3_chart_internal_fn.getTargetSelectorSuffix = function (targetId) {
    return targetId || targetId === 0 ? ('-' + targetId).replace(/[\s?!@#$%^&*()_=+,.<>'":;\[\]\/|~`{}\\]/g, '-') : '';
};
c3_chart_internal_fn.selectorTarget = function (id, prefix) {
    return (prefix || '') + '.' + CLASS.target + this.getTargetSelectorSuffix(id);
};
c3_chart_internal_fn.selectorTargets = function (ids, prefix) {
    var $$ = this;
    ids = ids || [];
    return ids.length ? ids.map(function (id) {
        return $$.selectorTarget(id, prefix);
    }) : null;
};
c3_chart_internal_fn.selectorLegend = function (id) {
    return '.' + CLASS.legendItem + this.getTargetSelectorSuffix(id);
};
c3_chart_internal_fn.selectorLegends = function (ids) {
    var $$ = this;
    return ids && ids.length ? ids.map(function (id) {
        return $$.selectorLegend(id);
    }) : null;
};

c3_chart_internal_fn.getClipPath = function (id) {
    var isIE9 = window.navigator.appVersion.toLowerCase().indexOf("msie 9.") >= 0;
    return "url(" + (isIE9 ? "" : document.URL.split('#')[0]) + "#" + id + ")";
};
c3_chart_internal_fn.appendClip = function (parent, id) {
    return parent.append("clipPath").attr("id", id).append("rect");
};
c3_chart_internal_fn.getAxisClipX = function (forHorizontal) {
    // axis line width + padding for left
    var left = Math.max(30, this.margin.left);
    return forHorizontal ? -(1 + left) : -(left - 1);
};
c3_chart_internal_fn.getAxisClipY = function (forHorizontal) {
    return forHorizontal ? -20 : -this.margin.top;
};
c3_chart_internal_fn.getXAxisClipX = function () {
    var $$ = this;
    return $$.getAxisClipX(!$$.config.axis_rotated);
};
c3_chart_internal_fn.getXAxisClipY = function () {
    var $$ = this;
    return $$.getAxisClipY(!$$.config.axis_rotated);
};
c3_chart_internal_fn.getYAxisClipX = function () {
    var $$ = this;
    return $$.config.axis_y_inner ? -1 : $$.getAxisClipX($$.config.axis_rotated);
};
c3_chart_internal_fn.getYAxisClipY = function () {
    var $$ = this;
    return $$.getAxisClipY($$.config.axis_rotated);
};
c3_chart_internal_fn.getAxisClipWidth = function (forHorizontal) {
    var $$ = this,
        left = Math.max(30, $$.margin.left),
        right = Math.max(30, $$.margin.right);
    // width + axis line width + padding for left/right
    return forHorizontal ? $$.width + 2 + left + right : $$.margin.left + 20;
};
c3_chart_internal_fn.getAxisClipHeight = function (forHorizontal) {
    // less than 20 is not enough to show the axis label 'outer' without legend
    return (forHorizontal ? this.margin.bottom : this.margin.top + this.height) + 20;
};
c3_chart_internal_fn.getXAxisClipWidth = function () {
    var $$ = this;
    return $$.getAxisClipWidth(!$$.config.axis_rotated);
};
c3_chart_internal_fn.getXAxisClipHeight = function () {
    var $$ = this;
    return $$.getAxisClipHeight(!$$.config.axis_rotated);
};
c3_chart_internal_fn.getYAxisClipWidth = function () {
    var $$ = this;
    return $$.getAxisClipWidth($$.config.axis_rotated) + ($$.config.axis_y_inner ? 20 : 0);
};
c3_chart_internal_fn.getYAxisClipHeight = function () {
    var $$ = this;
    return $$.getAxisClipHeight($$.config.axis_rotated);
};

c3_chart_internal_fn.generateColor = function () {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3,
        colors = config.data_colors,
        pattern = notEmpty(config.color_pattern) ? config.color_pattern : d3.scale.category10().range(),
        callback = config.data_color,
        ids = [];

    return function (d) {
        var id = d.id || d.data && d.data.id || d,
            color;

        // if callback function is provided
        if (colors[id] instanceof Function) {
            color = colors[id](d);
        }
        // if specified, choose that color
        else if (colors[id]) {
                color = colors[id];
            }
            // if not specified, choose from pattern
            else {
                    if (ids.indexOf(id) < 0) {
                        ids.push(id);
                    }
                    color = pattern[ids.indexOf(id) % pattern.length];
                    colors[id] = color;
                }
        return callback instanceof Function ? callback(color, d) : color;
    };
};
c3_chart_internal_fn.generateLevelColor = function () {
    var $$ = this,
        config = $$.config,
        colors = config.color_pattern,
        threshold = config.color_threshold,
        asValue = threshold.unit === 'value',
        values = threshold.values && threshold.values.length ? threshold.values : [],
        max = threshold.max || 100;
    return notEmpty(config.color_threshold) ? function (value) {
        var i,
            v,
            color = colors[colors.length - 1];
        for (i = 0; i < values.length; i++) {
            v = asValue ? value : value * 100 / max;
            if (v < values[i]) {
                color = colors[i];
                break;
            }
        }
        return color;
    } : null;
};

c3_chart_internal_fn.getDefaultConfig = function () {
    var config = {
        bindto: '#chart',
        svg_classname: undefined,
        size_width: undefined,
        size_height: undefined,
        padding_left: undefined,
        padding_right: undefined,
        padding_top: undefined,
        padding_bottom: undefined,
        resize_auto: true,
        zoom_enabled: false,
        zoom_extent: undefined,
        zoom_privileged: false,
        zoom_rescale: false,
        zoom_onzoom: function zoom_onzoom() {},
        zoom_onzoomstart: function zoom_onzoomstart() {},
        zoom_onzoomend: function zoom_onzoomend() {},
        zoom_x_min: undefined,
        zoom_x_max: undefined,
        interaction_brighten: true,
        interaction_enabled: true,
        onmouseover: function onmouseover() {},
        onmouseout: function onmouseout() {},
        onresize: function onresize() {},
        onresized: function onresized() {},
        oninit: function oninit() {},
        onrendered: function onrendered() {},
        transition_duration: 350,
        data_x: undefined,
        data_xs: {},
        data_xFormat: '%Y-%m-%d',
        data_xLocaltime: true,
        data_xSort: true,
        data_idConverter: function data_idConverter(id) {
            return id;
        },
        data_names: {},
        data_classes: {},
        data_groups: [],
        data_axes: {},
        data_type: undefined,
        data_types: {},
        data_labels: {},
        data_order: 'desc',
        data_regions: {},
        data_color: undefined,
        data_colors: {},
        data_hide: false,
        data_filter: undefined,
        data_selection_enabled: false,
        data_selection_grouped: false,
        data_selection_isselectable: function data_selection_isselectable() {
            return true;
        },
        data_selection_multiple: true,
        data_selection_draggable: false,
        data_onclick: function data_onclick() {},
        data_onmouseover: function data_onmouseover() {},
        data_onmouseout: function data_onmouseout() {},
        data_onselected: function data_onselected() {},
        data_onunselected: function data_onunselected() {},
        data_url: undefined,
        data_headers: undefined,
        data_json: undefined,
        data_rows: undefined,
        data_columns: undefined,
        data_mimeType: undefined,
        data_keys: undefined,
        // configuration for no plot-able data supplied.
        data_empty_label_text: "",
        // subchart
        subchart_show: false,
        subchart_size_height: 60,
        subchart_axis_x_show: true,
        subchart_onbrush: function subchart_onbrush() {},
        // color
        color_pattern: [],
        color_threshold: {},
        // legend
        legend_show: true,
        legend_hide: false,
        legend_position: 'bottom',
        legend_inset_anchor: 'top-left',
        legend_inset_x: 10,
        legend_inset_y: 0,
        legend_inset_step: undefined,
        legend_item_onclick: undefined,
        legend_item_onmouseover: undefined,
        legend_item_onmouseout: undefined,
        legend_equally: false,
        legend_padding: 0,
        legend_item_tile_width: 10,
        legend_item_tile_height: 10,
        // axis
        axis_rotated: false,
        axis_x_show: true,
        axis_x_type: 'indexed',
        axis_x_localtime: true,
        axis_x_categories: [],
        axis_x_tick_centered: false,
        axis_x_tick_format: undefined,
        axis_x_tick_culling: {},
        axis_x_tick_culling_max: 10,
        axis_x_tick_count: undefined,
        axis_x_tick_fit: true,
        axis_x_tick_values: null,
        axis_x_tick_rotate: 0,
        axis_x_tick_outer: true,
        axis_x_tick_multiline: true,
        axis_x_tick_width: null,
        axis_x_max: undefined,
        axis_x_min: undefined,
        axis_x_padding: {},
        axis_x_height: undefined,
        axis_x_extent: undefined,
        axis_x_label: {},
        axis_y_show: true,
        axis_y_type: undefined,
        axis_y_max: undefined,
        axis_y_min: undefined,
        axis_y_inverted: false,
        axis_y_center: undefined,
        axis_y_inner: undefined,
        axis_y_label: {},
        axis_y_tick_format: undefined,
        axis_y_tick_outer: true,
        axis_y_tick_values: null,
        axis_y_tick_rotate: 0,
        axis_y_tick_count: undefined,
        axis_y_tick_time_value: undefined,
        axis_y_tick_time_interval: undefined,
        axis_y_padding: {},
        axis_y_default: undefined,
        axis_y2_show: false,
        axis_y2_max: undefined,
        axis_y2_min: undefined,
        axis_y2_inverted: false,
        axis_y2_center: undefined,
        axis_y2_inner: undefined,
        axis_y2_label: {},
        axis_y2_tick_format: undefined,
        axis_y2_tick_outer: true,
        axis_y2_tick_values: null,
        axis_y2_tick_count: undefined,
        axis_y2_padding: {},
        axis_y2_default: undefined,
        // grid
        grid_x_show: false,
        grid_x_type: 'tick',
        grid_x_lines: [],
        grid_y_show: false,
        // not used
        // grid_y_type: 'tick',
        grid_y_lines: [],
        grid_y_ticks: 10,
        grid_focus_show: true,
        grid_lines_front: true,
        // point - point of each data
        point_show: true,
        point_r: 2.5,
        point_sensitivity: 10,
        point_focus_expand_enabled: true,
        point_focus_expand_r: undefined,
        point_select_r: undefined,
        // line
        line_connectNull: false,
        line_step_type: 'step',
        // bar
        bar_width: undefined,
        bar_width_ratio: 0.6,
        bar_width_max: undefined,
        bar_zerobased: true,
        // area
        area_zerobased: true,
        area_above: false,
        // pie
        pie_label_show: true,
        pie_label_format: undefined,
        pie_label_threshold: 0.05,
        pie_label_ratio: undefined,
        pie_expand: {},
        pie_expand_duration: 50,
        // gauge
        gauge_fullCircle: false,
        gauge_label_show: true,
        gauge_label_format: undefined,
        gauge_min: 0,
        gauge_max: 100,
        gauge_startingAngle: -1 * Math.PI / 2,
        gauge_label_extents: undefined,
        gauge_units: undefined,
        gauge_width: undefined,
        gauge_expand: {},
        gauge_expand_duration: 50,
        // donut
        donut_label_show: true,
        donut_label_format: undefined,
        donut_label_threshold: 0.05,
        donut_label_ratio: undefined,
        donut_width: undefined,
        donut_title: "",
        donut_expand: {},
        donut_expand_duration: 50,
        // spline
        spline_interpolation_type: 'cardinal',
        // region - region to change style
        regions: [],
        // tooltip - show when mouseover on each data
        tooltip_show: true,
        tooltip_grouped: true,
        tooltip_order: undefined,
        tooltip_format_title: undefined,
        tooltip_format_name: undefined,
        tooltip_format_value: undefined,
        tooltip_position: undefined,
        tooltip_contents: function tooltip_contents(d, defaultTitleFormat, defaultValueFormat, color) {
            return this.getTooltipContent ? this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color) : '';
        },
        tooltip_init_show: false,
        tooltip_init_x: 0,
        tooltip_init_position: { top: '0px', left: '50px' },
        tooltip_onshow: function tooltip_onshow() {},
        tooltip_onhide: function tooltip_onhide() {},
        // title
        title_text: undefined,
        title_padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        },
        title_position: 'top-center'
    };

    Object.keys(this.additionalConfig).forEach(function (key) {
        config[key] = this.additionalConfig[key];
    }, this);

    return config;
};
c3_chart_internal_fn.additionalConfig = {};

c3_chart_internal_fn.loadConfig = function (config) {
    var this_config = this.config,
        target,
        keys,
        read;
    function find() {
        var key = keys.shift();
        //        console.log("key =>", key, ", target =>", target);
        if (key && target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && key in target) {
            target = target[key];
            return find();
        } else if (!key) {
            return target;
        } else {
            return undefined;
        }
    }
    Object.keys(this_config).forEach(function (key) {
        target = config;
        keys = key.split('_');
        read = find();
        //        console.log("CONFIG : ", key, read);
        if (isDefined(read)) {
            this_config[key] = read;
        }
    });
};

c3_chart_internal_fn.convertUrlToData = function (url, mimeType, headers, keys, done) {
    var $$ = this,
        type = mimeType ? mimeType : 'csv';
    var req = $$.d3.xhr(url);
    if (headers) {
        Object.keys(headers).forEach(function (header) {
            req.header(header, headers[header]);
        });
    }
    req.get(function (error, data) {
        var d;
        var dataResponse = data.response || data.responseText; // Fixes IE9 XHR issue; see #1345
        if (!data) {
            throw new Error(error.responseURL + ' ' + error.status + ' (' + error.statusText + ')');
        }
        if (type === 'json') {
            d = $$.convertJsonToData(JSON.parse(dataResponse), keys);
        } else if (type === 'tsv') {
            d = $$.convertTsvToData(dataResponse);
        } else {
            d = $$.convertCsvToData(dataResponse);
        }
        done.call($$, d);
    });
};
c3_chart_internal_fn.convertXsvToData = function (xsv, parser) {
    var rows = parser.parseRows(xsv),
        d;
    if (rows.length === 1) {
        d = [{}];
        rows[0].forEach(function (id) {
            d[0][id] = null;
        });
    } else {
        d = parser.parse(xsv);
    }
    return d;
};
c3_chart_internal_fn.convertCsvToData = function (csv) {
    return this.convertXsvToData(csv, this.d3.csv);
};
c3_chart_internal_fn.convertTsvToData = function (tsv) {
    return this.convertXsvToData(tsv, this.d3.tsv);
};
c3_chart_internal_fn.convertJsonToData = function (json, keys) {
    var $$ = this,
        new_rows = [],
        targetKeys,
        data;
    if (keys) {
        // when keys specified, json would be an array that includes objects
        if (keys.x) {
            targetKeys = keys.value.concat(keys.x);
            $$.config.data_x = keys.x;
        } else {
            targetKeys = keys.value;
        }
        new_rows.push(targetKeys);
        json.forEach(function (o) {
            var new_row = [];
            targetKeys.forEach(function (key) {
                // convert undefined to null because undefined data will be removed in convertDataToTargets()
                var v = $$.findValueInJson(o, key);
                if (isUndefined(v)) {
                    v = null;
                }
                new_row.push(v);
            });
            new_rows.push(new_row);
        });
        data = $$.convertRowsToData(new_rows);
    } else {
        Object.keys(json).forEach(function (key) {
            new_rows.push([key].concat(json[key]));
        });
        data = $$.convertColumnsToData(new_rows);
    }
    return data;
};
c3_chart_internal_fn.findValueInJson = function (object, path) {
    path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties (replace [] with .)
    path = path.replace(/^\./, ''); // strip a leading dot
    var pathArray = path.split('.');
    for (var i = 0; i < pathArray.length; ++i) {
        var k = pathArray[i];
        if (k in object) {
            object = object[k];
        } else {
            return;
        }
    }
    return object;
};

/**
 * Converts the rows to normalized data.
 * @param {any[][]} rows The row data
 * @return {Object[]}
 */
c3_chart_internal_fn.convertRowsToData = function (rows) {
    var newRows = [];
    var keys = rows[0];

    for (var i = 1; i < rows.length; i++) {
        var newRow = {};
        for (var j = 0; j < rows[i].length; j++) {
            if (isUndefined(rows[i][j])) {
                throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
            }
            newRow[keys[j]] = rows[i][j];
        }
        newRows.push(newRow);
    }
    return newRows;
};

/**
 * Converts the columns to normalized data.
 * @param {any[][]} columns The column data
 * @return {Object[]}
 */
c3_chart_internal_fn.convertColumnsToData = function (columns) {
    var newRows = [];

    for (var i = 0; i < columns.length; i++) {
        var key = columns[i][0];
        for (var j = 1; j < columns[i].length; j++) {
            if (isUndefined(newRows[j - 1])) {
                newRows[j - 1] = {};
            }
            if (isUndefined(columns[i][j])) {
                throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
            }
            newRows[j - 1][key] = columns[i][j];
        }
    }

    return newRows;
};

c3_chart_internal_fn.convertDataToTargets = function (data, appendXs) {
    var $$ = this,
        config = $$.config,
        ids = $$.d3.keys(data[0]).filter($$.isNotX, $$),
        xs = $$.d3.keys(data[0]).filter($$.isX, $$),
        targets;

    // save x for update data by load when custom x and c3.x API
    ids.forEach(function (id) {
        var xKey = $$.getXKey(id);

        if ($$.isCustomX() || $$.isTimeSeries()) {
            // if included in input data
            if (xs.indexOf(xKey) >= 0) {
                $$.data.xs[id] = (appendXs && $$.data.xs[id] ? $$.data.xs[id] : []).concat(data.map(function (d) {
                    return d[xKey];
                }).filter(isValue).map(function (rawX, i) {
                    return $$.generateTargetX(rawX, id, i);
                }));
            }
            // if not included in input data, find from preloaded data of other id's x
            else if (config.data_x) {
                    $$.data.xs[id] = $$.getOtherTargetXs();
                }
                // if not included in input data, find from preloaded data
                else if (notEmpty(config.data_xs)) {
                        $$.data.xs[id] = $$.getXValuesOfXKey(xKey, $$.data.targets);
                    }
            // MEMO: if no x included, use same x of current will be used
        } else {
            $$.data.xs[id] = data.map(function (d, i) {
                return i;
            });
        }
    });

    // check x is defined
    ids.forEach(function (id) {
        if (!$$.data.xs[id]) {
            throw new Error('x is not defined for id = "' + id + '".');
        }
    });

    // convert to target
    targets = ids.map(function (id, index) {
        var convertedId = config.data_idConverter(id);
        return {
            id: convertedId,
            id_org: id,
            values: data.map(function (d, i) {
                var xKey = $$.getXKey(id),
                    rawX = d[xKey],
                    value = d[id] !== null && !isNaN(d[id]) ? +d[id] : null,
                    x;
                // use x as categories if custom x and categorized
                if ($$.isCustomX() && $$.isCategorized() && !isUndefined(rawX)) {
                    if (index === 0 && i === 0) {
                        config.axis_x_categories = [];
                    }
                    x = config.axis_x_categories.indexOf(rawX);
                    if (x === -1) {
                        x = config.axis_x_categories.length;
                        config.axis_x_categories.push(rawX);
                    }
                } else {
                    x = $$.generateTargetX(rawX, id, i);
                }
                // mark as x = undefined if value is undefined and filter to remove after mapped
                if (isUndefined(d[id]) || $$.data.xs[id].length <= i) {
                    x = undefined;
                }
                return { x: x, value: value, id: convertedId };
            }).filter(function (v) {
                return isDefined(v.x);
            })
        };
    });

    // finish targets
    targets.forEach(function (t) {
        var i;
        // sort values by its x
        if (config.data_xSort) {
            t.values = t.values.sort(function (v1, v2) {
                var x1 = v1.x || v1.x === 0 ? v1.x : Infinity,
                    x2 = v2.x || v2.x === 0 ? v2.x : Infinity;
                return x1 - x2;
            });
        }
        // indexing each value
        i = 0;
        t.values.forEach(function (v) {
            v.index = i++;
        });
        // this needs to be sorted because its index and value.index is identical
        $$.data.xs[t.id].sort(function (v1, v2) {
            return v1 - v2;
        });
    });

    // cache information about values
    $$.hasNegativeValue = $$.hasNegativeValueInTargets(targets);
    $$.hasPositiveValue = $$.hasPositiveValueInTargets(targets);

    // set target types
    if (config.data_type) {
        $$.setTargetType($$.mapToIds(targets).filter(function (id) {
            return !(id in config.data_types);
        }), config.data_type);
    }

    // cache as original id keyed
    targets.forEach(function (d) {
        $$.addCache(d.id_org, d);
    });

    return targets;
};

c3_chart_internal_fn.isX = function (key) {
    var $$ = this,
        config = $$.config;
    return config.data_x && key === config.data_x || notEmpty(config.data_xs) && hasValue(config.data_xs, key);
};
c3_chart_internal_fn.isNotX = function (key) {
    return !this.isX(key);
};
c3_chart_internal_fn.getXKey = function (id) {
    var $$ = this,
        config = $$.config;
    return config.data_x ? config.data_x : notEmpty(config.data_xs) ? config.data_xs[id] : null;
};
c3_chart_internal_fn.getXValuesOfXKey = function (key, targets) {
    var $$ = this,
        xValues,
        ids = targets && notEmpty(targets) ? $$.mapToIds(targets) : [];
    ids.forEach(function (id) {
        if ($$.getXKey(id) === key) {
            xValues = $$.data.xs[id];
        }
    });
    return xValues;
};
c3_chart_internal_fn.getIndexByX = function (x) {
    var $$ = this,
        data = $$.filterByX($$.data.targets, x);
    return data.length ? data[0].index : null;
};
c3_chart_internal_fn.getXValue = function (id, i) {
    var $$ = this;
    return id in $$.data.xs && $$.data.xs[id] && isValue($$.data.xs[id][i]) ? $$.data.xs[id][i] : i;
};
c3_chart_internal_fn.getOtherTargetXs = function () {
    var $$ = this,
        idsForX = Object.keys($$.data.xs);
    return idsForX.length ? $$.data.xs[idsForX[0]] : null;
};
c3_chart_internal_fn.getOtherTargetX = function (index) {
    var xs = this.getOtherTargetXs();
    return xs && index < xs.length ? xs[index] : null;
};
c3_chart_internal_fn.addXs = function (xs) {
    var $$ = this;
    Object.keys(xs).forEach(function (id) {
        $$.config.data_xs[id] = xs[id];
    });
};
c3_chart_internal_fn.hasMultipleX = function (xs) {
    return this.d3.set(Object.keys(xs).map(function (id) {
        return xs[id];
    })).size() > 1;
};
c3_chart_internal_fn.isMultipleX = function () {
    return notEmpty(this.config.data_xs) || !this.config.data_xSort || this.hasType('scatter');
};
c3_chart_internal_fn.addName = function (data) {
    var $$ = this,
        name;
    if (data) {
        name = $$.config.data_names[data.id];
        data.name = name !== undefined ? name : data.id;
    }
    return data;
};
c3_chart_internal_fn.getValueOnIndex = function (values, index) {
    var valueOnIndex = values.filter(function (v) {
        return v.index === index;
    });
    return valueOnIndex.length ? valueOnIndex[0] : null;
};
c3_chart_internal_fn.updateTargetX = function (targets, x) {
    var $$ = this;
    targets.forEach(function (t) {
        t.values.forEach(function (v, i) {
            v.x = $$.generateTargetX(x[i], t.id, i);
        });
        $$.data.xs[t.id] = x;
    });
};
c3_chart_internal_fn.updateTargetXs = function (targets, xs) {
    var $$ = this;
    targets.forEach(function (t) {
        if (xs[t.id]) {
            $$.updateTargetX([t], xs[t.id]);
        }
    });
};
c3_chart_internal_fn.generateTargetX = function (rawX, id, index) {
    var $$ = this,
        x;
    if ($$.isTimeSeries()) {
        x = rawX ? $$.parseDate(rawX) : $$.parseDate($$.getXValue(id, index));
    } else if ($$.isCustomX() && !$$.isCategorized()) {
        x = isValue(rawX) ? +rawX : $$.getXValue(id, index);
    } else {
        x = index;
    }
    return x;
};
c3_chart_internal_fn.cloneTarget = function (target) {
    return {
        id: target.id,
        id_org: target.id_org,
        values: target.values.map(function (d) {
            return { x: d.x, value: d.value, id: d.id };
        })
    };
};
c3_chart_internal_fn.updateXs = function () {
    var $$ = this;
    if ($$.data.targets.length) {
        $$.xs = [];
        $$.data.targets[0].values.forEach(function (v) {
            $$.xs[v.index] = v.x;
        });
    }
};
c3_chart_internal_fn.getPrevX = function (i) {
    var x = this.xs[i - 1];
    return typeof x !== 'undefined' ? x : null;
};
c3_chart_internal_fn.getNextX = function (i) {
    var x = this.xs[i + 1];
    return typeof x !== 'undefined' ? x : null;
};
c3_chart_internal_fn.getMaxDataCount = function () {
    var $$ = this;
    return $$.d3.max($$.data.targets, function (t) {
        return t.values.length;
    });
};
c3_chart_internal_fn.getMaxDataCountTarget = function (targets) {
    var length = targets.length,
        max = 0,
        maxTarget;
    if (length > 1) {
        targets.forEach(function (t) {
            if (t.values.length > max) {
                maxTarget = t;
                max = t.values.length;
            }
        });
    } else {
        maxTarget = length ? targets[0] : null;
    }
    return maxTarget;
};
c3_chart_internal_fn.getEdgeX = function (targets) {
    var $$ = this;
    return !targets.length ? [0, 0] : [$$.d3.min(targets, function (t) {
        return t.values[0].x;
    }), $$.d3.max(targets, function (t) {
        return t.values[t.values.length - 1].x;
    })];
};
c3_chart_internal_fn.mapToIds = function (targets) {
    return targets.map(function (d) {
        return d.id;
    });
};
c3_chart_internal_fn.mapToTargetIds = function (ids) {
    var $$ = this;
    return ids ? [].concat(ids) : $$.mapToIds($$.data.targets);
};
c3_chart_internal_fn.hasTarget = function (targets, id) {
    var ids = this.mapToIds(targets),
        i;
    for (i = 0; i < ids.length; i++) {
        if (ids[i] === id) {
            return true;
        }
    }
    return false;
};
c3_chart_internal_fn.isTargetToShow = function (targetId) {
    return this.hiddenTargetIds.indexOf(targetId) < 0;
};
c3_chart_internal_fn.isLegendToShow = function (targetId) {
    return this.hiddenLegendIds.indexOf(targetId) < 0;
};
c3_chart_internal_fn.filterTargetsToShow = function (targets) {
    var $$ = this;
    return targets.filter(function (t) {
        return $$.isTargetToShow(t.id);
    });
};
c3_chart_internal_fn.mapTargetsToUniqueXs = function (targets) {
    var $$ = this;
    var xs = $$.d3.set($$.d3.merge(targets.map(function (t) {
        return t.values.map(function (v) {
            return +v.x;
        });
    }))).values();
    xs = $$.isTimeSeries() ? xs.map(function (x) {
        return new Date(+x);
    }) : xs.map(function (x) {
        return +x;
    });
    return xs.sort(function (a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    });
};
c3_chart_internal_fn.addHiddenTargetIds = function (targetIds) {
    targetIds = targetIds instanceof Array ? targetIds : new Array(targetIds);
    for (var i = 0; i < targetIds.length; i++) {
        if (this.hiddenTargetIds.indexOf(targetIds[i]) < 0) {
            this.hiddenTargetIds = this.hiddenTargetIds.concat(targetIds[i]);
        }
    }
};
c3_chart_internal_fn.removeHiddenTargetIds = function (targetIds) {
    this.hiddenTargetIds = this.hiddenTargetIds.filter(function (id) {
        return targetIds.indexOf(id) < 0;
    });
};
c3_chart_internal_fn.addHiddenLegendIds = function (targetIds) {
    targetIds = targetIds instanceof Array ? targetIds : new Array(targetIds);
    for (var i = 0; i < targetIds.length; i++) {
        if (this.hiddenLegendIds.indexOf(targetIds[i]) < 0) {
            this.hiddenLegendIds = this.hiddenLegendIds.concat(targetIds[i]);
        }
    }
};
c3_chart_internal_fn.removeHiddenLegendIds = function (targetIds) {
    this.hiddenLegendIds = this.hiddenLegendIds.filter(function (id) {
        return targetIds.indexOf(id) < 0;
    });
};
c3_chart_internal_fn.getValuesAsIdKeyed = function (targets) {
    var ys = {};
    targets.forEach(function (t) {
        ys[t.id] = [];
        t.values.forEach(function (v) {
            ys[t.id].push(v.value);
        });
    });
    return ys;
};
c3_chart_internal_fn.checkValueInTargets = function (targets, checker) {
    var ids = Object.keys(targets),
        i,
        j,
        values;
    for (i = 0; i < ids.length; i++) {
        values = targets[ids[i]].values;
        for (j = 0; j < values.length; j++) {
            if (checker(values[j].value)) {
                return true;
            }
        }
    }
    return false;
};
c3_chart_internal_fn.hasNegativeValueInTargets = function (targets) {
    return this.checkValueInTargets(targets, function (v) {
        return v < 0;
    });
};
c3_chart_internal_fn.hasPositiveValueInTargets = function (targets) {
    return this.checkValueInTargets(targets, function (v) {
        return v > 0;
    });
};
c3_chart_internal_fn.isOrderDesc = function () {
    var config = this.config;
    return typeof config.data_order === 'string' && config.data_order.toLowerCase() === 'desc';
};
c3_chart_internal_fn.isOrderAsc = function () {
    var config = this.config;
    return typeof config.data_order === 'string' && config.data_order.toLowerCase() === 'asc';
};
c3_chart_internal_fn.orderTargets = function (targets) {
    var $$ = this,
        config = $$.config,
        orderAsc = $$.isOrderAsc(),
        orderDesc = $$.isOrderDesc();
    if (orderAsc || orderDesc) {
        targets.sort(function (t1, t2) {
            var reducer = function reducer(p, c) {
                return p + Math.abs(c.value);
            };
            var t1Sum = t1.values.reduce(reducer, 0),
                t2Sum = t2.values.reduce(reducer, 0);
            return orderAsc ? t2Sum - t1Sum : t1Sum - t2Sum;
        });
    } else if (isFunction(config.data_order)) {
        targets.sort(config.data_order);
    } else if (isArray(config.data_order)) {
        targets.sort(function (t1, t2) {
            return config.data_order.indexOf(t1.id) - config.data_order.indexOf(t2.id);
        });
    }
    return targets;
};
c3_chart_internal_fn.filterByX = function (targets, x) {
    return this.d3.merge(targets.map(function (t) {
        return t.values;
    })).filter(function (v) {
        return v.x - x === 0;
    });
};
c3_chart_internal_fn.filterRemoveNull = function (data) {
    return data.filter(function (d) {
        return isValue(d.value);
    });
};
c3_chart_internal_fn.filterByXDomain = function (targets, xDomain) {
    return targets.map(function (t) {
        return {
            id: t.id,
            id_org: t.id_org,
            values: t.values.filter(function (v) {
                return xDomain[0] <= v.x && v.x <= xDomain[1];
            })
        };
    });
};
c3_chart_internal_fn.hasDataLabel = function () {
    var config = this.config;
    if (typeof config.data_labels === 'boolean' && config.data_labels) {
        return true;
    } else if (_typeof(config.data_labels) === 'object' && notEmpty(config.data_labels)) {
        return true;
    }
    return false;
};
c3_chart_internal_fn.getDataLabelLength = function (min, max, key) {
    var $$ = this,
        lengths = [0, 0],
        paddingCoef = 1.3;
    $$.selectChart.select('svg').selectAll('.dummy').data([min, max]).enter().append('text').text(function (d) {
        return $$.dataLabelFormat(d.id)(d);
    }).each(function (d, i) {
        lengths[i] = this.getBoundingClientRect()[key] * paddingCoef;
    }).remove();
    return lengths;
};
c3_chart_internal_fn.isNoneArc = function (d) {
    return this.hasTarget(this.data.targets, d.id);
}, c3_chart_internal_fn.isArc = function (d) {
    return 'data' in d && this.hasTarget(this.data.targets, d.data.id);
};
c3_chart_internal_fn.findSameXOfValues = function (values, index) {
    var i,
        targetX = values[index].x,
        sames = [];
    for (i = index - 1; i >= 0; i--) {
        if (targetX !== values[i].x) {
            break;
        }
        sames.push(values[i]);
    }
    for (i = index; i < values.length; i++) {
        if (targetX !== values[i].x) {
            break;
        }
        sames.push(values[i]);
    }
    return sames;
};

c3_chart_internal_fn.findClosestFromTargets = function (targets, pos) {
    var $$ = this,
        candidates;

    // map to array of closest points of each target
    candidates = targets.map(function (target) {
        return $$.findClosest(target.values, pos);
    });

    // decide closest point and return
    return $$.findClosest(candidates, pos);
};
c3_chart_internal_fn.findClosest = function (values, pos) {
    var $$ = this,
        minDist = $$.config.point_sensitivity,
        closest;

    // find mouseovering bar
    values.filter(function (v) {
        return v && $$.isBarType(v.id);
    }).forEach(function (v) {
        var shape = $$.main.select('.' + CLASS.bars + $$.getTargetSelectorSuffix(v.id) + ' .' + CLASS.bar + '-' + v.index).node();
        if (!closest && $$.isWithinBar(shape)) {
            closest = v;
        }
    });

    // find closest point from non-bar
    values.filter(function (v) {
        return v && !$$.isBarType(v.id);
    }).forEach(function (v) {
        var d = $$.dist(v, pos);
        if (d < minDist) {
            minDist = d;
            closest = v;
        }
    });

    return closest;
};
c3_chart_internal_fn.dist = function (data, pos) {
    var $$ = this,
        config = $$.config,
        xIndex = config.axis_rotated ? 1 : 0,
        yIndex = config.axis_rotated ? 0 : 1,
        y = $$.circleY(data, data.index),
        x = $$.x(data.x);
    return Math.sqrt(Math.pow(x - pos[xIndex], 2) + Math.pow(y - pos[yIndex], 2));
};
c3_chart_internal_fn.convertValuesToStep = function (values) {
    var converted = [].concat(values),
        i;

    if (!this.isCategorized()) {
        return values;
    }

    for (i = values.length + 1; 0 < i; i--) {
        converted[i] = converted[i - 1];
    }

    converted[0] = {
        x: converted[0].x - 1,
        value: converted[0].value,
        id: converted[0].id
    };
    converted[values.length + 1] = {
        x: converted[values.length].x + 1,
        value: converted[values.length].value,
        id: converted[values.length].id
    };

    return converted;
};
c3_chart_internal_fn.updateDataAttributes = function (name, attrs) {
    var $$ = this,
        config = $$.config,
        current = config['data_' + name];
    if (typeof attrs === 'undefined') {
        return current;
    }
    Object.keys(attrs).forEach(function (id) {
        current[id] = attrs[id];
    });
    $$.redraw({ withLegend: true });
    return current;
};

c3_chart_internal_fn.load = function (targets, args) {
    var $$ = this;
    if (targets) {
        // filter loading targets if needed
        if (args.filter) {
            targets = targets.filter(args.filter);
        }
        // set type if args.types || args.type specified
        if (args.type || args.types) {
            targets.forEach(function (t) {
                var type = args.types && args.types[t.id] ? args.types[t.id] : args.type;
                $$.setTargetType(t.id, type);
            });
        }
        // Update/Add data
        $$.data.targets.forEach(function (d) {
            for (var i = 0; i < targets.length; i++) {
                if (d.id === targets[i].id) {
                    d.values = targets[i].values;
                    targets.splice(i, 1);
                    break;
                }
            }
        });
        $$.data.targets = $$.data.targets.concat(targets); // add remained
    }

    // Set targets
    $$.updateTargets($$.data.targets);

    // Redraw with new targets
    $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });

    if (args.done) {
        args.done();
    }
};
c3_chart_internal_fn.loadFromArgs = function (args) {
    var $$ = this;
    if (args.data) {
        $$.load($$.convertDataToTargets(args.data), args);
    } else if (args.url) {
        $$.convertUrlToData(args.url, args.mimeType, args.headers, args.keys, function (data) {
            $$.load($$.convertDataToTargets(data), args);
        });
    } else if (args.json) {
        $$.load($$.convertDataToTargets($$.convertJsonToData(args.json, args.keys)), args);
    } else if (args.rows) {
        $$.load($$.convertDataToTargets($$.convertRowsToData(args.rows)), args);
    } else if (args.columns) {
        $$.load($$.convertDataToTargets($$.convertColumnsToData(args.columns)), args);
    } else {
        $$.load(null, args);
    }
};
c3_chart_internal_fn.unload = function (targetIds, done) {
    var $$ = this;
    if (!done) {
        done = function done() {};
    }
    // filter existing target
    targetIds = targetIds.filter(function (id) {
        return $$.hasTarget($$.data.targets, id);
    });
    // If no target, call done and return
    if (!targetIds || targetIds.length === 0) {
        done();
        return;
    }
    $$.svg.selectAll(targetIds.map(function (id) {
        return $$.selectorTarget(id);
    })).transition().style('opacity', 0).remove().call($$.endall, done);
    targetIds.forEach(function (id) {
        // Reset fadein for future load
        $$.withoutFadeIn[id] = false;
        // Remove target's elements
        if ($$.legend) {
            $$.legend.selectAll('.' + CLASS.legendItem + $$.getTargetSelectorSuffix(id)).remove();
        }
        // Remove target
        $$.data.targets = $$.data.targets.filter(function (t) {
            return t.id !== id;
        });
    });
};

c3_chart_internal_fn.getYDomainMin = function (targets) {
    var $$ = this,
        config = $$.config,
        ids = $$.mapToIds(targets),
        ys = $$.getValuesAsIdKeyed(targets),
        j,
        k,
        baseId,
        idsInGroup,
        id,
        hasNegativeValue;
    if (config.data_groups.length > 0) {
        hasNegativeValue = $$.hasNegativeValueInTargets(targets);
        for (j = 0; j < config.data_groups.length; j++) {
            // Determine baseId
            idsInGroup = config.data_groups[j].filter(function (id) {
                return ids.indexOf(id) >= 0;
            });
            if (idsInGroup.length === 0) {
                continue;
            }
            baseId = idsInGroup[0];
            // Consider negative values
            if (hasNegativeValue && ys[baseId]) {
                ys[baseId].forEach(function (v, i) {
                    ys[baseId][i] = v < 0 ? v : 0;
                });
            }
            // Compute min
            for (k = 1; k < idsInGroup.length; k++) {
                id = idsInGroup[k];
                if (!ys[id]) {
                    continue;
                }
                ys[id].forEach(function (v, i) {
                    if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasNegativeValue && +v > 0)) {
                        ys[baseId][i] += +v;
                    }
                });
            }
        }
    }
    return $$.d3.min(Object.keys(ys).map(function (key) {
        return $$.d3.min(ys[key]);
    }));
};
c3_chart_internal_fn.getYDomainMax = function (targets) {
    var $$ = this,
        config = $$.config,
        ids = $$.mapToIds(targets),
        ys = $$.getValuesAsIdKeyed(targets),
        j,
        k,
        baseId,
        idsInGroup,
        id,
        hasPositiveValue;
    if (config.data_groups.length > 0) {
        hasPositiveValue = $$.hasPositiveValueInTargets(targets);
        for (j = 0; j < config.data_groups.length; j++) {
            // Determine baseId
            idsInGroup = config.data_groups[j].filter(function (id) {
                return ids.indexOf(id) >= 0;
            });
            if (idsInGroup.length === 0) {
                continue;
            }
            baseId = idsInGroup[0];
            // Consider positive values
            if (hasPositiveValue && ys[baseId]) {
                ys[baseId].forEach(function (v, i) {
                    ys[baseId][i] = v > 0 ? v : 0;
                });
            }
            // Compute max
            for (k = 1; k < idsInGroup.length; k++) {
                id = idsInGroup[k];
                if (!ys[id]) {
                    continue;
                }
                ys[id].forEach(function (v, i) {
                    if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasPositiveValue && +v < 0)) {
                        ys[baseId][i] += +v;
                    }
                });
            }
        }
    }
    return $$.d3.max(Object.keys(ys).map(function (key) {
        return $$.d3.max(ys[key]);
    }));
};
c3_chart_internal_fn.getYDomain = function (targets, axisId, xDomain) {
    var $$ = this,
        config = $$.config,
        targetsByAxisId = targets.filter(function (t) {
        return $$.axis.getId(t.id) === axisId;
    }),
        yTargets = xDomain ? $$.filterByXDomain(targetsByAxisId, xDomain) : targetsByAxisId,
        yMin = axisId === 'y2' ? config.axis_y2_min : config.axis_y_min,
        yMax = axisId === 'y2' ? config.axis_y2_max : config.axis_y_max,
        yDomainMin = $$.getYDomainMin(yTargets),
        yDomainMax = $$.getYDomainMax(yTargets),
        domain,
        domainLength,
        padding,
        padding_top,
        padding_bottom,
        center = axisId === 'y2' ? config.axis_y2_center : config.axis_y_center,
        yDomainAbs,
        lengths,
        diff,
        ratio,
        isAllPositive,
        isAllNegative,
        isZeroBased = $$.hasType('bar', yTargets) && config.bar_zerobased || $$.hasType('area', yTargets) && config.area_zerobased,
        isInverted = axisId === 'y2' ? config.axis_y2_inverted : config.axis_y_inverted,
        showHorizontalDataLabel = $$.hasDataLabel() && config.axis_rotated,
        showVerticalDataLabel = $$.hasDataLabel() && !config.axis_rotated;

    // MEMO: avoid inverting domain unexpectedly
    yDomainMin = isValue(yMin) ? yMin : isValue(yMax) ? yDomainMin < yMax ? yDomainMin : yMax - 10 : yDomainMin;
    yDomainMax = isValue(yMax) ? yMax : isValue(yMin) ? yMin < yDomainMax ? yDomainMax : yMin + 10 : yDomainMax;

    if (yTargets.length === 0) {
        // use current domain if target of axisId is none
        return axisId === 'y2' ? $$.y2.domain() : $$.y.domain();
    }
    if (isNaN(yDomainMin)) {
        // set minimum to zero when not number
        yDomainMin = 0;
    }
    if (isNaN(yDomainMax)) {
        // set maximum to have same value as yDomainMin
        yDomainMax = yDomainMin;
    }
    if (yDomainMin === yDomainMax) {
        yDomainMin < 0 ? yDomainMax = 0 : yDomainMin = 0;
    }
    isAllPositive = yDomainMin >= 0 && yDomainMax >= 0;
    isAllNegative = yDomainMin <= 0 && yDomainMax <= 0;

    // Cancel zerobased if axis_*_min / axis_*_max specified
    if (isValue(yMin) && isAllPositive || isValue(yMax) && isAllNegative) {
        isZeroBased = false;
    }

    // Bar/Area chart should be 0-based if all positive|negative
    if (isZeroBased) {
        if (isAllPositive) {
            yDomainMin = 0;
        }
        if (isAllNegative) {
            yDomainMax = 0;
        }
    }

    domainLength = Math.abs(yDomainMax - yDomainMin);
    padding = padding_top = padding_bottom = domainLength * 0.1;

    if (typeof center !== 'undefined') {
        yDomainAbs = Math.max(Math.abs(yDomainMin), Math.abs(yDomainMax));
        yDomainMax = center + yDomainAbs;
        yDomainMin = center - yDomainAbs;
    }
    // add padding for data label
    if (showHorizontalDataLabel) {
        lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'width');
        diff = diffDomain($$.y.range());
        ratio = [lengths[0] / diff, lengths[1] / diff];
        padding_top += domainLength * (ratio[1] / (1 - ratio[0] - ratio[1]));
        padding_bottom += domainLength * (ratio[0] / (1 - ratio[0] - ratio[1]));
    } else if (showVerticalDataLabel) {
        lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'height');
        padding_top += $$.axis.convertPixelsToAxisPadding(lengths[1], domainLength);
        padding_bottom += $$.axis.convertPixelsToAxisPadding(lengths[0], domainLength);
    }
    if (axisId === 'y' && notEmpty(config.axis_y_padding)) {
        padding_top = $$.axis.getPadding(config.axis_y_padding, 'top', padding_top, domainLength);
        padding_bottom = $$.axis.getPadding(config.axis_y_padding, 'bottom', padding_bottom, domainLength);
    }
    if (axisId === 'y2' && notEmpty(config.axis_y2_padding)) {
        padding_top = $$.axis.getPadding(config.axis_y2_padding, 'top', padding_top, domainLength);
        padding_bottom = $$.axis.getPadding(config.axis_y2_padding, 'bottom', padding_bottom, domainLength);
    }
    // Bar/Area chart should be 0-based if all positive|negative
    if (isZeroBased) {
        if (isAllPositive) {
            padding_bottom = yDomainMin;
        }
        if (isAllNegative) {
            padding_top = -yDomainMax;
        }
    }
    domain = [yDomainMin - padding_bottom, yDomainMax + padding_top];
    return isInverted ? domain.reverse() : domain;
};
c3_chart_internal_fn.getXDomainMin = function (targets) {
    var $$ = this,
        config = $$.config;
    return isDefined(config.axis_x_min) ? $$.isTimeSeries() ? this.parseDate(config.axis_x_min) : config.axis_x_min : $$.d3.min(targets, function (t) {
        return $$.d3.min(t.values, function (v) {
            return v.x;
        });
    });
};
c3_chart_internal_fn.getXDomainMax = function (targets) {
    var $$ = this,
        config = $$.config;
    return isDefined(config.axis_x_max) ? $$.isTimeSeries() ? this.parseDate(config.axis_x_max) : config.axis_x_max : $$.d3.max(targets, function (t) {
        return $$.d3.max(t.values, function (v) {
            return v.x;
        });
    });
};
c3_chart_internal_fn.getXDomainPadding = function (domain) {
    var $$ = this,
        config = $$.config,
        diff = domain[1] - domain[0],
        maxDataCount,
        padding,
        paddingLeft,
        paddingRight;
    if ($$.isCategorized()) {
        padding = 0;
    } else if ($$.hasType('bar')) {
        maxDataCount = $$.getMaxDataCount();
        padding = maxDataCount > 1 ? diff / (maxDataCount - 1) / 2 : 0.5;
    } else {
        padding = diff * 0.01;
    }
    if (_typeof(config.axis_x_padding) === 'object' && notEmpty(config.axis_x_padding)) {
        paddingLeft = isValue(config.axis_x_padding.left) ? config.axis_x_padding.left : padding;
        paddingRight = isValue(config.axis_x_padding.right) ? config.axis_x_padding.right : padding;
    } else if (typeof config.axis_x_padding === 'number') {
        paddingLeft = paddingRight = config.axis_x_padding;
    } else {
        paddingLeft = paddingRight = padding;
    }
    return { left: paddingLeft, right: paddingRight };
};
c3_chart_internal_fn.getXDomain = function (targets) {
    var $$ = this,
        xDomain = [$$.getXDomainMin(targets), $$.getXDomainMax(targets)],
        firstX = xDomain[0],
        lastX = xDomain[1],
        padding = $$.getXDomainPadding(xDomain),
        min = 0,
        max = 0;
    // show center of x domain if min and max are the same
    if (firstX - lastX === 0 && !$$.isCategorized()) {
        if ($$.isTimeSeries()) {
            firstX = new Date(firstX.getTime() * 0.5);
            lastX = new Date(lastX.getTime() * 1.5);
        } else {
            firstX = firstX === 0 ? 1 : firstX * 0.5;
            lastX = lastX === 0 ? -1 : lastX * 1.5;
        }
    }
    if (firstX || firstX === 0) {
        min = $$.isTimeSeries() ? new Date(firstX.getTime() - padding.left) : firstX - padding.left;
    }
    if (lastX || lastX === 0) {
        max = $$.isTimeSeries() ? new Date(lastX.getTime() + padding.right) : lastX + padding.right;
    }
    return [min, max];
};
c3_chart_internal_fn.updateXDomain = function (targets, withUpdateXDomain, withUpdateOrgXDomain, withTrim, domain) {
    var $$ = this,
        config = $$.config;

    if (withUpdateOrgXDomain) {
        $$.x.domain(domain ? domain : $$.d3.extent($$.getXDomain(targets)));
        $$.orgXDomain = $$.x.domain();
        if (config.zoom_enabled) {
            $$.zoom.scale($$.x).updateScaleExtent();
        }
        $$.subX.domain($$.x.domain());
        if ($$.brush) {
            $$.brush.scale($$.subX);
        }
    }
    if (withUpdateXDomain) {
        $$.x.domain(domain ? domain : !$$.brush || $$.brush.empty() ? $$.orgXDomain : $$.brush.extent());
        if (config.zoom_enabled) {
            $$.zoom.scale($$.x).updateScaleExtent();
        }
    }

    // Trim domain when too big by zoom mousemove event
    if (withTrim) {
        $$.x.domain($$.trimXDomain($$.x.orgDomain()));
    }

    return $$.x.domain();
};
c3_chart_internal_fn.trimXDomain = function (domain) {
    var zoomDomain = this.getZoomDomain(),
        min = zoomDomain[0],
        max = zoomDomain[1];
    if (domain[0] <= min) {
        domain[1] = +domain[1] + (min - domain[0]);
        domain[0] = min;
    }
    if (max <= domain[1]) {
        domain[0] = +domain[0] - (domain[1] - max);
        domain[1] = max;
    }
    return domain;
};

c3_chart_internal_fn.drag = function (mouse) {
    var $$ = this,
        config = $$.config,
        main = $$.main,
        d3 = $$.d3;
    var sx, sy, mx, my, minX, maxX, minY, maxY;

    if ($$.hasArcType()) {
        return;
    }
    if (!config.data_selection_enabled) {
        return;
    } // do nothing if not selectable
    if (config.zoom_enabled && !$$.zoom.altDomain) {
        return;
    } // skip if zoomable because of conflict drag dehavior
    if (!config.data_selection_multiple) {
        return;
    } // skip when single selection because drag is used for multiple selection

    sx = $$.dragStart[0];
    sy = $$.dragStart[1];
    mx = mouse[0];
    my = mouse[1];
    minX = Math.min(sx, mx);
    maxX = Math.max(sx, mx);
    minY = config.data_selection_grouped ? $$.margin.top : Math.min(sy, my);
    maxY = config.data_selection_grouped ? $$.height : Math.max(sy, my);

    main.select('.' + CLASS.dragarea).attr('x', minX).attr('y', minY).attr('width', maxX - minX).attr('height', maxY - minY);
    // TODO: binary search when multiple xs
    main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).filter(function (d) {
        return config.data_selection_isselectable(d);
    }).each(function (d, i) {
        var shape = d3.select(this),
            isSelected = shape.classed(CLASS.SELECTED),
            isIncluded = shape.classed(CLASS.INCLUDED),
            _x,
            _y,
            _w,
            _h,
            toggle,
            isWithin = false,
            box;
        if (shape.classed(CLASS.circle)) {
            _x = shape.attr("cx") * 1;
            _y = shape.attr("cy") * 1;
            toggle = $$.togglePoint;
            isWithin = minX < _x && _x < maxX && minY < _y && _y < maxY;
        } else if (shape.classed(CLASS.bar)) {
            box = getPathBox(this);
            _x = box.x;
            _y = box.y;
            _w = box.width;
            _h = box.height;
            toggle = $$.togglePath;
            isWithin = !(maxX < _x || _x + _w < minX) && !(maxY < _y || _y + _h < minY);
        } else {
            // line/area selection not supported yet
            return;
        }
        if (isWithin ^ isIncluded) {
            shape.classed(CLASS.INCLUDED, !isIncluded);
            // TODO: included/unincluded callback here
            shape.classed(CLASS.SELECTED, !isSelected);
            toggle.call($$, !isSelected, shape, d, i);
        }
    });
};

c3_chart_internal_fn.dragstart = function (mouse) {
    var $$ = this,
        config = $$.config;
    if ($$.hasArcType()) {
        return;
    }
    if (!config.data_selection_enabled) {
        return;
    } // do nothing if not selectable
    $$.dragStart = mouse;
    $$.main.select('.' + CLASS.chart).append('rect').attr('class', CLASS.dragarea).style('opacity', 0.1);
    $$.dragging = true;
};

c3_chart_internal_fn.dragend = function () {
    var $$ = this,
        config = $$.config;
    if ($$.hasArcType()) {
        return;
    }
    if (!config.data_selection_enabled) {
        return;
    } // do nothing if not selectable
    $$.main.select('.' + CLASS.dragarea).transition().duration(100).style('opacity', 0).remove();
    $$.main.selectAll('.' + CLASS.shape).classed(CLASS.INCLUDED, false);
    $$.dragging = false;
};

c3_chart_internal_fn.getYFormat = function (forArc) {
    var $$ = this,
        formatForY = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.yFormat,
        formatForY2 = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.y2Format;
    return function (v, ratio, id) {
        var format = $$.axis.getId(id) === 'y2' ? formatForY2 : formatForY;
        return format.call($$, v, ratio);
    };
};
c3_chart_internal_fn.yFormat = function (v) {
    var $$ = this,
        config = $$.config,
        format = config.axis_y_tick_format ? config.axis_y_tick_format : $$.defaultValueFormat;
    return format(v);
};
c3_chart_internal_fn.y2Format = function (v) {
    var $$ = this,
        config = $$.config,
        format = config.axis_y2_tick_format ? config.axis_y2_tick_format : $$.defaultValueFormat;
    return format(v);
};
c3_chart_internal_fn.defaultValueFormat = function (v) {
    return isValue(v) ? +v : "";
};
c3_chart_internal_fn.defaultArcValueFormat = function (v, ratio) {
    return (ratio * 100).toFixed(1) + '%';
};
c3_chart_internal_fn.dataLabelFormat = function (targetId) {
    var $$ = this,
        data_labels = $$.config.data_labels,
        format,
        defaultFormat = function defaultFormat(v) {
        return isValue(v) ? +v : "";
    };
    // find format according to axis id
    if (typeof data_labels.format === 'function') {
        format = data_labels.format;
    } else if (_typeof(data_labels.format) === 'object') {
        if (data_labels.format[targetId]) {
            format = data_labels.format[targetId] === true ? defaultFormat : data_labels.format[targetId];
        } else {
            format = function format() {
                return '';
            };
        }
    } else {
        format = defaultFormat;
    }
    return format;
};

c3_chart_internal_fn.initGrid = function () {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3;
    $$.grid = $$.main.append('g').attr("clip-path", $$.clipPathForGrid).attr('class', CLASS.grid);
    if (config.grid_x_show) {
        $$.grid.append("g").attr("class", CLASS.xgrids);
    }
    if (config.grid_y_show) {
        $$.grid.append('g').attr('class', CLASS.ygrids);
    }
    if (config.grid_focus_show) {
        $$.grid.append('g').attr("class", CLASS.xgridFocus).append('line').attr('class', CLASS.xgridFocus);
    }
    $$.xgrid = d3.selectAll([]);
    if (!config.grid_lines_front) {
        $$.initGridLines();
    }
};
c3_chart_internal_fn.initGridLines = function () {
    var $$ = this,
        d3 = $$.d3;
    $$.gridLines = $$.main.append('g').attr("clip-path", $$.clipPathForGrid).attr('class', CLASS.grid + ' ' + CLASS.gridLines);
    $$.gridLines.append('g').attr("class", CLASS.xgridLines);
    $$.gridLines.append('g').attr('class', CLASS.ygridLines);
    $$.xgridLines = d3.selectAll([]);
};
c3_chart_internal_fn.updateXGrid = function (withoutUpdate) {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3,
        xgridData = $$.generateGridData(config.grid_x_type, $$.x),
        tickOffset = $$.isCategorized() ? $$.xAxis.tickOffset() : 0;

    $$.xgridAttr = config.axis_rotated ? {
        'x1': 0,
        'x2': $$.width,
        'y1': function y1(d) {
            return $$.x(d) - tickOffset;
        },
        'y2': function y2(d) {
            return $$.x(d) - tickOffset;
        }
    } : {
        'x1': function x1(d) {
            return $$.x(d) + tickOffset;
        },
        'x2': function x2(d) {
            return $$.x(d) + tickOffset;
        },
        'y1': 0,
        'y2': $$.height
    };

    $$.xgrid = $$.main.select('.' + CLASS.xgrids).selectAll('.' + CLASS.xgrid).data(xgridData);
    $$.xgrid.enter().append('line').attr("class", CLASS.xgrid);
    if (!withoutUpdate) {
        $$.xgrid.attr($$.xgridAttr).style("opacity", function () {
            return +d3.select(this).attr(config.axis_rotated ? 'y1' : 'x1') === (config.axis_rotated ? $$.height : 0) ? 0 : 1;
        });
    }
    $$.xgrid.exit().remove();
};

c3_chart_internal_fn.updateYGrid = function () {
    var $$ = this,
        config = $$.config,
        gridValues = $$.yAxis.tickValues() || $$.y.ticks(config.grid_y_ticks);
    $$.ygrid = $$.main.select('.' + CLASS.ygrids).selectAll('.' + CLASS.ygrid).data(gridValues);
    $$.ygrid.enter().append('line').attr('class', CLASS.ygrid);
    $$.ygrid.attr("x1", config.axis_rotated ? $$.y : 0).attr("x2", config.axis_rotated ? $$.y : $$.width).attr("y1", config.axis_rotated ? 0 : $$.y).attr("y2", config.axis_rotated ? $$.height : $$.y);
    $$.ygrid.exit().remove();
    $$.smoothLines($$.ygrid, 'grid');
};

c3_chart_internal_fn.gridTextAnchor = function (d) {
    return d.position ? d.position : "end";
};
c3_chart_internal_fn.gridTextDx = function (d) {
    return d.position === 'start' ? 4 : d.position === 'middle' ? 0 : -4;
};
c3_chart_internal_fn.xGridTextX = function (d) {
    return d.position === 'start' ? -this.height : d.position === 'middle' ? -this.height / 2 : 0;
};
c3_chart_internal_fn.yGridTextX = function (d) {
    return d.position === 'start' ? 0 : d.position === 'middle' ? this.width / 2 : this.width;
};
c3_chart_internal_fn.updateGrid = function (duration) {
    var $$ = this,
        main = $$.main,
        config = $$.config,
        xgridLine,
        ygridLine,
        yv;

    // hide if arc type
    $$.grid.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');

    main.select('line.' + CLASS.xgridFocus).style("visibility", "hidden");
    if (config.grid_x_show) {
        $$.updateXGrid();
    }
    $$.xgridLines = main.select('.' + CLASS.xgridLines).selectAll('.' + CLASS.xgridLine).data(config.grid_x_lines);
    // enter
    xgridLine = $$.xgridLines.enter().append('g').attr("class", function (d) {
        return CLASS.xgridLine + (d['class'] ? ' ' + d['class'] : '');
    });
    xgridLine.append('line').style("opacity", 0);
    xgridLine.append('text').attr("text-anchor", $$.gridTextAnchor).attr("transform", config.axis_rotated ? "" : "rotate(-90)").attr('dx', $$.gridTextDx).attr('dy', -5).style("opacity", 0);
    // udpate
    // done in d3.transition() of the end of this function
    // exit
    $$.xgridLines.exit().transition().duration(duration).style("opacity", 0).remove();

    // Y-Grid
    if (config.grid_y_show) {
        $$.updateYGrid();
    }
    $$.ygridLines = main.select('.' + CLASS.ygridLines).selectAll('.' + CLASS.ygridLine).data(config.grid_y_lines);
    // enter
    ygridLine = $$.ygridLines.enter().append('g').attr("class", function (d) {
        return CLASS.ygridLine + (d['class'] ? ' ' + d['class'] : '');
    });
    ygridLine.append('line').style("opacity", 0);
    ygridLine.append('text').attr("text-anchor", $$.gridTextAnchor).attr("transform", config.axis_rotated ? "rotate(-90)" : "").attr('dx', $$.gridTextDx).attr('dy', -5).style("opacity", 0);
    // update
    yv = $$.yv.bind($$);
    $$.ygridLines.select('line').transition().duration(duration).attr("x1", config.axis_rotated ? yv : 0).attr("x2", config.axis_rotated ? yv : $$.width).attr("y1", config.axis_rotated ? 0 : yv).attr("y2", config.axis_rotated ? $$.height : yv).style("opacity", 1);
    $$.ygridLines.select('text').transition().duration(duration).attr("x", config.axis_rotated ? $$.xGridTextX.bind($$) : $$.yGridTextX.bind($$)).attr("y", yv).text(function (d) {
        return d.text;
    }).style("opacity", 1);
    // exit
    $$.ygridLines.exit().transition().duration(duration).style("opacity", 0).remove();
};
c3_chart_internal_fn.redrawGrid = function (withTransition) {
    var $$ = this,
        config = $$.config,
        xv = $$.xv.bind($$),
        lines = $$.xgridLines.select('line'),
        texts = $$.xgridLines.select('text');
    return [(withTransition ? lines.transition() : lines).attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv).attr("y1", config.axis_rotated ? xv : 0).attr("y2", config.axis_rotated ? xv : $$.height).style("opacity", 1), (withTransition ? texts.transition() : texts).attr("x", config.axis_rotated ? $$.yGridTextX.bind($$) : $$.xGridTextX.bind($$)).attr("y", xv).text(function (d) {
        return d.text;
    }).style("opacity", 1)];
};
c3_chart_internal_fn.showXGridFocus = function (selectedData) {
    var $$ = this,
        config = $$.config,
        dataToShow = selectedData.filter(function (d) {
        return d && isValue(d.value);
    }),
        focusEl = $$.main.selectAll('line.' + CLASS.xgridFocus),
        xx = $$.xx.bind($$);
    if (!config.tooltip_show) {
        return;
    }
    // Hide when scatter plot exists
    if ($$.hasType('scatter') || $$.hasArcType()) {
        return;
    }
    focusEl.style("visibility", "visible").data([dataToShow[0]]).attr(config.axis_rotated ? 'y1' : 'x1', xx).attr(config.axis_rotated ? 'y2' : 'x2', xx);
    $$.smoothLines(focusEl, 'grid');
};
c3_chart_internal_fn.hideXGridFocus = function () {
    this.main.select('line.' + CLASS.xgridFocus).style("visibility", "hidden");
};
c3_chart_internal_fn.updateXgridFocus = function () {
    var $$ = this,
        config = $$.config;
    $$.main.select('line.' + CLASS.xgridFocus).attr("x1", config.axis_rotated ? 0 : -10).attr("x2", config.axis_rotated ? $$.width : -10).attr("y1", config.axis_rotated ? -10 : 0).attr("y2", config.axis_rotated ? -10 : $$.height);
};
c3_chart_internal_fn.generateGridData = function (type, scale) {
    var $$ = this,
        gridData = [],
        xDomain,
        firstYear,
        lastYear,
        i,
        tickNum = $$.main.select("." + CLASS.axisX).selectAll('.tick').size();
    if (type === 'year') {
        xDomain = $$.getXDomain();
        firstYear = xDomain[0].getFullYear();
        lastYear = xDomain[1].getFullYear();
        for (i = firstYear; i <= lastYear; i++) {
            gridData.push(new Date(i + '-01-01 00:00:00'));
        }
    } else {
        gridData = scale.ticks(10);
        if (gridData.length > tickNum) {
            // use only int
            gridData = gridData.filter(function (d) {
                return ("" + d).indexOf('.') < 0;
            });
        }
    }
    return gridData;
};
c3_chart_internal_fn.getGridFilterToRemove = function (params) {
    return params ? function (line) {
        var found = false;
        [].concat(params).forEach(function (param) {
            if ('value' in param && line.value === param.value || 'class' in param && line['class'] === param['class']) {
                found = true;
            }
        });
        return found;
    } : function () {
        return true;
    };
};
c3_chart_internal_fn.removeGridLines = function (params, forX) {
    var $$ = this,
        config = $$.config,
        toRemove = $$.getGridFilterToRemove(params),
        toShow = function toShow(line) {
        return !toRemove(line);
    },
        classLines = forX ? CLASS.xgridLines : CLASS.ygridLines,
        classLine = forX ? CLASS.xgridLine : CLASS.ygridLine;
    $$.main.select('.' + classLines).selectAll('.' + classLine).filter(toRemove).transition().duration(config.transition_duration).style('opacity', 0).remove();
    if (forX) {
        config.grid_x_lines = config.grid_x_lines.filter(toShow);
    } else {
        config.grid_y_lines = config.grid_y_lines.filter(toShow);
    }
};

c3_chart_internal_fn.initEventRect = function () {
    var $$ = this;
    $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.eventRects).style('fill-opacity', 0);
};
c3_chart_internal_fn.redrawEventRect = function () {
    var $$ = this,
        config = $$.config,
        eventRectUpdate,
        maxDataCountTarget,
        isMultipleX = $$.isMultipleX();

    // rects for mouseover
    var eventRects = $$.main.select('.' + CLASS.eventRects).style('cursor', config.zoom_enabled ? config.axis_rotated ? 'ns-resize' : 'ew-resize' : null).classed(CLASS.eventRectsMultiple, isMultipleX).classed(CLASS.eventRectsSingle, !isMultipleX);

    // clear old rects
    eventRects.selectAll('.' + CLASS.eventRect).remove();

    // open as public variable
    $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);

    if (isMultipleX) {
        eventRectUpdate = $$.eventRect.data([0]);
        // enter : only one rect will be added
        $$.generateEventRectsForMultipleXs(eventRectUpdate.enter());
        // update
        $$.updateEventRect(eventRectUpdate);
        // exit : not needed because always only one rect exists
    } else {
        // Set data and update $$.eventRect
        maxDataCountTarget = $$.getMaxDataCountTarget($$.data.targets);
        eventRects.datum(maxDataCountTarget ? maxDataCountTarget.values : []);
        $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);
        eventRectUpdate = $$.eventRect.data(function (d) {
            return d;
        });
        // enter
        $$.generateEventRectsForSingleX(eventRectUpdate.enter());
        // update
        $$.updateEventRect(eventRectUpdate);
        // exit
        eventRectUpdate.exit().remove();
    }
};
c3_chart_internal_fn.updateEventRect = function (eventRectUpdate) {
    var $$ = this,
        config = $$.config,
        x,
        y,
        w,
        h,
        rectW,
        rectX;

    // set update selection if null
    eventRectUpdate = eventRectUpdate || $$.eventRect.data(function (d) {
        return d;
    });

    if ($$.isMultipleX()) {
        // TODO: rotated not supported yet
        x = 0;
        y = 0;
        w = $$.width;
        h = $$.height;
    } else {
        if (($$.isCustomX() || $$.isTimeSeries()) && !$$.isCategorized()) {

            // update index for x that is used by prevX and nextX
            $$.updateXs();

            rectW = function rectW(d) {
                var prevX = $$.getPrevX(d.index),
                    nextX = $$.getNextX(d.index);

                // if there this is a single data point make the eventRect full width (or height)
                if (prevX === null && nextX === null) {
                    return config.axis_rotated ? $$.height : $$.width;
                }

                if (prevX === null) {
                    prevX = $$.x.domain()[0];
                }
                if (nextX === null) {
                    nextX = $$.x.domain()[1];
                }

                return Math.max(0, ($$.x(nextX) - $$.x(prevX)) / 2);
            };
            rectX = function rectX(d) {
                var prevX = $$.getPrevX(d.index),
                    nextX = $$.getNextX(d.index),
                    thisX = $$.data.xs[d.id][d.index];

                // if there this is a single data point position the eventRect at 0
                if (prevX === null && nextX === null) {
                    return 0;
                }

                if (prevX === null) {
                    prevX = $$.x.domain()[0];
                }

                return ($$.x(thisX) + $$.x(prevX)) / 2;
            };
        } else {
            rectW = $$.getEventRectWidth();
            rectX = function rectX(d) {
                return $$.x(d.x) - rectW / 2;
            };
        }
        x = config.axis_rotated ? 0 : rectX;
        y = config.axis_rotated ? rectX : 0;
        w = config.axis_rotated ? $$.width : rectW;
        h = config.axis_rotated ? rectW : $$.height;
    }

    eventRectUpdate.attr('class', $$.classEvent.bind($$)).attr("x", x).attr("y", y).attr("width", w).attr("height", h);
};
c3_chart_internal_fn.generateEventRectsForSingleX = function (eventRectEnter) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;
    eventRectEnter.append("rect").attr("class", $$.classEvent.bind($$)).style("cursor", config.data_selection_enabled && config.data_selection_grouped ? "pointer" : null).on('mouseover', function (d) {
        var index = d.index;

        if ($$.dragging || $$.flowing) {
            return;
        } // do nothing while dragging/flowing
        if ($$.hasArcType()) {
            return;
        }

        // Expand shapes for selection
        if (config.point_focus_expand_enabled) {
            $$.expandCircles(index, null, true);
        }
        $$.expandBars(index, null, true);

        // Call event handler
        $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
            config.data_onmouseover.call($$.api, d);
        });
    }).on('mouseout', function (d) {
        var index = d.index;
        if (!$$.config) {
            return;
        } // chart is destroyed
        if ($$.hasArcType()) {
            return;
        }
        $$.hideXGridFocus();
        $$.hideTooltip();
        // Undo expanded shapes
        $$.unexpandCircles();
        $$.unexpandBars();
        // Call event handler
        $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
            config.data_onmouseout.call($$.api, d);
        });
    }).on('mousemove', function (d) {
        var selectedData,
            index = d.index,
            eventRect = $$.svg.select('.' + CLASS.eventRect + '-' + index);

        if ($$.dragging || $$.flowing) {
            return;
        } // do nothing while dragging/flowing
        if ($$.hasArcType()) {
            return;
        }

        if ($$.isStepType(d) && $$.config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {
            index -= 1;
        }

        // Show tooltip
        selectedData = $$.filterTargetsToShow($$.data.targets).map(function (t) {
            return $$.addName($$.getValueOnIndex(t.values, index));
        });

        if (config.tooltip_grouped) {
            $$.showTooltip(selectedData, this);
            $$.showXGridFocus(selectedData);
        }

        if (config.tooltip_grouped && (!config.data_selection_enabled || config.data_selection_grouped)) {
            return;
        }

        $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function () {
            d3.select(this).classed(CLASS.EXPANDED, true);
            if (config.data_selection_enabled) {
                eventRect.style('cursor', config.data_selection_grouped ? 'pointer' : null);
            }
            if (!config.tooltip_grouped) {
                $$.hideXGridFocus();
                $$.hideTooltip();
                if (!config.data_selection_grouped) {
                    $$.unexpandCircles(index);
                    $$.unexpandBars(index);
                }
            }
        }).filter(function (d) {
            return $$.isWithinShape(this, d);
        }).each(function (d) {
            if (config.data_selection_enabled && (config.data_selection_grouped || config.data_selection_isselectable(d))) {
                eventRect.style('cursor', 'pointer');
            }
            if (!config.tooltip_grouped) {
                $$.showTooltip([d], this);
                $$.showXGridFocus([d]);
                if (config.point_focus_expand_enabled) {
                    $$.expandCircles(index, d.id, true);
                }
                $$.expandBars(index, d.id, true);
            }
        });
    }).on('click', function (d) {
        var index = d.index;
        if ($$.hasArcType() || !$$.toggleShape) {
            return;
        }
        if ($$.cancelClick) {
            $$.cancelClick = false;
            return;
        }
        if ($$.isStepType(d) && config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {
            index -= 1;
        }
        $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
            if (config.data_selection_grouped || $$.isWithinShape(this, d)) {
                $$.toggleShape(this, d, index);
                $$.config.data_onclick.call($$.api, d, this);
            }
        });
    }).call(config.data_selection_draggable && $$.drag ? d3.behavior.drag().origin(Object).on('drag', function () {
        $$.drag(d3.mouse(this));
    }).on('dragstart', function () {
        $$.dragstart(d3.mouse(this));
    }).on('dragend', function () {
        $$.dragend();
    }) : function () {});
};

c3_chart_internal_fn.generateEventRectsForMultipleXs = function (eventRectEnter) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;

    function mouseout() {
        $$.svg.select('.' + CLASS.eventRect).style('cursor', null);
        $$.hideXGridFocus();
        $$.hideTooltip();
        $$.unexpandCircles();
        $$.unexpandBars();
    }

    eventRectEnter.append('rect').attr('x', 0).attr('y', 0).attr('width', $$.width).attr('height', $$.height).attr('class', CLASS.eventRect).on('mouseout', function () {
        if (!$$.config) {
            return;
        } // chart is destroyed
        if ($$.hasArcType()) {
            return;
        }
        mouseout();
    }).on('mousemove', function () {
        var targetsToShow = $$.filterTargetsToShow($$.data.targets);
        var mouse, closest, sameXData, selectedData;

        if ($$.dragging) {
            return;
        } // do nothing when dragging
        if ($$.hasArcType(targetsToShow)) {
            return;
        }

        mouse = d3.mouse(this);
        closest = $$.findClosestFromTargets(targetsToShow, mouse);

        if ($$.mouseover && (!closest || closest.id !== $$.mouseover.id)) {
            config.data_onmouseout.call($$.api, $$.mouseover);
            $$.mouseover = undefined;
        }

        if (!closest) {
            mouseout();
            return;
        }

        if ($$.isScatterType(closest) || !config.tooltip_grouped) {
            sameXData = [closest];
        } else {
            sameXData = $$.filterByX(targetsToShow, closest.x);
        }

        // show tooltip when cursor is close to some point
        selectedData = sameXData.map(function (d) {
            return $$.addName(d);
        });
        $$.showTooltip(selectedData, this);

        // expand points
        if (config.point_focus_expand_enabled) {
            $$.expandCircles(closest.index, closest.id, true);
        }
        $$.expandBars(closest.index, closest.id, true);

        // Show xgrid focus line
        $$.showXGridFocus(selectedData);

        // Show cursor as pointer if point is close to mouse position
        if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity) {
            $$.svg.select('.' + CLASS.eventRect).style('cursor', 'pointer');
            if (!$$.mouseover) {
                config.data_onmouseover.call($$.api, closest);
                $$.mouseover = closest;
            }
        }
    }).on('click', function () {
        var targetsToShow = $$.filterTargetsToShow($$.data.targets);
        var mouse, closest;
        if ($$.hasArcType(targetsToShow)) {
            return;
        }

        mouse = d3.mouse(this);
        closest = $$.findClosestFromTargets(targetsToShow, mouse);
        if (!closest) {
            return;
        }
        // select if selection enabled
        if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity) {
            $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(closest.id)).selectAll('.' + CLASS.shape + '-' + closest.index).each(function () {
                if (config.data_selection_grouped || $$.isWithinShape(this, closest)) {
                    $$.toggleShape(this, closest, closest.index);
                    $$.config.data_onclick.call($$.api, closest, this);
                }
            });
        }
    }).call(config.data_selection_draggable && $$.drag ? d3.behavior.drag().origin(Object).on('drag', function () {
        $$.drag(d3.mouse(this));
    }).on('dragstart', function () {
        $$.dragstart(d3.mouse(this));
    }).on('dragend', function () {
        $$.dragend();
    }) : function () {});
};
c3_chart_internal_fn.dispatchEvent = function (type, index, mouse) {
    var $$ = this,
        selector = '.' + CLASS.eventRect + (!$$.isMultipleX() ? '-' + index : ''),
        eventRect = $$.main.select(selector).node(),
        box = eventRect.getBoundingClientRect(),
        x = box.left + (mouse ? mouse[0] : 0),
        y = box.top + (mouse ? mouse[1] : 0),
        event = document.createEvent("MouseEvents");

    event.initMouseEvent(type, true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);
    eventRect.dispatchEvent(event);
};

c3_chart_internal_fn.initLegend = function () {
    var $$ = this;
    $$.legendItemTextBox = {};
    $$.legendHasRendered = false;
    $$.legend = $$.svg.append("g").attr("transform", $$.getTranslate('legend'));
    if (!$$.config.legend_show) {
        $$.legend.style('visibility', 'hidden');
        $$.hiddenLegendIds = $$.mapToIds($$.data.targets);
        return;
    }
    // MEMO: call here to update legend box and tranlate for all
    // MEMO: translate will be upated by this, so transform not needed in updateLegend()
    $$.updateLegendWithDefaults();
};
c3_chart_internal_fn.updateLegendWithDefaults = function () {
    var $$ = this;
    $$.updateLegend($$.mapToIds($$.data.targets), { withTransform: false, withTransitionForTransform: false, withTransition: false });
};
c3_chart_internal_fn.updateSizeForLegend = function (legendHeight, legendWidth) {
    var $$ = this,
        config = $$.config,
        insetLegendPosition = {
        top: $$.isLegendTop ? $$.getCurrentPaddingTop() + config.legend_inset_y + 5.5 : $$.currentHeight - legendHeight - $$.getCurrentPaddingBottom() - config.legend_inset_y,
        left: $$.isLegendLeft ? $$.getCurrentPaddingLeft() + config.legend_inset_x + 0.5 : $$.currentWidth - legendWidth - $$.getCurrentPaddingRight() - config.legend_inset_x + 0.5
    };

    $$.margin3 = {
        top: $$.isLegendRight ? 0 : $$.isLegendInset ? insetLegendPosition.top : $$.currentHeight - legendHeight,
        right: NaN,
        bottom: 0,
        left: $$.isLegendRight ? $$.currentWidth - legendWidth : $$.isLegendInset ? insetLegendPosition.left : 0
    };
};
c3_chart_internal_fn.transformLegend = function (withTransition) {
    var $$ = this;
    (withTransition ? $$.legend.transition() : $$.legend).attr("transform", $$.getTranslate('legend'));
};
c3_chart_internal_fn.updateLegendStep = function (step) {
    this.legendStep = step;
};
c3_chart_internal_fn.updateLegendItemWidth = function (w) {
    this.legendItemWidth = w;
};
c3_chart_internal_fn.updateLegendItemHeight = function (h) {
    this.legendItemHeight = h;
};
c3_chart_internal_fn.getLegendWidth = function () {
    var $$ = this;
    return $$.config.legend_show ? $$.isLegendRight || $$.isLegendInset ? $$.legendItemWidth * ($$.legendStep + 1) : $$.currentWidth : 0;
};
c3_chart_internal_fn.getLegendHeight = function () {
    var $$ = this,
        h = 0;
    if ($$.config.legend_show) {
        if ($$.isLegendRight) {
            h = $$.currentHeight;
        } else {
            h = Math.max(20, $$.legendItemHeight) * ($$.legendStep + 1);
        }
    }
    return h;
};
c3_chart_internal_fn.opacityForLegend = function (legendItem) {
    return legendItem.classed(CLASS.legendItemHidden) ? null : 1;
};
c3_chart_internal_fn.opacityForUnfocusedLegend = function (legendItem) {
    return legendItem.classed(CLASS.legendItemHidden) ? null : 0.3;
};
c3_chart_internal_fn.toggleFocusLegend = function (targetIds, focus) {
    var $$ = this;
    targetIds = $$.mapToTargetIds(targetIds);
    $$.legend.selectAll('.' + CLASS.legendItem).filter(function (id) {
        return targetIds.indexOf(id) >= 0;
    }).classed(CLASS.legendItemFocused, focus).transition().duration(100).style('opacity', function () {
        var opacity = focus ? $$.opacityForLegend : $$.opacityForUnfocusedLegend;
        return opacity.call($$, $$.d3.select(this));
    });
};
c3_chart_internal_fn.revertLegend = function () {
    var $$ = this,
        d3 = $$.d3;
    $$.legend.selectAll('.' + CLASS.legendItem).classed(CLASS.legendItemFocused, false).transition().duration(100).style('opacity', function () {
        return $$.opacityForLegend(d3.select(this));
    });
};
c3_chart_internal_fn.showLegend = function (targetIds) {
    var $$ = this,
        config = $$.config;
    if (!config.legend_show) {
        config.legend_show = true;
        $$.legend.style('visibility', 'visible');
        if (!$$.legendHasRendered) {
            $$.updateLegendWithDefaults();
        }
    }
    $$.removeHiddenLegendIds(targetIds);
    $$.legend.selectAll($$.selectorLegends(targetIds)).style('visibility', 'visible').transition().style('opacity', function () {
        return $$.opacityForLegend($$.d3.select(this));
    });
};
c3_chart_internal_fn.hideLegend = function (targetIds) {
    var $$ = this,
        config = $$.config;
    if (config.legend_show && isEmpty(targetIds)) {
        config.legend_show = false;
        $$.legend.style('visibility', 'hidden');
    }
    $$.addHiddenLegendIds(targetIds);
    $$.legend.selectAll($$.selectorLegends(targetIds)).style('opacity', 0).style('visibility', 'hidden');
};
c3_chart_internal_fn.clearLegendItemTextBoxCache = function () {
    this.legendItemTextBox = {};
};
c3_chart_internal_fn.updateLegend = function (targetIds, options, transitions) {
    var $$ = this,
        config = $$.config;
    var xForLegend, xForLegendText, xForLegendRect, yForLegend, yForLegendText, yForLegendRect, x1ForLegendTile, x2ForLegendTile, yForLegendTile;
    var paddingTop = 4,
        paddingRight = 10,
        maxWidth = 0,
        maxHeight = 0,
        posMin = 10,
        tileWidth = config.legend_item_tile_width + 5;
    var l,
        totalLength = 0,
        offsets = {},
        widths = {},
        heights = {},
        margins = [0],
        steps = {},
        step = 0;
    var withTransition, withTransitionForTransform;
    var texts, rects, tiles, background;

    // Skip elements when their name is set to null
    targetIds = targetIds.filter(function (id) {
        return !isDefined(config.data_names[id]) || config.data_names[id] !== null;
    });

    options = options || {};
    withTransition = getOption(options, "withTransition", true);
    withTransitionForTransform = getOption(options, "withTransitionForTransform", true);

    function getTextBox(textElement, id) {
        if (!$$.legendItemTextBox[id]) {
            $$.legendItemTextBox[id] = $$.getTextRect(textElement.textContent, CLASS.legendItem, textElement);
        }
        return $$.legendItemTextBox[id];
    }

    function updatePositions(textElement, id, index) {
        var reset = index === 0,
            isLast = index === targetIds.length - 1,
            box = getTextBox(textElement, id),
            itemWidth = box.width + tileWidth + (isLast && !($$.isLegendRight || $$.isLegendInset) ? 0 : paddingRight) + config.legend_padding,
            itemHeight = box.height + paddingTop,
            itemLength = $$.isLegendRight || $$.isLegendInset ? itemHeight : itemWidth,
            areaLength = $$.isLegendRight || $$.isLegendInset ? $$.getLegendHeight() : $$.getLegendWidth(),
            margin,
            maxLength;

        // MEMO: care about condifion of step, totalLength
        function updateValues(id, withoutStep) {
            if (!withoutStep) {
                margin = (areaLength - totalLength - itemLength) / 2;
                if (margin < posMin) {
                    margin = (areaLength - itemLength) / 2;
                    totalLength = 0;
                    step++;
                }
            }
            steps[id] = step;
            margins[step] = $$.isLegendInset ? 10 : margin;
            offsets[id] = totalLength;
            totalLength += itemLength;
        }

        if (reset) {
            totalLength = 0;
            step = 0;
            maxWidth = 0;
            maxHeight = 0;
        }

        if (config.legend_show && !$$.isLegendToShow(id)) {
            widths[id] = heights[id] = steps[id] = offsets[id] = 0;
            return;
        }

        widths[id] = itemWidth;
        heights[id] = itemHeight;

        if (!maxWidth || itemWidth >= maxWidth) {
            maxWidth = itemWidth;
        }
        if (!maxHeight || itemHeight >= maxHeight) {
            maxHeight = itemHeight;
        }
        maxLength = $$.isLegendRight || $$.isLegendInset ? maxHeight : maxWidth;

        if (config.legend_equally) {
            Object.keys(widths).forEach(function (id) {
                widths[id] = maxWidth;
            });
            Object.keys(heights).forEach(function (id) {
                heights[id] = maxHeight;
            });
            margin = (areaLength - maxLength * targetIds.length) / 2;
            if (margin < posMin) {
                totalLength = 0;
                step = 0;
                targetIds.forEach(function (id) {
                    updateValues(id);
                });
            } else {
                updateValues(id, true);
            }
        } else {
            updateValues(id);
        }
    }

    if ($$.isLegendInset) {
        step = config.legend_inset_step ? config.legend_inset_step : targetIds.length;
        $$.updateLegendStep(step);
    }

    if ($$.isLegendRight) {
        xForLegend = function xForLegend(id) {
            return maxWidth * steps[id];
        };
        yForLegend = function yForLegend(id) {
            return margins[steps[id]] + offsets[id];
        };
    } else if ($$.isLegendInset) {
        xForLegend = function xForLegend(id) {
            return maxWidth * steps[id] + 10;
        };
        yForLegend = function yForLegend(id) {
            return margins[steps[id]] + offsets[id];
        };
    } else {
        xForLegend = function xForLegend(id) {
            return margins[steps[id]] + offsets[id];
        };
        yForLegend = function yForLegend(id) {
            return maxHeight * steps[id];
        };
    }
    xForLegendText = function xForLegendText(id, i) {
        return xForLegend(id, i) + 4 + config.legend_item_tile_width;
    };
    yForLegendText = function yForLegendText(id, i) {
        return yForLegend(id, i) + 9;
    };
    xForLegendRect = function xForLegendRect(id, i) {
        return xForLegend(id, i);
    };
    yForLegendRect = function yForLegendRect(id, i) {
        return yForLegend(id, i) - 5;
    };
    x1ForLegendTile = function x1ForLegendTile(id, i) {
        return xForLegend(id, i) - 2;
    };
    x2ForLegendTile = function x2ForLegendTile(id, i) {
        return xForLegend(id, i) - 2 + config.legend_item_tile_width;
    };
    yForLegendTile = function yForLegendTile(id, i) {
        return yForLegend(id, i) + 4;
    };

    // Define g for legend area
    l = $$.legend.selectAll('.' + CLASS.legendItem).data(targetIds).enter().append('g').attr('class', function (id) {
        return $$.generateClass(CLASS.legendItem, id);
    }).style('visibility', function (id) {
        return $$.isLegendToShow(id) ? 'visible' : 'hidden';
    }).style('cursor', 'pointer').on('click', function (id) {
        if (config.legend_item_onclick) {
            config.legend_item_onclick.call($$, id);
        } else {
            if ($$.d3.event.altKey) {
                $$.api.hide();
                $$.api.show(id);
            } else {
                $$.api.toggle(id);
                $$.isTargetToShow(id) ? $$.api.focus(id) : $$.api.revert();
            }
        }
    }).on('mouseover', function (id) {
        if (config.legend_item_onmouseover) {
            config.legend_item_onmouseover.call($$, id);
        } else {
            $$.d3.select(this).classed(CLASS.legendItemFocused, true);
            if (!$$.transiting && $$.isTargetToShow(id)) {
                $$.api.focus(id);
            }
        }
    }).on('mouseout', function (id) {
        if (config.legend_item_onmouseout) {
            config.legend_item_onmouseout.call($$, id);
        } else {
            $$.d3.select(this).classed(CLASS.legendItemFocused, false);
            $$.api.revert();
        }
    });
    l.append('text').text(function (id) {
        return isDefined(config.data_names[id]) ? config.data_names[id] : id;
    }).each(function (id, i) {
        updatePositions(this, id, i);
    }).style("pointer-events", "none").attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200).attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendText);
    l.append('rect').attr("class", CLASS.legendItemEvent).style('fill-opacity', 0).attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendRect : -200).attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendRect);
    l.append('line').attr('class', CLASS.legendItemTile).style('stroke', $$.color).style("pointer-events", "none").attr('x1', $$.isLegendRight || $$.isLegendInset ? x1ForLegendTile : -200).attr('y1', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile).attr('x2', $$.isLegendRight || $$.isLegendInset ? x2ForLegendTile : -200).attr('y2', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile).attr('stroke-width', config.legend_item_tile_height);

    // Set background for inset legend
    background = $$.legend.select('.' + CLASS.legendBackground + ' rect');
    if ($$.isLegendInset && maxWidth > 0 && background.size() === 0) {
        background = $$.legend.insert('g', '.' + CLASS.legendItem).attr("class", CLASS.legendBackground).append('rect');
    }

    texts = $$.legend.selectAll('text').data(targetIds).text(function (id) {
        return isDefined(config.data_names[id]) ? config.data_names[id] : id;
    } // MEMO: needed for update
    ).each(function (id, i) {
        updatePositions(this, id, i);
    });
    (withTransition ? texts.transition() : texts).attr('x', xForLegendText).attr('y', yForLegendText);

    rects = $$.legend.selectAll('rect.' + CLASS.legendItemEvent).data(targetIds);
    (withTransition ? rects.transition() : rects).attr('width', function (id) {
        return widths[id];
    }).attr('height', function (id) {
        return heights[id];
    }).attr('x', xForLegendRect).attr('y', yForLegendRect);

    tiles = $$.legend.selectAll('line.' + CLASS.legendItemTile).data(targetIds);
    (withTransition ? tiles.transition() : tiles).style('stroke', $$.color).attr('x1', x1ForLegendTile).attr('y1', yForLegendTile).attr('x2', x2ForLegendTile).attr('y2', yForLegendTile);

    if (background) {
        (withTransition ? background.transition() : background).attr('height', $$.getLegendHeight() - 12).attr('width', maxWidth * (step + 1) + 10);
    }

    // toggle legend state
    $$.legend.selectAll('.' + CLASS.legendItem).classed(CLASS.legendItemHidden, function (id) {
        return !$$.isTargetToShow(id);
    });

    // Update all to reflect change of legend
    $$.updateLegendItemWidth(maxWidth);
    $$.updateLegendItemHeight(maxHeight);
    $$.updateLegendStep(step);
    // Update size and scale
    $$.updateSizes();
    $$.updateScales();
    $$.updateSvgSize();
    // Update g positions
    $$.transformAll(withTransitionForTransform, transitions);
    $$.legendHasRendered = true;
};

c3_chart_internal_fn.initRegion = function () {
    var $$ = this;
    $$.region = $$.main.append('g').attr("clip-path", $$.clipPath).attr("class", CLASS.regions);
};
c3_chart_internal_fn.updateRegion = function (duration) {
    var $$ = this,
        config = $$.config;

    // hide if arc type
    $$.region.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');

    $$.mainRegion = $$.main.select('.' + CLASS.regions).selectAll('.' + CLASS.region).data(config.regions);
    $$.mainRegion.enter().append('g').append('rect').style("fill-opacity", 0);
    $$.mainRegion.attr('class', $$.classRegion.bind($$));
    $$.mainRegion.exit().transition().duration(duration).style("opacity", 0).remove();
};
c3_chart_internal_fn.redrawRegion = function (withTransition) {
    var $$ = this,
        regions = $$.mainRegion.selectAll('rect').each(function () {
        // data is binded to g and it's not transferred to rect (child node) automatically,
        // then data of each rect has to be updated manually.
        // TODO: there should be more efficient way to solve this?
        var parentData = $$.d3.select(this.parentNode).datum();
        $$.d3.select(this).datum(parentData);
    }),
        x = $$.regionX.bind($$),
        y = $$.regionY.bind($$),
        w = $$.regionWidth.bind($$),
        h = $$.regionHeight.bind($$);
    return [(withTransition ? regions.transition() : regions).attr("x", x).attr("y", y).attr("width", w).attr("height", h).style("fill-opacity", function (d) {
        return isValue(d.opacity) ? d.opacity : 0.1;
    })];
};
c3_chart_internal_fn.regionX = function (d) {
    var $$ = this,
        config = $$.config,
        xPos,
        yScale = d.axis === 'y' ? $$.y : $$.y2;
    if (d.axis === 'y' || d.axis === 'y2') {
        xPos = config.axis_rotated ? 'start' in d ? yScale(d.start) : 0 : 0;
    } else {
        xPos = config.axis_rotated ? 0 : 'start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0;
    }
    return xPos;
};
c3_chart_internal_fn.regionY = function (d) {
    var $$ = this,
        config = $$.config,
        yPos,
        yScale = d.axis === 'y' ? $$.y : $$.y2;
    if (d.axis === 'y' || d.axis === 'y2') {
        yPos = config.axis_rotated ? 0 : 'end' in d ? yScale(d.end) : 0;
    } else {
        yPos = config.axis_rotated ? 'start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0 : 0;
    }
    return yPos;
};
c3_chart_internal_fn.regionWidth = function (d) {
    var $$ = this,
        config = $$.config,
        start = $$.regionX(d),
        end,
        yScale = d.axis === 'y' ? $$.y : $$.y2;
    if (d.axis === 'y' || d.axis === 'y2') {
        end = config.axis_rotated ? 'end' in d ? yScale(d.end) : $$.width : $$.width;
    } else {
        end = config.axis_rotated ? $$.width : 'end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.width;
    }
    return end < start ? 0 : end - start;
};
c3_chart_internal_fn.regionHeight = function (d) {
    var $$ = this,
        config = $$.config,
        start = this.regionY(d),
        end,
        yScale = d.axis === 'y' ? $$.y : $$.y2;
    if (d.axis === 'y' || d.axis === 'y2') {
        end = config.axis_rotated ? $$.height : 'start' in d ? yScale(d.start) : $$.height;
    } else {
        end = config.axis_rotated ? 'end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.height : $$.height;
    }
    return end < start ? 0 : end - start;
};
c3_chart_internal_fn.isRegionOnX = function (d) {
    return !d.axis || d.axis === 'x';
};

c3_chart_internal_fn.getScale = function (min, max, forTimeseries) {
    return (forTimeseries ? this.d3.time.scale() : this.d3.scale.linear()).range([min, max]);
};
c3_chart_internal_fn.getX = function (min, max, domain, offset) {
    var $$ = this,
        scale = $$.getScale(min, max, $$.isTimeSeries()),
        _scale = domain ? scale.domain(domain) : scale,
        key;
    // Define customized scale if categorized axis
    if ($$.isCategorized()) {
        offset = offset || function () {
            return 0;
        };
        scale = function scale(d, raw) {
            var v = _scale(d) + offset(d);
            return raw ? v : Math.ceil(v);
        };
    } else {
        scale = function scale(d, raw) {
            var v = _scale(d);
            return raw ? v : Math.ceil(v);
        };
    }
    // define functions
    for (key in _scale) {
        scale[key] = _scale[key];
    }
    scale.orgDomain = function () {
        return _scale.domain();
    };
    // define custom domain() for categorized axis
    if ($$.isCategorized()) {
        scale.domain = function (domain) {
            if (!arguments.length) {
                domain = this.orgDomain();
                return [domain[0], domain[1] + 1];
            }
            _scale.domain(domain);
            return scale;
        };
    }
    return scale;
};
c3_chart_internal_fn.getY = function (min, max, domain) {
    var scale = this.getScale(min, max, this.isTimeSeriesY());
    if (domain) {
        scale.domain(domain);
    }
    return scale;
};
c3_chart_internal_fn.getYScale = function (id) {
    return this.axis.getId(id) === 'y2' ? this.y2 : this.y;
};
c3_chart_internal_fn.getSubYScale = function (id) {
    return this.axis.getId(id) === 'y2' ? this.subY2 : this.subY;
};
c3_chart_internal_fn.updateScales = function () {
    var $$ = this,
        config = $$.config,
        forInit = !$$.x;
    // update edges
    $$.xMin = config.axis_rotated ? 1 : 0;
    $$.xMax = config.axis_rotated ? $$.height : $$.width;
    $$.yMin = config.axis_rotated ? 0 : $$.height;
    $$.yMax = config.axis_rotated ? $$.width : 1;
    $$.subXMin = $$.xMin;
    $$.subXMax = $$.xMax;
    $$.subYMin = config.axis_rotated ? 0 : $$.height2;
    $$.subYMax = config.axis_rotated ? $$.width2 : 1;
    // update scales
    $$.x = $$.getX($$.xMin, $$.xMax, forInit ? undefined : $$.x.orgDomain(), function () {
        return $$.xAxis.tickOffset();
    });
    $$.y = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y_default : $$.y.domain());
    $$.y2 = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y2_default : $$.y2.domain());
    $$.subX = $$.getX($$.xMin, $$.xMax, $$.orgXDomain, function (d) {
        return d % 1 ? 0 : $$.subXAxis.tickOffset();
    });
    $$.subY = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y_default : $$.subY.domain());
    $$.subY2 = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y2_default : $$.subY2.domain());
    // update axes
    $$.xAxisTickFormat = $$.axis.getXAxisTickFormat();
    $$.xAxisTickValues = $$.axis.getXAxisTickValues();
    $$.yAxisTickValues = $$.axis.getYAxisTickValues();
    $$.y2AxisTickValues = $$.axis.getY2AxisTickValues();

    $$.xAxis = $$.axis.getXAxis($$.x, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
    $$.subXAxis = $$.axis.getXAxis($$.subX, $$.subXOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
    $$.yAxis = $$.axis.getYAxis($$.y, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, config.axis_y_tick_outer);
    $$.y2Axis = $$.axis.getYAxis($$.y2, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, config.axis_y2_tick_outer);

    // Set initialized scales to brush and zoom
    if (!forInit) {
        if ($$.brush) {
            $$.brush.scale($$.subX);
        }
        if (config.zoom_enabled) {
            $$.zoom.scale($$.x);
        }
    }
    // update for arc
    if ($$.updateArc) {
        $$.updateArc();
    }
};

c3_chart_internal_fn.selectPoint = function (target, d, i) {
    var $$ = this,
        config = $$.config,
        cx = (config.axis_rotated ? $$.circleY : $$.circleX).bind($$),
        cy = (config.axis_rotated ? $$.circleX : $$.circleY).bind($$),
        r = $$.pointSelectR.bind($$);
    config.data_onselected.call($$.api, d, target.node());
    // add selected-circle on low layer g
    $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i).data([d]).enter().append('circle').attr("class", function () {
        return $$.generateClass(CLASS.selectedCircle, i);
    }).attr("cx", cx).attr("cy", cy).attr("stroke", function () {
        return $$.color(d);
    }).attr("r", function (d) {
        return $$.pointSelectR(d) * 1.4;
    }).transition().duration(100).attr("r", r);
};
c3_chart_internal_fn.unselectPoint = function (target, d, i) {
    var $$ = this;
    $$.config.data_onunselected.call($$.api, d, target.node());
    // remove selected-circle from low layer g
    $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i).transition().duration(100).attr('r', 0).remove();
};
c3_chart_internal_fn.togglePoint = function (selected, target, d, i) {
    selected ? this.selectPoint(target, d, i) : this.unselectPoint(target, d, i);
};
c3_chart_internal_fn.selectPath = function (target, d) {
    var $$ = this;
    $$.config.data_onselected.call($$, d, target.node());
    if ($$.config.interaction_brighten) {
        target.transition().duration(100).style("fill", function () {
            return $$.d3.rgb($$.color(d)).brighter(0.75);
        });
    }
};
c3_chart_internal_fn.unselectPath = function (target, d) {
    var $$ = this;
    $$.config.data_onunselected.call($$, d, target.node());
    if ($$.config.interaction_brighten) {
        target.transition().duration(100).style("fill", function () {
            return $$.color(d);
        });
    }
};
c3_chart_internal_fn.togglePath = function (selected, target, d, i) {
    selected ? this.selectPath(target, d, i) : this.unselectPath(target, d, i);
};
c3_chart_internal_fn.getToggle = function (that, d) {
    var $$ = this,
        toggle;
    if (that.nodeName === 'circle') {
        if ($$.isStepType(d)) {
            // circle is hidden in step chart, so treat as within the click area
            toggle = function toggle() {}; // TODO: how to select step chart?
        } else {
            toggle = $$.togglePoint;
        }
    } else if (that.nodeName === 'path') {
        toggle = $$.togglePath;
    }
    return toggle;
};
c3_chart_internal_fn.toggleShape = function (that, d, i) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        shape = d3.select(that),
        isSelected = shape.classed(CLASS.SELECTED),
        toggle = $$.getToggle(that, d).bind($$);

    if (config.data_selection_enabled && config.data_selection_isselectable(d)) {
        if (!config.data_selection_multiple) {
            $$.main.selectAll('.' + CLASS.shapes + (config.data_selection_grouped ? $$.getTargetSelectorSuffix(d.id) : "")).selectAll('.' + CLASS.shape).each(function (d, i) {
                var shape = d3.select(this);
                if (shape.classed(CLASS.SELECTED)) {
                    toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
                }
            });
        }
        shape.classed(CLASS.SELECTED, !isSelected);
        toggle(!isSelected, shape, d, i);
    }
};

c3_chart_internal_fn.initBar = function () {
    var $$ = this;
    $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartBars);
};
c3_chart_internal_fn.updateTargetsForBar = function (targets) {
    var $$ = this,
        config = $$.config,
        mainBarUpdate,
        mainBarEnter,
        classChartBar = $$.classChartBar.bind($$),
        classBars = $$.classBars.bind($$),
        classFocus = $$.classFocus.bind($$);
    mainBarUpdate = $$.main.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar).data(targets).attr('class', function (d) {
        return classChartBar(d) + classFocus(d);
    });
    mainBarEnter = mainBarUpdate.enter().append('g').attr('class', classChartBar).style("pointer-events", "none");
    // Bars for each data
    mainBarEnter.append('g').attr("class", classBars).style("cursor", function (d) {
        return config.data_selection_isselectable(d) ? "pointer" : null;
    });
};
c3_chart_internal_fn.updateBar = function (durationForExit) {
    var $$ = this,
        barData = $$.barData.bind($$),
        classBar = $$.classBar.bind($$),
        initialOpacity = $$.initialOpacity.bind($$),
        color = function color(d) {
        return $$.color(d.id);
    };
    $$.mainBar = $$.main.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar).data(barData);
    $$.mainBar.enter().append('path').attr("class", classBar).style("stroke", color).style("fill", color);
    $$.mainBar.style("opacity", initialOpacity);
    $$.mainBar.exit().transition().duration(durationForExit).remove();
};
c3_chart_internal_fn.redrawBar = function (drawBar, withTransition) {
    return [(withTransition ? this.mainBar.transition(Math.random().toString()) : this.mainBar).attr('d', drawBar).style("fill", this.color).style("opacity", 1)];
};
c3_chart_internal_fn.getBarW = function (axis, barTargetsNum) {
    var $$ = this,
        config = $$.config,
        w = typeof config.bar_width === 'number' ? config.bar_width : barTargetsNum ? axis.tickInterval() * config.bar_width_ratio / barTargetsNum : 0;
    return config.bar_width_max && w > config.bar_width_max ? config.bar_width_max : w;
};
c3_chart_internal_fn.getBars = function (i, id) {
    var $$ = this;
    return (id ? $$.main.selectAll('.' + CLASS.bars + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.bar + (isValue(i) ? '-' + i : ''));
};
c3_chart_internal_fn.expandBars = function (i, id, reset) {
    var $$ = this;
    if (reset) {
        $$.unexpandBars();
    }
    $$.getBars(i, id).classed(CLASS.EXPANDED, true);
};
c3_chart_internal_fn.unexpandBars = function (i) {
    var $$ = this;
    $$.getBars(i).classed(CLASS.EXPANDED, false);
};
c3_chart_internal_fn.generateDrawBar = function (barIndices, isSub) {
    var $$ = this,
        config = $$.config,
        getPoints = $$.generateGetBarPoints(barIndices, isSub);
    return function (d, i) {
        // 4 points that make a bar
        var points = getPoints(d, i);

        // switch points if axis is rotated, not applicable for sub chart
        var indexX = config.axis_rotated ? 1 : 0;
        var indexY = config.axis_rotated ? 0 : 1;

        var path = 'M ' + points[0][indexX] + ',' + points[0][indexY] + ' ' + 'L' + points[1][indexX] + ',' + points[1][indexY] + ' ' + 'L' + points[2][indexX] + ',' + points[2][indexY] + ' ' + 'L' + points[3][indexX] + ',' + points[3][indexY] + ' ' + 'z';

        return path;
    };
};
c3_chart_internal_fn.generateGetBarPoints = function (barIndices, isSub) {
    var $$ = this,
        axis = isSub ? $$.subXAxis : $$.xAxis,
        barTargetsNum = barIndices.__max__ + 1,
        barW = $$.getBarW(axis, barTargetsNum),
        barX = $$.getShapeX(barW, barTargetsNum, barIndices, !!isSub),
        barY = $$.getShapeY(!!isSub),
        barOffset = $$.getShapeOffset($$.isBarType, barIndices, !!isSub),
        yScale = isSub ? $$.getSubYScale : $$.getYScale;
    return function (d, i) {
        var y0 = yScale.call($$, d.id)(0),
            offset = barOffset(d, i) || y0,
            // offset is for stacked bar chart
        posX = barX(d),
            posY = barY(d);
        // fix posY not to overflow opposite quadrant
        if ($$.config.axis_rotated) {
            if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                posY = y0;
            }
        }
        // 4 points that make a bar
        return [[posX, offset], [posX, posY - (y0 - offset)], [posX + barW, posY - (y0 - offset)], [posX + barW, offset]];
    };
};
c3_chart_internal_fn.isWithinBar = function (that) {
    var mouse = this.d3.mouse(that),
        box = that.getBoundingClientRect(),
        seg0 = that.pathSegList.getItem(0),
        seg1 = that.pathSegList.getItem(1),
        x = Math.min(seg0.x, seg1.x),
        y = Math.min(seg0.y, seg1.y),
        w = box.width,
        h = box.height,
        offset = 2,
        sx = x - offset,
        ex = x + w + offset,
        sy = y + h + offset,
        ey = y - offset;
    return sx < mouse[0] && mouse[0] < ex && ey < mouse[1] && mouse[1] < sy;
};

c3_chart_internal_fn.getShapeIndices = function (typeFilter) {
    var $$ = this,
        config = $$.config,
        indices = {},
        i = 0,
        j,
        k;
    $$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$)).forEach(function (d) {
        for (j = 0; j < config.data_groups.length; j++) {
            if (config.data_groups[j].indexOf(d.id) < 0) {
                continue;
            }
            for (k = 0; k < config.data_groups[j].length; k++) {
                if (config.data_groups[j][k] in indices) {
                    indices[d.id] = indices[config.data_groups[j][k]];
                    break;
                }
            }
        }
        if (isUndefined(indices[d.id])) {
            indices[d.id] = i++;
        }
    });
    indices.__max__ = i - 1;
    return indices;
};
c3_chart_internal_fn.getShapeX = function (offset, targetsNum, indices, isSub) {
    var $$ = this,
        scale = isSub ? $$.subX : $$.x;
    return function (d) {
        var index = d.id in indices ? indices[d.id] : 0;
        return d.x || d.x === 0 ? scale(d.x) - offset * (targetsNum / 2 - index) : 0;
    };
};
c3_chart_internal_fn.getShapeY = function (isSub) {
    var $$ = this;
    return function (d) {
        var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id);
        return scale(d.value);
    };
};
c3_chart_internal_fn.getShapeOffset = function (typeFilter, indices, isSub) {
    var $$ = this,
        targets = $$.orderTargets($$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$))),
        targetIds = targets.map(function (t) {
        return t.id;
    });
    return function (d, i) {
        var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id),
            y0 = scale(0),
            offset = y0;
        targets.forEach(function (t) {
            var values = $$.isStepType(d) ? $$.convertValuesToStep(t.values) : t.values;
            if (t.id === d.id || indices[t.id] !== indices[d.id]) {
                return;
            }
            if (targetIds.indexOf(t.id) < targetIds.indexOf(d.id)) {
                // check if the x values line up
                if (typeof values[i] === 'undefined' || +values[i].x !== +d.x) {
                    // "+" for timeseries
                    // if not, try to find the value that does line up
                    i = -1;
                    values.forEach(function (v, j) {
                        if (v.x === d.x) {
                            i = j;
                        }
                    });
                }
                if (i in values && values[i].value * d.value >= 0) {
                    offset += scale(values[i].value) - y0;
                }
            }
        });
        return offset;
    };
};
c3_chart_internal_fn.isWithinShape = function (that, d) {
    var $$ = this,
        shape = $$.d3.select(that),
        isWithin;
    if (!$$.isTargetToShow(d.id)) {
        isWithin = false;
    } else if (that.nodeName === 'circle') {
        isWithin = $$.isStepType(d) ? $$.isWithinStep(that, $$.getYScale(d.id)(d.value)) : $$.isWithinCircle(that, $$.pointSelectR(d) * 1.5);
    } else if (that.nodeName === 'path') {
        isWithin = shape.classed(CLASS.bar) ? $$.isWithinBar(that) : true;
    }
    return isWithin;
};

c3_chart_internal_fn.getInterpolate = function (d) {
    var $$ = this,
        interpolation = $$.isInterpolationType($$.config.spline_interpolation_type) ? $$.config.spline_interpolation_type : 'cardinal';
    return $$.isSplineType(d) ? interpolation : $$.isStepType(d) ? $$.config.line_step_type : "linear";
};

c3_chart_internal_fn.initLine = function () {
    var $$ = this;
    $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartLines);
};
c3_chart_internal_fn.updateTargetsForLine = function (targets) {
    var $$ = this,
        config = $$.config,
        mainLineUpdate,
        mainLineEnter,
        classChartLine = $$.classChartLine.bind($$),
        classLines = $$.classLines.bind($$),
        classAreas = $$.classAreas.bind($$),
        classCircles = $$.classCircles.bind($$),
        classFocus = $$.classFocus.bind($$);
    mainLineUpdate = $$.main.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine).data(targets).attr('class', function (d) {
        return classChartLine(d) + classFocus(d);
    });
    mainLineEnter = mainLineUpdate.enter().append('g').attr('class', classChartLine).style('opacity', 0).style("pointer-events", "none");
    // Lines for each data
    mainLineEnter.append('g').attr("class", classLines);
    // Areas
    mainLineEnter.append('g').attr('class', classAreas);
    // Circles for each data point on lines
    mainLineEnter.append('g').attr("class", function (d) {
        return $$.generateClass(CLASS.selectedCircles, d.id);
    });
    mainLineEnter.append('g').attr("class", classCircles).style("cursor", function (d) {
        return config.data_selection_isselectable(d) ? "pointer" : null;
    });
    // Update date for selected circles
    targets.forEach(function (t) {
        $$.main.selectAll('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(t.id)).selectAll('.' + CLASS.selectedCircle).each(function (d) {
            d.value = t.values[d.index].value;
        });
    });
    // MEMO: can not keep same color...
    //mainLineUpdate.exit().remove();
};
c3_chart_internal_fn.updateLine = function (durationForExit) {
    var $$ = this;
    $$.mainLine = $$.main.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line).data($$.lineData.bind($$));
    $$.mainLine.enter().append('path').attr('class', $$.classLine.bind($$)).style("stroke", $$.color);
    $$.mainLine.style("opacity", $$.initialOpacity.bind($$)).style('shape-rendering', function (d) {
        return $$.isStepType(d) ? 'crispEdges' : '';
    }).attr('transform', null);
    $$.mainLine.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawLine = function (drawLine, withTransition) {
    return [(withTransition ? this.mainLine.transition(Math.random().toString()) : this.mainLine).attr("d", drawLine).style("stroke", this.color).style("opacity", 1)];
};
c3_chart_internal_fn.generateDrawLine = function (lineIndices, isSub) {
    var $$ = this,
        config = $$.config,
        line = $$.d3.svg.line(),
        getPoints = $$.generateGetLinePoints(lineIndices, isSub),
        yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,
        xValue = function xValue(d) {
        return (isSub ? $$.subxx : $$.xx).call($$, d);
    },
        yValue = function yValue(d, i) {
        return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)(d.value);
    };

    line = config.axis_rotated ? line.x(yValue).y(xValue) : line.x(xValue).y(yValue);
    if (!config.line_connectNull) {
        line = line.defined(function (d) {
            return d.value != null;
        });
    }
    return function (d) {
        var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,
            x = isSub ? $$.x : $$.subX,
            y = yScaleGetter.call($$, d.id),
            x0 = 0,
            y0 = 0,
            path;
        if ($$.isLineType(d)) {
            if (config.data_regions[d.id]) {
                path = $$.lineWithRegions(values, x, y, config.data_regions[d.id]);
            } else {
                if ($$.isStepType(d)) {
                    values = $$.convertValuesToStep(values);
                }
                path = line.interpolate($$.getInterpolate(d))(values);
            }
        } else {
            if (values[0]) {
                x0 = x(values[0].x);
                y0 = y(values[0].value);
            }
            path = config.axis_rotated ? "M " + y0 + " " + x0 : "M " + x0 + " " + y0;
        }
        return path ? path : "M 0 0";
    };
};
c3_chart_internal_fn.generateGetLinePoints = function (lineIndices, isSub) {
    // partial duplication of generateGetBarPoints
    var $$ = this,
        config = $$.config,
        lineTargetsNum = lineIndices.__max__ + 1,
        x = $$.getShapeX(0, lineTargetsNum, lineIndices, !!isSub),
        y = $$.getShapeY(!!isSub),
        lineOffset = $$.getShapeOffset($$.isLineType, lineIndices, !!isSub),
        yScale = isSub ? $$.getSubYScale : $$.getYScale;
    return function (d, i) {
        var y0 = yScale.call($$, d.id)(0),
            offset = lineOffset(d, i) || y0,
            // offset is for stacked area chart
        posX = x(d),
            posY = y(d);
        // fix posY not to overflow opposite quadrant
        if (config.axis_rotated) {
            if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                posY = y0;
            }
        }
        // 1 point that marks the line position
        return [[posX, posY - (y0 - offset)], [posX, posY - (y0 - offset)], // needed for compatibility
        [posX, posY - (y0 - offset)], // needed for compatibility
        [posX, posY - (y0 - offset)] // needed for compatibility
        ];
    };
};

c3_chart_internal_fn.lineWithRegions = function (d, x, y, _regions) {
    var $$ = this,
        config = $$.config,
        prev = -1,
        i,
        j,
        s = "M",
        sWithRegion,
        xp,
        yp,
        dx,
        dy,
        dd,
        diff,
        diffx2,
        xOffset = $$.isCategorized() ? 0.5 : 0,
        xValue,
        yValue,
        regions = [];

    function isWithinRegions(x, regions) {
        var i;
        for (i = 0; i < regions.length; i++) {
            if (regions[i].start < x && x <= regions[i].end) {
                return true;
            }
        }
        return false;
    }

    // Check start/end of regions
    if (isDefined(_regions)) {
        for (i = 0; i < _regions.length; i++) {
            regions[i] = {};
            if (isUndefined(_regions[i].start)) {
                regions[i].start = d[0].x;
            } else {
                regions[i].start = $$.isTimeSeries() ? $$.parseDate(_regions[i].start) : _regions[i].start;
            }
            if (isUndefined(_regions[i].end)) {
                regions[i].end = d[d.length - 1].x;
            } else {
                regions[i].end = $$.isTimeSeries() ? $$.parseDate(_regions[i].end) : _regions[i].end;
            }
        }
    }

    // Set scales
    xValue = config.axis_rotated ? function (d) {
        return y(d.value);
    } : function (d) {
        return x(d.x);
    };
    yValue = config.axis_rotated ? function (d) {
        return x(d.x);
    } : function (d) {
        return y(d.value);
    };

    // Define svg generator function for region
    function generateM(points) {
        return 'M' + points[0][0] + ' ' + points[0][1] + ' ' + points[1][0] + ' ' + points[1][1];
    }
    if ($$.isTimeSeries()) {
        sWithRegion = function sWithRegion(d0, d1, j, diff) {
            var x0 = d0.x.getTime(),
                x_diff = d1.x - d0.x,
                xv0 = new Date(x0 + x_diff * j),
                xv1 = new Date(x0 + x_diff * (j + diff)),
                points;
            if (config.axis_rotated) {
                points = [[y(yp(j)), x(xv0)], [y(yp(j + diff)), x(xv1)]];
            } else {
                points = [[x(xv0), y(yp(j))], [x(xv1), y(yp(j + diff))]];
            }
            return generateM(points);
        };
    } else {
        sWithRegion = function sWithRegion(d0, d1, j, diff) {
            var points;
            if (config.axis_rotated) {
                points = [[y(yp(j), true), x(xp(j))], [y(yp(j + diff), true), x(xp(j + diff))]];
            } else {
                points = [[x(xp(j), true), y(yp(j))], [x(xp(j + diff), true), y(yp(j + diff))]];
            }
            return generateM(points);
        };
    }

    // Generate
    for (i = 0; i < d.length; i++) {

        // Draw as normal
        if (isUndefined(regions) || !isWithinRegions(d[i].x, regions)) {
            s += " " + xValue(d[i]) + " " + yValue(d[i]);
        }
        // Draw with region // TODO: Fix for horizotal charts
        else {
                xp = $$.getScale(d[i - 1].x + xOffset, d[i].x + xOffset, $$.isTimeSeries());
                yp = $$.getScale(d[i - 1].value, d[i].value);

                dx = x(d[i].x) - x(d[i - 1].x);
                dy = y(d[i].value) - y(d[i - 1].value);
                dd = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
                diff = 2 / dd;
                diffx2 = diff * 2;

                for (j = diff; j <= 1; j += diffx2) {
                    s += sWithRegion(d[i - 1], d[i], j, diff);
                }
            }
        prev = d[i].x;
    }

    return s;
};

c3_chart_internal_fn.updateArea = function (durationForExit) {
    var $$ = this,
        d3 = $$.d3;
    $$.mainArea = $$.main.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area).data($$.lineData.bind($$));
    $$.mainArea.enter().append('path').attr("class", $$.classArea.bind($$)).style("fill", $$.color).style("opacity", function () {
        $$.orgAreaOpacity = +d3.select(this).style('opacity');return 0;
    });
    $$.mainArea.style("opacity", $$.orgAreaOpacity);
    $$.mainArea.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawArea = function (drawArea, withTransition) {
    return [(withTransition ? this.mainArea.transition(Math.random().toString()) : this.mainArea).attr("d", drawArea).style("fill", this.color).style("opacity", this.orgAreaOpacity)];
};
c3_chart_internal_fn.generateDrawArea = function (areaIndices, isSub) {
    var $$ = this,
        config = $$.config,
        area = $$.d3.svg.area(),
        getPoints = $$.generateGetAreaPoints(areaIndices, isSub),
        yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,
        xValue = function xValue(d) {
        return (isSub ? $$.subxx : $$.xx).call($$, d);
    },
        value0 = function value0(d, i) {
        return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)($$.getAreaBaseValue(d.id));
    },
        value1 = function value1(d, i) {
        return config.data_groups.length > 0 ? getPoints(d, i)[1][1] : yScaleGetter.call($$, d.id)(d.value);
    };

    area = config.axis_rotated ? area.x0(value0).x1(value1).y(xValue) : area.x(xValue).y0(config.area_above ? 0 : value0).y1(value1);
    if (!config.line_connectNull) {
        area = area.defined(function (d) {
            return d.value !== null;
        });
    }

    return function (d) {
        var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,
            x0 = 0,
            y0 = 0,
            path;
        if ($$.isAreaType(d)) {
            if ($$.isStepType(d)) {
                values = $$.convertValuesToStep(values);
            }
            path = area.interpolate($$.getInterpolate(d))(values);
        } else {
            if (values[0]) {
                x0 = $$.x(values[0].x);
                y0 = $$.getYScale(d.id)(values[0].value);
            }
            path = config.axis_rotated ? "M " + y0 + " " + x0 : "M " + x0 + " " + y0;
        }
        return path ? path : "M 0 0";
    };
};
c3_chart_internal_fn.getAreaBaseValue = function () {
    return 0;
};
c3_chart_internal_fn.generateGetAreaPoints = function (areaIndices, isSub) {
    // partial duplication of generateGetBarPoints
    var $$ = this,
        config = $$.config,
        areaTargetsNum = areaIndices.__max__ + 1,
        x = $$.getShapeX(0, areaTargetsNum, areaIndices, !!isSub),
        y = $$.getShapeY(!!isSub),
        areaOffset = $$.getShapeOffset($$.isAreaType, areaIndices, !!isSub),
        yScale = isSub ? $$.getSubYScale : $$.getYScale;
    return function (d, i) {
        var y0 = yScale.call($$, d.id)(0),
            offset = areaOffset(d, i) || y0,
            // offset is for stacked area chart
        posX = x(d),
            posY = y(d);
        // fix posY not to overflow opposite quadrant
        if (config.axis_rotated) {
            if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                posY = y0;
            }
        }
        // 1 point that marks the area position
        return [[posX, offset], [posX, posY - (y0 - offset)], [posX, posY - (y0 - offset)], // needed for compatibility
        [posX, offset] // needed for compatibility
        ];
    };
};

c3_chart_internal_fn.updateCircle = function () {
    var $$ = this;
    $$.mainCircle = $$.main.selectAll('.' + CLASS.circles).selectAll('.' + CLASS.circle).data($$.lineOrScatterData.bind($$));
    $$.mainCircle.enter().append("circle").attr("class", $$.classCircle.bind($$)).attr("r", $$.pointR.bind($$)).style("fill", $$.color);
    $$.mainCircle.style("opacity", $$.initialOpacityForCircle.bind($$));
    $$.mainCircle.exit().remove();
};
c3_chart_internal_fn.redrawCircle = function (cx, cy, withTransition) {
    var selectedCircles = this.main.selectAll('.' + CLASS.selectedCircle);
    return [(withTransition ? this.mainCircle.transition(Math.random().toString()) : this.mainCircle).style('opacity', this.opacityForCircle.bind(this)).style("fill", this.color).attr("cx", cx).attr("cy", cy), (withTransition ? selectedCircles.transition(Math.random().toString()) : selectedCircles).attr("cx", cx).attr("cy", cy)];
};
c3_chart_internal_fn.circleX = function (d) {
    return d.x || d.x === 0 ? this.x(d.x) : null;
};
c3_chart_internal_fn.updateCircleY = function () {
    var $$ = this,
        lineIndices,
        getPoints;
    if ($$.config.data_groups.length > 0) {
        lineIndices = $$.getShapeIndices($$.isLineType), getPoints = $$.generateGetLinePoints(lineIndices);
        $$.circleY = function (d, i) {
            return getPoints(d, i)[0][1];
        };
    } else {
        $$.circleY = function (d) {
            return $$.getYScale(d.id)(d.value);
        };
    }
};
c3_chart_internal_fn.getCircles = function (i, id) {
    var $$ = this;
    return (id ? $$.main.selectAll('.' + CLASS.circles + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.circle + (isValue(i) ? '-' + i : ''));
};
c3_chart_internal_fn.expandCircles = function (i, id, reset) {
    var $$ = this,
        r = $$.pointExpandedR.bind($$);
    if (reset) {
        $$.unexpandCircles();
    }
    $$.getCircles(i, id).classed(CLASS.EXPANDED, true).attr('r', r);
};
c3_chart_internal_fn.unexpandCircles = function (i) {
    var $$ = this,
        r = $$.pointR.bind($$);
    $$.getCircles(i).filter(function () {
        return $$.d3.select(this).classed(CLASS.EXPANDED);
    }).classed(CLASS.EXPANDED, false).attr('r', r);
};
c3_chart_internal_fn.pointR = function (d) {
    var $$ = this,
        config = $$.config;
    return $$.isStepType(d) ? 0 : isFunction(config.point_r) ? config.point_r(d) : config.point_r;
};
c3_chart_internal_fn.pointExpandedR = function (d) {
    var $$ = this,
        config = $$.config;
    return config.point_focus_expand_enabled ? config.point_focus_expand_r ? config.point_focus_expand_r : $$.pointR(d) * 1.75 : $$.pointR(d);
};
c3_chart_internal_fn.pointSelectR = function (d) {
    var $$ = this,
        config = $$.config;
    return isFunction(config.point_select_r) ? config.point_select_r(d) : config.point_select_r ? config.point_select_r : $$.pointR(d) * 4;
};
c3_chart_internal_fn.isWithinCircle = function (that, r) {
    var d3 = this.d3,
        mouse = d3.mouse(that),
        d3_this = d3.select(that),
        cx = +d3_this.attr("cx"),
        cy = +d3_this.attr("cy");
    return Math.sqrt(Math.pow(cx - mouse[0], 2) + Math.pow(cy - mouse[1], 2)) < r;
};
c3_chart_internal_fn.isWithinStep = function (that, y) {
    return Math.abs(y - this.d3.mouse(that)[1]) < 30;
};

c3_chart_internal_fn.getCurrentWidth = function () {
    var $$ = this,
        config = $$.config;
    return config.size_width ? config.size_width : $$.getParentWidth();
};
c3_chart_internal_fn.getCurrentHeight = function () {
    var $$ = this,
        config = $$.config,
        h = config.size_height ? config.size_height : $$.getParentHeight();
    return h > 0 ? h : 320 / ($$.hasType('gauge') && !config.gauge_fullCircle ? 2 : 1);
};
c3_chart_internal_fn.getCurrentPaddingTop = function () {
    var $$ = this,
        config = $$.config,
        padding = isValue(config.padding_top) ? config.padding_top : 0;
    if ($$.title && $$.title.node()) {
        padding += $$.getTitlePadding();
    }
    return padding;
};
c3_chart_internal_fn.getCurrentPaddingBottom = function () {
    var config = this.config;
    return isValue(config.padding_bottom) ? config.padding_bottom : 0;
};
c3_chart_internal_fn.getCurrentPaddingLeft = function (withoutRecompute) {
    var $$ = this,
        config = $$.config;
    if (isValue(config.padding_left)) {
        return config.padding_left;
    } else if (config.axis_rotated) {
        return !config.axis_x_show ? 1 : Math.max(ceil10($$.getAxisWidthByAxisId('x', withoutRecompute)), 40);
    } else if (!config.axis_y_show || config.axis_y_inner) {
        // && !config.axis_rotated
        return $$.axis.getYAxisLabelPosition().isOuter ? 30 : 1;
    } else {
        return ceil10($$.getAxisWidthByAxisId('y', withoutRecompute));
    }
};
c3_chart_internal_fn.getCurrentPaddingRight = function () {
    var $$ = this,
        config = $$.config,
        defaultPadding = 10,
        legendWidthOnRight = $$.isLegendRight ? $$.getLegendWidth() + 20 : 0;
    if (isValue(config.padding_right)) {
        return config.padding_right + 1; // 1 is needed not to hide tick line
    } else if (config.axis_rotated) {
        return defaultPadding + legendWidthOnRight;
    } else if (!config.axis_y2_show || config.axis_y2_inner) {
        // && !config.axis_rotated
        return 2 + legendWidthOnRight + ($$.axis.getY2AxisLabelPosition().isOuter ? 20 : 0);
    } else {
        return ceil10($$.getAxisWidthByAxisId('y2')) + legendWidthOnRight;
    }
};

c3_chart_internal_fn.getParentRectValue = function (key) {
    var parent = this.selectChart.node(),
        v;
    while (parent && parent.tagName !== 'BODY') {
        try {
            v = parent.getBoundingClientRect()[key];
        } catch (e) {
            if (key === 'width') {
                // In IE in certain cases getBoundingClientRect
                // will cause an "unspecified error"
                v = parent.offsetWidth;
            }
        }
        if (v) {
            break;
        }
        parent = parent.parentNode;
    }
    return v;
};
c3_chart_internal_fn.getParentWidth = function () {
    return this.getParentRectValue('width');
};
c3_chart_internal_fn.getParentHeight = function () {
    var h = this.selectChart.style('height');
    return h.indexOf('px') > 0 ? +h.replace('px', '') : 0;
};

c3_chart_internal_fn.getSvgLeft = function (withoutRecompute) {
    var $$ = this,
        config = $$.config,
        hasLeftAxisRect = config.axis_rotated || !config.axis_rotated && !config.axis_y_inner,
        leftAxisClass = config.axis_rotated ? CLASS.axisX : CLASS.axisY,
        leftAxis = $$.main.select('.' + leftAxisClass).node(),
        svgRect = leftAxis && hasLeftAxisRect ? leftAxis.getBoundingClientRect() : { right: 0 },
        chartRect = $$.selectChart.node().getBoundingClientRect(),
        hasArc = $$.hasArcType(),
        svgLeft = svgRect.right - chartRect.left - (hasArc ? 0 : $$.getCurrentPaddingLeft(withoutRecompute));
    return svgLeft > 0 ? svgLeft : 0;
};

c3_chart_internal_fn.getAxisWidthByAxisId = function (id, withoutRecompute) {
    var $$ = this,
        position = $$.axis.getLabelPositionById(id);
    return $$.axis.getMaxTickWidth(id, withoutRecompute) + (position.isInner ? 20 : 40);
};
c3_chart_internal_fn.getHorizontalAxisHeight = function (axisId) {
    var $$ = this,
        config = $$.config,
        h = 30;
    if (axisId === 'x' && !config.axis_x_show) {
        return 8;
    }
    if (axisId === 'x' && config.axis_x_height) {
        return config.axis_x_height;
    }
    if (axisId === 'y' && !config.axis_y_show) {
        return config.legend_show && !$$.isLegendRight && !$$.isLegendInset ? 10 : 1;
    }
    if (axisId === 'y2' && !config.axis_y2_show) {
        return $$.rotated_padding_top;
    }
    // Calculate x axis height when tick rotated
    if (axisId === 'x' && !config.axis_rotated && config.axis_x_tick_rotate) {
        h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_x_tick_rotate) / 180);
    }
    // Calculate y axis height when tick rotated
    if (axisId === 'y' && config.axis_rotated && config.axis_y_tick_rotate) {
        h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_y_tick_rotate) / 180);
    }
    return h + ($$.axis.getLabelPositionById(axisId).isInner ? 0 : 10) + (axisId === 'y2' ? -10 : 0);
};

c3_chart_internal_fn.getEventRectWidth = function () {
    return Math.max(0, this.xAxis.tickInterval());
};

c3_chart_internal_fn.initBrush = function () {
    var $$ = this,
        d3 = $$.d3;
    $$.brush = d3.svg.brush().on("brush", function () {
        $$.redrawForBrush();
    });
    $$.brush.update = function () {
        if ($$.context) {
            $$.context.select('.' + CLASS.brush).call(this);
        }
        return this;
    };
    $$.brush.scale = function (scale) {
        return $$.config.axis_rotated ? this.y(scale) : this.x(scale);
    };
};
c3_chart_internal_fn.initSubchart = function () {
    var $$ = this,
        config = $$.config,
        context = $$.context = $$.svg.append("g").attr("transform", $$.getTranslate('context')),
        visibility = config.subchart_show ? 'visible' : 'hidden';

    context.style('visibility', visibility);

    // Define g for chart area
    context.append('g').attr("clip-path", $$.clipPathForSubchart).attr('class', CLASS.chart);

    // Define g for bar chart area
    context.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartBars);

    // Define g for line chart area
    context.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartLines);

    // Add extent rect for Brush
    context.append("g").attr("clip-path", $$.clipPath).attr("class", CLASS.brush).call($$.brush);

    // ATTENTION: This must be called AFTER chart added
    // Add Axis
    $$.axes.subx = context.append("g").attr("class", CLASS.axisX).attr("transform", $$.getTranslate('subx')).attr("clip-path", config.axis_rotated ? "" : $$.clipPathForXAxis).style("visibility", config.subchart_axis_x_show ? visibility : 'hidden');
};
c3_chart_internal_fn.updateTargetsForSubchart = function (targets) {
    var $$ = this,
        context = $$.context,
        config = $$.config,
        contextLineEnter,
        contextLineUpdate,
        contextBarEnter,
        contextBarUpdate,
        classChartBar = $$.classChartBar.bind($$),
        classBars = $$.classBars.bind($$),
        classChartLine = $$.classChartLine.bind($$),
        classLines = $$.classLines.bind($$),
        classAreas = $$.classAreas.bind($$);

    if (config.subchart_show) {
        //-- Bar --//
        contextBarUpdate = context.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar).data(targets).attr('class', classChartBar);
        contextBarEnter = contextBarUpdate.enter().append('g').style('opacity', 0).attr('class', classChartBar);
        // Bars for each data
        contextBarEnter.append('g').attr("class", classBars);

        //-- Line --//
        contextLineUpdate = context.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine).data(targets).attr('class', classChartLine);
        contextLineEnter = contextLineUpdate.enter().append('g').style('opacity', 0).attr('class', classChartLine);
        // Lines for each data
        contextLineEnter.append("g").attr("class", classLines);
        // Area
        contextLineEnter.append("g").attr("class", classAreas);

        //-- Brush --//
        context.selectAll('.' + CLASS.brush + ' rect').attr(config.axis_rotated ? "width" : "height", config.axis_rotated ? $$.width2 : $$.height2);
    }
};
c3_chart_internal_fn.updateBarForSubchart = function (durationForExit) {
    var $$ = this;
    $$.contextBar = $$.context.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar).data($$.barData.bind($$));
    $$.contextBar.enter().append('path').attr("class", $$.classBar.bind($$)).style("stroke", 'none').style("fill", $$.color);
    $$.contextBar.style("opacity", $$.initialOpacity.bind($$));
    $$.contextBar.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawBarForSubchart = function (drawBarOnSub, withTransition, duration) {
    (withTransition ? this.contextBar.transition(Math.random().toString()).duration(duration) : this.contextBar).attr('d', drawBarOnSub).style('opacity', 1);
};
c3_chart_internal_fn.updateLineForSubchart = function (durationForExit) {
    var $$ = this;
    $$.contextLine = $$.context.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line).data($$.lineData.bind($$));
    $$.contextLine.enter().append('path').attr('class', $$.classLine.bind($$)).style('stroke', $$.color);
    $$.contextLine.style("opacity", $$.initialOpacity.bind($$));
    $$.contextLine.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawLineForSubchart = function (drawLineOnSub, withTransition, duration) {
    (withTransition ? this.contextLine.transition(Math.random().toString()).duration(duration) : this.contextLine).attr("d", drawLineOnSub).style('opacity', 1);
};
c3_chart_internal_fn.updateAreaForSubchart = function (durationForExit) {
    var $$ = this,
        d3 = $$.d3;
    $$.contextArea = $$.context.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area).data($$.lineData.bind($$));
    $$.contextArea.enter().append('path').attr("class", $$.classArea.bind($$)).style("fill", $$.color).style("opacity", function () {
        $$.orgAreaOpacity = +d3.select(this).style('opacity');return 0;
    });
    $$.contextArea.style("opacity", 0);
    $$.contextArea.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawAreaForSubchart = function (drawAreaOnSub, withTransition, duration) {
    (withTransition ? this.contextArea.transition(Math.random().toString()).duration(duration) : this.contextArea).attr("d", drawAreaOnSub).style("fill", this.color).style("opacity", this.orgAreaOpacity);
};
c3_chart_internal_fn.redrawSubchart = function (withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        drawAreaOnSub,
        drawBarOnSub,
        drawLineOnSub;

    $$.context.style('visibility', config.subchart_show ? 'visible' : 'hidden');

    // subchart
    if (config.subchart_show) {
        // reflect main chart to extent on subchart if zoomed
        if (d3.event && d3.event.type === 'zoom') {
            $$.brush.extent($$.x.orgDomain()).update();
        }
        // update subchart elements if needed
        if (withSubchart) {

            // extent rect
            if (!$$.brush.empty()) {
                $$.brush.extent($$.x.orgDomain()).update();
            }
            // setup drawer - MEMO: this must be called after axis updated
            drawAreaOnSub = $$.generateDrawArea(areaIndices, true);
            drawBarOnSub = $$.generateDrawBar(barIndices, true);
            drawLineOnSub = $$.generateDrawLine(lineIndices, true);

            $$.updateBarForSubchart(duration);
            $$.updateLineForSubchart(duration);
            $$.updateAreaForSubchart(duration);

            $$.redrawBarForSubchart(drawBarOnSub, duration, duration);
            $$.redrawLineForSubchart(drawLineOnSub, duration, duration);
            $$.redrawAreaForSubchart(drawAreaOnSub, duration, duration);
        }
    }
};
c3_chart_internal_fn.redrawForBrush = function () {
    var $$ = this,
        x = $$.x;
    $$.redraw({
        withTransition: false,
        withY: $$.config.zoom_rescale,
        withSubchart: false,
        withUpdateXDomain: true,
        withDimension: false
    });
    $$.config.subchart_onbrush.call($$.api, x.orgDomain());
};
c3_chart_internal_fn.transformContext = function (withTransition, transitions) {
    var $$ = this,
        subXAxis;
    if (transitions && transitions.axisSubX) {
        subXAxis = transitions.axisSubX;
    } else {
        subXAxis = $$.context.select('.' + CLASS.axisX);
        if (withTransition) {
            subXAxis = subXAxis.transition();
        }
    }
    $$.context.attr("transform", $$.getTranslate('context'));
    subXAxis.attr("transform", $$.getTranslate('subx'));
};
c3_chart_internal_fn.getDefaultExtent = function () {
    var $$ = this,
        config = $$.config,
        extent = isFunction(config.axis_x_extent) ? config.axis_x_extent($$.getXDomain($$.data.targets)) : config.axis_x_extent;
    if ($$.isTimeSeries()) {
        extent = [$$.parseDate(extent[0]), $$.parseDate(extent[1])];
    }
    return extent;
};

c3_chart_internal_fn.initText = function () {
    var $$ = this;
    $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartTexts);
    $$.mainText = $$.d3.selectAll([]);
};
c3_chart_internal_fn.updateTargetsForText = function (targets) {
    var $$ = this,
        mainTextUpdate,
        mainTextEnter,
        classChartText = $$.classChartText.bind($$),
        classTexts = $$.classTexts.bind($$),
        classFocus = $$.classFocus.bind($$);
    mainTextUpdate = $$.main.select('.' + CLASS.chartTexts).selectAll('.' + CLASS.chartText).data(targets).attr('class', function (d) {
        return classChartText(d) + classFocus(d);
    });
    mainTextEnter = mainTextUpdate.enter().append('g').attr('class', classChartText).style('opacity', 0).style("pointer-events", "none");
    mainTextEnter.append('g').attr('class', classTexts);
};
c3_chart_internal_fn.updateText = function (durationForExit) {
    var $$ = this,
        config = $$.config,
        barOrLineData = $$.barOrLineData.bind($$),
        classText = $$.classText.bind($$);
    $$.mainText = $$.main.selectAll('.' + CLASS.texts).selectAll('.' + CLASS.text).data(barOrLineData);
    $$.mainText.enter().append('text').attr("class", classText).attr('text-anchor', function (d) {
        return config.axis_rotated ? d.value < 0 ? 'end' : 'start' : 'middle';
    }).style("stroke", 'none').style("fill", function (d) {
        return $$.color(d);
    }).style("fill-opacity", 0);
    $$.mainText.text(function (d, i, j) {
        return $$.dataLabelFormat(d.id)(d.value, d.id, i, j);
    });
    $$.mainText.exit().transition().duration(durationForExit).style('fill-opacity', 0).remove();
};
c3_chart_internal_fn.redrawText = function (xForText, yForText, forFlow, withTransition) {
    return [(withTransition ? this.mainText.transition() : this.mainText).attr('x', xForText).attr('y', yForText).style("fill", this.color).style("fill-opacity", forFlow ? 0 : this.opacityForText.bind(this))];
};
c3_chart_internal_fn.getTextRect = function (text, cls, element) {
    var dummy = this.d3.select('body').append('div').classed('c3', true),
        svg = dummy.append("svg").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),
        font = this.d3.select(element).style('font'),
        rect;
    svg.selectAll('.dummy').data([text]).enter().append('text').classed(cls ? cls : "", true).style('font', font).text(text).each(function () {
        rect = this.getBoundingClientRect();
    });
    dummy.remove();
    return rect;
};
c3_chart_internal_fn.generateXYForText = function (areaIndices, barIndices, lineIndices, forX) {
    var $$ = this,
        getAreaPoints = $$.generateGetAreaPoints(areaIndices, false),
        getBarPoints = $$.generateGetBarPoints(barIndices, false),
        getLinePoints = $$.generateGetLinePoints(lineIndices, false),
        getter = forX ? $$.getXForText : $$.getYForText;
    return function (d, i) {
        var getPoints = $$.isAreaType(d) ? getAreaPoints : $$.isBarType(d) ? getBarPoints : getLinePoints;
        return getter.call($$, getPoints(d, i), d, this);
    };
};
c3_chart_internal_fn.getXForText = function (points, d, textElement) {
    var $$ = this,
        box = textElement.getBoundingClientRect(),
        xPos,
        padding;
    if ($$.config.axis_rotated) {
        padding = $$.isBarType(d) ? 4 : 6;
        xPos = points[2][1] + padding * (d.value < 0 ? -1 : 1);
    } else {
        xPos = $$.hasType('bar') ? (points[2][0] + points[0][0]) / 2 : points[0][0];
    }
    // show labels regardless of the domain if value is null
    if (d.value === null) {
        if (xPos > $$.width) {
            xPos = $$.width - box.width;
        } else if (xPos < 0) {
            xPos = 4;
        }
    }
    return xPos;
};
c3_chart_internal_fn.getYForText = function (points, d, textElement) {
    var $$ = this,
        box = textElement.getBoundingClientRect(),
        yPos;
    if ($$.config.axis_rotated) {
        yPos = (points[0][0] + points[2][0] + box.height * 0.6) / 2;
    } else {
        yPos = points[2][1];
        if (d.value < 0 || d.value === 0 && !$$.hasPositiveValue) {
            yPos += box.height;
            if ($$.isBarType(d) && $$.isSafari()) {
                yPos -= 3;
            } else if (!$$.isBarType(d) && $$.isChrome()) {
                yPos += 3;
            }
        } else {
            yPos += $$.isBarType(d) ? -3 : -6;
        }
    }
    // show labels regardless of the domain if value is null
    if (d.value === null && !$$.config.axis_rotated) {
        if (yPos < box.height) {
            yPos = box.height;
        } else if (yPos > this.height) {
            yPos = this.height - 4;
        }
    }
    return yPos;
};

c3_chart_internal_fn.initTitle = function () {
    var $$ = this;
    $$.title = $$.svg.append("text").text($$.config.title_text).attr("class", $$.CLASS.title);
};
c3_chart_internal_fn.redrawTitle = function () {
    var $$ = this;
    $$.title.attr("x", $$.xForTitle.bind($$)).attr("y", $$.yForTitle.bind($$));
};
c3_chart_internal_fn.xForTitle = function () {
    var $$ = this,
        config = $$.config,
        position = config.title_position || 'left',
        x;
    if (position.indexOf('right') >= 0) {
        x = $$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width - config.title_padding.right;
    } else if (position.indexOf('center') >= 0) {
        x = ($$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width) / 2;
    } else {
        // left
        x = config.title_padding.left;
    }
    return x;
};
c3_chart_internal_fn.yForTitle = function () {
    var $$ = this;
    return $$.config.title_padding.top + $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).height;
};
c3_chart_internal_fn.getTitlePadding = function () {
    var $$ = this;
    return $$.yForTitle() + $$.config.title_padding.bottom;
};

c3_chart_internal_fn.initTooltip = function () {
    var $$ = this,
        config = $$.config,
        i;
    $$.tooltip = $$.selectChart.style("position", "relative").append("div").attr('class', CLASS.tooltipContainer).style("position", "absolute").style("pointer-events", "none").style("display", "none");
    // Show tooltip if needed
    if (config.tooltip_init_show) {
        if ($$.isTimeSeries() && isString(config.tooltip_init_x)) {
            config.tooltip_init_x = $$.parseDate(config.tooltip_init_x);
            for (i = 0; i < $$.data.targets[0].values.length; i++) {
                if ($$.data.targets[0].values[i].x - config.tooltip_init_x === 0) {
                    break;
                }
            }
            config.tooltip_init_x = i;
        }
        $$.tooltip.html(config.tooltip_contents.call($$, $$.data.targets.map(function (d) {
            return $$.addName(d.values[config.tooltip_init_x]);
        }), $$.axis.getXAxisTickFormat(), $$.getYFormat($$.hasArcType()), $$.color));
        $$.tooltip.style("top", config.tooltip_init_position.top).style("left", config.tooltip_init_position.left).style("display", "block");
    }
};
c3_chart_internal_fn.getTooltipSortFunction = function () {
    var $$ = this,
        config = $$.config;

    if (config.data_groups.length === 0 || config.tooltip_order !== undefined) {
        // if data are not grouped or if an order is specified
        // for the tooltip values we sort them by their values

        var order = config.tooltip_order;
        if (order === undefined) {
            order = config.data_order;
        }

        var valueOf = function valueOf(obj) {
            return obj ? obj.value : null;
        };

        // if data are not grouped, we sort them by their value
        if (isString(order) && order.toLowerCase() === 'asc') {
            return function (a, b) {
                return valueOf(a) - valueOf(b);
            };
        } else if (isString(order) && order.toLowerCase() === 'desc') {
            return function (a, b) {
                return valueOf(b) - valueOf(a);
            };
        } else if (isFunction(order)) {

            // if the function is from data_order we need
            // to wrap the returned function in order to format
            // the sorted value to the expected format

            var sortFunction = order;

            if (config.tooltip_order === undefined) {
                sortFunction = function sortFunction(a, b) {
                    return order(a ? {
                        id: a.id,
                        values: [a]
                    } : null, b ? {
                        id: b.id,
                        values: [b]
                    } : null);
                };
            }

            return sortFunction;
        } else if (isArray(order)) {
            return function (a, b) {
                return order.indexOf(a.id) - order.indexOf(b.id);
            };
        }
    } else {
        // if data are grouped, we follow the order of grouped targets
        var ids = $$.orderTargets($$.data.targets).map(function (i) {
            return i.id;
        });

        // if it was either asc or desc we need to invert the order
        // returned by orderTargets
        if ($$.isOrderAsc() || $$.isOrderDesc()) {
            ids = ids.reverse();
        }

        return function (a, b) {
            return ids.indexOf(a.id) - ids.indexOf(b.id);
        };
    }
};
c3_chart_internal_fn.getTooltipContent = function (d, defaultTitleFormat, defaultValueFormat, color) {
    var $$ = this,
        config = $$.config,
        titleFormat = config.tooltip_format_title || defaultTitleFormat,
        nameFormat = config.tooltip_format_name || function (name) {
        return name;
    },
        valueFormat = config.tooltip_format_value || defaultValueFormat,
        text,
        i,
        title,
        value,
        name,
        bgcolor;

    var tooltipSortFunction = this.getTooltipSortFunction();
    if (tooltipSortFunction) {
        d.sort(tooltipSortFunction);
    }

    for (i = 0; i < d.length; i++) {
        if (!(d[i] && (d[i].value || d[i].value === 0))) {
            continue;
        }

        if (!text) {
            title = sanitise(titleFormat ? titleFormat(d[i].x) : d[i].x);
            text = "<table class='" + $$.CLASS.tooltip + "'>" + (title || title === 0 ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
        }

        value = sanitise(valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index, d));
        if (value !== undefined) {
            // Skip elements when their name is set to null
            if (d[i].name === null) {
                continue;
            }
            name = sanitise(nameFormat(d[i].name, d[i].ratio, d[i].id, d[i].index));
            bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);

            text += "<tr class='" + $$.CLASS.tooltipName + "-" + $$.getTargetSelectorSuffix(d[i].id) + "'>";
            text += "<td class='name'><span style='background-color:" + bgcolor + "'></span>" + name + "</td>";
            text += "<td class='value'>" + value + "</td>";
            text += "</tr>";
        }
    }
    return text + "</table>";
};
c3_chart_internal_fn.tooltipPosition = function (dataToShow, tWidth, tHeight, element) {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3;
    var svgLeft, tooltipLeft, tooltipRight, tooltipTop, chartRight;
    var forArc = $$.hasArcType(),
        mouse = d3.mouse(element);
    // Determin tooltip position
    if (forArc) {
        tooltipLeft = ($$.width - ($$.isLegendRight ? $$.getLegendWidth() : 0)) / 2 + mouse[0];
        tooltipTop = $$.height / 2 + mouse[1] + 20;
    } else {
        svgLeft = $$.getSvgLeft(true);
        if (config.axis_rotated) {
            tooltipLeft = svgLeft + mouse[0] + 100;
            tooltipRight = tooltipLeft + tWidth;
            chartRight = $$.currentWidth - $$.getCurrentPaddingRight();
            tooltipTop = $$.x(dataToShow[0].x) + 20;
        } else {
            tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;
            tooltipRight = tooltipLeft + tWidth;
            chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();
            tooltipTop = mouse[1] + 15;
        }

        if (tooltipRight > chartRight) {
            // 20 is needed for Firefox to keep tooltip width
            tooltipLeft -= tooltipRight - chartRight + 20;
        }
        if (tooltipTop + tHeight > $$.currentHeight) {
            tooltipTop -= tHeight + 30;
        }
    }
    if (tooltipTop < 0) {
        tooltipTop = 0;
    }
    return { top: tooltipTop, left: tooltipLeft };
};
c3_chart_internal_fn.showTooltip = function (selectedData, element) {
    var $$ = this,
        config = $$.config;
    var tWidth, tHeight, position;
    var forArc = $$.hasArcType(),
        dataToShow = selectedData.filter(function (d) {
        return d && isValue(d.value);
    }),
        positionFunction = config.tooltip_position || c3_chart_internal_fn.tooltipPosition;
    if (dataToShow.length === 0 || !config.tooltip_show) {
        return;
    }
    $$.tooltip.html(config.tooltip_contents.call($$, selectedData, $$.axis.getXAxisTickFormat(), $$.getYFormat(forArc), $$.color)).style("display", "block");

    // Get tooltip dimensions
    tWidth = $$.tooltip.property('offsetWidth');
    tHeight = $$.tooltip.property('offsetHeight');

    position = positionFunction.call(this, dataToShow, tWidth, tHeight, element);
    // Set tooltip
    $$.tooltip.style("top", position.top + "px").style("left", position.left + 'px');
};
c3_chart_internal_fn.hideTooltip = function () {
    this.tooltip.style("display", "none");
};

c3_chart_internal_fn.setTargetType = function (targetIds, type) {
    var $$ = this,
        config = $$.config;
    $$.mapToTargetIds(targetIds).forEach(function (id) {
        $$.withoutFadeIn[id] = type === config.data_types[id];
        config.data_types[id] = type;
    });
    if (!targetIds) {
        config.data_type = type;
    }
};
c3_chart_internal_fn.hasType = function (type, targets) {
    var $$ = this,
        types = $$.config.data_types,
        has = false;
    targets = targets || $$.data.targets;
    if (targets && targets.length) {
        targets.forEach(function (target) {
            var t = types[target.id];
            if (t && t.indexOf(type) >= 0 || !t && type === 'line') {
                has = true;
            }
        });
    } else if (Object.keys(types).length) {
        Object.keys(types).forEach(function (id) {
            if (types[id] === type) {
                has = true;
            }
        });
    } else {
        has = $$.config.data_type === type;
    }
    return has;
};
c3_chart_internal_fn.hasArcType = function (targets) {
    return this.hasType('pie', targets) || this.hasType('donut', targets) || this.hasType('gauge', targets);
};
c3_chart_internal_fn.isLineType = function (d) {
    var config = this.config,
        id = isString(d) ? d : d.id;
    return !config.data_types[id] || ['line', 'spline', 'area', 'area-spline', 'step', 'area-step'].indexOf(config.data_types[id]) >= 0;
};
c3_chart_internal_fn.isStepType = function (d) {
    var id = isString(d) ? d : d.id;
    return ['step', 'area-step'].indexOf(this.config.data_types[id]) >= 0;
};
c3_chart_internal_fn.isSplineType = function (d) {
    var id = isString(d) ? d : d.id;
    return ['spline', 'area-spline'].indexOf(this.config.data_types[id]) >= 0;
};
c3_chart_internal_fn.isAreaType = function (d) {
    var id = isString(d) ? d : d.id;
    return ['area', 'area-spline', 'area-step'].indexOf(this.config.data_types[id]) >= 0;
};
c3_chart_internal_fn.isBarType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'bar';
};
c3_chart_internal_fn.isScatterType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'scatter';
};
c3_chart_internal_fn.isPieType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'pie';
};
c3_chart_internal_fn.isGaugeType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'gauge';
};
c3_chart_internal_fn.isDonutType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'donut';
};
c3_chart_internal_fn.isArcType = function (d) {
    return this.isPieType(d) || this.isDonutType(d) || this.isGaugeType(d);
};
c3_chart_internal_fn.lineData = function (d) {
    return this.isLineType(d) ? [d] : [];
};
c3_chart_internal_fn.arcData = function (d) {
    return this.isArcType(d.data) ? [d] : [];
};
/* not used
 function scatterData(d) {
 return isScatterType(d) ? d.values : [];
 }
 */
c3_chart_internal_fn.barData = function (d) {
    return this.isBarType(d) ? d.values : [];
};
c3_chart_internal_fn.lineOrScatterData = function (d) {
    return this.isLineType(d) || this.isScatterType(d) ? d.values : [];
};
c3_chart_internal_fn.barOrLineData = function (d) {
    return this.isBarType(d) || this.isLineType(d) ? d.values : [];
};
c3_chart_internal_fn.isInterpolationType = function (type) {
    return ['linear', 'linear-closed', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'monotone'].indexOf(type) >= 0;
};

c3_chart_internal_fn.isSafari = function () {
    var ua = window.navigator.userAgent;
    return ua.indexOf('Safari') >= 0 && ua.indexOf('Chrome') < 0;
};
c3_chart_internal_fn.isChrome = function () {
    var ua = window.navigator.userAgent;
    return ua.indexOf('Chrome') >= 0;
};

c3_chart_internal_fn.initZoom = function () {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        startEvent;

    $$.zoom = d3.behavior.zoom().on("zoomstart", function () {
        startEvent = d3.event.sourceEvent;
        $$.zoom.altDomain = d3.event.sourceEvent.altKey ? $$.x.orgDomain() : null;
        config.zoom_onzoomstart.call($$.api, d3.event.sourceEvent);
    }).on("zoom", function () {
        $$.redrawForZoom.call($$);
    }).on('zoomend', function () {
        var event = d3.event.sourceEvent;
        // if click, do nothing. otherwise, click interaction will be canceled.
        if (event && startEvent.clientX === event.clientX && startEvent.clientY === event.clientY) {
            return;
        }
        $$.redrawEventRect();
        $$.updateZoom();
        config.zoom_onzoomend.call($$.api, $$.x.orgDomain());
    });
    $$.zoom.scale = function (scale) {
        return config.axis_rotated ? this.y(scale) : this.x(scale);
    };
    $$.zoom.orgScaleExtent = function () {
        var extent = config.zoom_extent ? config.zoom_extent : [1, 10];
        return [extent[0], Math.max($$.getMaxDataCount() / extent[1], extent[1])];
    };
    $$.zoom.updateScaleExtent = function () {
        var ratio = diffDomain($$.x.orgDomain()) / diffDomain($$.getZoomDomain()),
            extent = this.orgScaleExtent();
        this.scaleExtent([extent[0] * ratio, extent[1] * ratio]);
        return this;
    };
};
c3_chart_internal_fn.getZoomDomain = function () {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3,
        min = d3.min([$$.orgXDomain[0], config.zoom_x_min]),
        max = d3.max([$$.orgXDomain[1], config.zoom_x_max]);
    return [min, max];
};
c3_chart_internal_fn.updateZoom = function () {
    var $$ = this,
        z = $$.config.zoom_enabled ? $$.zoom : function () {};
    $$.main.select('.' + CLASS.zoomRect).call(z).on("dblclick.zoom", null);
    $$.main.selectAll('.' + CLASS.eventRect).call(z).on("dblclick.zoom", null);
};
c3_chart_internal_fn.redrawForZoom = function () {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        zoom = $$.zoom,
        x = $$.x;
    if (!config.zoom_enabled) {
        return;
    }
    if ($$.filterTargetsToShow($$.data.targets).length === 0) {
        return;
    }
    if (d3.event.sourceEvent.type === 'mousemove' && zoom.altDomain) {
        x.domain(zoom.altDomain);
        zoom.scale(x).updateScaleExtent();
        return;
    }
    if ($$.isCategorized() && x.orgDomain()[0] === $$.orgXDomain[0]) {
        x.domain([$$.orgXDomain[0] - 1e-10, x.orgDomain()[1]]);
    }
    $$.redraw({
        withTransition: false,
        withY: config.zoom_rescale,
        withSubchart: false,
        withEventRect: false,
        withDimension: false
    });
    if (d3.event.sourceEvent.type === 'mousemove') {
        $$.cancelClick = true;
    }
    config.zoom_onzoom.call($$.api, x.orgDomain());
};

return c3$1;

})));


/***/ }),

/***/ 8356:
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;
	var nativeCodeString = '[native code]';

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
					classes.push(arg.toString());
					continue;
				}

				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ 38146:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(92163);
var tryToString = __webpack_require__(40368);

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ 91592:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var has = (__webpack_require__(72106).has);

// Perform ? RequireInternalSlot(M, [[MapData]])
module.exports = function (it) {
  has(it);
  return it;
};


/***/ }),

/***/ 98514:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(23041);

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ 64465:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__(19130);
var toAbsoluteIndex = __webpack_require__(63828);
var lengthOfArrayLike = __webpack_require__(25474);

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ 74021:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ 47298:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(98216);
var isCallable = __webpack_require__(92163);
var classofRaw = __webpack_require__(74021);
var wellKnownSymbol = __webpack_require__(4259);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ 61401:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(21325);
var ownKeys = __webpack_require__(20810);
var getOwnPropertyDescriptorModule = __webpack_require__(99206);
var definePropertyModule = __webpack_require__(16572);

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ 27767:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(46372);
var definePropertyModule = __webpack_require__(16572);
var createPropertyDescriptor = __webpack_require__(48602);

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ 48602:
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ 14039:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(92163);
var definePropertyModule = __webpack_require__(16572);
var makeBuiltIn = __webpack_require__(85954);
var defineGlobalProperty = __webpack_require__(95861);

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};


/***/ }),

/***/ 95861:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(63406);

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ 46372:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(7931);

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ 45337:
/***/ ((module) => {

var documentAll = typeof document == 'object' && document.all;

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
var IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;

module.exports = {
  all: documentAll,
  IS_HTMLDDA: IS_HTMLDDA
};


/***/ }),

/***/ 94193:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(63406);
var isObject = __webpack_require__(23041);

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ 20283:
/***/ ((module) => {

module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';


/***/ }),

/***/ 55111:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(63406);
var userAgent = __webpack_require__(20283);

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ 46606:
/***/ ((module) => {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ 65942:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(63406);
var getOwnPropertyDescriptor = (__webpack_require__(99206).f);
var createNonEnumerableProperty = __webpack_require__(27767);
var defineBuiltIn = __webpack_require__(14039);
var defineGlobalProperty = __webpack_require__(95861);
var copyConstructorProperties = __webpack_require__(61401);
var isForced = __webpack_require__(21637);

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ 7931:
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ 98626:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(26832);
var aCallable = __webpack_require__(38146);
var NATIVE_BIND = __webpack_require__(62637);

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ 62637:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(7931);

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ 48624:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(62637);

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ 30233:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(46372);
var hasOwn = __webpack_require__(21325);

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ 26832:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classofRaw = __webpack_require__(74021);
var uncurryThis = __webpack_require__(73074);

module.exports = function (fn) {
  // Nashorn bug:
  //   https://github.com/zloirock/core-js/issues/1128
  //   https://github.com/zloirock/core-js/issues/1130
  if (classofRaw(fn) === 'Function') return uncurryThis(fn);
};


/***/ }),

/***/ 73074:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(62637);

var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);

module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ 39997:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(63406);
var isCallable = __webpack_require__(92163);

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ 50610:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(47298);
var getMethod = __webpack_require__(54462);
var isNullOrUndefined = __webpack_require__(57900);
var Iterators = __webpack_require__(16133);
var wellKnownSymbol = __webpack_require__(4259);

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};


/***/ }),

/***/ 11570:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(48624);
var aCallable = __webpack_require__(38146);
var anObject = __webpack_require__(98514);
var tryToString = __webpack_require__(40368);
var getIteratorMethod = __webpack_require__(50610);

var $TypeError = TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw $TypeError(tryToString(argument) + ' is not iterable');
};


/***/ }),

/***/ 54462:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__(38146);
var isNullOrUndefined = __webpack_require__(57900);

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};


/***/ }),

/***/ 63406:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ 21325:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);
var toObject = __webpack_require__(77410);

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ 43730:
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ 53202:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(46372);
var fails = __webpack_require__(7931);
var createElement = __webpack_require__(94193);

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ 52170:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);
var fails = __webpack_require__(7931);
var classof = __webpack_require__(74021);

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ 22089:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);
var isCallable = __webpack_require__(92163);
var store = __webpack_require__(12846);

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ 3987:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_WEAK_MAP = __webpack_require__(24617);
var global = __webpack_require__(63406);
var isObject = __webpack_require__(23041);
var createNonEnumerableProperty = __webpack_require__(27767);
var hasOwn = __webpack_require__(21325);
var shared = __webpack_require__(12846);
var sharedKey = __webpack_require__(1320);
var hiddenKeys = __webpack_require__(43730);

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function (it, metadata) {
    if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function (it) {
    return store.get(it) || {};
  };
  has = function (it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ 18335:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(4259);
var Iterators = __webpack_require__(16133);

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ 92163:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $documentAll = __webpack_require__(45337);

var documentAll = $documentAll.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = $documentAll.IS_HTMLDDA ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ 21637:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(7931);
var isCallable = __webpack_require__(92163);

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ 57900:
/***/ ((module) => {

// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};


/***/ }),

/***/ 23041:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(92163);
var $documentAll = __webpack_require__(45337);

var documentAll = $documentAll.all;

module.exports = $documentAll.IS_HTMLDDA ? function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;
} : function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ 2884:
/***/ ((module) => {

module.exports = false;


/***/ }),

/***/ 85666:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(39997);
var isCallable = __webpack_require__(92163);
var isPrototypeOf = __webpack_require__(3071);
var USE_SYMBOL_AS_UID = __webpack_require__(99525);

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ 10561:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(48624);

module.exports = function (iterator, fn, $next) {
  var next = $next || iterator.next;
  var step, result;
  while (!(step = call(next, iterator)).done) {
    result = fn(step.value);
    if (result !== undefined) return result;
  }
};


/***/ }),

/***/ 67523:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(98626);
var call = __webpack_require__(48624);
var anObject = __webpack_require__(98514);
var tryToString = __webpack_require__(40368);
var isArrayIteratorMethod = __webpack_require__(18335);
var lengthOfArrayLike = __webpack_require__(25474);
var isPrototypeOf = __webpack_require__(3071);
var getIterator = __webpack_require__(11570);
var getIteratorMethod = __webpack_require__(50610);
var iteratorClose = __webpack_require__(31652);

var $TypeError = TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_RECORD) {
    iterator = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw $TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = IS_RECORD ? iterable.next : iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};


/***/ }),

/***/ 31652:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(48624);
var anObject = __webpack_require__(98514);
var getMethod = __webpack_require__(54462);

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),

/***/ 16133:
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ 25474:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toLength = __webpack_require__(1403);

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ 85954:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);
var fails = __webpack_require__(7931);
var isCallable = __webpack_require__(92163);
var hasOwn = __webpack_require__(21325);
var DESCRIPTORS = __webpack_require__(46372);
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(30233).CONFIGURABLE);
var inspectSource = __webpack_require__(22089);
var InternalStateModule = __webpack_require__(3987);

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis(''.slice);
var replace = uncurryThis(''.replace);
var join = uncurryThis([].join);

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (stringSlice($String(name), 0, 7) === 'Symbol(') {
    name = '[' + replace($String(name), /^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ 72106:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);

// eslint-disable-next-line es/no-map -- safe
var MapPrototype = Map.prototype;

module.exports = {
  // eslint-disable-next-line es/no-map -- safe
  Map: Map,
  set: uncurryThis(MapPrototype.set),
  get: uncurryThis(MapPrototype.get),
  has: uncurryThis(MapPrototype.has),
  remove: uncurryThis(MapPrototype['delete']),
  proto: MapPrototype
};


/***/ }),

/***/ 91978:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);
var iterateSimple = __webpack_require__(10561);
var MapHelpers = __webpack_require__(72106);

var Map = MapHelpers.Map;
var MapPrototype = MapHelpers.proto;
var forEach = uncurryThis(MapPrototype.forEach);
var entries = uncurryThis(MapPrototype.entries);
var next = entries(new Map()).next;

module.exports = function (map, fn, interruptible) {
  return interruptible ? iterateSimple(entries(map), function (entry) {
    return fn(entry[1], entry[0]);
  }, next) : forEach(map, fn);
};


/***/ }),

/***/ 855:
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ 16572:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(46372);
var IE8_DOM_DEFINE = __webpack_require__(53202);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(58814);
var anObject = __webpack_require__(98514);
var toPropertyKey = __webpack_require__(41973);

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ 99206:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(46372);
var call = __webpack_require__(48624);
var propertyIsEnumerableModule = __webpack_require__(42251);
var createPropertyDescriptor = __webpack_require__(48602);
var toIndexedObject = __webpack_require__(19130);
var toPropertyKey = __webpack_require__(41973);
var hasOwn = __webpack_require__(21325);
var IE8_DOM_DEFINE = __webpack_require__(53202);

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ 83311:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(51429);
var enumBugKeys = __webpack_require__(46606);

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ 50395:
/***/ ((__unused_webpack_module, exports) => {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ 3071:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ 51429:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);
var hasOwn = __webpack_require__(21325);
var toIndexedObject = __webpack_require__(19130);
var indexOf = (__webpack_require__(64465).indexOf);
var hiddenKeys = __webpack_require__(43730);

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ 42251:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ 29207:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(48624);
var isCallable = __webpack_require__(92163);
var isObject = __webpack_require__(23041);

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ 20810:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(39997);
var uncurryThis = __webpack_require__(73074);
var getOwnPropertyNamesModule = __webpack_require__(83311);
var getOwnPropertySymbolsModule = __webpack_require__(50395);
var anObject = __webpack_require__(98514);

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ 65727:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isNullOrUndefined = __webpack_require__(57900);

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ 32209:
/***/ ((module) => {

// `SameValueZero` abstract operation
// https://tc39.es/ecma262/#sec-samevaluezero
module.exports = function (x, y) {
  // eslint-disable-next-line no-self-compare -- NaN check
  return x === y || x != x && y != y;
};


/***/ }),

/***/ 1320:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(78519);
var uid = __webpack_require__(76004);

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ 12846:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(63406);
var defineGlobalProperty = __webpack_require__(95861);

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;


/***/ }),

/***/ 78519:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(2884);
var store = __webpack_require__(12846);

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.30.0',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.30.0/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ 73874:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(55111);
var fails = __webpack_require__(7931);

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ 63828:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(70400);

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ 19130:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(52170);
var requireObjectCoercible = __webpack_require__(65727);

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ 70400:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trunc = __webpack_require__(855);

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ 1403:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(70400);

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ 77410:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var requireObjectCoercible = __webpack_require__(65727);

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ 18732:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(48624);
var isObject = __webpack_require__(23041);
var isSymbol = __webpack_require__(85666);
var getMethod = __webpack_require__(54462);
var ordinaryToPrimitive = __webpack_require__(29207);
var wellKnownSymbol = __webpack_require__(4259);

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ 41973:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__(18732);
var isSymbol = __webpack_require__(85666);

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ 98216:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(4259);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ 40368:
/***/ ((module) => {

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ 76004:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(73074);

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ 99525:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(73874);

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ 58814:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(46372);
var fails = __webpack_require__(7931);

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),

/***/ 24617:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(63406);
var isCallable = __webpack_require__(92163);

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));


/***/ }),

/***/ 4259:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(63406);
var shared = __webpack_require__(78519);
var hasOwn = __webpack_require__(21325);
var uid = __webpack_require__(76004);
var NATIVE_SYMBOL = __webpack_require__(73874);
var USE_SYMBOL_AS_UID = __webpack_require__(99525);

var Symbol = global.Symbol;
var WellKnownSymbolsStore = shared('wks');
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)
      ? Symbol[name]
      : createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ 13929:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var aMap = __webpack_require__(91592);
var remove = (__webpack_require__(72106).remove);

// `Map.prototype.deleteAll` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  deleteAll: function deleteAll(/* ...elements */) {
    var collection = aMap(this);
    var allDeleted = true;
    var wasDeleted;
    for (var k = 0, len = arguments.length; k < len; k++) {
      wasDeleted = remove(collection, arguments[k]);
      allDeleted = allDeleted && wasDeleted;
    } return !!allDeleted;
  }
});


/***/ }),

/***/ 57851:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var bind = __webpack_require__(98626);
var aMap = __webpack_require__(91592);
var iterate = __webpack_require__(91978);

// `Map.prototype.every` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  every: function every(callbackfn /* , thisArg */) {
    var map = aMap(this);
    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return iterate(map, function (value, key) {
      if (!boundFunction(value, key, map)) return false;
    }, true) !== false;
  }
});


/***/ }),

/***/ 63633:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var bind = __webpack_require__(98626);
var aMap = __webpack_require__(91592);
var MapHelpers = __webpack_require__(72106);
var iterate = __webpack_require__(91978);

var Map = MapHelpers.Map;
var set = MapHelpers.set;

// `Map.prototype.filter` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  filter: function filter(callbackfn /* , thisArg */) {
    var map = aMap(this);
    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    var newMap = new Map();
    iterate(map, function (value, key) {
      if (boundFunction(value, key, map)) set(newMap, key, value);
    });
    return newMap;
  }
});


/***/ }),

/***/ 67515:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var bind = __webpack_require__(98626);
var aMap = __webpack_require__(91592);
var iterate = __webpack_require__(91978);

// `Map.prototype.findKey` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  findKey: function findKey(callbackfn /* , thisArg */) {
    var map = aMap(this);
    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    var result = iterate(map, function (value, key) {
      if (boundFunction(value, key, map)) return { key: key };
    }, true);
    return result && result.key;
  }
});


/***/ }),

/***/ 81652:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var bind = __webpack_require__(98626);
var aMap = __webpack_require__(91592);
var iterate = __webpack_require__(91978);

// `Map.prototype.find` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  find: function find(callbackfn /* , thisArg */) {
    var map = aMap(this);
    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    var result = iterate(map, function (value, key) {
      if (boundFunction(value, key, map)) return { value: value };
    }, true);
    return result && result.value;
  }
});


/***/ }),

/***/ 68034:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var sameValueZero = __webpack_require__(32209);
var aMap = __webpack_require__(91592);
var iterate = __webpack_require__(91978);

// `Map.prototype.includes` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  includes: function includes(searchElement) {
    return iterate(aMap(this), function (value) {
      if (sameValueZero(value, searchElement)) return true;
    }, true) === true;
  }
});


/***/ }),

/***/ 61480:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var aMap = __webpack_require__(91592);
var iterate = __webpack_require__(91978);

// `Map.prototype.keyOf` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  keyOf: function keyOf(searchElement) {
    var result = iterate(aMap(this), function (value, key) {
      if (value === searchElement) return { key: key };
    }, true);
    return result && result.key;
  }
});


/***/ }),

/***/ 59027:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var bind = __webpack_require__(98626);
var aMap = __webpack_require__(91592);
var MapHelpers = __webpack_require__(72106);
var iterate = __webpack_require__(91978);

var Map = MapHelpers.Map;
var set = MapHelpers.set;

// `Map.prototype.mapKeys` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  mapKeys: function mapKeys(callbackfn /* , thisArg */) {
    var map = aMap(this);
    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    var newMap = new Map();
    iterate(map, function (value, key) {
      set(newMap, boundFunction(value, key, map), value);
    });
    return newMap;
  }
});


/***/ }),

/***/ 35739:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var bind = __webpack_require__(98626);
var aMap = __webpack_require__(91592);
var MapHelpers = __webpack_require__(72106);
var iterate = __webpack_require__(91978);

var Map = MapHelpers.Map;
var set = MapHelpers.set;

// `Map.prototype.mapValues` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  mapValues: function mapValues(callbackfn /* , thisArg */) {
    var map = aMap(this);
    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    var newMap = new Map();
    iterate(map, function (value, key) {
      set(newMap, key, boundFunction(value, key, map));
    });
    return newMap;
  }
});


/***/ }),

/***/ 99283:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var aMap = __webpack_require__(91592);
var iterate = __webpack_require__(67523);
var set = (__webpack_require__(72106).set);

// `Map.prototype.merge` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, arity: 1, forced: true }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  merge: function merge(iterable /* ...iterables */) {
    var map = aMap(this);
    var argumentsLength = arguments.length;
    var i = 0;
    while (i < argumentsLength) {
      iterate(arguments[i++], function (key, value) {
        set(map, key, value);
      }, { AS_ENTRIES: true });
    }
    return map;
  }
});


/***/ }),

/***/ 4473:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var aCallable = __webpack_require__(38146);
var aMap = __webpack_require__(91592);
var iterate = __webpack_require__(91978);

var $TypeError = TypeError;

// `Map.prototype.reduce` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    var map = aMap(this);
    var noInitial = arguments.length < 2;
    var accumulator = noInitial ? undefined : arguments[1];
    aCallable(callbackfn);
    iterate(map, function (value, key) {
      if (noInitial) {
        noInitial = false;
        accumulator = value;
      } else {
        accumulator = callbackfn(accumulator, value, key, map);
      }
    });
    if (noInitial) throw $TypeError('Reduce of empty map with no initial value');
    return accumulator;
  }
});


/***/ }),

/***/ 90989:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var bind = __webpack_require__(98626);
var aMap = __webpack_require__(91592);
var iterate = __webpack_require__(91978);

// `Map.prototype.some` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  some: function some(callbackfn /* , thisArg */) {
    var map = aMap(this);
    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return iterate(map, function (value, key) {
      if (boundFunction(value, key, map)) return true;
    }, true) === true;
  }
});


/***/ }),

/***/ 17194:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(65942);
var aCallable = __webpack_require__(38146);
var aMap = __webpack_require__(91592);
var MapHelpers = __webpack_require__(72106);

var $TypeError = TypeError;
var get = MapHelpers.get;
var has = MapHelpers.has;
var set = MapHelpers.set;

// `Map.prototype.update` method
// https://github.com/tc39/proposal-collection-methods
$({ target: 'Map', proto: true, real: true, forced: true }, {
  update: function update(key, callback /* , thunk */) {
    var map = aMap(this);
    var length = arguments.length;
    aCallable(callback);
    var isPresentInMap = has(map, key);
    if (!isPresentInMap && length < 3) {
      throw $TypeError('Updating absent value');
    }
    var value = isPresentInMap ? get(map, key) : aCallable(length > 2 ? arguments[2] : undefined)(key, map);
    set(map, key, callback(value, key, map));
    return map;
  }
});


/***/ }),

/***/ 59633:
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ 91389:
/***/ ((module) => {

"use strict";


module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ 92846:
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
  var d3 = {
    version: "3.5.17"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.transpose = function(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  };
  function d3_transposeLength(d) {
    return d.length;
  }
  d3.zip = function() {
    return d3.transpose(arguments);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: d3_nsXhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {
      S = Math.log(w1 / w0) / ρ;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < π) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else {}
}();

/***/ }),

/***/ 98769:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ addLeadingZeros)
/* harmony export */ });
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();

  while (output.length < targetLength) {
    output = '0' + output;
  }

  return sign + output;
}

/***/ }),

/***/ 46499:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _locale_en_US_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97970);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_locale_en_US_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z);

/***/ }),

/***/ 9251:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "j": () => (/* binding */ getDefaultOptions)
/* harmony export */ });
/* unused harmony export setDefaultOptions */
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function setDefaultOptions(newOptions) {
  defaultOptions = newOptions;
}

/***/ }),

/***/ 5076:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_getUTCDayOfYear_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(74210);
/* harmony import */ var _lib_getUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(19645);
/* harmony import */ var _lib_getUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30338);
/* harmony import */ var _lib_getUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(13638);
/* harmony import */ var _lib_getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35855);
/* harmony import */ var _addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(98769);
/* harmony import */ var _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81774);







var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */
var formatters = {
  // Era
  G: function G(date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;

    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });
      // A, B

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });
      // Anno Domini, Before Christ

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  // Year
  y: function y(date, token, localize) {
    // Ordinal number
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].y */ .Z.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize, options) {
    var signedWeekYear = (0,_lib_getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(twoDigitYear, 2);
    } // Ordinal number


    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    } // Padding


    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = (0,_lib_getUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(date); // Padding

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'QQ':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });
      // 1st quarter, 2nd quarter, ...

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'qq':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });
      // 1st quarter, 2nd quarter, ...

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Month
  M: function M(date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      case 'M':
      case 'MM':
        return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].M */ .Z.M(date, token);
      // 1st, 2nd, ..., 12th

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // J, F, ..., D

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });
      // January, February, ..., December

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1);
      // 01, 02, ..., 12

      case 'LL':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(month + 1, 2);
      // 1st, 2nd, ..., 12th

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // J, F, ..., D

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });
      // January, February, ..., December

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize, options) {
    var week = (0,_lib_getUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(date, options);

    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize) {
    var isoWeek = (0,_lib_getUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(date);

    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(isoWeek, token.length);
  },
  // Day of the month
  d: function d(date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].d */ .Z.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize) {
    var dayOfYear = (0,_lib_getUTCDayOfYear_index_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(date);

    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize) {
    var dayOfWeek = date.getUTCDay();

    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'ee':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'cc':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // T

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });
      // Tu

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });
      // Tuesday

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek);
      // 02

      case 'ii':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(isoDayOfWeek, token.length);
      // 2nd

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });
      // Tue

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM or PM
  a: function a(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }

    switch (token) {
      case 'b':
      case 'bb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Hour [1-12]
  h: function h(date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].h */ .Z.h(date, token);
  },
  // Hour [0-23]
  H: function H(date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].H */ .Z.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize) {
    var hours = date.getUTCHours() % 12;

    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;

    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(hours, token.length);
  },
  // Minute
  m: function m(date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].m */ .Z.m(date, token);
  },
  // Second
  s: function s(date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].s */ .Z.s(date, token);
  },
  // Fraction of second
  S: function S(date, token) {
    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].S */ .Z.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return 'Z';
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`

      case 'XXXX':
      case 'XX':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`

      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`

      case 'xxxx':
      case 'xx':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`

      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(timestamp, token.length);
  }
};

function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;

  if (minutes === 0) {
    return sign + String(hours);
  }

  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Math.abs(offset) / 60, 2);
  }

  return formatTimezone(offset, dirtyDelimiter);
}

function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Math.floor(absOffset / 60), 2);
  var minutes = (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formatters);

/***/ }),

/***/ 81774:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(98769);

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */

var formatters = {
  // Year
  y: function y(date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(token === 'yy' ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return dayPeriodEnumValue.toUpperCase();

      case 'aaa':
        return dayPeriodEnumValue;

      case 'aaaaa':
        return dayPeriodEnumValue[0];

      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(fractionalSeconds, token.length);
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formatters);

/***/ }),

/***/ 80500:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });

    case 'PP':
      return formatLong.date({
        width: 'medium'
      });

    case 'PPP':
      return formatLong.date({
        width: 'long'
      });

    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
};

var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });

    case 'pp':
      return formatLong.time({
        width: 'medium'
      });

    case 'ppp':
      return formatLong.time({
        width: 'long'
      });

    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
};

var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;

    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;

    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;

    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }

  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
};

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (longFormatters);

/***/ }),

/***/ 53117:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ getTimezoneOffsetInMilliseconds)
/* harmony export */ });
/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

/***/ }),

/***/ 74210:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ getUTCDayOfYear)
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26995);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);


var MILLISECONDS_IN_DAY = 86400000;
function getUTCDayOfYear(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

/***/ }),

/***/ 19645:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ getUTCISOWeek)
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26995);
/* harmony import */ var _startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28966);
/* harmony import */ var _startOfUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96863);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);




var MILLISECONDS_IN_WEEK = 604800000;
function getUTCISOWeek(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate);
  var diff = (0,_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(date).getTime() - (0,_startOfUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(date).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

/***/ }),

/***/ 30338:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ getUTCISOWeekYear)
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26995);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);
/* harmony import */ var _startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28966);



function getUTCISOWeekYear(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = (0,_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = (0,_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(fourthOfJanuaryOfThisYear);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

/***/ }),

/***/ 13638:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ getUTCWeek)
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26995);
/* harmony import */ var _startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40212);
/* harmony import */ var _startOfUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(45530);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);




var MILLISECONDS_IN_WEEK = 604800000;
function getUTCWeek(dirtyDate, options) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate);
  var diff = (0,_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(date, options).getTime() - (0,_startOfUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(date, options).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

/***/ }),

/***/ 35855:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ getUTCWeekYear)
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26995);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);
/* harmony import */ var _startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40212);
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(97198);
/* harmony import */ var _defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9251);





function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;

  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions = (0,_defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_2__/* .getDefaultOptions */ .j)();
  var firstWeekContainsDate = (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = (0,_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = (0,_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(firstWeekOfThisYear, options);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

/***/ }),

/***/ 59196:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Do": () => (/* binding */ isProtectedWeekYearToken),
/* harmony export */   "Iu": () => (/* binding */ isProtectedDayOfYearToken),
/* harmony export */   "qp": () => (/* binding */ throwProtectedError)
/* harmony export */ });
var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

/***/ }),

/***/ 80008:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ requiredArgs)
/* harmony export */ });
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

/***/ }),

/***/ 28966:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ startOfUTCISOWeek)
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26995);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);


function startOfUTCISOWeek(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var weekStartsOn = 1;
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

/***/ }),

/***/ 96863:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ startOfUTCISOWeekYear)
/* harmony export */ });
/* harmony import */ var _getUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30338);
/* harmony import */ var _startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28966);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);



function startOfUTCISOWeekYear(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var year = (0,_getUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = (0,_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(fourthOfJanuary);
  return date;
}

/***/ }),

/***/ 40212:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ startOfUTCWeek)
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26995);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(97198);
/* harmony import */ var _defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9251);




function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;

  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var defaultOptions = (0,_defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_1__/* .getDefaultOptions */ .j)();
  var weekStartsOn = (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

/***/ }),

/***/ 45530:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ startOfUTCWeekYear)
/* harmony export */ });
/* harmony import */ var _getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(35855);
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);
/* harmony import */ var _startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40212);
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(97198);
/* harmony import */ var _defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9251);





function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;

  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var defaultOptions = (0,_defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_1__/* .getDefaultOptions */ .j)();
  var firstWeekContainsDate = (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = (0,_getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = (0,_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(firstWeek, options);
  return date;
}

/***/ }),

/***/ 97198:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ toInteger)
/* harmony export */ });
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

/***/ }),

/***/ 89623:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ addMilliseconds)
/* harmony export */ });
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(97198);
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26995);
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);



/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */

function addMilliseconds(dirtyDate, dirtyAmount) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(2, arguments);
  var timestamp = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate).getTime();
  var amount = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(dirtyAmount);
  return new Date(timestamp + amount);
}

/***/ }),

/***/ 93620:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ format)
/* harmony export */ });
/* harmony import */ var _isValid_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(99662);
/* harmony import */ var _subMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(34057);
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26995);
/* harmony import */ var _lib_format_formatters_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(5076);
/* harmony import */ var _lib_format_longFormatters_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(80500);
/* harmony import */ var _lib_getTimezoneOffsetInMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(53117);
/* harmony import */ var _lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(59196);
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(97198);
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);
/* harmony import */ var _lib_defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9251);
/* harmony import */ var _lib_defaultLocale_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(46499);










 // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */

function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;

  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions = (0,_lib_defaultOptions_index_js__WEBPACK_IMPORTED_MODULE_1__/* .getDefaultOptions */ .j)();
  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _lib_defaultLocale_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z;
  var firstWeekContainsDate = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var weekStartsOn = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (!locale.localize) {
    throw new RangeError('locale must contain localize property');
  }

  if (!locale.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }

  var originalDate = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(dirtyDate);

  if (!(0,_isValid_index_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(originalDate)) {
    throw new RangeError('Invalid time value');
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


  var timezoneOffset = (0,_lib_getTimezoneOffsetInMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(originalDate);
  var utcDate = (0,_subMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = _lib_format_longFormatters_index_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z[firstCharacter];
      return longFormatter(substring, locale.formatLong);
    }

    return substring;
  }).join('').match(formattingTokensRegExp).map(function (substring) {
    // Replace two single quote characters with one single quote character
    if (substring === "''") {
      return "'";
    }

    var firstCharacter = substring[0];

    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }

    var formatter = _lib_format_formatters_index_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z[firstCharacter];

    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_10__/* .isProtectedWeekYearToken */ .Do)(substring)) {
        (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_10__/* .throwProtectedError */ .qp)(substring, dirtyFormatStr, String(dirtyDate));
      }

      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_10__/* .isProtectedDayOfYearToken */ .Iu)(substring)) {
        (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_10__/* .throwProtectedError */ .qp)(substring, dirtyFormatStr, String(dirtyDate));
      }

      return formatter(utcDate, substring, locale.localize, formatterOptions);
    }

    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }

    return substring;
  }).join('');
  return result;
}

function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);

  if (!matched) {
    return input;
  }

  return matched[1].replace(doubleQuoteRegExp, "'");
}

/***/ }),

/***/ 9895:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ isDate)
/* harmony export */ });
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }


/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */

function isDate(value) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}

/***/ }),

/***/ 99662:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ isValid)
/* harmony export */ });
/* harmony import */ var _isDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9895);
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(26995);
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);



/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */

function isValid(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);

  if (!(0,_isDate_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyDate) && typeof dirtyDate !== 'number') {
    return false;
  }

  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(dirtyDate);
  return !isNaN(Number(date));
}

/***/ }),

/***/ 25810:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ buildFormatLongFn)
/* harmony export */ });
function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // TODO: Remove String()
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

/***/ }),

/***/ 36063:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ buildLocalizeFn)
/* harmony export */ });
function buildLocalizeFn(args) {
  return function (dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!

    return valuesArray[index];
  };
}

/***/ }),

/***/ 87826:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ buildMatchFn)
/* harmony export */ });
function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }

  return undefined;
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }

  return undefined;
}

/***/ }),

/***/ 15068:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ buildMatchPatternFn)
/* harmony export */ });
function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

/***/ }),

/***/ 51965:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

var formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];

  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }

  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formatDistance);

/***/ }),

/***/ 61907:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(25810);

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: (0,_lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,_lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,_lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formatLong);

/***/ }),

/***/ 20683:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};

var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formatRelative);

/***/ }),

/***/ 16915:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36063);

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
}; // Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.

var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
};

var localize = {
  ordinalNumber: ordinalNumber,
  era: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (localize);

/***/ }),

/***/ 85242:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87826);
/* harmony import */ var _lib_buildMatchPatternFn_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15068);


var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: (0,_lib_buildMatchPatternFn_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (match);

/***/ }),

/***/ 97970:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_formatDistance_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51965);
/* harmony import */ var _lib_formatLong_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(61907);
/* harmony import */ var _lib_formatRelative_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20683);
/* harmony import */ var _lib_localize_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16915);
/* harmony import */ var _lib_match_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85242);






/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale = {
  code: 'en-US',
  formatDistance: _lib_formatDistance_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z,
  formatLong: _lib_formatLong_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z,
  formatRelative: _lib_formatRelative_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z,
  localize: _lib_localize_index_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z,
  match: _lib_match_index_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (locale);

/***/ }),

/***/ 34057:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ subMilliseconds)
/* harmony export */ });
/* harmony import */ var _addMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89623);
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97198);



/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */

function subMilliseconds(dirtyDate, dirtyAmount) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(2, arguments);
  var amount = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(dirtyAmount);
  return (0,_addMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(dirtyDate, -amount);
}

/***/ }),

/***/ 26995:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ toDate)
/* harmony export */ });
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80008);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }


/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */

function toDate(argument) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}

/***/ }),

/***/ 24420:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(13056);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ 69042:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(24420),
    getRawTag = __webpack_require__(66282),
    objectToString = __webpack_require__(37661);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ 20439:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trimmedEndIndex = __webpack_require__(5630);

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ 91744:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ 66282:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(24420);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ 37661:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ 13056:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(91744);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ 5630:
/***/ ((module) => {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ 79412:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(67040),
    now = __webpack_require__(14736),
    toNumber = __webpack_require__(314);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ 67040:
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ 91259:
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ 57386:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(69042),
    isObjectLike = __webpack_require__(91259);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ 14736:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(13056);

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ 49789:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var debounce = __webpack_require__(79412),
    isObject = __webpack_require__(67040);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),

/***/ 314:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTrim = __webpack_require__(20439),
    isObject = __webpack_require__(67040),
    isSymbol = __webpack_require__(57386);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ 46047:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Pi": () => (/* binding */ mobxreact_esm_observer)
});

// UNUSED EXPORTS: MobXProviderContext, Observer, PropTypes, Provider, disposeOnUnmount, enableStaticRendering, inject, isUsingStaticRendering, observerBatching, useAsObservableSource, useLocalObservable, useLocalStore, useObserver, useStaticRendering

// EXTERNAL MODULE: ./node_modules/mobx/dist/mobx.esm.js
var mobx_esm = __webpack_require__(31056);
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(70846);
;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/assertEnvironment.js


if (!react.useState) {
    throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!mobx_esm/* makeObservable */.rC) {
    throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
}

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(76644);
;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js


;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerBatching.js

function defaultNoopBatch(callback) {
    callback();
}
function observerBatching(reactionScheduler) {
    if (!reactionScheduler) {
        reactionScheduler = defaultNoopBatch;
        if (false) {}
    }
    (0,mobx_esm/* configure */.jQ)({ reactionScheduler: reactionScheduler });
}
var isObserverBatched = function () {
    if (false) {}
    return true;
};

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/printDebugValue.js

function printDebugValue(v) {
    return (0,mobx_esm/* getDependencyTree */.Gf)(v);
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/UniversalFinalizationRegistry.js
var REGISTRY_FINALIZE_AFTER = 10000;
var REGISTRY_SWEEP_INTERVAL = 10000;
var TimerBasedFinalizationRegistry = /** @class */ (function () {
    function TimerBasedFinalizationRegistry(finalize) {
        var _this = this;
        Object.defineProperty(this, "finalize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: finalize
        });
        Object.defineProperty(this, "registrations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "sweepTimeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Bound so it can be used directly as setTimeout callback.
        Object.defineProperty(this, "sweep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: function (maxAge) {
                if (maxAge === void 0) { maxAge = REGISTRY_FINALIZE_AFTER; }
                // cancel timeout so we can force sweep anytime
                clearTimeout(_this.sweepTimeout);
                _this.sweepTimeout = undefined;
                var now = Date.now();
                _this.registrations.forEach(function (registration, token) {
                    if (now - registration.registeredAt >= maxAge) {
                        _this.finalize(registration.value);
                        _this.registrations.delete(token);
                    }
                });
                if (_this.registrations.size > 0) {
                    _this.scheduleSweep();
                }
            }
        });
        // Bound so it can be exported directly as clearTimers test utility.
        Object.defineProperty(this, "finalizeAllImmediately", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: function () {
                _this.sweep(0);
            }
        });
    }
    // Token is actually required with this impl
    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "register", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target, value, token) {
            this.registrations.set(token, {
                value: value,
                registeredAt: Date.now()
            });
            this.scheduleSweep();
        }
    });
    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "unregister", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (token) {
            this.registrations.delete(token);
        }
    });
    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "scheduleSweep", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.sweepTimeout === undefined) {
                this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL);
            }
        }
    });
    return TimerBasedFinalizationRegistry;
}());

var UniversalFinalizationRegistry = typeof FinalizationRegistry !== "undefined"
    ? FinalizationRegistry
    : TimerBasedFinalizationRegistry;

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerFinalizationRegistry.js

var observerFinalizationRegistry = new UniversalFinalizationRegistry(function (adm) {
    var _a;
    (_a = adm.reaction) === null || _a === void 0 ? void 0 : _a.dispose();
    adm.reaction = null;
});

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/staticRendering.js
var globalIsUsingStaticRendering = false;
function staticRendering_enableStaticRendering(enable) {
    globalIsUsingStaticRendering = enable;
}
function isUsingStaticRendering() {
    return globalIsUsingStaticRendering;
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useObserver.js
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function observerComponentNameFor(baseComponentName) {
    return "observer".concat(baseComponentName);
}
/**
 * We use class to make it easier to detect in heap snapshots by name
 */
var ObjectToBeRetainedByReact = /** @class */ (function () {
    function ObjectToBeRetainedByReact() {
    }
    return ObjectToBeRetainedByReact;
}());
function objectToBeRetainedByReactFactory() {
    return new ObjectToBeRetainedByReact();
}
function useObserver(fn, baseComponentName) {
    if (baseComponentName === void 0) { baseComponentName = "observed"; }
    if (isUsingStaticRendering()) {
        return fn();
    }
    var _a = __read(react.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];
    // Force update, see #2982
    var _b = __read(react.useState(), 2), setState = _b[1];
    var forceUpdate = function () { return setState([]); };
    // StrictMode/ConcurrentMode/Suspense may mean that our component is
    // rendered and abandoned multiple times, so we need to track leaked
    // Reactions.
    var admRef = react.useRef(null);
    if (!admRef.current) {
        // First render
        admRef.current = {
            reaction: null,
            mounted: false,
            changedBeforeMount: false
        };
    }
    var adm = admRef.current;
    if (!adm.reaction) {
        // First render or component was not committed and reaction was disposed by registry
        adm.reaction = new mobx_esm/* Reaction */.le(observerComponentNameFor(baseComponentName), function () {
            // Observable has changed, meaning we want to re-render
            // BUT if we're a component that hasn't yet got to the useEffect()
            // stage, we might be a component that _started_ to render, but
            // got dropped, and we don't want to make state changes then.
            // (It triggers warnings in StrictMode, for a start.)
            if (adm.mounted) {
                // We have reached useEffect(), so we're mounted, and can trigger an update
                forceUpdate();
            }
            else {
                // We haven't yet reached useEffect(), so we'll need to trigger a re-render
                // when (and if) useEffect() arrives.
                adm.changedBeforeMount = true;
            }
        });
        observerFinalizationRegistry.register(objectRetainedByReact, adm, adm);
    }
    react.useDebugValue(adm.reaction, printDebugValue);
    react.useEffect(function () {
        observerFinalizationRegistry.unregister(adm);
        adm.mounted = true;
        if (adm.reaction) {
            if (adm.changedBeforeMount) {
                // Got a change before mount, force an update
                adm.changedBeforeMount = false;
                forceUpdate();
            }
        }
        else {
            // The reaction we set up in our render has been disposed.
            // This can be due to bad timings of renderings, e.g. our
            // component was paused for a _very_ long time, and our
            // reaction got cleaned up
            // Re-create the reaction
            adm.reaction = new mobx_esm/* Reaction */.le(observerComponentNameFor(baseComponentName), function () {
                // We've definitely already been mounted at this point
                forceUpdate();
            });
            forceUpdate();
        }
        return function () {
            adm.reaction.dispose();
            adm.reaction = null;
            adm.mounted = false;
            adm.changedBeforeMount = false;
        };
    }, []);
    // render the original component, but have the
    // reaction track the observables, so that rendering
    // can be invalidated (see above) once a dependency changes
    var rendering;
    var exception;
    adm.reaction.track(function () {
        try {
            rendering = fn();
        }
        catch (e) {
            exception = e;
        }
    });
    if (exception) {
        throw exception; // re-throw any exceptions caught during rendering
    }
    return rendering;
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/observer.js



var warnObserverOptionsDeprecated = true;
var hasSymbol = typeof Symbol === "function" && Symbol.for;
// Using react-is had some issues (and operates on elements, not on types), see #608 / #609
var ReactForwardRefSymbol = hasSymbol
    ? Symbol.for("react.forward_ref")
    : typeof react.forwardRef === "function" && (0,react.forwardRef)(function (props) { return null; })["$$typeof"];
var ReactMemoSymbol = hasSymbol
    ? Symbol.for("react.memo")
    : typeof react.memo === "function" && (0,react.memo)(function (props) { return null; })["$$typeof"];
// n.b. base case is not used for actual typings or exported in the typing files
function observer(baseComponent, 
// TODO remove in next major
options) {
    var _a;
    if (false) {}
    if (ReactMemoSymbol && baseComponent["$$typeof"] === ReactMemoSymbol) {
        throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");
    }
    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307
    if (isUsingStaticRendering()) {
        return baseComponent;
    }
    var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;
    var render = baseComponent;
    var baseComponentName = baseComponent.displayName || baseComponent.name;
    // If already wrapped with forwardRef, unwrap,
    // so we can patch render and apply memo
    if (ReactForwardRefSymbol && baseComponent["$$typeof"] === ReactForwardRefSymbol) {
        useForwardRef = true;
        render = baseComponent["render"];
        if (typeof render !== "function") {
            throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");
        }
    }
    var observerComponent = function (props, ref) {
        return useObserver(function () { return render(props, ref); }, baseComponentName);
    };
    // Don't set `displayName` for anonymous components,
    // so the `displayName` can be customized by user, see #3192.
    if (baseComponentName !== "") {
        ;
        observerComponent.displayName = baseComponentName;
    }
    // Support legacy context: `contextTypes` must be applied before `memo`
    if (baseComponent.contextTypes) {
        ;
        observerComponent.contextTypes = baseComponent.contextTypes;
    }
    if (useForwardRef) {
        // `forwardRef` must be applied prior `memo`
        // `forwardRef(observer(cmp))` throws:
        // "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))"
        observerComponent = (0,react.forwardRef)(observerComponent);
    }
    // memo; we are not interested in deep updates
    // in props; we assume that if deep objects are changed,
    // this is in observables, which would have been tracked anyway
    observerComponent = (0,react.memo)(observerComponent);
    copyStaticProperties(baseComponent, observerComponent);
    if (false) {}
    return observerComponent;
}
// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js
var hoistBlackList = {
    $$typeof: true,
    render: true,
    compare: true,
    type: true,
    // Don't redefine `displayName`,
    // it's defined as getter-setter pair on `memo` (see #3192).
    displayName: true
};
function copyStaticProperties(base, target) {
    Object.keys(base).forEach(function (key) {
        if (!hoistBlackList[key]) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
        }
    });
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/ObserverComponent.js

function ObserverComponent(_a) {
    var children = _a.children, render = _a.render;
    var component = children || render;
    if (typeof component !== "function") {
        return null;
    }
    return useObserver(component);
}
if (false) {}
ObserverComponent.displayName = "Observer";

function ObserverPropsCheck(props, key, componentName, location, propFullName) {
    var extraKey = key === "children" ? "render" : "children";
    var hasProp = typeof props[key] === "function";
    var hasExtraProp = typeof props[extraKey] === "function";
    if (hasProp && hasExtraProp) {
        return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
    }
    if (hasProp || hasExtraProp) {
        return null;
    }
    return new Error("Invalid prop `" +
        propFullName +
        "` of type `" +
        typeof props[key] +
        "` supplied to" +
        " `" +
        componentName +
        "`, expected `function`.");
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalObservable.js


function useLocalObservable(initializer, annotations) {
    return useState(function () { return observable(initializer(), annotations, { autoBind: true }); })[0];
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useAsObservableSource.js
var useAsObservableSource_read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function useAsObservableSource_useAsObservableSource(current) {
    if (false)
        {}
    var _a = useAsObservableSource_read(useState(function () { return observable(current, {}, { deep: false }); }), 1), res = _a[0];
    runInAction(function () {
        Object.assign(res, current);
    });
    return res;
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalStore.js




function useLocalStore(initializer, current) {
    if (false)
        {}
    var source = current && useAsObservableSource(current);
    return useState(function () { return observable(initializer(source), undefined, { autoBind: true }); })[0];
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/index.js
var _a;







observerBatching(react_dom.unstable_batchedUpdates);






var clearTimers = (_a = observerFinalizationRegistry.finalizeAllImmediately) !== null && _a !== void 0 ? _a : (function () { });
function es_useObserver(fn, baseComponentName) {
    if (baseComponentName === void 0) { baseComponentName = "observed"; }
    if (false) {}
    return useObserverOriginal(fn, baseComponentName);
}

function useStaticRendering(enable) {
    if (false) {}
    enableStaticRendering(enable);
}

;// CONCATENATED MODULE: ./node_modules/mobx-react/dist/mobxreact.esm.js





var symbolId = 0;

function createSymbol(name) {
  if (typeof Symbol === "function") {
    return Symbol(name);
  }

  var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
  symbolId++;
  return symbol;
}

var createdSymbols = {};
function newSymbol(name) {
  if (!createdSymbols[name]) {
    createdSymbols[name] = createSymbol(name);
  }

  return createdSymbols[name];
}
function shallowEqual(objA, objB) {
  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

function is(x, y) {
  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js


var mobxreact_esm_hoistBlackList = {
  $$typeof: 1,
  render: 1,
  compare: 1,
  type: 1,
  childContextTypes: 1,
  contextType: 1,
  contextTypes: 1,
  defaultProps: 1,
  getDefaultProps: 1,
  getDerivedStateFromError: 1,
  getDerivedStateFromProps: 1,
  mixins: 1,
  displayName: 1,
  propTypes: 1
};
function mobxreact_esm_copyStaticProperties(base, target) {
  var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));
  Object.getOwnPropertyNames(base).forEach(function (key) {
    if (!mobxreact_esm_hoistBlackList[key] && protoProps.indexOf(key) === -1) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}
/**
 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
 * @param target
 * @param prop
 * @param value
 */

function setHiddenProp(target, prop, value) {
  if (!Object.hasOwnProperty.call(target, prop)) {
    Object.defineProperty(target, prop, {
      enumerable: false,
      configurable: true,
      writable: true,
      value: value
    });
  } else {
    target[prop] = value;
  }
}
/**
 * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks
 * and the handler provided by mobx-react
 */

var mobxMixins = /*#__PURE__*/newSymbol("patchMixins");
var mobxPatchedDefinition = /*#__PURE__*/newSymbol("patchedDefinition");

function getMixins(target, methodName) {
  var mixins = target[mobxMixins] = target[mobxMixins] || {};
  var methodMixins = mixins[methodName] = mixins[methodName] || {};
  methodMixins.locks = methodMixins.locks || 0;
  methodMixins.methods = methodMixins.methods || [];
  return methodMixins;
}

function wrapper(realMethod, mixins) {
  var _this = this;

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
  mixins.locks++;

  try {
    var retVal;

    if (realMethod !== undefined && realMethod !== null) {
      retVal = realMethod.apply(this, args);
    }

    return retVal;
  } finally {
    mixins.locks--;

    if (mixins.locks === 0) {
      mixins.methods.forEach(function (mx) {
        mx.apply(_this, args);
      });
    }
  }
}

function wrapFunction(realMethod, mixins) {
  var fn = function fn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
  };

  return fn;
}

function patch(target, methodName, mixinMethod) {
  var mixins = getMixins(target, methodName);

  if (mixins.methods.indexOf(mixinMethod) < 0) {
    mixins.methods.push(mixinMethod);
  }

  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
    // already patched definition, do not repatch
    return;
  }

  var originalMethod = target[methodName];
  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
  Object.defineProperty(target, methodName, newDefinition);
}

function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
  var _ref;

  var wrappedFunc = wrapFunction(originalMethod, mixins);
  return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {
    return wrappedFunc;
  }, _ref.set = function set(value) {
    if (this === target) {
      wrappedFunc = wrapFunction(value, mixins);
    } else {
      // when it is an instance of the prototype/a child prototype patch that particular case again separately
      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
      // e.g. the method for super might not be the same as the method for the prototype which might be not the same
      // as the method for the instance
      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
      Object.defineProperty(this, methodName, newDefinition);
    }
  }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
}

var mobxAdminProperty = mobx_esm/* $mobx */.so || "$mobx"; // BC

var mobxObserverProperty = /*#__PURE__*/newSymbol("isMobXReactObserver");
var mobxIsUnmounted = /*#__PURE__*/newSymbol("isUnmounted");
var skipRenderKey = /*#__PURE__*/newSymbol("skipRender");
var isForcingUpdateKey = /*#__PURE__*/newSymbol("isForcingUpdate");
function makeClassComponentObserver(componentClass) {
  var target = componentClass.prototype;

  if (componentClass[mobxObserverProperty]) {
    var displayName = getDisplayName(target);
    console.warn("The provided component class (" + displayName + ")\n                has already been declared as an observer component.");
  } else {
    componentClass[mobxObserverProperty] = true;
  }

  if (target.componentWillReact) {
    throw new Error("The componentWillReact life-cycle event is no longer supported");
  }

  if (componentClass["__proto__"] !== react.PureComponent) {
    if (!target.shouldComponentUpdate) {
      target.shouldComponentUpdate = observerSCU;
    } else if (target.shouldComponentUpdate !== observerSCU) {
      // n.b. unequal check, instead of existence check, as @observer might be on superclass as well
      throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
    }
  } // this.props and this.state are made observable, just to make sure @computed fields that
  // are defined inside the component, and which rely on state or props, re-compute if state or props change
  // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)
  // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+


  makeObservableProp(target, "props");
  makeObservableProp(target, "state");

  if (componentClass.contextType) {
    makeObservableProp(target, "context");
  }

  var originalRender = target.render;

  if (typeof originalRender !== "function") {
    var _displayName = getDisplayName(target);

    throw new Error("[mobx-react] class component (" + _displayName + ") is missing `render` method." + "\n`observer` requires `render` being a function defined on prototype." + "\n`render = () => {}` or `render = function() {}` is not supported.");
  }

  target.render = function () {
    this.render = isUsingStaticRendering() ? originalRender : createReactiveRender.call(this, originalRender);
    return this.render();
  };

  patch(target, "componentDidMount", function () {
    this[mobxIsUnmounted] = false;

    if (!this.render[mobxAdminProperty]) {
      // Reaction is re-created automatically during render, but a component can re-mount and skip render #3395.
      // To re-create the reaction and re-subscribe to relevant observables we have to force an update.
      react.Component.prototype.forceUpdate.call(this);
    }
  });
  patch(target, "componentWillUnmount", function () {
    if (isUsingStaticRendering()) {
      return;
    }

    var reaction = this.render[mobxAdminProperty];

    if (reaction) {
      reaction.dispose(); // Forces reaction to be re-created on next render

      this.render[mobxAdminProperty] = null;
    } else {
      // Render may have been hot-swapped and/or overridden by a subclass.
      var _displayName2 = getDisplayName(this);

      console.warn("The reactive render of an observer class component (" + _displayName2 + ")\n                was overridden after MobX attached. This may result in a memory leak if the\n                overridden reactive render was not properly disposed.");
    }

    this[mobxIsUnmounted] = true;
  });
  return componentClass;
} // Generates a friendly name for debugging

function getDisplayName(comp) {
  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
}

function createReactiveRender(originalRender) {
  var _this = this;

  /**
   * If props are shallowly modified, react will render anyway,
   * so atom.reportChanged() should not result in yet another re-render
   */
  setHiddenProp(this, skipRenderKey, false);
  /**
   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
   * so detect these changes
   */

  setHiddenProp(this, isForcingUpdateKey, false);
  var initialName = getDisplayName(this);
  var boundOriginalRender = originalRender.bind(this);
  var isRenderingPending = false;

  var createReaction = function createReaction() {
    var reaction = new mobx_esm/* Reaction */.le(initialName + ".render()", function () {
      if (!isRenderingPending) {
        // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.test.tsx)
        // This unidiomatic React usage but React will correctly warn about this so we continue as usual
        // See #85 / Pull #44
        isRenderingPending = true;

        if (_this[mobxIsUnmounted] !== true) {
          var hasError = true;

          try {
            setHiddenProp(_this, isForcingUpdateKey, true);

            if (!_this[skipRenderKey]) {
              react.Component.prototype.forceUpdate.call(_this);
            }

            hasError = false;
          } finally {
            setHiddenProp(_this, isForcingUpdateKey, false);

            if (hasError) {
              reaction.dispose(); // Forces reaction to be re-created on next render

              _this.render[mobxAdminProperty] = null;
            }
          }
        }
      }
    });
    reaction["reactComponent"] = _this;
    return reaction;
  };

  function reactiveRender() {
    var _reactiveRender$mobxA;

    isRenderingPending = false; // Create reaction lazily to support re-mounting #3395

    var reaction = (_reactiveRender$mobxA = reactiveRender[mobxAdminProperty]) != null ? _reactiveRender$mobxA : reactiveRender[mobxAdminProperty] = createReaction();
    var exception = undefined;
    var rendering = undefined;
    reaction.track(function () {
      try {
        // TODO@major
        // Optimization: replace with _allowStateChangesStart/End (not available in mobx@6.0.0)
        rendering = (0,mobx_esm/* _allowStateChanges */.$$)(false, boundOriginalRender);
      } catch (e) {
        exception = e;
      }
    });

    if (exception) {
      throw exception;
    }

    return rendering;
  }

  return reactiveRender;
}

function observerSCU(nextProps, nextState) {
  if (isUsingStaticRendering()) {
    console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
  } // update on any state changes (as is the default)


  if (this.state !== nextState) {
    return true;
  } // update if props are shallowly not equal, inspired by PureRenderMixin
  // we could return just 'false' here, and avoid the `skipRender` checks etc
  // however, it is nicer if lifecycle events are triggered like usually,
  // so we return true here if props are shallowly modified.


  return !shallowEqual(this.props, nextProps);
}

function makeObservableProp(target, propName) {
  var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
  var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");

  function getAtom() {
    if (!this[atomHolderKey]) {
      setHiddenProp(this, atomHolderKey, (0,mobx_esm/* createAtom */.cp)("reactive " + propName));
    }

    return this[atomHolderKey];
  }

  Object.defineProperty(target, propName, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var prevReadState = false; // Why this check? BC?
      // @ts-expect-error

      if (mobx_esm/* _allowStateReadsStart */.wM && mobx_esm/* _allowStateReadsEnd */.mJ) {
        prevReadState = (0,mobx_esm/* _allowStateReadsStart */.wM)(true);
      }

      getAtom.call(this).reportObserved(); // Why this check? BC?
      // @ts-expect-error

      if (mobx_esm/* _allowStateReadsStart */.wM && mobx_esm/* _allowStateReadsEnd */.mJ) {
        (0,mobx_esm/* _allowStateReadsEnd */.mJ)(prevReadState);
      }

      return this[valueHolderKey];
    },
    set: function set(v) {
      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
        setHiddenProp(this, valueHolderKey, v);
        setHiddenProp(this, skipRenderKey, true);
        getAtom.call(this).reportChanged();
        setHiddenProp(this, skipRenderKey, false);
      } else {
        setHiddenProp(this, valueHolderKey, v);
      }
    }
  });
}

/**
 * Observer function / decorator
 */

function mobxreact_esm_observer(component) {
  if (component["isMobxInjector"] === true) {
    console.warn("Mobx observer: You are trying to use `observer` on a component that already has `inject`. Please apply `observer` before applying `inject`");
  }

  if (Object.prototype.isPrototypeOf.call(react.Component, component) || Object.prototype.isPrototypeOf.call(react.PureComponent, component)) {
    // Class component
    return makeClassComponentObserver(component);
  } else {
    // Function component
    return observer(component);
  }
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["children"];
var MobXProviderContext = /*#__PURE__*/react.createContext({});
function Provider(props) {
  var children = props.children,
      stores = _objectWithoutPropertiesLoose(props, _excluded);

  var parentValue = react.useContext(MobXProviderContext);
  var mutableProviderRef = react.useRef(_extends({}, parentValue, stores));
  var value = mutableProviderRef.current;

  if (false) { var newValue; }

  return react.createElement(MobXProviderContext.Provider, {
    value: value
  }, children);
}
Provider.displayName = "MobXProvider";

/**
 * Store Injection
 */

function createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {
  // Support forward refs
  var Injector = React__default.forwardRef(function (props, ref) {
    var newProps = _extends({}, props);

    var context = React__default.useContext(MobXProviderContext);
    Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});

    if (ref) {
      newProps.ref = ref;
    }

    return React__default.createElement(component, newProps);
  });
  if (makeReactive) Injector = mobxreact_esm_observer(Injector);
  Injector["isMobxInjector"] = true; // assigned late to suppress observer warning
  // Static fields from component should be visible on the generated Injector

  mobxreact_esm_copyStaticProperties(component, Injector);
  Injector["wrappedComponent"] = component;
  Injector.displayName = getInjectName(component, injectNames);
  return Injector;
}

function getInjectName(component, injectNames) {
  var displayName;
  var componentName = component.displayName || component.name || component.constructor && component.constructor.name || "Component";
  if (injectNames) displayName = "inject-with-" + injectNames + "(" + componentName + ")";else displayName = "inject(" + componentName + ")";
  return displayName;
}

function grabStoresByName(storeNames) {
  return function (baseStores, nextProps) {
    storeNames.forEach(function (storeName) {
      if (storeName in nextProps // prefer props over stores
      ) return;
      if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
      nextProps[storeName] = baseStores[storeName];
    });
    return nextProps;
  };
}
/**
 * higher order component that injects stores to a child.
 * takes either a varargs list of strings, which are stores read from the context,
 * or a function that manually maps the available stores from the context to props:
 * storesToProps(mobxStores, props, context) => newProps
 */


function inject() {
  for (var _len = arguments.length, storeNames = new Array(_len), _key = 0; _key < _len; _key++) {
    storeNames[_key] = arguments[_key];
  }

  if (typeof arguments[0] === "function") {
    var grabStoresFn = arguments[0];
    return function (componentClass) {
      return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);
    };
  } else {
    return function (componentClass) {
      return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join("-"), false);
    };
  }
}

var protoStoreKey = /*#__PURE__*/(/* unused pure expression or super */ null && (newSymbol("disposeOnUnmountProto")));
var instStoreKey = /*#__PURE__*/(/* unused pure expression or super */ null && (newSymbol("disposeOnUnmountInst")));

function runDisposersOnWillUnmount() {
  var _this = this;
  [].concat(this[protoStoreKey] || [], this[instStoreKey] || []).forEach(function (propKeyOrFunction) {
    var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;

    if (prop !== undefined && prop !== null) {
      if (Array.isArray(prop)) prop.map(function (f) {
        return f();
      });else prop();
    }
  });
}

function disposeOnUnmount(target, propertyKeyOrFunction) {
  if (Array.isArray(propertyKeyOrFunction)) {
    return propertyKeyOrFunction.map(function (fn) {
      return disposeOnUnmount(target, fn);
    });
  }

  var c = Object.getPrototypeOf(target).constructor;
  var c2 = Object.getPrototypeOf(target.constructor); // Special case for react-hot-loader

  var c3 = Object.getPrototypeOf(Object.getPrototypeOf(target));

  if (!(c === React__default.Component || c === React__default.PureComponent || c2 === React__default.Component || c2 === React__default.PureComponent || c3 === React__default.Component || c3 === React__default.PureComponent)) {
    throw new Error("[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.");
  }

  if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function" && !Array.isArray(propertyKeyOrFunction)) {
    throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
  } // decorator's target is the prototype, so it doesn't have any instance properties like props


  var isDecorator = typeof propertyKeyOrFunction === "string"; // add property key / function we want run (disposed) to the store

  var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];
  var store = isDecorator ? // decorators are added to the prototype store
  target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store
  target[instStoreKey] || (target[instStoreKey] = []);
  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already

  if (!componentWasAlreadyModified) {
    patch(target, "componentWillUnmount", runDisposersOnWillUnmount);
  } // return the disposer as is if invoked as a non decorator


  if (typeof propertyKeyOrFunction !== "string") {
    return propertyKeyOrFunction;
  }
}

function createChainableTypeChecker(validator) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
      rest[_key - 6] = arguments[_key];
    }

    return (0,mobx_esm/* untracked */.rg)(function () {
      componentName = componentName || "<<anonymous>>";
      propFullName = propFullName || propName;

      if (props[propName] == null) {
        if (isRequired) {
          var actual = props[propName] === null ? "null" : "undefined";
          return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
        }

        return null;
      } else {
        // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise
        return validator.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
      }
    });
  }

  var chainedCheckType = checkType.bind(null, false); // Add isRequired to satisfy Requirable

  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
} // Copied from React.PropTypes


function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === "symbol") {
    return true;
  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


  if (propValue["@@toStringTag"] === "Symbol") {
    return true;
  } // Fallback for non-spec compliant Symbols which are polyfilled.


  if (typeof Symbol === "function" && propValue instanceof Symbol) {
    return true;
  }

  return false;
} // Copied from React.PropTypes


function getPropType(propValue) {
  var propType = typeof propValue;

  if (Array.isArray(propValue)) {
    return "array";
  }

  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return "object";
  }

  if (isSymbol(propType, propValue)) {
    return "symbol";
  }

  return propType;
} // This handles more types than `getPropType`. Only used for error messages.
// Copied from React.PropTypes


function getPreciseType(propValue) {
  var propType = getPropType(propValue);

  if (propType === "object") {
    if (propValue instanceof Date) {
      return "date";
    } else if (propValue instanceof RegExp) {
      return "regexp";
    }
  }

  return propType;
}

function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    return (0,mobx_esm/* untracked */.rg)(function () {
      if (allowNativeType) {
        if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
      }

      var mobxChecker;

      switch (mobxType) {
        case "Array":
          mobxChecker = mobx_esm/* isObservableArray */.Ei;
          break;

        case "Object":
          mobxChecker = mobx_esm/* isObservableObject */.Pb;
          break;

        case "Map":
          mobxChecker = mobx_esm/* isObservableMap */.LJ;
          break;

        default:
          throw new Error("Unexpected mobxType: " + mobxType);
      }

      var propValue = props[propName];

      if (!mobxChecker(propValue)) {
        var preciseType = getPreciseType(propValue);
        var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
        return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
      }

      return null;
    });
  });
}

function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
      rest[_key2 - 5] = arguments[_key2];
    }

    return (0,mobx_esm/* untracked */.rg)(function () {
      if (typeof typeChecker !== "function") {
        return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
      } else {
        var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName, location, propFullName);
        if (error instanceof Error) return error;
        var propValue = props[propName];

        for (var i = 0; i < propValue.length; i++) {
          error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
          if (error instanceof Error) return error;
        }

        return null;
      }
    });
  });
}

var observableArray = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Array");
var observableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, false);
var observableMap = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Map");
var observableObject = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Object");
var arrayOrObservableArray = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Array");
var arrayOrObservableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, true);
var objectOrObservableObject = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Object");
var PropTypes = {
  observableArray: observableArray,
  observableArrayOf: observableArrayOf,
  observableMap: observableMap,
  observableObject: observableObject,
  arrayOrObservableArray: arrayOrObservableArray,
  arrayOrObservableArrayOf: arrayOrObservableArrayOf,
  objectOrObservableObject: objectOrObservableObject
};

if (!react.Component) throw new Error("mobx-react requires React to be available");
if (!mobx_esm/* observable */.LO) throw new Error("mobx-react requires mobx to be available");




/***/ }),

/***/ 2860:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony exports ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode */


/** Highest positive signed 32-bit float value */
const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */
const base = 36;
const tMin = 1;
const tMax = 26;
const skew = 38;
const damp = 700;
const initialBias = 72;
const initialN = 128; // 0x80
const delimiter = '-'; // '\x2D'

/** Regular expressions */
const regexPunycode = /^xn--/;
const regexNonASCII = /[^\0-\x7F]/; // Note: U+007F DEL is excluded too.
const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */
const errors = {
	'overflow': 'Overflow: input needs wider integers to process',
	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	'invalid-input': 'Invalid input'
};

/** Convenience shortcuts */
const baseMinusTMin = base - tMin;
const floor = Math.floor;
const stringFromCharCode = String.fromCharCode;

/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */
function error(type) {
	throw new RangeError(errors[type]);
}

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */
function map(array, callback) {
	const result = [];
	let length = array.length;
	while (length--) {
		result[length] = callback(array[length]);
	}
	return result;
}

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {String} A new string of characters returned by the callback
 * function.
 */
function mapDomain(domain, callback) {
	const parts = domain.split('@');
	let result = '';
	if (parts.length > 1) {
		// In email addresses, only the domain name should be punycoded. Leave
		// the local part (i.e. everything up to `@`) intact.
		result = parts[0] + '@';
		domain = parts[1];
	}
	// Avoid `split(regex)` for IE8 compatibility. See #17.
	domain = domain.replace(regexSeparators, '\x2E');
	const labels = domain.split('.');
	const encoded = map(labels, callback).join('.');
	return result + encoded;
}

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
function ucs2decode(string) {
	const output = [];
	let counter = 0;
	const length = string.length;
	while (counter < length) {
		const value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// It's a high surrogate, and there is a next character.
			const extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// It's an unmatched surrogate; only append this code unit, in case the
				// next code unit is the high surrogate of a surrogate pair.
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */
const ucs2encode = codePoints => String.fromCodePoint(...codePoints);

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */
const basicToDigit = function(codePoint) {
	if (codePoint >= 0x30 && codePoint < 0x3A) {
		return 26 + (codePoint - 0x30);
	}
	if (codePoint >= 0x41 && codePoint < 0x5B) {
		return codePoint - 0x41;
	}
	if (codePoint >= 0x61 && codePoint < 0x7B) {
		return codePoint - 0x61;
	}
	return base;
};

/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */
const digitToBasic = function(digit, flag) {
	//  0..25 map to ASCII a..z or A..Z
	// 26..35 map to ASCII 0..9
	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */
const adapt = function(delta, numPoints, firstTime) {
	let k = 0;
	delta = firstTime ? floor(delta / damp) : delta >> 1;
	delta += floor(delta / numPoints);
	for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
		delta = floor(delta / baseMinusTMin);
	}
	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */
const decode = function(input) {
	// Don't use UCS-2.
	const output = [];
	const inputLength = input.length;
	let i = 0;
	let n = initialN;
	let bias = initialBias;

	// Handle the basic code points: let `basic` be the number of input code
	// points before the last delimiter, or `0` if there is none, then copy
	// the first basic code points to the output.

	let basic = input.lastIndexOf(delimiter);
	if (basic < 0) {
		basic = 0;
	}

	for (let j = 0; j < basic; ++j) {
		// if it's not a basic code point
		if (input.charCodeAt(j) >= 0x80) {
			error('not-basic');
		}
		output.push(input.charCodeAt(j));
	}

	// Main decoding loop: start just after the last delimiter if any basic code
	// points were copied; start at the beginning otherwise.

	for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

		// `index` is the index of the next character to be consumed.
		// Decode a generalized variable-length integer into `delta`,
		// which gets added to `i`. The overflow checking is easier
		// if we increase `i` as we go, then subtract off its starting
		// value at the end to obtain `delta`.
		const oldi = i;
		for (let w = 1, k = base; /* no condition */; k += base) {

			if (index >= inputLength) {
				error('invalid-input');
			}

			const digit = basicToDigit(input.charCodeAt(index++));

			if (digit >= base) {
				error('invalid-input');
			}
			if (digit > floor((maxInt - i) / w)) {
				error('overflow');
			}

			i += digit * w;
			const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

			if (digit < t) {
				break;
			}

			const baseMinusT = base - t;
			if (w > floor(maxInt / baseMinusT)) {
				error('overflow');
			}

			w *= baseMinusT;

		}

		const out = output.length + 1;
		bias = adapt(i - oldi, out, oldi == 0);

		// `i` was supposed to wrap around from `out` to `0`,
		// incrementing `n` each time, so we'll fix that now:
		if (floor(i / out) > maxInt - n) {
			error('overflow');
		}

		n += floor(i / out);
		i %= out;

		// Insert `n` at position `i` of the output.
		output.splice(i++, 0, n);

	}

	return String.fromCodePoint(...output);
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */
const encode = function(input) {
	const output = [];

	// Convert the input in UCS-2 to an array of Unicode code points.
	input = ucs2decode(input);

	// Cache the length.
	const inputLength = input.length;

	// Initialize the state.
	let n = initialN;
	let delta = 0;
	let bias = initialBias;

	// Handle the basic code points.
	for (const currentValue of input) {
		if (currentValue < 0x80) {
			output.push(stringFromCharCode(currentValue));
		}
	}

	const basicLength = output.length;
	let handledCPCount = basicLength;

	// `handledCPCount` is the number of code points that have been handled;
	// `basicLength` is the number of basic code points.

	// Finish the basic string with a delimiter unless it's empty.
	if (basicLength) {
		output.push(delimiter);
	}

	// Main encoding loop:
	while (handledCPCount < inputLength) {

		// All non-basic code points < n have been handled already. Find the next
		// larger one:
		let m = maxInt;
		for (const currentValue of input) {
			if (currentValue >= n && currentValue < m) {
				m = currentValue;
			}
		}

		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
		// but guard against overflow.
		const handledCPCountPlusOne = handledCPCount + 1;
		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
			error('overflow');
		}

		delta += (m - n) * handledCPCountPlusOne;
		n = m;

		for (const currentValue of input) {
			if (currentValue < n && ++delta > maxInt) {
				error('overflow');
			}
			if (currentValue === n) {
				// Represent delta as a generalized variable-length integer.
				let q = delta;
				for (let k = base; /* no condition */; k += base) {
					const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
					if (q < t) {
						break;
					}
					const qMinusT = q - t;
					const baseMinusT = base - t;
					output.push(
						stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
					);
					q = floor(qMinusT / baseMinusT);
				}

				output.push(stringFromCharCode(digitToBasic(q, 0)));
				bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
				delta = 0;
				++handledCPCount;
			}
		}

		++delta;
		++n;

	}
	return output.join('');
};

/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */
const toUnicode = function(input) {
	return mapDomain(input, function(string) {
		return regexPunycode.test(string)
			? decode(string.slice(4).toLowerCase())
			: string;
	});
};

/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */
const toASCII = function(input) {
	return mapDomain(input, function(string) {
		return regexNonASCII.test(string)
			? 'xn--' + encode(string)
			: string;
	});
};

/*--------------------------------------------------------------------------*/

/** Define the public API */
const punycode = {
	/**
	 * A string representing the current Punycode.js version number.
	 * @memberOf punycode
	 * @type String
	 */
	'version': '2.1.0',
	/**
	 * An object of methods to convert from JavaScript's internal character
	 * representation (UCS-2) to Unicode code points, and back.
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode
	 * @type Object
	 */
	'ucs2': {
		'decode': ucs2decode,
		'encode': ucs2encode
	},
	'decode': decode,
	'encode': encode,
	'toASCII': toASCII,
	'toUnicode': toUnicode
};


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (punycode);


/***/ }),

/***/ 35491:
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ 48190:
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ 60664:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ 47630:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ 19532:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ 82563:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ 58171:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/////////////////////////////////////////////////////////////////////////////////
/* UAParser.js v1.0.35
   Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
   MIT License *//*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Demo   : https://faisalman.github.io/ua-parser-js
   Source : https://github.com/faisalman/ua-parser-js */
/////////////////////////////////////////////////////////////////////////////////

(function (window, undefined) {

    'use strict';

    //////////////
    // Constants
    /////////////


    var LIBVERSION  = '1.0.35',
        EMPTY       = '',
        UNKNOWN     = '?',
        FUNC_TYPE   = 'function',
        UNDEF_TYPE  = 'undefined',
        OBJ_TYPE    = 'object',
        STR_TYPE    = 'string',
        MAJOR       = 'major',
        MODEL       = 'model',
        NAME        = 'name',
        TYPE        = 'type',
        VENDOR      = 'vendor',
        VERSION     = 'version',
        ARCHITECTURE= 'architecture',
        CONSOLE     = 'console',
        MOBILE      = 'mobile',
        TABLET      = 'tablet',
        SMARTTV     = 'smarttv',
        WEARABLE    = 'wearable',
        EMBEDDED    = 'embedded',
        UA_MAX_LENGTH = 350;

    var AMAZON  = 'Amazon',
        APPLE   = 'Apple',
        ASUS    = 'ASUS',
        BLACKBERRY = 'BlackBerry',
        BROWSER = 'Browser',
        CHROME  = 'Chrome',
        EDGE    = 'Edge',
        FIREFOX = 'Firefox',
        GOOGLE  = 'Google',
        HUAWEI  = 'Huawei',
        LG      = 'LG',
        MICROSOFT = 'Microsoft',
        MOTOROLA  = 'Motorola',
        OPERA   = 'Opera',
        SAMSUNG = 'Samsung',
        SHARP   = 'Sharp',
        SONY    = 'Sony',
        VIERA   = 'Viera',
        XIAOMI  = 'Xiaomi',
        ZEBRA   = 'Zebra',
        FACEBOOK    = 'Facebook',
        CHROMIUM_OS = 'Chromium OS',
        MAC_OS  = 'Mac OS';

    ///////////
    // Helper
    //////////

    var extend = function (regexes, extensions) {
            var mergedRegexes = {};
            for (var i in regexes) {
                if (extensions[i] && extensions[i].length % 2 === 0) {
                    mergedRegexes[i] = extensions[i].concat(regexes[i]);
                } else {
                    mergedRegexes[i] = regexes[i];
                }
            }
            return mergedRegexes;
        },
        enumerize = function (arr) {
            var enums = {};
            for (var i=0; i<arr.length; i++) {
                enums[arr[i].toUpperCase()] = arr[i];
            }
            return enums;
        },
        has = function (str1, str2) {
            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
        },
        lowerize = function (str) {
            return str.toLowerCase();
        },
        majorize = function (version) {
            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined;
        },
        trim = function (str, len) {
            if (typeof(str) === STR_TYPE) {
                str = str.replace(/^\s\s*/, EMPTY);
                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
            }
    };

    ///////////////
    // Map helper
    //////////////

    var rgxMapper = function (ua, arrays) {

            var i = 0, j, k, p, q, matches, match;

            // loop through all regexes maps
            while (i < arrays.length && !matches) {

                var regex = arrays[i],       // even sequence (0,2,4,..)
                    props = arrays[i + 1];   // odd sequence (1,3,5,..)
                j = k = 0;

                // try matching uastring with regexes
                while (j < regex.length && !matches) {

                    if (!regex[j]) { break; }
                    matches = regex[j++].exec(ua);

                    if (!!matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length === 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    } else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                } else if (q.length === 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    } else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                } else if (q.length === 4) {
                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            } else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
        },

        strMapper = function (str, map) {

            for (var i in map) {
                // check if current value is array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                } else if (has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return str;
    };

    ///////////////
    // String map
    //////////////

    // Safari < 3.0
    var oldSafariMap = {
            '1.0'   : '/8',
            '1.2'   : '/1',
            '1.3'   : '/3',
            '2.0'   : '/412',
            '2.0.2' : '/416',
            '2.0.3' : '/417',
            '2.0.4' : '/419',
            '?'     : '/'
        },
        windowsVersionMap = {
            'ME'        : '4.90',
            'NT 3.11'   : 'NT3.51',
            'NT 4.0'    : 'NT4.0',
            '2000'      : 'NT 5.0',
            'XP'        : ['NT 5.1', 'NT 5.2'],
            'Vista'     : 'NT 6.0',
            '7'         : 'NT 6.1',
            '8'         : 'NT 6.2',
            '8.1'       : 'NT 6.3',
            '10'        : ['NT 6.4', 'NT 10.0'],
            'RT'        : 'ARM'
    };

    //////////////
    // Regex map
    /////////////

    var regexes = {

        browser : [[

            /\b(?:crmo|crios)\/([\w\.]+)/i                                      // Chrome for Android/iOS
            ], [VERSION, [NAME, 'Chrome']], [
            /edg(?:e|ios|a)?\/([\w\.]+)/i                                       // Microsoft Edge
            ], [VERSION, [NAME, 'Edge']], [

            // Presto based
            /(opera mini)\/([-\w\.]+)/i,                                        // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,                 // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i                           // Opera
            ], [NAME, VERSION], [
            /opios[\/ ]+([\w\.]+)/i                                             // Opera mini on iphone >= 8.0
            ], [VERSION, [NAME, OPERA+' Mini']], [
            /\bopr\/([\w\.]+)/i                                                 // Opera Webkit
            ], [VERSION, [NAME, OPERA]], [

            // Mixed
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,      // Lunascape/Maxthon/Netfront/Jasmine/Blazer
            // Trident based
            /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,               // Avant/IEMobile/SlimBrowser
            /(ba?idubrowser)[\/ ]?([\w\.]+)/i,                                  // Baidu Browser
            /(?:ms|\()(ie) ([\w\.]+)/i,                                         // Internet Explorer

            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
            /(heytap|ovi)browser\/([\d\.]+)/i,                                  // Heytap/Ovi
            /(weibo)__([\d\.]+)/i                                               // Weibo
            ], [NAME, VERSION], [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i                 // UCBrowser
            ], [VERSION, [NAME, 'UC'+BROWSER]], [
            /microm.+\bqbcore\/([\w\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i
            ], [VERSION, [NAME, 'WeChat(Win) Desktop']], [
            /micromessenger\/([\w\.]+)/i                                        // WeChat
            ], [VERSION, [NAME, 'WeChat']], [
            /konqueror\/([\w\.]+)/i                                             // Konqueror
            ], [VERSION, [NAME, 'Konqueror']], [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i                       // IE11
            ], [VERSION, [NAME, 'IE']], [
            /ya(?:search)?browser\/([\w\.]+)/i                                  // Yandex
            ], [VERSION, [NAME, 'Yandex']], [
            /(avast|avg)\/([\w\.]+)/i                                           // Avast/AVG Secure Browser
            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [
            /\bfocus\/([\w\.]+)/i                                               // Firefox Focus
            ], [VERSION, [NAME, FIREFOX+' Focus']], [
            /\bopt\/([\w\.]+)/i                                                 // Opera Touch
            ], [VERSION, [NAME, OPERA+' Touch']], [
            /coc_coc\w+\/([\w\.]+)/i                                            // Coc Coc Browser
            ], [VERSION, [NAME, 'Coc Coc']], [
            /dolfin\/([\w\.]+)/i                                                // Dolphin
            ], [VERSION, [NAME, 'Dolphin']], [
            /coast\/([\w\.]+)/i                                                 // Opera Coast
            ], [VERSION, [NAME, OPERA+' Coast']], [
            /miuibrowser\/([\w\.]+)/i                                           // MIUI Browser
            ], [VERSION, [NAME, 'MIUI '+BROWSER]], [
            /fxios\/([-\w\.]+)/i                                                // Firefox for iOS
            ], [VERSION, [NAME, FIREFOX]], [
            /\bqihu|(qi?ho?o?|360)browser/i                                     // 360
            ], [[NAME, '360 '+BROWSER]], [
            /(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i
            ], [[NAME, /(.+)/, '$1 '+BROWSER], VERSION], [                      // Oculus/Samsung/Sailfish/Huawei Browser
            /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
            ], [[NAME, /_/g, ' '], VERSION], [
            /(electron)\/([\w\.]+) safari/i,                                    // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,                   // Tesla
            /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i            // QQBrowser/Baidu App/2345 Browser
            ], [NAME, VERSION], [
            /(metasr)[\/ ]?([\w\.]+)/i,                                         // SouGouBrowser
            /(lbbrowser)/i,                                                     // LieBao Browser
            /\[(linkedin)app\]/i                                                // LinkedIn App for iOS & Android
            ], [NAME], [

            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i       // Facebook App for iOS & Android
            ], [[NAME, FACEBOOK], VERSION], [
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,                             // Kakao App
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,                                  // Naver InApp
            /safari (line)\/([\w\.]+)/i,                                        // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,                                        // Line App for Android
            /(chromium|instagram)[\/ ]([-\w\.]+)/i                              // Chromium/Instagram
            ], [NAME, VERSION], [
            /\bgsa\/([\w\.]+) .*safari\//i                                      // Google Search Appliance on iOS
            ], [VERSION, [NAME, 'GSA']], [
            /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i                        // TikTok
            ], [VERSION, [NAME, 'TikTok']], [

            /headlesschrome(?:\/([\w\.]+)| )/i                                  // Chrome Headless
            ], [VERSION, [NAME, CHROME+' Headless']], [

            / wv\).+(chrome)\/([\w\.]+)/i                                       // Chrome WebView
            ], [[NAME, CHROME+' WebView'], VERSION], [

            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i           // Android Browser
            ], [VERSION, [NAME, 'Android '+BROWSER]], [

            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia
            ], [NAME, VERSION], [

            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i                      // Mobile Safari
            ], [VERSION, [NAME, 'Mobile Safari']], [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile
            ], [VERSION, NAME], [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i                      // Safari < 3.0
            ], [NAME, [VERSION, strMapper, oldSafariMap]], [

            /(webkit|khtml)\/([\w\.]+)/i
            ], [NAME, VERSION], [

            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i                              // Netscape
            ], [[NAME, 'Netscape'], VERSION], [
            /mobile vr; rv:([\w\.]+)\).+firefox/i                               // Firefox Reality
            ], [VERSION, [NAME, FIREFOX+' Reality']], [
            /ekiohf.+(flow)\/([\w\.]+)/i,                                       // Flow
            /(swiftfox)/i,                                                      // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,                                            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,                         // Mozilla

            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i,                                             // Links
            /panasonic;(viera)/i                                                // Panasonic Viera
            ], [NAME, VERSION], [
            
            /(cobalt)\/([\w\.]+)/i                                              // Cobalt
            ], [NAME, [VERSION, /master.|lts./, ""]]
        ],

        cpu : [[

            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i                     // AMD64 (x64)
            ], [[ARCHITECTURE, 'amd64']], [

            /(ia32(?=;))/i                                                      // IA32 (quicktime)
            ], [[ARCHITECTURE, lowerize]], [

            /((?:i[346]|x)86)[;\)]/i                                            // IA32 (x86)
            ], [[ARCHITECTURE, 'ia32']], [

            /\b(aarch64|arm(v?8e?l?|_?64))\b/i                                 // ARM64
            ], [[ARCHITECTURE, 'arm64']], [

            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i                                   // ARMHF
            ], [[ARCHITECTURE, 'armhf']], [

            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
            ], [[ARCHITECTURE, 'arm']], [

            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i                            // PowerPC
            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [

            /(sun4\w)[;\)]/i                                                    // SPARC
            ], [[ARCHITECTURE, 'sparc']], [

            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
            ], [[ARCHITECTURE, lowerize]]
        ],

        device : [[

            //////////////////////////
            // MOBILES & TABLETS
            /////////////////////////

            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [
            /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]([-\w]+)/i,
            /sec-(sgh\w+)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [

            // Apple
            /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i                          // iPod/iPhone
            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [
            /\((ipad);[-\w\),; ]+apple/i,                                       // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [
            /(macintosh);/i
            ], [MODEL, [VENDOR, APPLE]], [

            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [

            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [
            /(?:huawei|honor)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [

            // Xiaomi
            /\b(poco[\w ]+)(?: bui|\))/i,                                       // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,                                           // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,                             // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,                   // Xiaomi Redmi
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i                        // Mi Pad tablets
            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [

            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [

            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [

            // Realme
            /\b(rmx[12]\d{3})(?: bui|;|\))/i
            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [

            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [

            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [

            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
            ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [

            // Google
            /(pixel c)\b/i                                                      // Google Pixel C
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i                         // Google Pixel
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [

            // Sony
            /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [

            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,                             // Kindle Fire without Silk / Echo Show
            /(kf[a-z]+)( bui|\)).+silk\//i                                      // Kindle Fire HD
            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i                     // Fire Phone
            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [

            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i                                      // BlackBerry PlayBook
            ], [MODEL, VENDOR, [TYPE, TABLET]], [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i                                                    // BlackBerry 10
            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [

            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [

            // HTC
            /(nexus 9)/i                                                        // HTC Nexus 9
            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,                         // HTC

            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [

            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp) ([\w ]+\w)/i,                                                 // HP iPAQ
            /(asus)-?(\w+)/i,                                                   // Asus
            /(microsoft); (lumia[\w ]+)/i,                                      // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,                                          // Lenovo
            /(jolla)/i,                                                         // Jolla
            /(oppo) ?([\w ]+) bui/i                                             // OPPO
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /(kobo)\s(ereader|touch)/i,                                         // Kobo
            /(archos) (gamepad2?)/i,                                            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(nook)[\w ]+build\/(\w+)/i,                                        // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,                                   // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,                                  // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,                                      // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,                                    // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i                                   // Vodafone
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(surface duo)/i                                                    // Surface Duo
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i                                 // Fairphone
            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
            /(u304aa)/i                                                         // AT&T
            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
            /\bsie-(\w*)/i                                                      // Siemens
            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
            /\b(rct\w+) b/i                                                     // RCA Tablets
            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
            /\b(venue[\d ]{2,7}) b/i                                            // Dell Venue Tablets
            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
            /\b(q(?:mv|ta)\w+) b/i                                              // Verizon Tablet
            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i                       // Barnes & Noble Tablet
            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
            /\b(tm\d{3}\w+) b/i
            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
            /\b(k88) b/i                                                        // ZTE K Series Tablet
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
            /\b(nx\d{3}j) b/i                                                   // ZTE Nubia
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
            /\b(gen\d{3}) b.+49h/i                                              // Swiss GEN Mobile
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
            /\b(zur\d{3}) b/i                                                   // Swiss ZUR Tablet
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
            /\b((zeki)?tb.*\b) b/i                                              // Zeki Tablets
            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i                                // Dragon Touch Tablet
            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
            /\b(ns-?\w{0,9}) b/i                                                // Insignia Tablets
            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
            /\b((nxa|next)-?\w{0,9}) b/i                                        // NextBook Tablets
            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones
            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
            /\b(lvtel\-)?(v1[12]) b/i                                           // LvTel Phones
            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
            /\b(ph-1) /i                                                        // Essential PH-1
            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
            /\b(v(100md|700na|7011|917g).*\b) b/i                               // Envizen Tablets
            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
            /\b(trio[-\w\. ]+) b/i                                              // MachSpeed Tablets
            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
            /\btu_(1491) b/i                                                    // Rotor Tablets
            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
            /(shield[\w ]+) b/i                                                 // Nvidia Shield Tablets
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
            /(sprint) (\w+)/i                                                   // Sprint Phones
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
            ], [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i             // Zebra
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [

            ///////////////////
            // SMARTTVS
            ///////////////////

            /smart-tv.+(samsung)/i                                              // Samsung
            ], [VENDOR, [TYPE, SMARTTV]], [
            /hbbtv.+maple;(\d+)/i
            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i        // LG SmartTV
            ], [[VENDOR, LG], [TYPE, SMARTTV]], [
            /(apple) ?tv/i                                                      // Apple TV
            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [
            /crkey/i                                                            // Google Chromecast
            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [
            /droid.+aft(\w)( bui|\))/i                                          // Fire TV
            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i                                               // Sharp
            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[
            /(bravia[\w ]+)( bui|\))/i                                              // Sony
            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [
            /(mitv-\w{5}) bui/i                                                 // Xiaomi
            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [
            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT
            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,                          // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i         // HbbTV devices
            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i                   // SmartTV from Unidentified Vendors
            ], [[TYPE, SMARTTV]], [

            ///////////////////
            // CONSOLES
            ///////////////////

            /(ouya)/i,                                                          // Ouya
            /(nintendo) ([wids3utch]+)/i                                        // Nintendo
            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [
            /droid.+; (shield) bui/i                                            // Nvidia
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [
            /(playstation [345portablevi]+)/i                                   // Playstation
            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i                                // Microsoft Xbox
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [

            ///////////////////
            // WEARABLES
            ///////////////////

            /((pebble))app/i                                                    // Pebble
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i                              // Apple Watch
            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [
            /droid.+; (glass) \d/i                                              // Google Glass
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [
            /droid.+; (wt63?0{2,3})\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [
            /(quest( 2| pro)?)/i                                                // Oculus Quest
            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [

            ///////////////////
            // EMBEDDED
            ///////////////////

            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i                              // Tesla
            ], [VENDOR, [TYPE, EMBEDDED]], [
            /(aeobc)\b/i                                                        // Echo Dot
            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [

            ////////////////////
            // MIXED (GENERIC)
            ///////////////////

            /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i           // Android Phones from Unidentified Vendors
            ], [MODEL, [TYPE, MOBILE]], [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors
            ], [MODEL, [TYPE, TABLET]], [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i                      // Unidentifiable Tablet
            ], [[TYPE, TABLET]], [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile
            ], [[TYPE, MOBILE]], [
            /(android[-\w\. ]{0,9});.+buil/i                                    // Generic Android Device
            ], [MODEL, [VENDOR, 'Generic']]
        ],

        engine : [[

            /windows.+ edge\/([\w\.]+)/i                                       // EdgeHTML
            ], [VERSION, [NAME, EDGE+'HTML']], [

            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i                         // Blink
            ], [VERSION, [NAME, 'Blink']], [

            /(presto)\/([\w\.]+)/i,                                             // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
            /ekioh(flow)\/([\w\.]+)/i,                                          // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,                           // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i,                                      // iCab
            /\b(libweb)/i
            ], [NAME, VERSION], [

            /rv\:([\w\.]{1,9})\b.+(gecko)/i                                     // Gecko
            ], [VERSION, NAME]
        ],

        os : [[

            // Windows
            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)
            ], [NAME, VERSION], [
            /(windows) nt 6\.2; (arm)/i,                                        // Windows RT
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,            // Windows Phone
            /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [
            /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
            ], [[NAME, 'Windows'], [VERSION, strMapper, windowsVersionMap]], [

            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,              // iOS
            /ios;fbsv\/([\d\.]+)/i,
            /cfnetwork\/.+darwin/i
            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i                             // Mac OS
            ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [

            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS
            ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,                                      // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,                                     // Tizen/KaiOS
            /\((series40);/i                                                    // Series 40
            ], [NAME, VERSION], [
            /\(bb(10);/i                                                        // BlackBerry 10
            ], [VERSION, [NAME, BLACKBERRY]], [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i         // Symbian
            ], [VERSION, [NAME, 'Symbian']], [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
            ], [VERSION, [NAME, FIREFOX+' OS']], [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i                              // WebOS
            ], [VERSION, [NAME, 'webOS']], [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i                              // watchOS
            ], [VERSION, [NAME, 'watchOS']], [

            // Google Chromecast
            /crkey\/([\d\.]+)/i                                                 // Google Chromecast
            ], [VERSION, [NAME, CHROME+'cast']], [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i                                  // Chromium OS
            ], [[NAME, CHROMIUM_OS], VERSION],[

            // Smart TVs
            /panasonic;(viera)/i,                                               // Panasonic Viera
            /(netrange)mmh/i,                                                   // Netrange
            /(nettv)\/(\d+\.[\w\.]+)/i,                                         // NetTV

            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)

            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,                            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,                                           // Mint
            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,                                         // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,                                                // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i                                                    // Haiku
            ], [NAME, VERSION], [
            /(sunos) ?([\w\.\d]*)/i                                             // Solaris
            ], [[NAME, 'Solaris'], VERSION], [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,                              // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,                                  // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
            /(unix) ?([\w\.]*)/i                                                // UNIX
            ], [NAME, VERSION]
        ]
    };

    /////////////////
    // Constructor
    ////////////////

    var UAParser = function (ua, extensions) {

        if (typeof ua === OBJ_TYPE) {
            extensions = ua;
            ua = undefined;
        }

        if (!(this instanceof UAParser)) {
            return new UAParser(ua, extensions).getResult();
        }

        var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined;
        var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);
        var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;

        this.getBrowser = function () {
            var _browser = {};
            _browser[NAME] = undefined;
            _browser[VERSION] = undefined;
            rgxMapper.call(_browser, _ua, _rgxmap.browser);
            _browser[MAJOR] = majorize(_browser[VERSION]);
            // Brave-specific detection
            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
                _browser[NAME] = 'Brave';
            }
            return _browser;
        };
        this.getCPU = function () {
            var _cpu = {};
            _cpu[ARCHITECTURE] = undefined;
            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
            return _cpu;
        };
        this.getDevice = function () {
            var _device = {};
            _device[VENDOR] = undefined;
            _device[MODEL] = undefined;
            _device[TYPE] = undefined;
            rgxMapper.call(_device, _ua, _rgxmap.device);
            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
                _device[TYPE] = MOBILE;
            }
            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
            if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
                _device[MODEL] = 'iPad';
                _device[TYPE] = TABLET;
            }
            return _device;
        };
        this.getEngine = function () {
            var _engine = {};
            _engine[NAME] = undefined;
            _engine[VERSION] = undefined;
            rgxMapper.call(_engine, _ua, _rgxmap.engine);
            return _engine;
        };
        this.getOS = function () {
            var _os = {};
            _os[NAME] = undefined;
            _os[VERSION] = undefined;
            rgxMapper.call(_os, _ua, _rgxmap.os);
            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != 'Unknown') {
                _os[NAME] = _uach.platform  
                                    .replace(/chrome os/i, CHROMIUM_OS)
                                    .replace(/macos/i, MAC_OS);           // backward compatibility
            }
            return _os;
        };
        this.getResult = function () {
            return {
                ua      : this.getUA(),
                browser : this.getBrowser(),
                engine  : this.getEngine(),
                os      : this.getOS(),
                device  : this.getDevice(),
                cpu     : this.getCPU()
            };
        };
        this.getUA = function () {
            return _ua;
        };
        this.setUA = function (ua) {
            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;
            return this;
        };
        this.setUA(_ua);
        return this;
    };

    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);
    UAParser.CPU = enumerize([ARCHITECTURE]);
    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);

    ///////////
    // Export
    //////////

    // check js environment
    if (typeof(exports) !== UNDEF_TYPE) {
        // nodejs env
        if ("object" !== UNDEF_TYPE && module.exports) {
            exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if ("function" === FUNC_TYPE && __webpack_require__.amdO) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                return UAParser;
            }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof window !== UNDEF_TYPE) {
            // browser env
            window.UAParser = UAParser;
        }
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
    if ($ && !$.ua) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function () {
            return parser.getUA();
        };
        $.ua.set = function (ua) {
            parser.setUA(ua);
            var result = parser.getResult();
            for (var prop in result) {
                $.ua[prop] = result[prop];
            }
        };
    }

})(typeof window === 'object' ? window : this);


/***/ }),

/***/ 53679:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (module) {
  /* webextension-polyfill - v0.10.0 - Fri Aug 12 2022 19:42:44 */

  /* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */

  /* vim: set sts=2 sw=2 et tw=80: */

  /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
  "use strict";

  if (!globalThis.chrome?.runtime?.id) {
    throw new Error("This script should only be loaded in a browser extension.");
  }

  if (typeof globalThis.browser === "undefined" || Object.getPrototypeOf(globalThis.browser) !== Object.prototype) {
    const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE = "The message port closed before a response was received."; // Wrapping the bulk of this polyfill in a one-time-use function is a minor
    // optimization for Firefox. Since Spidermonkey does not fully parse the
    // contents of a function until the first time it's called, and since it will
    // never actually need to be called, this allows the polyfill to be included
    // in Firefox nearly for free.

    const wrapAPIs = extensionAPIs => {
      // NOTE: apiMetadata is associated to the content of the api-metadata.json file
      // at build time by replacing the following "include" with the content of the
      // JSON file.
      const apiMetadata = {
        "alarms": {
          "clear": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "clearAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "get": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "bookmarks": {
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getChildren": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getRecent": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getSubTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTree": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "browserAction": {
          "disable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "enable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "getBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getBadgeText": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "openPopup": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setBadgeText": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "browsingData": {
          "remove": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "removeCache": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCookies": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeDownloads": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFormData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeHistory": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeLocalStorage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePasswords": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePluginData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "settings": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "commands": {
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "contextMenus": {
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "cookies": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAllCookieStores": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "set": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "devtools": {
          "inspectedWindow": {
            "eval": {
              "minArgs": 1,
              "maxArgs": 2,
              "singleCallbackArg": false
            }
          },
          "panels": {
            "create": {
              "minArgs": 3,
              "maxArgs": 3,
              "singleCallbackArg": true
            },
            "elements": {
              "createSidebarPane": {
                "minArgs": 1,
                "maxArgs": 1
              }
            }
          }
        },
        "downloads": {
          "cancel": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "download": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "erase": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFileIcon": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "open": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "pause": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFile": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "resume": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "extension": {
          "isAllowedFileSchemeAccess": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "isAllowedIncognitoAccess": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "history": {
          "addUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "deleteRange": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getVisits": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "i18n": {
          "detectLanguage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAcceptLanguages": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "identity": {
          "launchWebAuthFlow": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "idle": {
          "queryState": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "management": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getSelf": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setEnabled": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "uninstallSelf": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "notifications": {
          "clear": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPermissionLevel": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "pageAction": {
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "hide": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "permissions": {
          "contains": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "request": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "runtime": {
          "getBackgroundPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPlatformInfo": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "openOptionsPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "requestUpdateCheck": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "sendMessage": {
            "minArgs": 1,
            "maxArgs": 3
          },
          "sendNativeMessage": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "setUninstallURL": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "sessions": {
          "getDevices": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getRecentlyClosed": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "restore": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "storage": {
          "local": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          },
          "managed": {
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            }
          },
          "sync": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          }
        },
        "tabs": {
          "captureVisibleTab": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "detectLanguage": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "discard": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "duplicate": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "executeScript": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getZoom": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getZoomSettings": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "goBack": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "goForward": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "highlight": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "insertCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "query": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "reload": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "sendMessage": {
            "minArgs": 2,
            "maxArgs": 3
          },
          "setZoom": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "setZoomSettings": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "update": {
            "minArgs": 1,
            "maxArgs": 2
          }
        },
        "topSites": {
          "get": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "webNavigation": {
          "getAllFrames": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFrame": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "webRequest": {
          "handlerBehaviorChanged": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "windows": {
          "create": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getLastFocused": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        }
      };

      if (Object.keys(apiMetadata).length === 0) {
        throw new Error("api-metadata.json has not been included in browser-polyfill");
      }
      /**
       * A WeakMap subclass which creates and stores a value for any key which does
       * not exist when accessed, but behaves exactly as an ordinary WeakMap
       * otherwise.
       *
       * @param {function} createItem
       *        A function which will be called in order to create the value for any
       *        key which does not exist, the first time it is accessed. The
       *        function receives, as its only argument, the key being created.
       */


      class DefaultWeakMap extends WeakMap {
        constructor(createItem, items = undefined) {
          super(items);
          this.createItem = createItem;
        }

        get(key) {
          if (!this.has(key)) {
            this.set(key, this.createItem(key));
          }

          return super.get(key);
        }

      }
      /**
       * Returns true if the given object is an object with a `then` method, and can
       * therefore be assumed to behave as a Promise.
       *
       * @param {*} value The value to test.
       * @returns {boolean} True if the value is thenable.
       */


      const isThenable = value => {
        return value && typeof value === "object" && typeof value.then === "function";
      };
      /**
       * Creates and returns a function which, when called, will resolve or reject
       * the given promise based on how it is called:
       *
       * - If, when called, `chrome.runtime.lastError` contains a non-null object,
       *   the promise is rejected with that value.
       * - If the function is called with exactly one argument, the promise is
       *   resolved to that value.
       * - Otherwise, the promise is resolved to an array containing all of the
       *   function's arguments.
       *
       * @param {object} promise
       *        An object containing the resolution and rejection functions of a
       *        promise.
       * @param {function} promise.resolve
       *        The promise's resolution function.
       * @param {function} promise.reject
       *        The promise's rejection function.
       * @param {object} metadata
       *        Metadata about the wrapped method which has created the callback.
       * @param {boolean} metadata.singleCallbackArg
       *        Whether or not the promise is resolved with only the first
       *        argument of the callback, alternatively an array of all the
       *        callback arguments is resolved. By default, if the callback
       *        function is invoked with only a single argument, that will be
       *        resolved to the promise, while all arguments will be resolved as
       *        an array if multiple are given.
       *
       * @returns {function}
       *        The generated callback function.
       */


      const makeCallback = (promise, metadata) => {
        return (...callbackArgs) => {
          if (extensionAPIs.runtime.lastError) {
            promise.reject(new Error(extensionAPIs.runtime.lastError.message));
          } else if (metadata.singleCallbackArg || callbackArgs.length <= 1 && metadata.singleCallbackArg !== false) {
            promise.resolve(callbackArgs[0]);
          } else {
            promise.resolve(callbackArgs);
          }
        };
      };

      const pluralizeArguments = numArgs => numArgs == 1 ? "argument" : "arguments";
      /**
       * Creates a wrapper function for a method with the given name and metadata.
       *
       * @param {string} name
       *        The name of the method which is being wrapped.
       * @param {object} metadata
       *        Metadata about the method being wrapped.
       * @param {integer} metadata.minArgs
       *        The minimum number of arguments which must be passed to the
       *        function. If called with fewer than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {integer} metadata.maxArgs
       *        The maximum number of arguments which may be passed to the
       *        function. If called with more than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {boolean} metadata.singleCallbackArg
       *        Whether or not the promise is resolved with only the first
       *        argument of the callback, alternatively an array of all the
       *        callback arguments is resolved. By default, if the callback
       *        function is invoked with only a single argument, that will be
       *        resolved to the promise, while all arguments will be resolved as
       *        an array if multiple are given.
       *
       * @returns {function(object, ...*)}
       *       The generated wrapper function.
       */


      const wrapAsyncFunction = (name, metadata) => {
        return function asyncFunctionWrapper(target, ...args) {
          if (args.length < metadata.minArgs) {
            throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
          }

          if (args.length > metadata.maxArgs) {
            throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
          }

          return new Promise((resolve, reject) => {
            if (metadata.fallbackToNoCallback) {
              // This API method has currently no callback on Chrome, but it return a promise on Firefox,
              // and so the polyfill will try to call it with a callback first, and it will fallback
              // to not passing the callback if the first call fails.
              try {
                target[name](...args, makeCallback({
                  resolve,
                  reject
                }, metadata));
              } catch (cbError) {
                console.warn(`${name} API method doesn't seem to support the callback parameter, ` + "falling back to call it without a callback: ", cbError);
                target[name](...args); // Update the API method metadata, so that the next API calls will not try to
                // use the unsupported callback anymore.

                metadata.fallbackToNoCallback = false;
                metadata.noCallback = true;
                resolve();
              }
            } else if (metadata.noCallback) {
              target[name](...args);
              resolve();
            } else {
              target[name](...args, makeCallback({
                resolve,
                reject
              }, metadata));
            }
          });
        };
      };
      /**
       * Wraps an existing method of the target object, so that calls to it are
       * intercepted by the given wrapper function. The wrapper function receives,
       * as its first argument, the original `target` object, followed by each of
       * the arguments passed to the original method.
       *
       * @param {object} target
       *        The original target object that the wrapped method belongs to.
       * @param {function} method
       *        The method being wrapped. This is used as the target of the Proxy
       *        object which is created to wrap the method.
       * @param {function} wrapper
       *        The wrapper function which is called in place of a direct invocation
       *        of the wrapped method.
       *
       * @returns {Proxy<function>}
       *        A Proxy object for the given method, which invokes the given wrapper
       *        method in its place.
       */


      const wrapMethod = (target, method, wrapper) => {
        return new Proxy(method, {
          apply(targetMethod, thisObj, args) {
            return wrapper.call(thisObj, target, ...args);
          }

        });
      };

      let hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);
      /**
       * Wraps an object in a Proxy which intercepts and wraps certain methods
       * based on the given `wrappers` and `metadata` objects.
       *
       * @param {object} target
       *        The target object to wrap.
       *
       * @param {object} [wrappers = {}]
       *        An object tree containing wrapper functions for special cases. Any
       *        function present in this object tree is called in place of the
       *        method in the same location in the `target` object tree. These
       *        wrapper methods are invoked as described in {@see wrapMethod}.
       *
       * @param {object} [metadata = {}]
       *        An object tree containing metadata used to automatically generate
       *        Promise-based wrapper functions for asynchronous. Any function in
       *        the `target` object tree which has a corresponding metadata object
       *        in the same location in the `metadata` tree is replaced with an
       *        automatically-generated wrapper function, as described in
       *        {@see wrapAsyncFunction}
       *
       * @returns {Proxy<object>}
       */

      const wrapObject = (target, wrappers = {}, metadata = {}) => {
        let cache = Object.create(null);
        let handlers = {
          has(proxyTarget, prop) {
            return prop in target || prop in cache;
          },

          get(proxyTarget, prop, receiver) {
            if (prop in cache) {
              return cache[prop];
            }

            if (!(prop in target)) {
              return undefined;
            }

            let value = target[prop];

            if (typeof value === "function") {
              // This is a method on the underlying object. Check if we need to do
              // any wrapping.
              if (typeof wrappers[prop] === "function") {
                // We have a special-case wrapper for this method.
                value = wrapMethod(target, target[prop], wrappers[prop]);
              } else if (hasOwnProperty(metadata, prop)) {
                // This is an async method that we have metadata for. Create a
                // Promise wrapper for it.
                let wrapper = wrapAsyncFunction(prop, metadata[prop]);
                value = wrapMethod(target, target[prop], wrapper);
              } else {
                // This is a method that we don't know or care about. Return the
                // original method, bound to the underlying object.
                value = value.bind(target);
              }
            } else if (typeof value === "object" && value !== null && (hasOwnProperty(wrappers, prop) || hasOwnProperty(metadata, prop))) {
              // This is an object that we need to do some wrapping for the children
              // of. Create a sub-object wrapper for it with the appropriate child
              // metadata.
              value = wrapObject(value, wrappers[prop], metadata[prop]);
            } else if (hasOwnProperty(metadata, "*")) {
              // Wrap all properties in * namespace.
              value = wrapObject(value, wrappers[prop], metadata["*"]);
            } else {
              // We don't need to do any wrapping for this property,
              // so just forward all access to the underlying object.
              Object.defineProperty(cache, prop, {
                configurable: true,
                enumerable: true,

                get() {
                  return target[prop];
                },

                set(value) {
                  target[prop] = value;
                }

              });
              return value;
            }

            cache[prop] = value;
            return value;
          },

          set(proxyTarget, prop, value, receiver) {
            if (prop in cache) {
              cache[prop] = value;
            } else {
              target[prop] = value;
            }

            return true;
          },

          defineProperty(proxyTarget, prop, desc) {
            return Reflect.defineProperty(cache, prop, desc);
          },

          deleteProperty(proxyTarget, prop) {
            return Reflect.deleteProperty(cache, prop);
          }

        }; // Per contract of the Proxy API, the "get" proxy handler must return the
        // original value of the target if that value is declared read-only and
        // non-configurable. For this reason, we create an object with the
        // prototype set to `target` instead of using `target` directly.
        // Otherwise we cannot return a custom object for APIs that
        // are declared read-only and non-configurable, such as `chrome.devtools`.
        //
        // The proxy handlers themselves will still use the original `target`
        // instead of the `proxyTarget`, so that the methods and properties are
        // dereferenced via the original targets.

        let proxyTarget = Object.create(target);
        return new Proxy(proxyTarget, handlers);
      };
      /**
       * Creates a set of wrapper functions for an event object, which handles
       * wrapping of listener functions that those messages are passed.
       *
       * A single wrapper is created for each listener function, and stored in a
       * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`
       * retrieve the original wrapper, so that  attempts to remove a
       * previously-added listener work as expected.
       *
       * @param {DefaultWeakMap<function, function>} wrapperMap
       *        A DefaultWeakMap object which will create the appropriate wrapper
       *        for a given listener function when one does not exist, and retrieve
       *        an existing one when it does.
       *
       * @returns {object}
       */


      const wrapEvent = wrapperMap => ({
        addListener(target, listener, ...args) {
          target.addListener(wrapperMap.get(listener), ...args);
        },

        hasListener(target, listener) {
          return target.hasListener(wrapperMap.get(listener));
        },

        removeListener(target, listener) {
          target.removeListener(wrapperMap.get(listener));
        }

      });

      const onRequestFinishedWrappers = new DefaultWeakMap(listener => {
        if (typeof listener !== "function") {
          return listener;
        }
        /**
         * Wraps an onRequestFinished listener function so that it will return a
         * `getContent()` property which returns a `Promise` rather than using a
         * callback API.
         *
         * @param {object} req
         *        The HAR entry object representing the network request.
         */


        return function onRequestFinished(req) {
          const wrappedReq = wrapObject(req, {}
          /* wrappers */
          , {
            getContent: {
              minArgs: 0,
              maxArgs: 0
            }
          });
          listener(wrappedReq);
        };
      });
      const onMessageWrappers = new DefaultWeakMap(listener => {
        if (typeof listener !== "function") {
          return listener;
        }
        /**
         * Wraps a message listener function so that it may send responses based on
         * its return value, rather than by returning a sentinel value and calling a
         * callback. If the listener function returns a Promise, the response is
         * sent when the promise either resolves or rejects.
         *
         * @param {*} message
         *        The message sent by the other end of the channel.
         * @param {object} sender
         *        Details about the sender of the message.
         * @param {function(*)} sendResponse
         *        A callback which, when called with an arbitrary argument, sends
         *        that value as a response.
         * @returns {boolean}
         *        True if the wrapped listener returned a Promise, which will later
         *        yield a response. False otherwise.
         */


        return function onMessage(message, sender, sendResponse) {
          let didCallSendResponse = false;
          let wrappedSendResponse;
          let sendResponsePromise = new Promise(resolve => {
            wrappedSendResponse = function (response) {
              didCallSendResponse = true;
              resolve(response);
            };
          });
          let result;

          try {
            result = listener(message, sender, wrappedSendResponse);
          } catch (err) {
            result = Promise.reject(err);
          }

          const isResultThenable = result !== true && isThenable(result); // If the listener didn't returned true or a Promise, or called
          // wrappedSendResponse synchronously, we can exit earlier
          // because there will be no response sent from this listener.

          if (result !== true && !isResultThenable && !didCallSendResponse) {
            return false;
          } // A small helper to send the message if the promise resolves
          // and an error if the promise rejects (a wrapped sendMessage has
          // to translate the message into a resolved promise or a rejected
          // promise).


          const sendPromisedResult = promise => {
            promise.then(msg => {
              // send the message value.
              sendResponse(msg);
            }, error => {
              // Send a JSON representation of the error if the rejected value
              // is an instance of error, or the object itself otherwise.
              let message;

              if (error && (error instanceof Error || typeof error.message === "string")) {
                message = error.message;
              } else {
                message = "An unexpected error occurred";
              }

              sendResponse({
                __mozWebExtensionPolyfillReject__: true,
                message
              });
            }).catch(err => {
              // Print an error on the console if unable to send the response.
              console.error("Failed to send onMessage rejected reply", err);
            });
          }; // If the listener returned a Promise, send the resolved value as a
          // result, otherwise wait the promise related to the wrappedSendResponse
          // callback to resolve and send it as a response.


          if (isResultThenable) {
            sendPromisedResult(result);
          } else {
            sendPromisedResult(sendResponsePromise);
          } // Let Chrome know that the listener is replying.


          return true;
        };
      });

      const wrappedSendMessageCallback = ({
        reject,
        resolve
      }, reply) => {
        if (extensionAPIs.runtime.lastError) {
          // Detect when none of the listeners replied to the sendMessage call and resolve
          // the promise to undefined as in Firefox.
          // See https://github.com/mozilla/webextension-polyfill/issues/130
          if (extensionAPIs.runtime.lastError.message === CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE) {
            resolve();
          } else {
            reject(new Error(extensionAPIs.runtime.lastError.message));
          }
        } else if (reply && reply.__mozWebExtensionPolyfillReject__) {
          // Convert back the JSON representation of the error into
          // an Error instance.
          reject(new Error(reply.message));
        } else {
          resolve(reply);
        }
      };

      const wrappedSendMessage = (name, metadata, apiNamespaceObj, ...args) => {
        if (args.length < metadata.minArgs) {
          throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
        }

        if (args.length > metadata.maxArgs) {
          throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
        }

        return new Promise((resolve, reject) => {
          const wrappedCb = wrappedSendMessageCallback.bind(null, {
            resolve,
            reject
          });
          args.push(wrappedCb);
          apiNamespaceObj.sendMessage(...args);
        });
      };

      const staticWrappers = {
        devtools: {
          network: {
            onRequestFinished: wrapEvent(onRequestFinishedWrappers)
          }
        },
        runtime: {
          onMessage: wrapEvent(onMessageWrappers),
          onMessageExternal: wrapEvent(onMessageWrappers),
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
            minArgs: 1,
            maxArgs: 3
          })
        },
        tabs: {
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
            minArgs: 2,
            maxArgs: 3
          })
        }
      };
      const settingMetadata = {
        clear: {
          minArgs: 1,
          maxArgs: 1
        },
        get: {
          minArgs: 1,
          maxArgs: 1
        },
        set: {
          minArgs: 1,
          maxArgs: 1
        }
      };
      apiMetadata.privacy = {
        network: {
          "*": settingMetadata
        },
        services: {
          "*": settingMetadata
        },
        websites: {
          "*": settingMetadata
        }
      };
      return wrapObject(extensionAPIs, staticWrappers, apiMetadata);
    }; // The build process adds a UMD wrapper around this file, which makes the
    // `module` variable available.


    module.exports = wrapAPIs(chrome);
  } else {
    module.exports = globalThis.browser;
  }
});


/***/ }),

/***/ 26813:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ _applyDecoratedDescriptor)
/* harmony export */ });
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);
  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }
  return desc;
}

/***/ }),

/***/ 5497:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ _initializerDefineProperty)
/* harmony export */ });
function _initializerDefineProperty(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

/***/ }),

/***/ 32380:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x0": () => (/* binding */ nanoid)
/* harmony export */ });
/* unused harmony exports customAlphabet, customRandom, random */

let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))
let customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1
  let step = -~((1.6 * mask * defaultSize) / alphabet.length)
  return (size = defaultSize) => {
    let id = ''
    while (true) {
      let bytes = getRandom(step)
      let j = step
      while (j--) {
        id += alphabet[bytes[j] & mask] || ''
        if (id.length === size) return id
      }
    }
  }
}
let customAlphabet = (alphabet, size = 21) =>
  customRandom(alphabet, size, random)
let nanoid = (size = 21) =>
  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63
    if (byte < 36) {
      id += byte.toString(36)
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase()
    } else if (byte > 62) {
      id += '-'
    } else {
      id += '_'
    }
    return id
  }, '')



/***/ }),

/***/ 1604:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZP": () => (/* binding */ z),
/* harmony export */   "z": () => (/* binding */ z)
/* harmony export */ });
/* unused harmony exports BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodRecord, ZodSchema, ZodSet, ZodString, ZodSymbol, ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, any, array, bigint, boolean, coerce, custom, date, defaultErrorMap, discriminatedUnion, effect, enum, function, getErrorMap, getParsedType, instanceof, intersection, isAborted, isAsync, isDirty, isValid, late, lazy, literal, makeIssue, map, nan, nativeEnum, never, null, nullable, number, object, objectUtil, oboolean, onumber, optional, ostring, pipeline, preprocess, promise, quotelessJson, record, set, setErrorMap, strictObject, string, symbol, transformer, tuple, undefined, union, unknown, util, void */
var util;
(function (util) {
    util.assertEqual = (val) => val;
    function assertIs(_arg) { }
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj) => {
        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj) => {
        return util.objectKeys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
        : (object) => {
            const keys = [];
            for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
    util.find = (arr, checker) => {
        for (const item of arr) {
            if (checker(item))
                return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function"
        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array
            .map((val) => (typeof val === "string" ? `'${val}'` : val))
            .join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
            return value.toString();
        }
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = (first, second) => {
        return {
            ...first,
            ...second, // second overwrites first
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
const getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};

const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite",
]);
const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        }
        else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper ||
            function (issue) {
                return issue.message;
            };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
            for (const issue of error.issues) {
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                }
                else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                }
                else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                }
                else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                }
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || { _errors: [] };
                            // if (typeof el === "string") {
                            //   curr[el] = curr[el] || { _errors: [] };
                            // } else if (typeof el === "number") {
                            //   const errorArray: any = [];
                            //   errorArray._errors = [];
                            //   curr[el] = curr[el] || errorArray;
                            // }
                        }
                        else {
                            curr[el] = curr[el] || { _errors: [] };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            }
            else {
                formErrors.push(mapper(sub));
            }
        }
        return { formErrors, fieldErrors };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
};

const errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            }
            else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                }
                else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                }
                else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                }
                else {
                    util.assertNever(issue.validation);
                }
            }
            else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            }
            else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${new Date(Number(issue.minimum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
                message = `BigInt must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `smaller than or equal to`
                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return { message };
};

let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}

const makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...(issueData.path || [])];
    const fullIssue = {
        ...issueData,
        path: fullPath,
    };
    let errorMessage = "";
    const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse();
    for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage,
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap, // then global default map
        ].filter((x) => !!x),
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor() {
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid")
            this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted")
            this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
            if (s.status === "aborted")
                return INVALID;
            if (s.status === "dirty")
                status.dirty();
            arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
            syncPairs.push({
                key: await pair.key,
                value: await pair.value,
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
                return INVALID;
            if (value.status === "aborted")
                return INVALID;
            if (key.status === "dirty")
                status.dirty();
            if (value.status === "dirty")
                status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
                finalObject[key.value] = value.value;
            }
        }
        return { status: status.value, value: finalObject };
    }
}
const INVALID = Object.freeze({
    status: "aborted",
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));

class ParseInputLazyPath {
    constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
                this._cachedPath.push(...this._path, ...this._key);
            }
            else {
                this._cachedPath.push(...this._path, this._key);
            }
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result) => {
    if (isValid(result)) {
        return { success: true, data: result.value };
    }
    else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        return {
            success: false,
            get error() {
                if (this._error)
                    return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            },
        };
    }
};
function processCreateParams(params) {
    if (!params)
        return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap)
        return { errorMap: errorMap, description };
    const customMap = (iss, ctx) => {
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
        }
        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
}
class ZodType {
    constructor(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return (ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent,
        });
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            },
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult)
            ? maybeAsyncResult
            : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
                code: ZodIssueCode.custom,
                ...getIssueProperties(val),
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data) => {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement },
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this, this._def);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform },
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def),
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch,
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description,
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[a-z][a-z0-9]*$/;
const ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
const emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
// Adapted from https://stackoverflow.com/a/3143231
const datetimeRegex = (args) => {
    if (args.precision) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
        }
    }
    else if (args.precision === 0) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
        }
    }
    else {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
        }
    }
};
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
    }
    return false;
}
class ZodString extends ZodType {
    constructor() {
        super(...arguments);
        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message),
        });
        /**
         * @deprecated Use z.string().min(1) instead.
         * @see {@link ZodString.min}
         */
        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
        this.trim = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }],
        });
        this.toLowerCase = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toLowerCase" }],
        });
        this.toUpperCase = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toUpperCase" }],
        });
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            }
            //
            );
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    else if (tooSmall) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    status.dirty();
                }
            }
            else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "emoji") {
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "url") {
                try {
                    new URL(input.data);
                }
                catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "trim") {
                input.data = input.data.trim();
            }
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { includes: check.value, position: check.position },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "toLowerCase") {
                input.data = input.data.toLowerCase();
            }
            else if (check.kind === "toUpperCase") {
                input.data = input.data.toUpperCase();
            }
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { startsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { endsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
        var _a;
        if (typeof options === "string") {
            return this._addCheck({
                kind: "datetime",
                precision: null,
                offset: false,
                message: options,
            });
        }
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message),
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message),
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message),
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message),
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params) => {
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return (valInt % stepInt) / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message),
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message),
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message),
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message),
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" ||
            (ch.kind === "multipleOf" && util.isInteger(ch.value)));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "finite" ||
                ch.kind === "int" ||
                ch.kind === "multipleOf") {
                return true;
            }
            else if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
            else if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params) => {
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodBigInt extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = BigInt(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params) => {
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime()),
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params) => {
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params),
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params) => {
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params),
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params) => {
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params),
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params) => {
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params),
    });
};
class ZodAny extends ZodType {
    constructor() {
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params) => {
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params),
    });
};
class ZodUnknown extends ZodType {
    constructor() {
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params) => {
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params),
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType,
        });
        return INVALID;
    }
}
ZodNever.create = (params) => {
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params),
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params) => {
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params),
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: (tooSmall ? def.exactLength.value : undefined),
                    maximum: (tooBig ? def.exactLength.value : undefined),
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message,
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message,
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message,
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result) => {
                return ParseStatus.mergeArray(status, result);
            });
        }
        const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) },
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) },
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: { value: len, message: errorUtil.toString(message) },
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params) => {
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params),
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: () => newShape,
        });
    }
    else if (schema instanceof ZodArray) {
        return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element),
        });
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    }
    else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor() {
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */
        this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null)
            return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return (this._cached = { shape, keys });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever &&
            this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
                if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                }
            }
        }
        const pairs = [];
        for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: { status: "valid", value: key },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys) {
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: { status: "valid", value: ctx.data[key] },
                    });
                }
            }
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    });
                    status.dirty();
                }
            }
            else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        }
        else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data,
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve()
                .then(async () => {
                const syncPairs = [];
                for (const pair of pairs) {
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet,
                    });
                }
                return syncPairs;
            })
                .then((syncPairs) => {
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...(message !== undefined
                ? {
                    errorMap: (issue, ctx) => {
                        var _a, _b, _c, _d;
                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                        if (issue.code === "unrecognized_keys")
                            return {
                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                            };
                        return {
                            message: defaultError,
                        };
                    },
                }
                : {}),
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip",
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough",
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: () => ({
                ...this._def.shape(),
                ...augmentation,
            }),
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => ({
                ...this._def.shape(),
                ...merging._def.shape(),
            }),
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index,
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    /**
     * @deprecated
     */
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
                newShape[key] = fieldSchema;
            }
            else {
                newShape[key] = fieldSchema.optional();
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
                newShape[key] = this.shape[key];
            }
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while (newField instanceof ZodOptional) {
                    newField = newField._def.innerType;
                }
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results) {
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results) {
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    }),
                    ctx: childCtx,
                };
            })).then(handleResults);
        }
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options) {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx,
                });
                if (result.status === "valid") {
                    return result;
                }
                else if (result.status === "dirty" && !dirty) {
                    dirty = { result, ctx: childCtx };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues) => new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params) => {
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params),
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
    }
    else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
    }
    else if (type instanceof ZodLiteral) {
        return [type.value];
    }
    else if (type instanceof ZodEnum) {
        return type.options;
    }
    else if (type instanceof ZodNativeEnum) {
        // eslint-disable-next-line ban/ban
        return Object.keys(type.enum);
    }
    else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
    }
    else if (type instanceof ZodUndefined) {
        return [undefined];
    }
    else if (type instanceof ZodNull) {
        return [null];
    }
    else {
        return null;
    }
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [discriminator],
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
        else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) {
                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
                if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                }
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params),
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util
            .objectKeys(a)
            .filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
    }
    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else if (aType === ZodParsedType.date &&
        bType === ZodParsedType.date &&
        +a === +b) {
        return { valid: true, data: a };
    }
    else {
        return { valid: false };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types,
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
            ]).then(([left, right]) => handleParsed(left, right));
        }
        else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }));
        }
    }
}
ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params),
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            status.dirty();
        }
        const items = [...ctx.data]
            .map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
                return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        })
            .filter((x) => !!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results) => {
                return ParseStatus.mergeArray(status, results);
            });
        }
        else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest,
        });
    }
}
ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params),
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third),
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second),
        });
    }
}
class ZodMap extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async () => {
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            });
        }
        else {
            const finalMap = new Map();
            for (const pair of pairs) {
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
        }
    }
}
ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params),
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message,
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message,
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements) {
                if (element.status === "aborted")
                    return INVALID;
                if (element.status === "dirty")
                    status.dirty();
                parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements) => finalizeSet(elements));
        }
        else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) },
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) },
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params) => {
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params),
    });
};
class ZodFunction extends ZodType {
    constructor() {
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            return OK(async (...args) => {
                const error = new ZodError([]);
                const parsedArgs = await this._def.args
                    .parseAsync(args, params)
                    .catch((e) => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await fn(...parsedArgs);
                const parsedReturns = await this._def.returns._def.type
                    .parseAsync(result, params)
                    .catch((e) => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        }
        else {
            return OK((...args) => {
                const parsedArgs = this._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                const result = fn(...parsedArgs.data);
                const parsedReturns = this._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create()),
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType,
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: (args
                ? args
                : ZodTuple.create([]).rest(ZodUnknown.create())),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params),
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
}
ZodLazy.create = (getter, params) => {
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params),
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params),
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params),
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    extract(values) {
        return ZodEnum.create(values);
    }
    exclude(values) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
    }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string &&
            ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params),
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise &&
            ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap,
            });
        }));
    }
}
ZodPromise.create = (schema, params) => {
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params),
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
            ? this._def.schema.sourceType()
            : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed) => {
                    return this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                });
            }
            else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
        const checkCtx = {
            addIssue: (arg) => {
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                }
                else {
                    status.dirty();
                }
            },
            get path() {
                return ctx.path;
            },
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "refinement") {
            const executeRefinement = (acc
            // effect: RefinementEffect<any>
            ) => {
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inner.status === "aborted")
                    return INVALID;
                if (inner.status === "dirty")
                    status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return { status: status.value, value: inner.value };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((inner) => {
                    if (inner.status === "aborted")
                        return INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    return executeRefinement(inner.value).then(() => {
                        return { status: status.value, value: inner.value };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (!isValid(base))
                    return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return { status: status.value, value: result };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((base) => {
                    if (!isValid(base))
                        return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                });
            }
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params),
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params),
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params) => {
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params),
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params) => {
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function"
            ? params.default
            : () => params.default,
        ...processCreateParams(params),
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: [],
            },
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx,
            },
        });
        if (isAsync(result)) {
            return result.then((result) => {
                return {
                    status: "valid",
                    value: result.status === "valid"
                        ? result.value
                        : this._def.catchValue({
                            get error() {
                                return new ZodError(newCtx.common.issues);
                            },
                            input: newCtx.data,
                        }),
                };
            });
        }
        else {
            return {
                status: "valid",
                value: result.status === "valid"
                    ? result.value
                    : this._def.catchValue({
                        get error() {
                            return new ZodError(newCtx.common.issues);
                        },
                        input: newCtx.data,
                    }),
            };
        }
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params) => {
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params),
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
}
ZodNaN.create = (params) => {
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params),
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async () => {
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inResult.status === "aborted")
                    return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                }
                else {
                    return this._def.out._parseAsync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx,
                    });
                }
            };
            return handleAsync();
        }
        else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
            if (inResult.status === "aborted")
                return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value,
                };
            }
            else {
                return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline,
        });
    }
}
const custom = (check, params = {}, 
/*
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */
fatal) => {
    if (check)
        return ZodAny.create().superRefine((data, ctx) => {
            var _a, _b;
            if (!check(data)) {
                const p = typeof params === "function"
                    ? params(data)
                    : typeof params === "string"
                        ? { message: params }
                        : params;
                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                const p2 = typeof p === "string" ? { message: p } : p;
                ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
            }
        });
    return ZodAny.create();
};
const late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (
// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`,
}) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
    string: ((arg) => ZodString.create({ ...arg, coerce: true })),
    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
    boolean: ((arg) => ZodBoolean.create({
        ...arg,
        coerce: true,
    })),
    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
};
const NEVER = INVALID;

var z = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap: setErrorMap,
    getErrorMap: getErrorMap,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    get util () { return util; },
    get objectUtil () { return objectUtil; },
    ZodParsedType: ZodParsedType,
    getParsedType: getParsedType,
    ZodType: ZodType,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodSymbol: ZodSymbol,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodCatch: ZodCatch,
    ZodNaN: ZodNaN,
    BRAND: BRAND,
    ZodBranded: ZodBranded,
    ZodPipeline: ZodPipeline,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
    coerce: coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    'enum': enumType,
    'function': functionType,
    'instanceof': instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    'null': nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    'undefined': undefinedType,
    union: unionType,
    unknown: unknownType,
    'void': voidType,
    NEVER: NEVER,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError
});




/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, [374,49], () => (__webpack_exec__(59355)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);